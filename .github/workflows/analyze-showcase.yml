name: CPPCheck Analysis Showcase

on:
  workflow_dispatch:
    inputs:
      repository:
        description: 'GitHub repository to analyze'
        required: true
        type: string
        default: 'jerryzhao173985/lpz'
      max_files:
        description: 'Maximum files to analyze'
        required: false
        type: number
        default: 200

jobs:
  analyze:
    name: Analyze and Generate Report
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout CPPCheck Studio
      uses: actions/checkout@v4
      with:
        path: cppcheck-studio

    - name: Setup environment
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck
        
        cd cppcheck-studio/cppcheck-dashboard-generator
        npm ci
        npm run build
        sudo npm link -g
        cd ../..

    - name: Clone target repository
      run: |
        echo "📥 Cloning ${{ github.event.inputs.repository }}..."
        git clone --depth 1 https://github.com/${{ github.event.inputs.repository }}.git target-repo
        
        cd target-repo
        COMMIT_SHA=$(git rev-parse --short HEAD)
        echo "COMMIT_SHA=${COMMIT_SHA}" >> $GITHUB_ENV
        
        # Count files
        FILE_COUNT=$(find . -name "*.cpp" -o -name "*.h" | wc -l)
        echo "FILE_COUNT=${FILE_COUNT}" >> $GITHUB_ENV
        cd ..

    - name: Run CPPCheck analysis
      run: |
        cd target-repo
        
        # Find C++ files (limit to max_files)
        find . -type f \( -name "*.cpp" -o -name "*.cc" -o -name "*.h" -o -name "*.hpp" \) \
          | head -n ${{ github.event.inputs.max_files }} > cpp_files.txt
        
        ANALYZED_COUNT=$(wc -l < cpp_files.txt)
        echo "ANALYZED_COUNT=${ANALYZED_COUNT}" >> $GITHUB_ENV
        
        # Run cppcheck
        echo "🔍 Analyzing ${ANALYZED_COUNT} files..."
        cppcheck \
          --enable=all \
          --suppress=missingIncludeSystem \
          --suppress=missingInclude \
          --std=c++17 \
          --xml \
          --xml-version=2 \
          --file-list=cpp_files.txt \
          2> ../cppcheck-results.xml || true
        
        cd ..
        
        # Convert to JSON
        python3 cppcheck-studio/xml2json-simple.py cppcheck-results.xml > analysis.json
        
        # Get issue count
        ISSUE_COUNT=$(python3 -c "import json; print(len(json.load(open('analysis.json'))['issues']))")
        echo "ISSUE_COUNT=${ISSUE_COUNT}" >> $GITHUB_ENV

    - name: Add code context
      run: |
        cd target-repo
        python3 ../cppcheck-studio/add-code-context.py ../analysis.json ../analysis-with-context.json
        cd ..

    - name: Generate dashboard
      run: |
        REPO_NAME="${{ github.event.inputs.repository }}"
        PROJECT_NAME="${REPO_NAME##*/}"
        
        cppcheck-dashboard \
          analysis-with-context.json \
          dashboard.html \
          --title "${PROJECT_NAME} Analysis" \
          --project "${PROJECT_NAME}"

    - name: Generate reports
      run: |
        # Summary report
        python3 cppcheck-studio/scripts/generate-summary.py analysis.json > summary.txt
        
        # Detailed report
        python3 cppcheck-studio/scripts/generate-detailed-report.py analysis.json > detailed-report.md
        
        # Create HTML preview
        cat > preview.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>CPPCheck Analysis Preview</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                h1 { color: #333; border-bottom: 3px solid #4CAF50; padding-bottom: 10px; }
                .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 20px; margin: 20px 0; }
                .stat-card { background: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center; border: 1px solid #e9ecef; }
                .stat-number { font-size: 2em; font-weight: bold; color: #4CAF50; }
                .stat-label { color: #666; margin-top: 5px; }
                .severity-error { color: #f44336; }
                .severity-warning { color: #ff9800; }
                .severity-style { color: #2196f3; }
                .button { display: inline-block; padding: 10px 20px; background: #4CAF50; color: white; text-decoration: none; border-radius: 5px; margin: 10px 5px; }
                .button:hover { background: #45a049; }
                pre { background: #f5f5f5; padding: 15px; border-radius: 5px; overflow-x: auto; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>📊 CPPCheck Analysis Results</h1>
                <p><strong>Repository:</strong> ${{ github.event.inputs.repository }}</p>
                <p><strong>Commit:</strong> ${COMMIT_SHA}</p>
                
                <div class="stats">
                    <div class="stat-card">
                        <div class="stat-number">${FILE_COUNT}</div>
                        <div class="stat-label">Total Files</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${ANALYZED_COUNT}</div>
                        <div class="stat-label">Files Analyzed</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${ISSUE_COUNT}</div>
                        <div class="stat-label">Issues Found</div>
                    </div>
                </div>
                
                <h2>Summary</h2>
                <pre>$(cat summary.txt)</pre>
                
                <h2>Actions</h2>
                <a href="#" class="button" onclick="alert('Dashboard will be available as artifact after workflow completes')">📥 Download Full Dashboard</a>
                <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts" class="button">🔗 View Artifacts</a>
                
                <h2>Quick Stats</h2>
                <p>The interactive dashboard includes:</p>
                <ul>
                    <li>Virtual scrolling for smooth performance</li>
                    <li>Search and filter by severity</li>
                    <li>Code context for each issue</li>
                    <li>Export capabilities</li>
                </ul>
            </div>
        </body>
        </html>
        EOF

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cppcheck-analysis-${{ env.COMMIT_SHA }}
        path: |
          dashboard.html
          preview.html
          summary.txt
          detailed-report.md
          analysis.json

    - name: Create job summary
      run: |
        echo "# 🔍 CPPCheck Analysis Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Repository info
        echo "## 📦 Repository Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository:** [${{ github.event.inputs.repository }}](https://github.com/${{ github.event.inputs.repository }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** \`${COMMIT_SHA}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Files:** ${FILE_COUNT}" >> $GITHUB_STEP_SUMMARY
        echo "- **Files Analyzed:** ${ANALYZED_COUNT} (limit: ${{ github.event.inputs.max_files }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Results summary
        echo "## 📊 Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat summary.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Severity breakdown with emojis
        echo "## 🎯 Issue Breakdown" >> $GITHUB_STEP_SUMMARY
        python3 << 'EOF' >> $GITHUB_STEP_SUMMARY
import json
with open('analysis.json') as f:
    issues = json.load(f).get('issues', [])
    by_sev = {}
    for i in issues:
        sev = i.get('severity', 'unknown')
        by_sev[sev] = by_sev.get(sev, 0) + 1
    
    icons = {
        'error': '🔴',
        'warning': '🟡', 
        'style': '🔵',
        'performance': '🟢',
        'information': 'ℹ️'
    }
    
    for sev in ['error', 'warning', 'performance', 'style', 'information']:
        if sev in by_sev:
            icon = icons.get(sev, '•')
            print(f'- {icon} **{sev.capitalize()}:** {by_sev[sev]} issues')
EOF
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Download section
        echo "## 📥 Downloads" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### [🎯 Download Interactive Dashboard](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The dashboard includes:" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 Real-time search and filtering" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 Interactive charts and statistics" >> $GITHUB_STEP_SUMMARY
        echo "- 💻 Code context for each issue" >> $GITHUB_STEP_SUMMARY
        echo "- 🚀 Virtual scrolling for performance" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Top issues preview
        echo "## 🔝 Top Issues Preview" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "<details>" >> $GITHUB_STEP_SUMMARY
        echo "<summary>Click to expand top 5 issues</summary>" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        python3 << 'EOF' >> $GITHUB_STEP_SUMMARY
import json
with open('analysis.json') as f:
    issues = json.load(f).get('issues', [])
    # Sort by severity priority
    sev_order = {'error': 0, 'warning': 1, 'performance': 2, 'style': 3, 'information': 4}
    issues.sort(key=lambda x: sev_order.get(x.get('severity', 'information'), 5))
    
    for i, issue in enumerate(issues[:5]):
        print(f"{i+1}. **{issue.get('severity', 'unknown').upper()}** in `{issue.get('file', 'unknown')}`")
        print(f"   - Line {issue.get('line', '?')}: {issue.get('message', 'No message')}")
        print(f"   - ID: `{issue.get('id', 'unknown')}`")
        print()
EOF
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "</details>" >> $GITHUB_STEP_SUMMARY
        
        # Footer
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "🤖 *Generated by [CPPCheck Studio](https://github.com/jerryzhao173985/cppcheck-studio)*" >> $GITHUB_STEP_SUMMARY