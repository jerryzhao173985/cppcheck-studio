name: Check GitHub Pages Status

on:
  workflow_run:
    workflows: ["*"]
    types:
      - completed
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes
  workflow_dispatch:

jobs:
  check-pages:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check GitHub Pages Status
      run: |
        echo "🔍 Checking GitHub Pages status..."
        
        # Check if site is accessible
        STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://jerryzhao173985.github.io/cppcheck-studio/)
        
        echo "HTTP Status: $STATUS"
        
        if [ "$STATUS" = "404" ]; then
          echo "❌ GitHub Pages is returning 404!"
          echo "PAGES_BROKEN=true" >> $GITHUB_ENV
        elif [ "$STATUS" = "200" ]; then
          echo "✅ GitHub Pages is working!"
          echo "PAGES_BROKEN=false" >> $GITHUB_ENV
        else
          echo "⚠️ Unexpected status: $STATUS"
          echo "PAGES_BROKEN=true" >> $GITHUB_ENV
        fi
        
    - name: Trigger Deployment if Broken
      if: env.PAGES_BROKEN == 'true'
      run: |
        echo "🚨 Triggering emergency deployment..."
        
        # Trigger deployment workflow
        curl -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/actions/workflows/deploy-docs.yml/dispatches \
          -d '{"ref":"main"}'
          
        echo "🚀 Deployment triggered!"
        
    - name: Create Issue if Broken
      if: env.PAGES_BROKEN == 'true' && github.event_name != 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          // Check if issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'github-pages-broken',
            state: 'open'
          });
          
          if (issues.data.length === 0) {
            // Create new issue
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 GitHub Pages is Down (404)',
              body: `GitHub Pages is returning 404. 
              
              **Automatic deployment has been triggered.**
              
              Check status: https://jerryzhao173985.github.io/cppcheck-studio/
              
              This issue will auto-close when the site is back up.`,
              labels: ['github-pages-broken', 'automated']
            });
          }
          
    - name: Close Issue if Fixed
      if: env.PAGES_BROKEN == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          // Find and close any open issues
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'github-pages-broken',
            state: 'open'
          });
          
          for (const issue of issues.data) {
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              state: 'closed',
              body: issue.body + '\n\n✅ Site is back up! Auto-closing.'
            });
          }