name: Test CPPCheck Analysis

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/test-cppcheck.yml'
      - 'cppcheck-dashboard-generator/**'
      - '*.py'

jobs:
  test-analysis:
    name: Test CPPCheck Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck
        cppcheck --version

    - name: Build and install dashboard generator
      run: |
        cd cppcheck-dashboard-generator
        npm ci
        npm run build
        # Test locally first
        npm link
        cd ..

    - name: Create test C++ files
      run: |
        mkdir -p test-cpp-project/src
        cat > test-cpp-project/src/main.cpp << 'EOF'
        #include <iostream>
        #include <vector>

        class TestClass {
        private:
            int* data;
            int size;
        public:
            TestClass(int s) : size(s) {
                data = new int[size];
            }
            
            // Missing destructor - memory leak!
            
            void process() {
                int uninitializedVar;
                std::cout << uninitializedVar << std::endl; // Using uninitialized variable
                
                int* ptr = nullptr;
                *ptr = 10; // Null pointer dereference
            }
            
            void unnecessaryFunction(int param) {
                // Unused parameter
                int localVar = 5;
                // Missing return statement for non-void function
            }
        };

        int main() {
            std::vector<int> v;
            v[10] = 5; // Out of bounds access
            
            TestClass* obj = new TestClass(10);
            obj->process();
            // Missing delete - memory leak
            
            return 0;
        }
        EOF

        cat > test-cpp-project/src/utils.h << 'EOF'
        #ifndef UTILS_H
        #define UTILS_H

        class Utils {
        public:
            static void helperFunction(int x, int y);
            void memberFunction() const;
            virtual void virtualFunction(); // Should have virtual destructor
        };

        #endif
        EOF

    - name: Run CPPCheck analysis
      run: |
        echo "Running CPPCheck on test project..."
        cd test-cpp-project
        
        # Run cppcheck with various checks
        cppcheck \
          --enable=all \
          --inconclusive \
          --std=c++17 \
          --template='{file}:{line}:{severity}:{id}:{message}' \
          --xml \
          --xml-version=2 \
          src/ 2> ../cppcheck-results.xml
        
        cd ..
        
        # Show raw results
        echo "Raw CPPCheck output:"
        cat cppcheck-results.xml || true

    - name: Convert XML to JSON
      run: |
        echo "Converting XML to JSON..."
        # Use simple XML parser that doesn't require lxml
        python3 xml2json-simple.py cppcheck-results.xml > analysis.json
        
        echo "JSON output preview:"
        head -20 analysis.json || true
        
        # Count issues
        ISSUE_COUNT=$(python3 -c "import json; print(len(json.load(open('analysis.json')).get('issues', [])))")
        echo "Total issues found: $ISSUE_COUNT"

    - name: Add code context
      run: |
        echo "Adding code context..."
        cd test-cpp-project
        python3 ../add-code-context.py ../analysis.json ../analysis-with-context.json
        cd ..
        
        # Check if context was added
        HAS_CONTEXT=$(python3 -c "import json; d=json.load(open('analysis-with-context.json')); print(any('code_context' in i for i in d.get('issues', [])))")
        echo "Has code context: $HAS_CONTEXT"

    - name: Generate dashboard
      run: |
        echo "Generating dashboard..."
        npx cppcheck-dashboard \
          analysis-with-context.json \
          test-dashboard.html \
          --title "Test Project Analysis" \
          --project "TestCppProject"
        
        # Check if dashboard was created
        if [ -f test-dashboard.html ]; then
          echo "‚úÖ Dashboard generated successfully!"
          echo "File size: $(ls -lh test-dashboard.html | awk '{print $5}')"
        else
          echo "‚ùå Dashboard generation failed!"
          exit 1
        fi

    - name: Validate dashboard content
      run: |
        echo "Validating dashboard..."
        
        # Check for required elements
        if grep -q "issuesData" test-dashboard.html && \
           grep -q "codeContextData" test-dashboard.html && \
           grep -q "virtual-scroll" test-dashboard.html; then
          echo "‚úÖ Dashboard contains required elements"
        else
          echo "‚ùå Dashboard missing required elements"
          exit 1
        fi
        
        # Extract and display summary
        python3 << 'EOF'
        import json
        with open('analysis-with-context.json') as f:
            data = json.load(f)
            issues = data.get('issues', [])
            by_severity = {}
            for issue in issues:
                sev = issue.get('severity', 'unknown')
                by_severity[sev] = by_severity.get(sev, 0) + 1
            
            print("\nüìä Analysis Summary:")
            print(f"Total issues: {len(issues)}")
            for sev, count in sorted(by_severity.items()):
                print(f"  {sev}: {count}")
            
            print("\nüìù Sample issues:")
            for issue in issues[:3]:
                print(f"  - {issue.get('file', 'unknown')}:{issue.get('line', '?')} - {issue.get('message', 'no message')}")
        EOF

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-analysis-results
        path: |
          cppcheck-results.xml
          analysis.json
          analysis-with-context.json
          test-dashboard.html

    - name: Test dashboard size and performance
      run: |
        # Create a larger test case
        echo "Creating larger test for virtual scrolling..."
        
        # Generate a JSON file with many issues
        python3 << 'EOF'
        import json
        issues = []
        for i in range(1000):
            issues.append({
                "file": f"src/file{i % 10}.cpp",
                "line": str((i % 100) + 1),
                "severity": ["error", "warning", "style", "performance"][i % 4],
                "message": f"Test issue {i}: This is a sample issue for testing virtual scrolling",
                "id": f"TEST{i:04d}"
            })
        
        with open('large-analysis.json', 'w') as f:
            json.dump({"issues": issues}, f)
        EOF
        
        # Generate large dashboard
        npx cppcheck-dashboard \
          large-analysis.json \
          large-dashboard.html \
          --title "Large Dataset Test" \
          --project "VirtualScrollTest"
        
        echo "Large dashboard size: $(ls -lh large-dashboard.html | awk '{print $5}')"
        
        # Verify virtual scrolling elements
        if grep -q "Virtual scrolling enabled" large-dashboard.html; then
          echo "‚úÖ Virtual scrolling confirmed for large dataset"
        fi

    - name: Create summary comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let summary = "## üß™ CPPCheck Test Results\n\n";
          summary += "‚úÖ All components working correctly!\n\n";
          
          // Read analysis summary
          try {
            const analysis = JSON.parse(fs.readFileSync('analysis-with-context.json', 'utf8'));
            const issueCount = analysis.issues ? analysis.issues.length : 0;
            summary += `**Issues found in test project:** ${issueCount}\n\n`;
            summary += "### Test Coverage\n";
            summary += "- [x] CPPCheck execution\n";
            summary += "- [x] XML to JSON conversion\n";
            summary += "- [x] Code context extraction\n";
            summary += "- [x] Dashboard generation\n";
            summary += "- [x] Virtual scrolling\n";
          } catch (e) {
            summary += "Could not read analysis results\n";
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });