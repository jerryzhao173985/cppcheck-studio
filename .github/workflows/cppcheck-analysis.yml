name: CPPCheck Analysis Dashboard

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      repo_url:
        description: 'C++ repository URL to analyze (optional)'
        required: false
        type: string

jobs:
  analyze:
    name: Run CPPCheck Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install CPPCheck
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck
        cppcheck --version

    - name: Install dashboard generator
      run: |
        cd cppcheck-dashboard-generator
        npm ci
        npm run build
        npm link

    - name: Clone test C++ repository (if provided)
      if: ${{ github.event.inputs.repo_url != '' }}
      run: |
        git clone ${{ github.event.inputs.repo_url }} cpp-repo
        echo "CPP_REPO_PATH=cpp-repo" >> $GITHUB_ENV

    - name: Run CPPCheck analysis
      run: |
        # Determine which directory to analyze
        if [ -n "${CPP_REPO_PATH}" ]; then
          ANALYZE_DIR="${CPP_REPO_PATH}"
          PROJECT_NAME=$(basename "${CPP_REPO_PATH}")
        else
          # Analyze current repo if it contains C++ files
          if find . -name "*.cpp" -o -name "*.cc" -o -name "*.cxx" -o -name "*.c" -o -name "*.h" -o -name "*.hpp" | grep -q .; then
            ANALYZE_DIR="."
            PROJECT_NAME="${GITHUB_REPOSITORY##*/}"
          else
            echo "No C++ files found to analyze"
            exit 0
          fi
        fi
        
        echo "Analyzing directory: ${ANALYZE_DIR}"
        echo "Project name: ${PROJECT_NAME}"
        
        # Run cppcheck with various checks enabled
        cppcheck \
          --enable=all \
          --inconclusive \
          --std=c++17 \
          --template='{file}:{line}:{severity}:{id}:{message}' \
          --output-file=cppcheck-results.txt \
          --xml \
          --xml-version=2 \
          "${ANALYZE_DIR}" 2> cppcheck-results.xml
        
        # Convert XML to JSON
        python3 utils/xml2json-simple.py cppcheck-results.xml > analysis.json
        
        # Add code context
        python3 utils/add-code-context.py analysis.json analysis-with-context.json
        
        # Generate dashboard
        cppcheck-dashboard \
          analysis-with-context.json \
          cppcheck-dashboard.html \
          --title "${PROJECT_NAME} Code Analysis" \
          --project "${PROJECT_NAME}"
        
        # Print summary
        echo "Analysis complete!"
        echo "Total issues found: $(grep -c '"severity"' analysis.json || echo 0)"

    - name: Upload analysis results
      uses: actions/upload-artifact@v4
      with:
        name: cppcheck-analysis-results
        path: |
          cppcheck-results.txt
          cppcheck-results.xml
          analysis.json
          analysis-with-context.json

    - name: Upload dashboard
      uses: actions/upload-artifact@v4
      with:
        name: cppcheck-dashboard
        path: cppcheck-dashboard.html

    - name: Deploy to GitHub Pages (if on main branch)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        mkdir -p gh-pages
        cp cppcheck-dashboard.html gh-pages/index.html
        
        # Create an index page with history
        cat > gh-pages/history.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>CPPCheck Analysis History</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                h1 { color: #333; }
                .run { margin: 10px 0; padding: 10px; border: 1px solid #ddd; }
                .date { font-weight: bold; }
                a { color: #0066cc; text-decoration: none; }
                a:hover { text-decoration: underline; }
            </style>
        </head>
        <body>
            <h1>CPPCheck Analysis History</h1>
            <div class="run">
                <span class="date">Latest:</span>
                <a href="index.html">View Dashboard</a>
            </div>
        </body>
        </html>
        EOF

    - name: Create PR comment with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read analysis summary
          let issueCount = 0;
          try {
            const analysis = JSON.parse(fs.readFileSync('analysis.json', 'utf8'));
            issueCount = analysis.issues ? analysis.issues.length : 0;
          } catch (e) {
            console.log('Could not read analysis.json');
          }
          
          const comment = `## üîç CPPCheck Analysis Results
          
          **Total issues found:** ${issueCount}
          
          ### üìä Dashboard
          The analysis dashboard has been generated and is available as an artifact.
          
          **Download:** [CPPCheck Dashboard](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)
          
          ### üìù Summary
          View the detailed analysis results in the uploaded dashboard HTML file.
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  publish-pages:
    name: Publish to GitHub Pages
    needs: analyze
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - name: Download dashboard artifact
      uses: actions/download-artifact@v4
      with:
        name: cppcheck-dashboard
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload to Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: .
        
    - name: Deploy to Pages
      uses: actions/deploy-pages@v4