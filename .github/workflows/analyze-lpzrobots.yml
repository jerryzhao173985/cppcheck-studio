name: Analyze LPZRobots

on:
  workflow_dispatch:
    inputs:
      depth:
        description: 'Clone depth (0 for full history)'
        required: false
        type: string
        default: '1'
      components:
        description: 'Components to analyze (comma-separated: selforg,ode_robots,opende,ga_tools,configurator)'
        required: false
        type: string
        default: 'selforg,ode_robots'
      max_issues:
        description: 'Maximum issues to include in dashboard'
        required: false
        type: string
        default: '5000'

jobs:
  analyze-lpzrobots:
    name: Analyze LPZRobots C++ Codebase
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout CPPCheck Studio
      uses: actions/checkout@v4
      with:
        path: cppcheck-studio

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        # Install CPPCheck (latest version for better C++17 support)
        sudo apt-get update
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository ppa:nilarimogard/webupd8 || true
        sudo apt-get update
        sudo apt-get install -y cppcheck || {
          # Fallback: build from source for latest version
          sudo apt-get install -y build-essential cmake
          git clone https://github.com/danmar/cppcheck.git
          cd cppcheck
          mkdir build && cd build
          cmake ..
          make -j$(nproc)
          sudo make install
          cd ../..
        }
        
        cppcheck --version
        
        # Build and install dashboard generator
        cd cppcheck-studio/cppcheck-dashboard-generator
        npm ci
        npm run build
        sudo npm link -g
        cd ../..

    - name: Clone LPZRobots repository
      run: |
        echo "Cloning LPZRobots with depth ${{ github.event.inputs.depth }}..."
        if [ "${{ github.event.inputs.depth }}" = "0" ]; then
          git clone https://github.com/jerryzhao173985/lpz.git lpzrobots
        else
          git clone --depth ${{ github.event.inputs.depth }} https://github.com/jerryzhao173985/lpz.git lpzrobots
        fi
        
        cd lpzrobots
        COMMIT_SHA=$(git rev-parse --short HEAD)
        echo "COMMIT_SHA=${COMMIT_SHA}" >> $GITHUB_ENV
        echo "Analyzing commit: ${COMMIT_SHA}"
        
        # List available components
        echo "Available components:"
        ls -la
        cd ..

    - name: Analyze selected components
      run: |
        cd lpzrobots
        
        # Parse components input
        IFS=',' read -ra COMPONENTS <<< "${{ github.event.inputs.components }}"
        
        # Build file list for selected components
        > cpp_files.txt
        for component in "${COMPONENTS[@]}"; do
          component=$(echo "$component" | xargs) # trim whitespace
          if [ -d "$component" ]; then
            echo "Adding component: $component"
            find "$component" -type f \( -name "*.cpp" -o -name "*.cc" -o -name "*.cxx" -o -name "*.c" -o -name "*.h" -o -name "*.hpp" \) \
              -not -path "*/build/*" \
              -not -path "*/.git/*" \
              -not -path "*/examples/*" \
              -not -path "*/tests/*" >> cpp_files.txt
          else
            echo "Warning: Component directory '$component' not found"
          fi
        done
        
        FILE_COUNT=$(wc -l < cpp_files.txt)
        echo "Found ${FILE_COUNT} C++ files to analyze"
        echo "FILE_COUNT=${FILE_COUNT}" >> $GITHUB_ENV
        
        if [ ${FILE_COUNT} -eq 0 ]; then
          echo "No C++ files found!"
          exit 1
        fi
        
        # Show sample of files being analyzed
        echo "Sample files being analyzed:"
        head -20 cpp_files.txt
        
        # Run cppcheck with optimized settings for large codebase
        echo "Running CPPCheck analysis..."
        cppcheck \
          --enable=warning,style,performance,portability \
          --inconclusive \
          --suppress=missingIncludeSystem \
          --suppress=unmatchedSuppression \
          --suppress=missingInclude \
          --std=c++17 \
          --platform=unix64 \
          --max-ctu-depth=2 \
          --output-file=../cppcheck-results.txt \
          --xml \
          --xml-version=2 \
          --file-list=cpp_files.txt \
          -j $(nproc) \
          2> ../cppcheck-results.xml || true
        
        cd ..
        
        # Check if results were generated
        if [ ! -s cppcheck-results.xml ]; then
          echo "No cppcheck results generated!"
          exit 1
        fi
        
        # Convert results
        echo "Converting results to JSON..."
        python3 cppcheck-studio/xml2json-simple.py cppcheck-results.xml > analysis.json
        
        # Check issue count and potentially limit
        ISSUE_COUNT=$(python3 -c "import json; print(len(json.load(open('analysis.json'))['issues']))")
        echo "Total issues found: ${ISSUE_COUNT}"
        echo "ISSUE_COUNT=${ISSUE_COUNT}" >> $GITHUB_ENV
        
        # If too many issues, create a filtered version
        if [ ${ISSUE_COUNT} -gt ${{ github.event.inputs.max_issues }} ]; then
          echo "Limiting to ${{ github.event.inputs.max_issues }} most important issues..."
          python3 -c "
import json
with open('analysis.json') as f:
    data = json.load(f)
issues = data['issues']
# Sort by severity priority
severity_order = {'error': 0, 'warning': 1, 'performance': 2, 'style': 3, 'information': 4}
issues.sort(key=lambda x: (severity_order.get(x.get('severity', 'information'), 5), x.get('file', '')))
# Keep only top N
data['issues'] = issues[:${{ github.event.inputs.max_issues }}]
data['truncated'] = True
data['original_count'] = ${ISSUE_COUNT}
with open('analysis-limited.json', 'w') as f:
    json.dump(data, f, indent=2)
"
          mv analysis-limited.json analysis.json
        fi
        
        # Add code context
        echo "Adding code context..."
        cd lpzrobots
        python3 ../cppcheck-studio/add-code-context.py ../analysis.json ../analysis-with-context.json
        cd ..
        
        # Generate dashboard
        echo "Generating dashboard..."
        cppcheck-dashboard \
          analysis-with-context.json \
          lpzrobots-dashboard.html \
          --title "LPZRobots CPPCheck Analysis" \
          --project "LPZRobots (${COMMIT_SHA})" \
          --verbose

    - name: Generate detailed report
      run: |
        python3 -c "
import json
from collections import defaultdict

with open('analysis.json') as f:
    data = json.load(f)
    issues = data.get('issues', [])
    
    # Statistics
    by_severity = defaultdict(int)
    by_file = defaultdict(int)
    by_id = defaultdict(int)
    
    for issue in issues:
        by_severity[issue.get('severity', 'unknown')] += 1
        by_file[issue.get('file', 'unknown')] += 1
        by_id[issue.get('id', 'unknown')] += 1
    
    # Report
    print('# LPZRobots CPPCheck Analysis Report')
    print()
    print(f'**Total Issues:** {len(issues)}')
    if data.get('truncated'):
        print(f'**Note:** Results truncated from {data.get(\"original_count\", \"?\")} to {len(issues)} issues')
    print()
    
    print('## Issues by Severity')
    for sev in ['error', 'warning', 'performance', 'style', 'information']:
        if sev in by_severity:
            print(f'- **{sev.capitalize()}:** {by_severity[sev]}')
    print()
    
    print('## Top 10 Files with Most Issues')
    for file, count in sorted(by_file.items(), key=lambda x: x[1], reverse=True)[:10]:
        print(f'- {file}: {count} issues')
    print()
    
    print('## Top 10 Issue Types')
    for issue_id, count in sorted(by_id.items(), key=lambda x: x[1], reverse=True)[:10]:
        print(f'- {issue_id}: {count} occurrences')
    print()
    
    print('## Components Analyzed')
    components = set()
    for issue in issues:
        file = issue.get('file', '')
        if '/' in file:
            components.add(file.split('/')[0])
    for comp in sorted(components):
        comp_issues = sum(1 for i in issues if i.get('file', '').startswith(comp + '/'))
        print(f'- **{comp}:** {comp_issues} issues')
" > lpzrobots-report.md
        
        cat lpzrobots-report.md

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lpzrobots-analysis-${{ env.COMMIT_SHA }}
        path: |
          lpzrobots-dashboard.html
          lpzrobots-report.md
          analysis.json
          cppcheck-results.txt

    - name: Create summary
      run: |
        echo "## ðŸ¤– LPZRobots Analysis Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Repository:** https://github.com/jerryzhao173985/lpz" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ env.COMMIT_SHA }}" >> $GITHUB_STEP_SUMMARY
        echo "**Files Analyzed:** ${{ env.FILE_COUNT }}" >> $GITHUB_STEP_SUMMARY
        echo "**Issues Found:** ${{ env.ISSUE_COUNT }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“Š Dashboard" >> $GITHUB_STEP_SUMMARY
        echo "Download the [interactive dashboard](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts) to explore:" >> $GITHUB_STEP_SUMMARY
        echo "- Filter by severity (errors, warnings, performance, style)" >> $GITHUB_STEP_SUMMARY
        echo "- Search through issues" >> $GITHUB_STEP_SUMMARY
        echo "- View code context for each issue" >> $GITHUB_STEP_SUMMARY
        echo "- Virtual scrolling for smooth performance" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“‹ Report Preview" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        head -30 lpzrobots-report.md >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY