name: Update Analysis Badge

on:
  workflow_run:
    workflows: ["CPPCheck Analysis Dashboard"]
    types:
      - completed

jobs:
  update-badge:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.payload.workflow_run.id,
          });
          
          const matchArtifact = artifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "cppcheck-analysis-results"
          })[0];
          
          if (matchArtifact) {
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });
            
            const fs = require('fs');
            fs.writeFileSync('analysis-results.zip', Buffer.from(download.data));
          }

    - name: Extract and analyze results
      run: |
        if [ -f analysis-results.zip ]; then
          unzip -q analysis-results.zip
          
          if [ -f analysis.json ]; then
            # Count issues by severity
            TOTAL=$(python3 -c "import json; print(len(json.load(open('analysis.json')).get('issues', [])))")
            ERRORS=$(python3 -c "import json; print(len([i for i in json.load(open('analysis.json')).get('issues', []) if i.get('severity') == 'error']))")
            
            # Determine badge color
            if [ $ERRORS -gt 0 ]; then
              COLOR="red"
            elif [ $TOTAL -gt 50 ]; then
              COLOR="yellow"
            elif [ $TOTAL -gt 0 ]; then
              COLOR="orange"
            else
              COLOR="brightgreen"
            fi
            
            # Create badge JSON
            cat > badge.json << 'EOF'
            {
              "schemaVersion": 1,
              "label": "cppcheck",
              "message": "$TOTAL issues",
              "color": "$COLOR"
            }
EOF
            
            echo "Total issues: $TOTAL"
            echo "Errors: $ERRORS"
            echo "Badge color: $COLOR"
          fi
        fi

    - name: Update Gist (if configured)
      if: env.GIST_ID != ''
      env:
        GIST_ID: ${{ secrets.BADGE_GIST_ID }}
        GITHUB_TOKEN: ${{ secrets.BADGE_GIST_TOKEN }}
      run: |
        if [ -f badge.json ]; then
          # Update gist with badge data
          curl -X PATCH \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/gists/$GIST_ID \
            -d @- << 'GIST_EOF'
          {
            "files": {
              "cppcheck-badge.json": {
                "content": $(cat badge.json | jq -Rs .)
              }
            }
          }
GIST_EOF
          EOF
        fi