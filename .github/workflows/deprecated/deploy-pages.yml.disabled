name: Deploy Analysis to GitHub Pages

on:
  workflow_dispatch:
    inputs:
      repository:
        description: 'Repository to analyze (default: this repo)'
        required: false
        type: string
        default: ''
  push:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  analyze-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck
        
        cd cppcheck-dashboard-generator
        npm ci
        npm run build
        cd ..

    - name: Analyze repository
      run: |
        # Create working directory
        mkdir -p work
        cd work
        
        # Determine which repo to analyze
        if [ -n "${{ github.event.inputs.repository }}" ] && [ "${{ github.event.inputs.repository }}" != "jerryzhao173985/cppcheck-studio" ]; then
          echo "Cloning external repository: ${{ github.event.inputs.repository }}..."
          git clone --depth 1 https://github.com/${{ github.event.inputs.repository }}.git target-repo
          cd target-repo
          TARGET_DIR="."
        else
          echo "Analyzing current repository..."
          cd ..
          TARGET_DIR="."
        fi
        
        # Find C++ files (limit to 500 for Pages deployment)
        find ${TARGET_DIR} -type f \( -name "*.cpp" -o -name "*.cc" -o -name "*.h" -o -name "*.hpp" \) \
          -not -path "*/node_modules/*" \
          -not -path "*/.git/*" \
          -not -path "*/work/*" \
          | head -500 > cpp_files.txt
        
        FILE_COUNT=$(wc -l < cpp_files.txt)
        echo "Found ${FILE_COUNT} C++ files"
        
        if [ ${FILE_COUNT} -eq 0 ]; then
          echo "No C++ files found, creating demo..."
          mkdir -p demo
          cat > demo/example.cpp << 'EOF'
        #include <iostream>
        void example() {
            int* p = nullptr;
            *p = 42;  // Null pointer dereference
            int uninit;
            std::cout << uninit;  // Uninitialized variable
        }
        EOF
          echo "demo/example.cpp" > cpp_files.txt
          FILE_COUNT=1
        fi
        
        # Always go back to work directory for consistent paths
        if [ -n "${{ github.event.inputs.repository }}" ] && [ "${{ github.event.inputs.repository }}" != "jerryzhao173985/cppcheck-studio" ]; then
          cd ../../work
        else
          cd work
        fi
        
        # Run cppcheck
        echo "Running CPPCheck analysis..."
        cppcheck \
          --enable=all \
          --suppress=missingIncludeSystem \
          --std=c++17 \
          --xml \
          --xml-version=2 \
          --file-list=cpp_files.txt \
          2> cppcheck-results.xml || true
        
        # Convert to JSON
        python3 ../xml2json-simple.py cppcheck-results.xml > analysis.json
        
        # Get stats  
        ISSUE_COUNT=$(python3 -c "import json; print(len(json.load(open('analysis.json'))['issues']))")
        echo "ISSUE_COUNT=${ISSUE_COUNT}" >> $GITHUB_ENV
        echo "FILE_COUNT=${FILE_COUNT}" >> $GITHUB_ENV
        
        # Move results to root
        mv analysis.json ../
        cd ..

    - name: Generate dashboard site
      run: |
        # Create site directory
        mkdir -p site
        
        # Generate main dashboard
        cd cppcheck-dashboard-generator
        npx tsx src/cli.ts ../analysis.json ../site/dashboard.html \
          --title "CPPCheck Analysis Dashboard" \
          --project "Live Analysis Results"
        cd ..
        
        # Generate summary
        python3 scripts/generate-summary.py analysis.json > site/summary.txt
        
        # Create enhanced landing page
        cat > site/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>CPPCheck Studio - Live Dashboard</title>
            <style>
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    margin: 0;
                    padding: 0;
                    background: #f5f7fa;
                }
                .hero {
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 60px 20px;
                    text-align: center;
                }
                .hero h1 {
                    font-size: 3em;
                    margin: 0;
                    font-weight: 700;
                }
                .hero p {
                    font-size: 1.2em;
                    margin: 20px 0;
                    opacity: 0.9;
                }
                .container {
                    max-width: 1200px;
                    margin: 0 auto;
                    padding: 40px 20px;
                }
                .stats {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                    gap: 20px;
                    margin: -40px auto 40px;
                    max-width: 1000px;
                }
                .stat-card {
                    background: white;
                    border-radius: 10px;
                    padding: 30px;
                    text-align: center;
                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                    transition: transform 0.2s;
                }
                .stat-card:hover {
                    transform: translateY(-5px);
                    box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
                }
                .stat-number {
                    font-size: 2.5em;
                    font-weight: bold;
                    color: #667eea;
                }
                .stat-label {
                    color: #666;
                    margin-top: 10px;
                }
                .cta-button {
                    display: inline-block;
                    background: #667eea;
                    color: white;
                    padding: 15px 40px;
                    border-radius: 50px;
                    text-decoration: none;
                    font-weight: 600;
                    margin: 20px 10px;
                    transition: all 0.3s;
                }
                .cta-button:hover {
                    background: #5a5fc7;
                    transform: translateY(-2px);
                    box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
                }
                .cta-button.secondary {
                    background: white;
                    color: #667eea;
                    border: 2px solid #667eea;
                }
                .cta-button.secondary:hover {
                    background: #f8f9ff;
                }
                .features {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                    gap: 30px;
                    margin-top: 60px;
                }
                .feature {
                    text-align: center;
                }
                .feature-icon {
                    width: 60px;
                    height: 60px;
                    background: #f0f4ff;
                    border-radius: 50%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    margin: 0 auto 20px;
                    font-size: 24px;
                }
                .timestamp {
                    text-align: center;
                    color: #666;
                    margin-top: 40px;
                    font-size: 0.9em;
                }
                .summary-box {
                    background: white;
                    border-radius: 10px;
                    padding: 30px;
                    margin: 40px 0;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
                }
                .summary-box pre {
                    background: #f5f7fa;
                    padding: 20px;
                    border-radius: 5px;
                    overflow-x: auto;
                    margin: 0;
                }
            </style>
        </head>
        <body>
            <div class="hero">
                <h1>üîç CPPCheck Studio</h1>
                <p>Live C++ Static Analysis Dashboard</p>
            </div>
            
            <div class="container">
                <div class="stats">
                    <div class="stat-card">
                        <div class="stat-number">ISSUE_COUNT_PLACEHOLDER</div>
                        <div class="stat-label">Total Issues Found</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">FILE_COUNT_PLACEHOLDER</div>
                        <div class="stat-label">Files Analyzed</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">TIMESTAMP_PLACEHOLDER</div>
                        <div class="stat-label">Last Updated</div>
                    </div>
                </div>
                
                <div style="text-align: center;">
                    <a href="dashboard.html" class="cta-button">
                        üìä View Interactive Dashboard
                    </a>
                    <a href="https://github.com/jerryzhao173985/cppcheck-studio" class="cta-button secondary">
                        <svg style="width: 20px; height: 20px; vertical-align: middle; margin-right: 5px;" viewBox="0 0 24 24">
                            <path fill="currentColor" d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                        </svg>
                        GitHub Repository
                    </a>
                </div>
                
                <div class="summary-box">
                    <h2>Analysis Summary</h2>
                    <pre>SUMMARY_PLACEHOLDER</pre>
                </div>
                
                <div class="features">
                    <div class="feature">
                        <div class="feature-icon">üöÄ</div>
                        <h3>Virtual Scrolling</h3>
                        <p>Handle thousands of issues with smooth performance</p>
                    </div>
                    <div class="feature">
                        <div class="feature-icon">üîç</div>
                        <h3>Real-time Search</h3>
                        <p>Filter and search through issues instantly</p>
                    </div>
                    <div class="feature">
                        <div class="feature-icon">üìä</div>
                        <h3>Visual Statistics</h3>
                        <p>Understand your code quality at a glance</p>
                    </div>
                </div>
                
                <div class="timestamp">
                    Updated every push to main branch
                </div>
            </div>
        </body>
        </html>
        EOF
        
        # Replace placeholders
        TIMESTAMP=$(date '+%Y-%m-%d %H:%M')
        SUMMARY=$(cat site/summary.txt)
        
        # Use perl for cross-platform compatibility
        perl -i -pe "s/ISSUE_COUNT_PLACEHOLDER/${ISSUE_COUNT}/g" site/index.html
        perl -i -pe "s/FILE_COUNT_PLACEHOLDER/${FILE_COUNT}/g" site/index.html
        perl -i -pe "s/TIMESTAMP_PLACEHOLDER/${TIMESTAMP}/g" site/index.html
        
        # Handle multi-line summary replacement
        echo "$SUMMARY" > temp_summary.txt
        perl -i -pe 'BEGIN{undef $/; open(F,"temp_summary.txt"); $summary=<F>; close(F)} s/SUMMARY_PLACEHOLDER/$summary/g' site/index.html
        rm temp_summary.txt

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./site

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Summary
      run: |
        echo "## üéâ Deployed to GitHub Pages!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Live Dashboard" >> $GITHUB_STEP_SUMMARY
        echo "Visit your dashboard at: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat site/summary.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY