name: Analyze External C++ Repository

on:
  workflow_dispatch:
    inputs:
      repository:
        description: 'GitHub repository (owner/repo format)'
        required: true
        type: string
        default: 'opencv/opencv'
      branch:
        description: 'Branch to analyze'
        required: false
        type: string
        default: 'main'
      path:
        description: 'Subdirectory to analyze (optional)'
        required: false
        type: string
        default: ''
      max_files:
        description: 'Maximum files to analyze (for large repos)'
        required: false
        type: number
        default: 100

jobs:
  analyze-external:
    name: Analyze C++ Repository
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout CPPCheck Studio
      uses: actions/checkout@v4
      with:
        path: cppcheck-studio

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        # Install CPPCheck
        sudo apt-get update
        sudo apt-get install -y cppcheck
        
        # Install Python dependencies
        pip install lxml
        
        # Build and install dashboard generator
        cd cppcheck-studio/cppcheck-dashboard-generator
        npm ci
        npm run build
        sudo npm link -g
        cd ../..

    - name: Clone target repository
      run: |
        echo "Cloning ${{ github.event.inputs.repository }}..."
        git clone --depth 1 --branch ${{ github.event.inputs.branch }} \
          https://github.com/${{ github.event.inputs.repository }}.git target-repo
        
        # Get repository info
        cd target-repo
        COMMIT_SHA=$(git rev-parse --short HEAD)
        echo "COMMIT_SHA=${COMMIT_SHA}" >> $GITHUB_ENV
        echo "Analyzing commit: ${COMMIT_SHA}"
        cd ..

    - name: Run CPPCheck analysis
      run: |
        cd target-repo
        
        # Determine analysis path
        if [ -n "${{ github.event.inputs.path }}" ]; then
          ANALYZE_PATH="${{ github.event.inputs.path }}"
        else
          ANALYZE_PATH="."
        fi
        
        # Find C++ files
        echo "Finding C++ files in ${ANALYZE_PATH}..."
        find "${ANALYZE_PATH}" -type f \( -name "*.cpp" -o -name "*.cc" -o -name "*.cxx" -o -name "*.c" -o -name "*.h" -o -name "*.hpp" \) | head -n ${{ github.event.inputs.max_files }} > cpp_files.txt
        
        FILE_COUNT=$(wc -l < cpp_files.txt)
        echo "Found ${FILE_COUNT} C++ files to analyze"
        
        if [ ${FILE_COUNT} -eq 0 ]; then
          echo "No C++ files found!"
          exit 1
        fi
        
        # Run cppcheck on the file list
        echo "Running CPPCheck analysis..."
        cppcheck \
          --enable=all \
          --inconclusive \
          --suppress=missingIncludeSystem \
          --std=c++17 \
          --template='{file}:{line}:{severity}:{id}:{message}' \
          --output-file=../cppcheck-results.txt \
          --xml \
          --xml-version=2 \
          --file-list=cpp_files.txt \
          2> ../cppcheck-results.xml
        
        cd ..
        
        # Convert results
        echo "Converting results to JSON..."
        python3 cppcheck-studio/xml2json.py cppcheck-results.xml > analysis.json
        
        # Add code context
        echo "Adding code context..."
        cd target-repo
        python3 ../cppcheck-studio/add-code-context.py ../analysis.json ../analysis-with-context.json
        cd ..
        
        # Generate dashboard
        echo "Generating dashboard..."
        REPO_NAME="${{ github.event.inputs.repository }}"
        PROJECT_NAME="${REPO_NAME##*/}"
        
        cppcheck-dashboard \
          analysis-with-context.json \
          dashboard.html \
          --title "${PROJECT_NAME} CPPCheck Analysis" \
          --project "${PROJECT_NAME} (${COMMIT_SHA})"
        
        # Generate summary report
        python3 -c "
import json
with open('analysis.json') as f:
    data = json.load(f)
    issues = data.get('issues', [])
    by_severity = {}
    for issue in issues:
        sev = issue.get('severity', 'unknown')
        by_severity[sev] = by_severity.get(sev, 0) + 1
    
    print(f'Total issues: {len(issues)}')
    for sev, count in sorted(by_severity.items()):
        print(f'  {sev}: {count}')
" > summary.txt
        
        cat summary.txt

    - name: Upload dashboard
      uses: actions/upload-artifact@v4
      with:
        name: cppcheck-dashboard-${{ github.event.inputs.repository }}-${{ env.COMMIT_SHA }}
        path: |
          dashboard.html
          summary.txt
          analysis.json

    - name: Create issue with results
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('summary.txt', 'utf8');
          
          const issueBody = `## CPPCheck Analysis Results for ${context.payload.inputs.repository}
          
          **Repository:** https://github.com/${context.payload.inputs.repository}
          **Branch:** ${context.payload.inputs.branch}
          **Commit:** ${process.env.COMMIT_SHA}
          **Path:** ${context.payload.inputs.path || 'entire repository'}
          **Files analyzed:** ${context.payload.inputs.max_files}
          
          ### Summary
          \`\`\`
          ${summary}
          \`\`\`
          
          ### Dashboard
          The interactive dashboard is available as an artifact:
          [Download Dashboard](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)
          
          ### View Online
          After downloading, open the HTML file in your browser to explore:
          - Filter by severity
          - Search through issues  
          - View code context
          - Virtual scrolling for large result sets
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `CPPCheck Analysis: ${context.payload.inputs.repository}`,
            body: issueBody,
            labels: ['cppcheck-analysis', 'automated']
          });