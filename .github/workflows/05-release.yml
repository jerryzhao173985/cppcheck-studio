name: 05 - Release

on:
  push:
    branches: [main]
    paths:
      - 'cppcheck-dashboard-generator/**'
      - '!cppcheck-dashboard-generator/test/**'
      - '!cppcheck-dashboard-generator/README.md'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      dry_run:
        description: 'Dry run (no actual release)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  check-release:
    name: Check Release Conditions
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      current_version: ${{ steps.check.outputs.current_version }}
      commit_count: ${{ steps.check.outputs.commit_count }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for releasable changes
      id: check
      run: |
        cd cppcheck-dashboard-generator
        
        # Get current version
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Count commits since last release
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          COMMIT_COUNT=$(git rev-list --count "$LAST_TAG"..HEAD -- .)
        else
          COMMIT_COUNT=$(git rev-list --count HEAD -- .)
        fi
        echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
        
        # Check if we should release
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "should_release=true" >> $GITHUB_OUTPUT
          echo "### 🚀 Manual Release Triggered" >> $GITHUB_STEP_SUMMARY
        elif [ "$COMMIT_COUNT" -gt 0 ]; then
          echo "should_release=true" >> $GITHUB_OUTPUT
          echo "### 🚀 Auto Release: $COMMIT_COUNT new commits" >> $GITHUB_STEP_SUMMARY
        else
          echo "should_release=false" >> $GITHUB_OUTPUT
          echo "### ⏸️ No Release Needed" >> $GITHUB_STEP_SUMMARY
          echo "No changes since last release" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Current Version: \`$CURRENT_VERSION\`" >> $GITHUB_STEP_SUMMARY
        echo "- Commits Since Last Release: $COMMIT_COUNT" >> $GITHUB_STEP_SUMMARY

  test-and-build:
    name: Test and Build
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    uses: ./.github/workflows/01-test.yml
    permissions:
      contents: read
      security-events: write

  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    needs: [check-release, test-and-build]
    if: needs.check-release.outputs.should_release == 'true'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      release_notes: ${{ steps.notes.outputs.release_notes }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Determine version bump
      id: version
      run: |
        cd cppcheck-dashboard-generator
        
        # Determine release type
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
        else
          # Auto-determine based on commit messages
          if git log --format=%B -n 20 | grep -q "BREAKING CHANGE\|!:"; then
            RELEASE_TYPE="major"
          elif git log --format=%B -n 20 | grep -q "^feat"; then
            RELEASE_TYPE="minor"
          else
            RELEASE_TYPE="patch"
          fi
        fi
        
        echo "Release type: $RELEASE_TYPE"
        
        # Bump version
        if [ "${{ github.event.inputs.dry_run }}" != "true" ]; then
          NEW_VERSION=$(npm version $RELEASE_TYPE --no-git-tag-version)
          NEW_VERSION=${NEW_VERSION#v}
        else
          CURRENT=$(node -p "require('./package.json').version")
          case $RELEASE_TYPE in
            major) NEW_VERSION=$(echo $CURRENT | awk -F. '{print $1+1".0.0"}') ;;
            minor) NEW_VERSION=$(echo $CURRENT | awk -F. '{print $1"."$2+1".0"}') ;;
            patch) NEW_VERSION=$(echo $CURRENT | awk -F. '{print $1"."$2"."$3+1}') ;;
            *) NEW_VERSION="$CURRENT-pre" ;;
          esac
        fi
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "### 📦 Version Bump: $RELEASE_TYPE" >> $GITHUB_STEP_SUMMARY
        echo "- From: \`${{ needs.check-release.outputs.current_version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- To: \`$NEW_VERSION\`" >> $GITHUB_STEP_SUMMARY
    
    - name: Generate release notes
      id: notes
      run: |
        cd cppcheck-dashboard-generator
        
        # Generate release notes from commits
        echo "## What's Changed" > release-notes.md
        echo "" >> release-notes.md
        
        # Group commits by type
        git log --format="%s|%h|%an" --no-merges HEAD~${{ needs.check-release.outputs.commit_count }}..HEAD | while IFS='|' read -r message hash author; do
          case "$message" in
            feat:*|feat\(*) echo "### ✨ Features" >> release-notes.tmp ;;
            fix:*|fix\(*) echo "### 🐛 Bug Fixes" >> release-notes.tmp ;;
            docs:*) echo "### 📚 Documentation" >> release-notes.tmp ;;
            perf:*) echo "### ⚡ Performance" >> release-notes.tmp ;;
            refactor:*) echo "### ♻️ Refactoring" >> release-notes.tmp ;;
            test:*) echo "### 🧪 Tests" >> release-notes.tmp ;;
            chore:*|ci:*) echo "### 🔧 Maintenance" >> release-notes.tmp ;;
          esac
          echo "- $message ($hash) @$author" >> release-notes.tmp
        done
        
        # Sort and deduplicate sections
        sort -u release-notes.tmp >> release-notes.md 2>/dev/null || true
        rm -f release-notes.tmp
        
        # Add footer
        echo "" >> release-notes.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ needs.check-release.outputs.current_version }}...v${{ steps.version.outputs.new_version }}" >> release-notes.md
        
        # Store for output
        NOTES=$(cat release-notes.md)
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo "$NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Add to summary
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📝 Release Notes" >> $GITHUB_STEP_SUMMARY
        cat release-notes.md >> $GITHUB_STEP_SUMMARY

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [prepare-release]
    if: github.event.inputs.dry_run != 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Update version and build
      run: |
        cd cppcheck-dashboard-generator
        
        # Update version
        npm version ${{ needs.prepare-release.outputs.new_version }} --no-git-tag-version
        
        # Install and build
        npm ci
        npm run build
        
        # Run validation
        npm run validate
    
    - name: Publish to NPM
      run: |
        cd cppcheck-dashboard-generator
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Commit version bump
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git add cppcheck-dashboard-generator/package.json cppcheck-dashboard-generator/package-lock.json
        git commit -m "chore: release v${{ needs.prepare-release.outputs.new_version }}"
        git push

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, publish-npm]
    if: github.event.inputs.dry_run != 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.prepare-release.outputs.new_version }}
        name: v${{ needs.prepare-release.outputs.new_version }}
        body: ${{ needs.prepare-release.outputs.release_notes }}
        draft: false
        prerelease: ${{ contains(needs.prepare-release.outputs.new_version, '-') }}
        generate_release_notes: false
    
    - name: Update release summary
      run: |
        echo "# 🎉 Release Published!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## v${{ needs.prepare-release.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 NPM Package" >> $GITHUB_STEP_SUMMARY
        echo "- Package: [\`cppcheck-dashboard-generator\`](https://www.npmjs.com/package/cppcheck-dashboard-generator)" >> $GITHUB_STEP_SUMMARY
        echo "- Version: \`${{ needs.prepare-release.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Install: \`npm install cppcheck-dashboard-generator@${{ needs.prepare-release.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
        echo "- [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.prepare-release.outputs.new_version }})" >> $GITHUB_STEP_SUMMARY
        echo "- [NPM Package](https://www.npmjs.com/package/cppcheck-dashboard-generator/v/${{ needs.prepare-release.outputs.new_version }})" >> $GITHUB_STEP_SUMMARY

  dry-run-summary:
    name: Dry Run Summary
    runs-on: ubuntu-latest
    needs: [prepare-release]
    if: github.event.inputs.dry_run == 'true'
    
    steps:
    - name: Create dry run summary
      run: |
        echo "# 🧪 Dry Run Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "This was a dry run. No actual release was created." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## What would have happened:" >> $GITHUB_STEP_SUMMARY
        echo "1. ✅ Version bump to \`${{ needs.prepare-release.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "2. ✅ NPM package published" >> $GITHUB_STEP_SUMMARY
        echo "3. ✅ GitHub release created" >> $GITHUB_STEP_SUMMARY
        echo "4. ✅ Git tag \`v${{ needs.prepare-release.outputs.new_version }}\` created" >> $GITHUB_STEP_SUMMARY