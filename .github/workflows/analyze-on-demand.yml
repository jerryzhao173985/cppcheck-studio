name: On-Demand Repository Analysis

on:
  repository_dispatch:
    types: [analyze-repo]
  workflow_dispatch:
    inputs:
      repository:
        description: 'GitHub repository to analyze (owner/repo)'
        required: true
        type: string
      analysis_id:
        description: 'Unique analysis ID for tracking (auto-generated)'
        required: false
        type: string
      branch:
        description: 'Branch to analyze'
        required: false
        type: string
        default: 'main'
      max_files:
        description: 'Maximum files to analyze'
        required: false
        type: number
        default: 500
      callback_url:
        description: 'URL to POST results to when complete'
        required: false
        type: string

permissions:
  contents: write
  pages: write
  id-token: write
  actions: read

jobs:
  analyze:
    name: Analyze C++ Repository
    runs-on: ubuntu-latest
    
    steps:
    - name: Parse inputs
      run: |
        # Handle both workflow_dispatch and repository_dispatch
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "REPO=${{ github.event.client_payload.repository }}" >> $GITHUB_ENV
          echo "BRANCH=${{ github.event.client_payload.branch || 'main' }}" >> $GITHUB_ENV
          echo "MAX_FILES=${{ github.event.client_payload.max_files || 500 }}" >> $GITHUB_ENV
          echo "CALLBACK_URL=${{ github.event.client_payload.callback_url }}" >> $GITHUB_ENV
          echo "ANALYSIS_ID=${{ github.event.client_payload.analysis_id || '$(date +%s)-$(echo $RANDOM)' }}" >> $GITHUB_ENV
        else
          echo "REPO=${{ github.event.inputs.repository }}" >> $GITHUB_ENV
          echo "BRANCH=${{ github.event.inputs.branch }}" >> $GITHUB_ENV
          echo "MAX_FILES=${{ github.event.inputs.max_files }}" >> $GITHUB_ENV
          echo "CALLBACK_URL=${{ github.event.inputs.callback_url }}" >> $GITHUB_ENV
          
          # Use provided analysis ID or generate one
          if [ -n "${{ github.event.inputs.analysis_id }}" ]; then
            echo "ANALYSIS_ID=${{ github.event.inputs.analysis_id }}" >> $GITHUB_ENV
          else
            echo "ANALYSIS_ID=$(date +%s)-$(echo $RANDOM)" >> $GITHUB_ENV
          fi
        fi

    - name: Checkout CPPCheck Studio
      uses: actions/checkout@v4
      with:
        path: cppcheck-studio

    - name: Setup environment
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck jq
        
        cd cppcheck-studio/cppcheck-dashboard-generator
        npm ci
        npm run build
        
        # Force use the local built version
        sudo npm link --force
        
        # Verify the correct version is being used
        echo "Checking dashboard generator version..."
        which cppcheck-dashboard
        cppcheck-dashboard --version || echo "No version info"
        
        cd ../..

    - name: Clone and analyze repository
      run: |
        echo "🔍 Analyzing repository: ${{ env.REPO }}"
        
        # Get default branch if not specified
        if [ -z "${{ env.BRANCH }}" ] || [ "${{ env.BRANCH }}" = "main" ]; then
          DEFAULT_BRANCH=$(curl -s https://api.github.com/repos/${{ env.REPO }} | jq -r .default_branch)
          if [ "$DEFAULT_BRANCH" != "null" ] && [ -n "$DEFAULT_BRANCH" ]; then
            BRANCH=$DEFAULT_BRANCH
          else
            BRANCH="${{ env.BRANCH }}"
          fi
        else
          BRANCH="${{ env.BRANCH }}"
        fi
        
        echo "📌 Branch: $BRANCH"
        MAX_FILES=$(echo "${{ env.MAX_FILES }}" | cut -d. -f1)
        echo "MAX_FILES_INT=$MAX_FILES" >> $GITHUB_ENV
        echo "📄 Max files: $MAX_FILES"
        
        # Clone target repository
        git clone --depth 1 --branch $BRANCH \
          https://github.com/${{ env.REPO }}.git target-repo || {
          echo "❌ Failed to clone repository ${{ env.REPO }} (branch: $BRANCH)"
          echo "Please check:"
          echo "  - Repository exists and is public"
          echo "  - Branch name is correct"
          exit 1
        }
        
        cd target-repo
        COMMIT_SHA=$(git rev-parse --short HEAD)
        echo "COMMIT_SHA=${COMMIT_SHA}" >> $GITHUB_ENV
        
        # Log repository info
        echo "📦 Successfully cloned: ${{ env.REPO }}"
        echo "🔖 Commit: ${COMMIT_SHA}"
        echo "📁 Current directory: $(pwd)"
        echo "📊 Repository structure:"
        ls -la | head -10
        
        # Find C++ files
        find . -type f \( -name "*.cpp" -o -name "*.cc" -o -name "*.cxx" -o -name "*.c" -o -name "*.h" -o -name "*.hpp" \) \
          -not -path "*/build/*" \
          -not -path "*/.git/*" \
          -not -path "*/vendor/*" \
          -not -path "*/third_party/*" \
          | head -n $MAX_FILES > cpp_files.txt
        
        FILE_COUNT=$(wc -l < cpp_files.txt)
        echo "FILE_COUNT=${FILE_COUNT}" >> $GITHUB_ENV
        
        if [ ${FILE_COUNT} -eq 0 ]; then
          echo "❌ No C++ files found in repository"
          exit 1
        fi
        
        echo "✅ Found ${FILE_COUNT} C++ files to analyze"
        
        # Run cppcheck
        cppcheck \
          --enable=all \
          --inconclusive \
          --suppress=missingIncludeSystem \
          --std=c++17 \
          --xml \
          --xml-version=2 \
          --file-list=cpp_files.txt \
          -j $(nproc) \
          2> ../cppcheck-results.xml || true
        
        cd ..
        
        # Convert to JSON
        python3 cppcheck-studio/xml2json-simple.py cppcheck-results.xml > analysis.json
        
        # Get issue count
        ISSUE_COUNT=$(python3 -c "import json; print(len(json.load(open('analysis.json'))['issues']))")
        echo "ISSUE_COUNT=${ISSUE_COUNT}" >> $GITHUB_ENV
        
        # Add code context
        cd target-repo
        python3 ../cppcheck-studio/add-code-context.py ../analysis.json ../analysis-with-context.json
        cd ..

    - name: Create status update
      if: always()
      run: |
        # Create status directory in output
        mkdir -p output/status
        
        # Create status file
        cat > output/status/${{ env.ANALYSIS_ID }}.json << EOF
        {
          "analysis_id": "${{ env.ANALYSIS_ID }}",
          "repository": "${{ env.REPO }}",
          "status": "running",
          "workflow_run_id": "${{ github.run_id }}",
          "workflow_run_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
          "updated_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "message": "Generating dashboard..."
        }
        EOF
        
    - name: Generate dashboard
      run: |
        # Create output directory
        mkdir -p output
        
        # Debug: Show current directory and files
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la | head -10
        echo "Checking analysis file:"
        ls -la analysis-with-context.json
        echo "First few issues:"
        head -c 1000 analysis-with-context.json
        
        # Generate dashboard
        PROJECT_NAME="${{ env.REPO }}"
        
        # Check which generator to use (prioritize code context fix version)
        if [ -f cppcheck-studio/generate/generate-optimized-dashboard-codefix.py ]; then
          echo "Using optimized dashboard with code context fix..."
          python3 cppcheck-studio/generate/generate-optimized-dashboard-codefix.py \
            analysis-with-context.json \
            output/dashboard-${{ env.ANALYSIS_ID }}.html
        elif [ -f cppcheck-studio/generate/generate-optimized-dashboard.py ]; then
          echo "Using optimized dashboard generator (developer-focused workflow)..."
          python3 cppcheck-studio/generate/generate-optimized-dashboard.py \
            analysis-with-context.json \
            output/dashboard-${{ env.ANALYSIS_ID }}.html
        elif [ -f cppcheck-studio/generate/generate-enhanced-dashboard.py ]; then
          echo "Using enhanced dashboard generator (beautiful UI with animations)..."
          python3 cppcheck-studio/generate/generate-enhanced-dashboard.py \
            analysis-with-context.json \
            output/dashboard-${{ env.ANALYSIS_ID }}.html
        elif [ -f cppcheck-studio/generate/generate-simple-dashboard.py ]; then
          echo "Using simple dashboard generator (no JSONL issues)..."
          python3 cppcheck-studio/generate/generate-simple-dashboard.py \
            analysis-with-context.json \
            output/dashboard-${{ env.ANALYSIS_ID }}.html
        elif [ -f cppcheck-studio/generate/generate-standalone-virtual-dashboard.py ]; then
          echo "Using Python dashboard generator for better compatibility..."
          python3 cppcheck-studio/generate/generate-standalone-virtual-dashboard.py \
            analysis-with-context.json \
            output/dashboard-${{ env.ANALYSIS_ID }}.html
        else
          echo "Using TypeScript dashboard generator..."
          cppcheck-dashboard \
            analysis-with-context.json \
            output/dashboard-${{ env.ANALYSIS_ID }}.html \
            --title "${PROJECT_NAME} Analysis" \
            --project "${PROJECT_NAME} (${{ env.COMMIT_SHA }})" \
            --verbose
        fi
        
        # Generate summary
        python3 cppcheck-studio/scripts/generate-summary.py analysis.json > output/summary.txt
        
        # Generate detailed report
        python3 cppcheck-studio/scripts/generate-detailed-report.py analysis.json > output/report.md
        
        # Create metadata
        cat > output/metadata.json << EOF
        {
          "analysis_id": "${{ env.ANALYSIS_ID }}",
          "repository": "${{ env.REPO }}",
          "branch": "${{ env.BRANCH }}",
          "commit": "${{ env.COMMIT_SHA }}",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "files_analyzed": ${{ env.FILE_COUNT }},
          "issues_found": ${{ env.ISSUE_COUNT }},
          "max_files": ${{ env.MAX_FILES_INT }},
          "dashboard_url": "https://jerryzhao173985.github.io/cppcheck-studio/results/${{ env.ANALYSIS_ID }}/index.html"
        }
        EOF

    - name: Upload results as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: analysis-${{ env.ANALYSIS_ID }}
        path: |
          output/dashboard-*.html
          output/summary.txt
          output/report.md
          output/metadata.json
          analysis.json
          analysis-with-context.json

    - name: Update analysis results and status
      if: github.ref == 'refs/heads/main'
      run: |
        # Clone the repo with authentication
        git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git deploy-repo
        cd deploy-repo
        
        # Create directories
        mkdir -p docs/results/${{ env.ANALYSIS_ID }}
        mkdir -p docs/api/status
        mkdir -p docs/api/analyses
        
        # Copy dashboard and metadata
        cp ../output/dashboard-${{ env.ANALYSIS_ID }}.html docs/results/${{ env.ANALYSIS_ID }}/index.html
        cp ../output/metadata.json docs/results/${{ env.ANALYSIS_ID }}/
        cp ../output/metadata.json docs/api/analyses/${{ env.ANALYSIS_ID }}.json
        
        # Create final status
        cat > docs/api/status/${{ env.ANALYSIS_ID }}.json << EOF
        {
          "analysis_id": "${{ env.ANALYSIS_ID }}",
          "repository": "${{ env.REPO }}",
          "status": "completed",
          "workflow_run_id": "${{ github.run_id }}",
          "workflow_run_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
          "completed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "files_analyzed": ${{ env.FILE_COUNT }},
          "issues_found": ${{ env.ISSUE_COUNT }},
          "dashboard_url": "https://jerryzhao173985.github.io/cppcheck-studio/results/${{ env.ANALYSIS_ID }}/index.html"
        }
        EOF
        
        # Update gallery
        if [ -f docs/api/gallery.json ]; then
          jq --argjson new "$(cat docs/api/analyses/${{ env.ANALYSIS_ID }}.json)" \
            '.analyses = ([$new] + .analyses | unique_by(.analysis_id) | .[0:50])' \
            docs/api/gallery.json > temp.json
          mv temp.json docs/api/gallery.json
        else
          jq -n --argjson metadata "$(cat docs/api/analyses/${{ env.ANALYSIS_ID }}.json)" \
            '{analyses: [$metadata]}' > docs/api/gallery.json
        fi
        
        # Commit and push
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add docs/
        git commit -m "Add analysis results for ${{ env.REPO }} (#${{ env.ANALYSIS_ID }})" || echo "No changes"
        git push

    - name: Send callback if provided
      if: env.CALLBACK_URL != ''
      run: |
        # Send results to callback URL
        curl -X POST ${{ env.CALLBACK_URL }} \
          -H "Content-Type: application/json" \
          -d @output/metadata.json \
          || echo "Failed to send callback"

    - name: Create enhanced job summary
      if: always()
      run: |
        DASHBOARD_URL="https://jerryzhao173985.github.io/cppcheck-studio/results/${{ env.ANALYSIS_ID }}/index.html"
        
        # Create a prominent banner
        cat >> $GITHUB_STEP_SUMMARY << EOF
        # 🎯 CPPCheck Analysis Complete!
        
        > ### [🔗 **CLICK HERE TO VIEW YOUR INTERACTIVE DASHBOARD** →](${DASHBOARD_URL})
        > 
        > The dashboard includes:
        > - **Virtual scrolling** for smooth navigation through all ${ISSUE_COUNT:-0} issues
        > - **Code context preview** showing the exact lines where issues occur
        > - **Real-time search and filtering** by severity, file, or message
        > - **Detailed issue information** with line numbers and descriptions
        
        ---
        
        ## 📊 Analysis Summary
        
        | Property | Value |
        |----------|-------|
        | **Repository** | \`${{ env.REPO }}\` |
        | **Branch** | \`${{ env.BRANCH }}\` |
        | **Commit** | \`${{ env.COMMIT_SHA }}\` |
        | **Analysis ID** | \`${{ env.ANALYSIS_ID }}\` |
        | **Files Analyzed** | **${{ env.FILE_COUNT || 0 }}** |
        | **Total Issues** | **${{ env.ISSUE_COUNT || 0 }}** |
        
        ## 📈 Issue Breakdown
        \`\`\`
        $(cat output/summary.txt 2>/dev/null || echo "Summary not available")
        \`\`\`
        
        ## 🔗 Additional Links
        - [📂 Download Analysis Artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)
        - [🔍 View Workflow Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        - [📊 API Status Endpoint](https://jerryzhao173985.github.io/cppcheck-studio/api/status/${{ env.ANALYSIS_ID }}.json)
        
        ## 💡 Dashboard Tips
        1. **Can't see issues?** Press \`F12\` to open console, then run \`recoverDashboard()\`
        2. **Use keyboard shortcuts**: 
           - \`/\` to focus search
           - \`1-5\` to filter by severity
           - \`ESC\` to close modals
        3. **Share the dashboard**: The URL is permanent and can be bookmarked
        
        ---
        
        <details>
        <summary>📝 Debug Information</summary>
        
        - Workflow Run: ${{ github.run_id }}
        - Triggered by: ${{ github.event_name }}
        - Runner: ${{ runner.os }}
        - Analysis completed at: $(date -u +%Y-%m-%dT%H:%M:%SZ)
        
        </details>
        EOF