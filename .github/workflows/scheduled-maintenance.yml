name: Scheduled Maintenance

on:
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 2 AM UTC
  workflow_dispatch:
    inputs:
      cleanup_artifacts:
        description: 'Clean up old artifacts'
        type: boolean
        default: true
      cleanup_caches:
        description: 'Clean up old caches'
        type: boolean
        default: true
      cleanup_results:
        description: 'Clean up old analysis results'
        type: boolean
        default: false
      retention_days:
        description: 'Retention period in days'
        type: number
        default: 30

permissions:
  contents: write
  actions: write

jobs:
  cleanup-artifacts:
    name: Clean Up Artifacts
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || inputs.cleanup_artifacts
    
    steps:
    - name: Delete old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const days = ${{ github.event.inputs.retention_days || 30 }};
          const ms_per_day = 24 * 60 * 60 * 1000;
          const cutoff = new Date(Date.now() - (days * ms_per_day)).toISOString();
          
          console.log(`Deleting artifacts older than ${days} days (before ${cutoff})`);
          
          const artifacts = await github.paginate(
            github.rest.actions.listArtifactsForRepo,
            {
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            }
          );
          
          let deleted = 0;
          let size_freed = 0;
          
          for (const artifact of artifacts) {
            if (artifact.created_at < cutoff) {
              console.log(`Deleting artifact: ${artifact.name} (${artifact.size_in_bytes} bytes)`);
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
              deleted++;
              size_freed += artifact.size_in_bytes;
            }
          }
          
          const mb_freed = (size_freed / 1024 / 1024).toFixed(2);
          console.log(`Deleted ${deleted} artifacts, freed ${mb_freed} MB`);
          
          // Add to summary
          await core.summary
            .addHeading('🗑️ Artifact Cleanup', 2)
            .addTable([
              [{data: 'Metric', header: true}, {data: 'Value', header: true}],
              ['Artifacts Deleted', `${deleted}`],
              ['Space Freed', `${mb_freed} MB`],
              ['Cutoff Date', cutoff]
            ])
            .write();

  cleanup-caches:
    name: Clean Up Caches
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || inputs.cleanup_caches
    
    steps:
    - name: Cleanup caches
      uses: actions/github-script@v7
      with:
        script: |
          const days = ${{ github.event.inputs.retention_days || 30 }};
          const ms_per_day = 24 * 60 * 60 * 1000;
          const cutoff = new Date(Date.now() - (days * ms_per_day)).toISOString();
          
          console.log(`Cleaning up caches not accessed in ${days} days`);
          
          const caches = await github.paginate(
            github.rest.actions.getActionsCacheList,
            {
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            }
          );
          
          let deleted = 0;
          let size_freed = 0;
          
          for (const cache of caches) {
            if (cache.last_accessed_at < cutoff) {
              console.log(`Deleting cache: ${cache.key} (${cache.size_in_bytes} bytes)`);
              await github.rest.actions.deleteActionsCacheById({
                owner: context.repo.owner,
                repo: context.repo.repo,
                cache_id: cache.id
              });
              deleted++;
              size_freed += cache.size_in_bytes;
            }
          }
          
          const mb_freed = (size_freed / 1024 / 1024).toFixed(2);
          console.log(`Deleted ${deleted} caches, freed ${mb_freed} MB`);
          
          // Add to summary
          await core.summary
            .addHeading('🗄️ Cache Cleanup', 2)
            .addTable([
              [{data: 'Metric', header: true}, {data: 'Value', header: true}],
              ['Caches Deleted', `${deleted}`],
              ['Space Freed', `${mb_freed} MB`],
              ['Cutoff Date', cutoff]
            ])
            .write();

  cleanup-old-results:
    name: Clean Up Old Analysis Results
    runs-on: ubuntu-latest
    if: inputs.cleanup_results
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Clean up old results
      run: |
        DAYS=${{ github.event.inputs.retention_days || 30 }}
        CUTOFF=$(date -d "$DAYS days ago" +%s)
        
        echo "### 📁 Analysis Results Cleanup" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Cleaning up results older than $DAYS days..." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        cd docs/results
        DELETED=0
        
        for dir in */; do
          if [ -d "$dir" ]; then
            # Extract timestamp from directory name (assumes format: timestamp-hash)
            TIMESTAMP=$(echo "$dir" | cut -d'-' -f1 | tr -d '/')
            
            if [[ "$TIMESTAMP" =~ ^[0-9]+$ ]] && [ "$TIMESTAMP" -lt "$CUTOFF" ]; then
              echo "Removing old result: $dir"
              rm -rf "$dir"
              DELETED=$((DELETED + 1))
            fi
          fi
        done
        
        echo "- Deleted $DELETED old analysis results" >> $GITHUB_STEP_SUMMARY
        
        if [ "$DELETED" -gt 0 ]; then
          # Update gallery to remove deleted results
          cd ../api
          if [ -f gallery.json ]; then
            # Filter out deleted analyses
            jq --arg cutoff "$CUTOFF" \
              '.analyses = [.analyses[] | select(.analysis_id | split("-")[0] | tonumber > ($cutoff | tonumber))]' \
              gallery.json > gallery.tmp
            mv gallery.tmp gallery.json
          fi
          
          # Commit changes
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          git diff --staged --quiet || git commit -m "chore: cleanup old analysis results (older than $DAYS days)"
          git push
        fi

  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: cppcheck-dashboard-generator/package-lock.json
    
    - name: Check for outdated dependencies
      run: |
        cd cppcheck-dashboard-generator
        
        echo "### 📦 Dependency Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check for outdated packages
        echo "**Outdated Packages:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        npm outdated || true >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        
        # Audit for vulnerabilities
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Security Audit:**" >> $GITHUB_STEP_SUMMARY
        npm audit --production || true
        
        VULNS=$(npm audit --json --production | jq '.metadata.vulnerabilities.total // 0')
        if [ "$VULNS" -gt 0 ]; then
          echo "⚠️ Found $VULNS vulnerabilities" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
        fi

  optimize-repository:
    name: Optimize Repository
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Repository statistics
      run: |
        echo "### 📊 Repository Statistics" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Repository size
        REPO_SIZE=$(du -sh .git | cut -f1)
        echo "- Repository size: $REPO_SIZE" >> $GITHUB_STEP_SUMMARY
        
        # File count
        FILE_COUNT=$(find . -type f -not -path "./.git/*" | wc -l)
        echo "- Total files: $FILE_COUNT" >> $GITHUB_STEP_SUMMARY
        
        # Large files
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Largest files:**" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        find . -type f -not -path "./.git/*" -exec du -h {} + | sort -rh | head -10 >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        
        # Workflow count
        WORKFLOW_COUNT=$(ls .github/workflows/*.yml 2>/dev/null | wc -l)
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Active workflows: $WORKFLOW_COUNT" >> $GITHUB_STEP_SUMMARY

  maintenance-summary:
    name: Maintenance Summary
    runs-on: ubuntu-latest
    needs: [cleanup-artifacts, cleanup-caches, cleanup-old-results, update-dependencies, optimize-repository]
    if: always()
    
    steps:
    - name: Create summary
      run: |
        echo "# 🔧 Maintenance Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "*Run completed at: $(date -u)*" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## Job Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Task | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Artifact Cleanup | ${{ needs.cleanup-artifacts.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Cache Cleanup | ${{ needs.cleanup-caches.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Results Cleanup | ${{ needs.cleanup-old-results.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Dependency Check | ${{ needs.update-dependencies.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Repository Optimization | ${{ needs.optimize-repository.result }} |" >> $GITHUB_STEP_SUMMARY