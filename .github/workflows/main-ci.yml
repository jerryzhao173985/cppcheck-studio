name: Main CI Pipeline

on:
  push:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  actions: read
  security-events: write
  packages: write

jobs:
  # Stage 1: Test everything
  test:
    name: Test Suite
    uses: ./.github/workflows/01-test.yml
    permissions:
      contents: read
      security-events: write

  # Stage 2: Security scanning
  security:
    name: Security Scanning
    uses: ./.github/workflows/02-security.yml
    permissions:
      contents: read
      security-events: write
      actions: read

  # Stage 3: Build and validate
  build:
    name: Build & Validate
    needs: [test]
    uses: ./.github/workflows/03-build.yml
    permissions:
      contents: read

  # Stage 4: E2E and Visual Testing
  e2e-tests:
    name: E2E Tests
    needs: [build]
    uses: ./.github/workflows/07-e2e-tests.yml
    permissions:
      contents: read

  # Stage 5: Performance Testing
  performance:
    name: Performance Tests
    needs: [build]
    uses: ./.github/workflows/08-performance.yml
    permissions:
      contents: read
      issues: write
      pull-requests: write

  # Stage 6: API Testing
  api-tests:
    name: API Tests
    needs: [build]
    uses: ./.github/workflows/09-api-tests.yml
    permissions:
      contents: read
      pages: read

  # Stage 7: Multi-Platform Testing
  multi-platform:
    name: Multi-Platform Tests
    needs: [build]
    uses: ./.github/workflows/12-multi-platform.yml
    permissions:
      contents: read

  # Stage 8: Deploy GitHub Pages
  deploy-pages:
    name: Deploy GitHub Pages
    runs-on: ubuntu-latest
    needs: [build, e2e-tests, api-tests]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Stage 9: Process pending analysis requests
  process-requests:
    name: Process Analysis Requests
    runs-on: ubuntu-latest
    needs: [deploy-pages]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Check for pending requests
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        if [ -d "data/requests" ] && [ "$(ls -A data/requests/*.json 2>/dev/null | wc -l)" -gt 0 ]; then
          echo "Found pending analysis requests"
          gh workflow run process-analysis-request.yml
        else
          echo "No pending analysis requests"
        fi

  # Stage 10: Generate changelog
  changelog:
    name: Update Changelog
    needs: [deploy-pages]
    if: github.ref == 'refs/heads/main'
    uses: ./.github/workflows/11-changelog.yml
    permissions:
      contents: write
      pull-requests: read

  # Stage 11: Create release if needed
  check-release:
    name: Check for Release
    needs: [build, test, security, e2e-tests, performance, api-tests]
    if: github.ref == 'refs/heads/main'
    uses: ./.github/workflows/05-release.yml
    permissions:
      contents: write
      packages: write
      id-token: write

  # Final summary
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [test, security, build, e2e-tests, performance, api-tests, multi-platform, deploy-pages, changelog]
    if: always()
    
    steps:
    - name: Create CI summary
      run: |
        echo "# 🚀 Main CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "*Commit: ${{ github.sha }}*" >> $GITHUB_STEP_SUMMARY
        echo "*Branch: ${{ github.ref_name }}*" >> $GITHUB_STEP_SUMMARY
        echo "*Run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 📊 Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Test Suite | ${{ needs.test.result }} | Coverage: ${{ needs.test.outputs.coverage || 'N/A' }}% |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔒 Security | ${{ needs.security.result }} | [Security Tab](../security) |" >> $GITHUB_STEP_SUMMARY
        echo "| 🏗️ Build | ${{ needs.build.result }} | Version: ${{ needs.build.outputs.typescript-version || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| 🎭 E2E Tests | ${{ needs.e2e-tests.result }} | Browser & Visual Tests |" >> $GITHUB_STEP_SUMMARY
        echo "| ⚡ Performance | ${{ needs.performance.result }} | Benchmarks & Metrics |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔌 API Tests | ${{ needs.api-tests.result }} | Endpoint Validation |" >> $GITHUB_STEP_SUMMARY
        echo "| 🌍 Multi-Platform | ${{ needs.multi-platform.result }} | OS & Browser Matrix |" >> $GITHUB_STEP_SUMMARY
        echo "| 📄 Deploy Pages | ${{ needs.deploy-pages.result }} | [View Site](https://jerryzhao173985.github.io/cppcheck-studio/) |" >> $GITHUB_STEP_SUMMARY
        echo "| 📝 Changelog | ${{ needs.changelog.result }} | Documentation Updates |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count successes
        SUCCESS_COUNT=0
        TOTAL_COUNT=9
        
        [ "${{ needs.test.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ "${{ needs.security.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ "${{ needs.build.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ "${{ needs.e2e-tests.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ "${{ needs.performance.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ "${{ needs.api-tests.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ "${{ needs.multi-platform.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ "${{ needs.deploy-pages.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        [ "${{ needs.changelog.result }}" = "success" ] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        
        if [ "$SUCCESS_COUNT" -eq "$TOTAL_COUNT" ]; then
          echo "## ✅ All $TOTAL_COUNT Stages Passed!" >> $GITHUB_STEP_SUMMARY
          echo "The pipeline completed successfully with 100% pass rate." >> $GITHUB_STEP_SUMMARY
        elif [ "$SUCCESS_COUNT" -gt 5 ]; then
          echo "## ⚠️ Partial Success: $SUCCESS_COUNT/$TOTAL_COUNT stages passed" >> $GITHUB_STEP_SUMMARY
          echo "Some non-critical stages failed. Review the results above." >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Pipeline Failed: Only $SUCCESS_COUNT/$TOTAL_COUNT stages passed" >> $GITHUB_STEP_SUMMARY
          echo "Critical failures detected. Please check the failed jobs above." >> $GITHUB_STEP_SUMMARY
        fi
        
        # Performance metrics
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ⏱️ Timing" >> $GITHUB_STEP_SUMMARY
        echo "- Started: ${{ github.event.head_commit.timestamp }}" >> $GITHUB_STEP_SUMMARY
        echo "- Duration: ~$(( ($(date +%s) - $(date -d '${{ github.event.head_commit.timestamp }}' +%s)) / 60 )) minutes" >> $GITHUB_STEP_SUMMARY