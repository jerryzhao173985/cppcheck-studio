{"0": {"lines": [{"number": 31, "content": "public:", "is_target": false}, {"number": 32, "content": "  Position() {", "is_target": false}, {"number": 33, "content": "    x = y = z = 0;", "is_target": false}, {"number": 34, "content": "    array[0] = array[1] = array[2] = 0;", "is_target": false}, {"number": 35, "content": "  }", "is_target": false}, {"number": 36, "content": "  Position(double _x, double _y, double _z) {", "is_target": true}, {"number": 37, "content": "    x = _x;", "is_target": false}, {"number": 38, "content": "    y = _y;", "is_target": false}, {"number": 39, "content": "    z = _z;", "is_target": false}, {"number": 40, "content": "  }", "is_target": false}, {"number": 41, "content": "  ///  p MUST have a size of at least 3", "is_target": false}]}, "1": {"lines": [{"number": 37, "content": "    x = _x;", "is_target": false}, {"number": 38, "content": "    y = _y;", "is_target": false}, {"number": 39, "content": "    z = _z;", "is_target": false}, {"number": 40, "content": "  }", "is_target": false}, {"number": 41, "content": "  ///  p MUST have a size of at least 3", "is_target": false}, {"number": 42, "content": "  explicit Position(const double* p) {", "is_target": true}, {"number": 43, "content": "    x = p[0];", "is_target": false}, {"number": 44, "content": "    y = p[1];", "is_target": false}, {"number": 45, "content": "    z = p[2];", "is_target": false}, {"number": 46, "content": "  }", "is_target": false}, {"number": 47, "content": "  const double* toArray() {", "is_target": false}]}, "2": {"lines": [{"number": 41, "content": "class Agent : public WiredController {", "is_target": false}, {"number": 42, "content": "public:", "is_target": false}, {"number": 43, "content": "  /** constructor. PlotOption as output setting.", "is_target": false}, {"number": 44, "content": "      noisefactor is used to set the relative noise strength of this agent", "is_target": false}, {"number": 45, "content": "   */", "is_target": false}, {"number": 46, "content": "  Agent(const PlotOption& plotOption = PlotOption(PlotMode::NoPlot), double noisefactor = 1, const Inspectable::iparamkey& name = \"Agent\", const Inspectable::iparamkey& revision = \"$ID\");", "is_target": true}, {"number": 47, "content": "  /** constructor. A list of PlotOption can given.", "is_target": false}, {"number": 48, "content": "      noisefactor is used to set the relative noise strength of this agent", "is_target": false}, {"number": 49, "content": "   */", "is_target": false}, {"number": 50, "content": "  Agent(const std::list<PlotOption>& plotOptions, double noisefactor = 1, const Inspectable::iparamkey& name = \"Agent\", const Inspectable::iparamkey& revision = \"$ID\");", "is_target": false}, {"number": 51, "content": "", "is_target": false}]}, "3": {"lines": [{"number": 45, "content": "   */", "is_target": false}, {"number": 46, "content": "  Agent(const PlotOption& plotOption = PlotOption(PlotMode::NoPlot), double noisefactor = 1, const Inspectable::iparamkey& name = \"Agent\", const Inspectable::iparamkey& revision = \"$ID\");", "is_target": false}, {"number": 47, "content": "  /** constructor. A list of PlotOption can given.", "is_target": false}, {"number": 48, "content": "      noisefactor is used to set the relative noise strength of this agent", "is_target": false}, {"number": 49, "content": "   */", "is_target": false}, {"number": 50, "content": "  Agent(const std::list<PlotOption>& plotOptions, double noisefactor = 1, const Inspectable::iparamkey& name = \"Agent\", const Inspectable::iparamkey& revision = \"$ID\");", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  /** destructor", "is_target": false}, {"number": 53, "content": "   */", "is_target": false}, {"number": 54, "content": "  virtual ~Agent();", "is_target": false}, {"number": 55, "content": "", "is_target": false}]}, "4": {"lines": [{"number": 72, "content": "  Matrix(I _m, I _n, D def);", "is_target": false}, {"number": 73, "content": "  /// constucts a instance on the base of a deep copy of the given matrix", "is_target": false}, {"number": 74, "content": "  Matrix(const Matrix& c);", "is_target": false}, {"number": 75, "content": "  /// copy move constructor", "is_target": false}, {"number": 76, "content": "  Matrix(Matrix&& c) noexcept;", "is_target": false}, {"number": 77, "content": "  ~Matrix() {", "is_target": true}, {"number": 78, "content": "    if (data)", "is_target": false}, {"number": 79, "content": "      free(data);", "is_target": false}, {"number": 80, "content": "  };", "is_target": false}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "public:", "is_target": false}]}, "5": {"lines": [{"number": 157, "content": "  }", "is_target": false}, {"number": 158, "content": "", "is_target": false}, {"number": 159, "content": "  /*       STOREABLE       */", "is_target": false}, {"number": 160, "content": "  /** stores the Matrix into the given file stream (same as write)", "is_target": false}, {"number": 161, "content": "   */", "is_target": false}, {"number": 162, "content": "  bool store(FILE* f) const;", "is_target": true}, {"number": 163, "content": "", "is_target": false}, {"number": 164, "content": "  /** reads a Matrix from the given file stream", "is_target": false}, {"number": 165, "content": "      uses read (or old binary format)", "is_target": false}, {"number": 166, "content": "   */", "is_target": false}, {"number": 167, "content": "  bool restore(FILE* f);", "is_target": false}]}, "6": {"lines": [{"number": 162, "content": "  bool store(FILE* f) const;", "is_target": false}, {"number": 163, "content": "", "is_target": false}, {"number": 164, "content": "  /** reads a Matrix from the given file stream", "is_target": false}, {"number": 165, "content": "      uses read (or old binary format)", "is_target": false}, {"number": 166, "content": "   */", "is_target": false}, {"number": 167, "content": "  bool restore(FILE* f);", "is_target": true}, {"number": 168, "content": "", "is_target": false}, {"number": 169, "content": "  /** writes the Matrix into the given file stream (ascii)", "is_target": false}, {"number": 170, "content": "   */", "is_target": false}, {"number": 171, "content": "  bool write(FILE* f) const;", "is_target": false}, {"number": 172, "content": "", "is_target": false}]}, "7": {"lines": [{"number": 48, "content": "   */", "is_target": false}, {"number": 49, "content": "  AbstractRobot(const std::string& name=\"abstractRobot\", const std::string& revision = \"$ID$\")", "is_target": false}, {"number": 50, "content": "    : Configurable(name, revision) {", "is_target": false}, {"number": 51, "content": "  };", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "  virtual ~AbstractRobot() {}", "is_target": true}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "  /** returns actual sensorvalues", "is_target": false}, {"number": 56, "content": "      @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 57, "content": "      @param sensornumber length of the sensor array", "is_target": false}, {"number": 58, "content": "      @return number of actually written sensors", "is_target": false}]}, "8": {"lines": [{"number": 49, "content": "   */", "is_target": false}, {"number": 50, "content": "  Agent(const std::list<PlotOption>& plotOptions, double noisefactor = 1, const Inspectable::iparamkey& name = \"Agent\", const Inspectable::iparamkey& revision = \"$ID\");", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  /** destructor", "is_target": false}, {"number": 53, "content": "   */", "is_target": false}, {"number": 54, "content": "  virtual ~Agent();", "is_target": true}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "  // Bring base class methods into scope to avoid hiding", "is_target": false}, {"number": 57, "content": "  using WiredController::init;", "is_target": false}, {"number": 58, "content": "  using WiredController::step;", "is_target": false}, {"number": 59, "content": "", "is_target": false}]}, "9": {"lines": [{"number": 42, "content": "  /// contructor (hint: use $ID$ for revision)", "is_target": false}, {"number": 43, "content": "  AbstractMultiController(AbstractController* controller,", "is_target": false}, {"number": 44, "content": "                          const std::string& name,", "is_target": false}, {"number": 45, "content": "                          const std::string& revision);", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "  virtual ~AbstractMultiController();", "is_target": true}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "  /**", "is_target": false}, {"number": 50, "content": "   * Adds a passive controller to this MultiController. If the Agent calls step(..)", "is_target": false}, {"number": 51, "content": "   * or stepNoLearning(..), the MultiController calls not only the active controllers", "is_target": false}, {"number": 52, "content": "   * step(...) but also the step(...) of all the passive controllers. (same for", "is_target": false}]}, "10": {"lines": [{"number": 70, "content": "  /** initialisation of the controller with the given sensor/ motornumber", "is_target": false}, {"number": 71, "content": "   * Must NORMALLY be called before use. For all multicontroller", "is_target": false}, {"number": 72, "content": "   * call first AbstractMultiController::init(sensornumber,motornumber)", "is_target": false}, {"number": 73, "content": "   * if you overwrite this method", "is_target": false}, {"number": 74, "content": "   */", "is_target": false}, {"number": 75, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "  /** performs one step (includes learning).", "is_target": false}, {"number": 78, "content": "Calculates motor commands from sensor inputs.", "is_target": false}, {"number": 79, "content": "@param sensors sensors inputs scaled to [-1,1]", "is_target": false}, {"number": 80, "content": "@param sensornumber length of the sensor array", "is_target": false}]}, "11": {"lines": [{"number": 59, "content": "    Teachable* t2 = dynamic_cast<Teachable*>(controller);", "is_target": false}, {"number": 60, "content": "    (void)(t2); // this is to avoid a warning in -DNDEBUG mode", "is_target": false}, {"number": 61, "content": "    assert(static_cast<void*>(t2) == static_cast<void*>(teachable));", "is_target": false}, {"number": 62, "content": "  }", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "  virtual void step(const sensor* sensors,", "is_target": true}, {"number": 65, "content": "                    int sensornumber,", "is_target": false}, {"number": 66, "content": "                    motor* motors,", "is_target": false}, {"number": 67, "content": "                    int motornumber);", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "  virtual void setCMC(const CMC& cmc);", "is_target": false}]}, "14": {"lines": [{"number": 68, "content": " * like leakI and leakO (input and output layer)", "is_target": false}, {"number": 69, "content": " */", "is_target": false}, {"number": 70, "content": "class AbstractIAFController : public AbstractController {", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "public:", "is_target": false}, {"number": 73, "content": "  AbstractIAFController(const AbstractIAFControllerConf& conf = getDefaultConf());", "is_target": true}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "  virtual ~AbstractIAFController() {}", "is_target": false}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "  static AbstractIAFControllerConf getDefaultConf() {", "is_target": false}, {"number": 78, "content": "    AbstractIAFControllerConf c;", "is_target": false}]}, "15": {"lines": [{"number": 56, "content": "  AbstractController(const std::string& name, const std::string& revision)", "is_target": false}, {"number": 57, "content": "    : Configurable(name, revision)", "is_target": false}, {"number": 58, "content": "    , Inspectable(name) {}", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  /// virtual destructor", "is_target": false}, {"number": 61, "content": "  ~AbstractController() = default;", "is_target": true}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "  /** initialisation of the controller with the given sensor/ motornumber", "is_target": false}, {"number": 64, "content": "      Must be called before use. The random generator is optional.", "is_target": false}, {"number": 65, "content": "  */", "is_target": false}, {"number": 66, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr) = 0;", "is_target": false}]}, "16": {"lines": [{"number": 70, "content": "class AbstractIAFController : public AbstractController {", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "public:", "is_target": false}, {"number": 73, "content": "  AbstractIAFController(const AbstractIAFControllerConf& conf = getDefaultConf());", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "  virtual ~AbstractIAFController() {}", "is_target": true}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "  static AbstractIAFControllerConf getDefaultConf() {", "is_target": false}, {"number": 78, "content": "    AbstractIAFControllerConf c;", "is_target": false}, {"number": 79, "content": "    *c.numberIAFNeuronsPerInput = 10;", "is_target": false}, {"number": 80, "content": "    *c.numberIAFNeuronsPerOutput = 10;", "is_target": false}]}, "17": {"lines": [{"number": 89, "content": "    return c;", "is_target": false}, {"number": 90, "content": "  }", "is_target": false}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "  /// ABSTRACTCONTROLLER INTERFACE", "is_target": false}, {"number": 93, "content": "", "is_target": false}, {"number": 94, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 97, "content": "    return sensorNumber;", "is_target": false}, {"number": 98, "content": "  }", "is_target": false}, {"number": 99, "content": "", "is_target": false}]}, "18": {"lines": [{"number": 99, "content": "", "is_target": false}, {"number": 100, "content": "  virtual int getMotorNumber() const override {", "is_target": false}, {"number": 101, "content": "    return motorNumber;", "is_target": false}, {"number": 102, "content": "  }", "is_target": false}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "  virtual void step(const sensor* sensors,", "is_target": true}, {"number": 105, "content": "                    int sensornumber,", "is_target": false}, {"number": 106, "content": "                    motor* motors,", "is_target": false}, {"number": 107, "content": "                    int motornumber);", "is_target": false}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "  virtual void stepNoLearning(const sensor* sensors,", "is_target": false}]}, "19": {"lines": [{"number": 104, "content": "  virtual void step(const sensor* sensors,", "is_target": false}, {"number": 105, "content": "                    int sensornumber,", "is_target": false}, {"number": 106, "content": "                    motor* motors,", "is_target": false}, {"number": 107, "content": "                    int motornumber);", "is_target": false}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "  virtual void stepNoLearning(const sensor* sensors,", "is_target": true}, {"number": 110, "content": "                              int sensornumber,", "is_target": false}, {"number": 111, "content": "                              motor* motors,", "is_target": false}, {"number": 112, "content": "                              int motornumber);", "is_target": false}, {"number": 113, "content": "", "is_target": false}, {"number": 114, "content": "  /// STORABLE INTERFACE", "is_target": false}]}, "20": {"lines": [{"number": 120, "content": "  virtual bool restore(FILE* f) {", "is_target": false}, {"number": 121, "content": "    return true;", "is_target": false}, {"number": 122, "content": "  }", "is_target": false}, {"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "  /// CONFIGURABLE INTERFACE", "is_target": false}, {"number": 125, "content": "  virtual void notifyOnChange(const Configurable::paramkey& key);", "is_target": true}, {"number": 126, "content": "", "is_target": false}, {"number": 127, "content": "protected:", "is_target": false}, {"number": 128, "content": "  AbstractIAFControllerConf conf;", "is_target": false}, {"number": 129, "content": "  RandGen* randG;", "is_target": false}, {"number": 130, "content": "  bool initialised = false;", "is_target": false}]}, "22": {"lines": [{"number": 47, "content": "public:", "is_target": false}, {"number": 48, "content": "  DiscreteControllerAdapter(AbstractController* controller,", "is_target": false}, {"number": 49, "content": "                            const std::string& name,", "is_target": false}, {"number": 50, "content": "                            const std::string& revision);", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  virtual ~DiscreteControllerAdapter();", "is_target": true}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "  /**", "is_target": false}, {"number": 55, "content": "  Sets the number of intervals, in which sensor AND motor values are mapped.", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "      @param intervalCount the number of intervals", "is_target": false}]}, "23": {"lines": [{"number": 130, "content": "      @param sensors sensors inputs scaled to [-1,1]", "is_target": false}, {"number": 131, "content": "      @param sensornumber length of the sensor array", "is_target": false}, {"number": 132, "content": "      @param motors motors outputs. MUST have enough space for motor values!", "is_target": false}, {"number": 133, "content": "      @param motornumber length of the provided motor array", "is_target": false}, {"number": 134, "content": "  */", "is_target": false}, {"number": 135, "content": "  virtual void step(const sensor* sensors,", "is_target": true}, {"number": 136, "content": "                    int sensornumber,", "is_target": false}, {"number": 137, "content": "                    motor* motors,", "is_target": false}, {"number": 138, "content": "                    int motornumber);", "is_target": false}, {"number": 139, "content": "  /** performs one step without learning.", "is_target": false}, {"number": 140, "content": "      @see step", "is_target": false}]}, "24": {"lines": [{"number": 137, "content": "                    motor* motors,", "is_target": false}, {"number": 138, "content": "                    int motornumber);", "is_target": false}, {"number": 139, "content": "  /** performs one step without learning.", "is_target": false}, {"number": 140, "content": "      @see step", "is_target": false}, {"number": 141, "content": "  */", "is_target": false}, {"number": 142, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 143, "content": "                              int number_sensors,", "is_target": false}, {"number": 144, "content": "                              motor*,", "is_target": false}, {"number": 145, "content": "                              int number_motors);", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  /**", "is_target": false}]}, "25": {"lines": [{"number": 145, "content": "                              int number_motors);", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  /**", "is_target": false}, {"number": 148, "content": "   * init function", "is_target": false}, {"number": 149, "content": "   */", "is_target": false}, {"number": 150, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "  /***************************************************************************/", "is_target": false}, {"number": 153, "content": "  /* END: forwarding methods of AbstractController                           */", "is_target": false}, {"number": 154, "content": "  /***************************************************************************/", "is_target": false}, {"number": 155, "content": "", "is_target": false}]}, "26": {"lines": [{"number": 120, "content": "        ", "is_target": false}, {"number": 121, "content": "        return conf;", "is_target": false}, {"number": 122, "content": "    }", "is_target": false}, {"number": 123, "content": "    ", "is_target": false}, {"number": 124, "content": "    /// Constructor", "is_target": false}, {"number": 125, "content": "    CASox(const CASoxConf& conf = getDefaultConf());", "is_target": true}, {"number": 126, "content": "    ", "is_target": false}, {"number": 127, "content": "    /// Destructor", "is_target": false}, {"number": 128, "content": "    virtual ~CASox();", "is_target": false}, {"number": 129, "content": "    ", "is_target": false}, {"number": 130, "content": "    /// Initializes the controller", "is_target": false}]}, "27": {"lines": [{"number": 126, "content": "    ", "is_target": false}, {"number": 127, "content": "    /// Destructor", "is_target": false}, {"number": 128, "content": "    virtual ~CASox();", "is_target": false}, {"number": 129, "content": "    ", "is_target": false}, {"number": 130, "content": "    /// Initializes the controller", "is_target": false}, {"number": 131, "content": "    virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 132, "content": "    ", "is_target": false}, {"number": 133, "content": "    /// Performs one step without learning", "is_target": false}, {"number": 134, "content": "    virtual void stepNoLearning(const sensor* sensors, int number_sensors,", "is_target": false}, {"number": 135, "content": "                               motor* motors, int number_motors);", "is_target": false}, {"number": 136, "content": "    ", "is_target": false}]}, "28": {"lines": [{"number": 129, "content": "    ", "is_target": false}, {"number": 130, "content": "    /// Initializes the controller", "is_target": false}, {"number": 131, "content": "    virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 132, "content": "    ", "is_target": false}, {"number": 133, "content": "    /// Performs one step without learning", "is_target": false}, {"number": 134, "content": "    virtual void stepNoLearning(const sensor* sensors, int number_sensors,", "is_target": true}, {"number": 135, "content": "                               motor* motors, int number_motors);", "is_target": false}, {"number": 136, "content": "    ", "is_target": false}, {"number": 137, "content": "    /// Performs one step with learning", "is_target": false}, {"number": 138, "content": "    virtual void step(const sensor* sensors, int number_sensors,", "is_target": false}, {"number": 139, "content": "                     motor* motors, int number_motors);", "is_target": false}]}, "29": {"lines": [{"number": 133, "content": "    /// Performs one step without learning", "is_target": false}, {"number": 134, "content": "    virtual void stepNoLearning(const sensor* sensors, int number_sensors,", "is_target": false}, {"number": 135, "content": "                               motor* motors, int number_motors);", "is_target": false}, {"number": 136, "content": "    ", "is_target": false}, {"number": 137, "content": "    /// Performs one step with learning", "is_target": false}, {"number": 138, "content": "    virtual void step(const sensor* sensors, int number_sensors,", "is_target": true}, {"number": 139, "content": "                     motor* motors, int number_motors);", "is_target": false}, {"number": 140, "content": "    ", "is_target": false}, {"number": 141, "content": "    /// Returns the number of sensors", "is_target": false}, {"number": 142, "content": "    virtual int getSensorNumber() const override { return number_sensors; }", "is_target": false}, {"number": 143, "content": "    ", "is_target": false}]}, "31": {"lines": [{"number": 89, "content": "        conf.factorh = 1.0;", "is_target": false}, {"number": 90, "content": "        return conf;", "is_target": false}, {"number": 91, "content": "    }", "is_target": false}, {"number": 92, "content": "    ", "is_target": false}, {"number": 93, "content": "    /// Constructor", "is_target": false}, {"number": 94, "content": "    AHSox(const AHSoxConf& conf = getDefaultConf());", "is_target": true}, {"number": 95, "content": "    ", "is_target": false}, {"number": 96, "content": "    /// Destructor", "is_target": false}, {"number": 97, "content": "    virtual ~AHSox();", "is_target": false}, {"number": 98, "content": "    ", "is_target": false}, {"number": 99, "content": "    /// Initializes the controller", "is_target": false}]}, "32": {"lines": [{"number": 95, "content": "    ", "is_target": false}, {"number": 96, "content": "    /// Destructor", "is_target": false}, {"number": 97, "content": "    virtual ~AHSox();", "is_target": false}, {"number": 98, "content": "    ", "is_target": false}, {"number": 99, "content": "    /// Initializes the controller", "is_target": false}, {"number": 100, "content": "    virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 101, "content": "    ", "is_target": false}, {"number": 102, "content": "    /// Performs one step without learning", "is_target": false}, {"number": 103, "content": "    virtual void stepNoLearning(const sensor* sensors, int number_sensors,", "is_target": false}, {"number": 104, "content": "                               motor* motors, int number_motors);", "is_target": false}, {"number": 105, "content": "    ", "is_target": false}]}, "33": {"lines": [{"number": 98, "content": "    ", "is_target": false}, {"number": 99, "content": "    /// Initializes the controller", "is_target": false}, {"number": 100, "content": "    virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 101, "content": "    ", "is_target": false}, {"number": 102, "content": "    /// Performs one step without learning", "is_target": false}, {"number": 103, "content": "    virtual void stepNoLearning(const sensor* sensors, int number_sensors,", "is_target": true}, {"number": 104, "content": "                               motor* motors, int number_motors);", "is_target": false}, {"number": 105, "content": "    ", "is_target": false}, {"number": 106, "content": "    /// Performs one step with learning", "is_target": false}, {"number": 107, "content": "    virtual void step(const sensor* sensors, int number_sensors,", "is_target": false}, {"number": 108, "content": "                     motor* motors, int number_motors);", "is_target": false}]}, "34": {"lines": [{"number": 102, "content": "    /// Performs one step without learning", "is_target": false}, {"number": 103, "content": "    virtual void stepNoLearning(const sensor* sensors, int number_sensors,", "is_target": false}, {"number": 104, "content": "                               motor* motors, int number_motors);", "is_target": false}, {"number": 105, "content": "    ", "is_target": false}, {"number": 106, "content": "    /// Performs one step with learning", "is_target": false}, {"number": 107, "content": "    virtual void step(const sensor* sensors, int number_sensors,", "is_target": true}, {"number": 108, "content": "                     motor* motors, int number_motors);", "is_target": false}, {"number": 109, "content": "    ", "is_target": false}, {"number": 110, "content": "    /// Returns the number of sensors", "is_target": false}, {"number": 111, "content": "    virtual int getSensorNumber() const override { return number_sensors; }", "is_target": false}, {"number": 112, "content": "    ", "is_target": false}]}, "35": {"lines": [{"number": 269, "content": "    }", "is_target": false}, {"number": 270, "content": "    ", "is_target": false}, {"number": 271, "content": "    // Normalize", "is_target": false}, {"number": 272, "content": "    if (sumExp > 0) {", "is_target": false}, {"number": 273, "content": "        for (double& gate : gates) {", "is_target": false}, {"number": 274, "content": "            gate /= sumExp;", "is_target": true}, {"number": 275, "content": "        }", "is_target": false}, {"number": 276, "content": "    }", "is_target": false}, {"number": 277, "content": "    ", "is_target": false}, {"number": 278, "content": "    return gates;", "is_target": false}, {"number": 279, "content": "}", "is_target": false}]}, "37": {"lines": [{"number": 28, "content": "class RingBuffer{", "is_target": false}, {"number": 29, "content": "public:", "is_target": false}, {"number": 30, "content": "  RingBuffer()", "is_target": false}, {"number": 31, "content": "    : buffersize(0) {}", "is_target": false}, {"number": 32, "content": "", "is_target": false}, {"number": 33, "content": "  RingBuffer(int size)", "is_target": true}, {"number": 34, "content": "    : buffersize(size) {", "is_target": false}, {"number": 35, "content": "    buffer.resize(size);", "is_target": false}, {"number": 36, "content": "  }", "is_target": false}, {"number": 37, "content": "", "is_target": false}, {"number": 38, "content": "  /// sets size of buffer and initializes buffer elements.", "is_target": false}]}, "38": {"lines": [{"number": 56, "content": "  AbstractController(const std::string& name, const std::string& revision)", "is_target": false}, {"number": 57, "content": "    : Configurable(name, revision)", "is_target": false}, {"number": 58, "content": "    , Inspectable(name) {}", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  /// virtual destructor", "is_target": false}, {"number": 61, "content": "  ~AbstractController() = default;", "is_target": true}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "  /** initialisation of the controller with the given sensor/ motornumber", "is_target": false}, {"number": 64, "content": "      Must be called before use. The random generator is optional.", "is_target": false}, {"number": 65, "content": "  */", "is_target": false}, {"number": 66, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr) = 0;", "is_target": false}]}, "39": {"lines": [{"number": 70, "content": "        , number_sensors(0)", "is_target": false}, {"number": 71, "content": "        , number_motors(0)", "is_target": false}, {"number": 72, "content": "        , t(0) {}", "is_target": false}, {"number": 73, "content": "    ", "is_target": false}, {"number": 74, "content": "    /// Destructor", "is_target": false}, {"number": 75, "content": "    virtual ~ControllerBase() = default;", "is_target": true}, {"number": 76, "content": "    ", "is_target": false}, {"number": 77, "content": "    /// Basic initialization - must be called by derived classes", "is_target": false}, {"number": 78, "content": "    virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr) override {", "is_target": false}, {"number": 79, "content": "        number_sensors = sensornumber;", "is_target": false}, {"number": 80, "content": "        number_motors = motornumber;", "is_target": false}]}, "40": {"lines": [{"number": 71, "content": " */", "is_target": false}, {"number": 72, "content": "class DEP : public lpzrobots::BufferedControllerBase<150>, public Storeable {", "is_target": false}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "public:", "is_target": false}, {"number": 75, "content": "  explicit DEP(const DEPConf& conf = getDefaultConf());", "is_target": false}, {"number": 76, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "  virtual ~DEP();", "is_target": false}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "  static DEPConf getDefaultConf() {", "is_target": false}, {"number": 81, "content": "    DEPConf conf;", "is_target": false}]}, "41": {"lines": [{"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "public:", "is_target": false}, {"number": 75, "content": "  explicit DEP(const DEPConf& conf = getDefaultConf());", "is_target": false}, {"number": 76, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "  virtual ~DEP();", "is_target": true}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "  static DEPConf getDefaultConf() {", "is_target": false}, {"number": 81, "content": "    DEPConf conf;", "is_target": false}, {"number": 82, "content": "    conf.learningRule = DEPConf::DEPRule;", "is_target": false}, {"number": 83, "content": "    conf.initFeedbackStrength = 0;", "is_target": false}]}, "42": {"lines": [{"number": 114, "content": "                                 const motor*,", "is_target": false}, {"number": 115, "content": "                                 int number_motors);", "is_target": false}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "  /***** STOREABLE ****/", "is_target": false}, {"number": 118, "content": "  /** stores the controller values to a given file. */", "is_target": false}, {"number": 119, "content": "  virtual bool store(FILE* f)  const;", "is_target": true}, {"number": 120, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 121, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "  // accessors to matrices", "is_target": false}, {"number": 124, "content": "  virtual matrix::Matrix getA() {", "is_target": false}]}, "43": {"lines": [{"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "  /***** STOREABLE ****/", "is_target": false}, {"number": 118, "content": "  /** stores the controller values to a given file. */", "is_target": false}, {"number": 119, "content": "  virtual bool store(FILE* f)  const;", "is_target": false}, {"number": 120, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 121, "content": "  virtual bool restore(FILE* f);", "is_target": true}, {"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "  // accessors to matrices", "is_target": false}, {"number": 124, "content": "  virtual matrix::Matrix getA() {", "is_target": false}, {"number": 125, "content": "    return A;", "is_target": false}, {"number": 126, "content": "  }", "is_target": false}]}, "44": {"lines": [{"number": 219, "content": "        // Enhanced uncertainty estimation", "is_target": false}, {"number": 220, "content": "        if (model.errorHistory.size() > 5) {", "is_target": false}, {"number": 221, "content": "            // Basic statistics", "is_target": false}, {"number": 222, "content": "            double mean = 0;", "is_target": false}, {"number": 223, "content": "            for (double e : model.errorHistory) {", "is_target": false}, {"number": 224, "content": "                mean += e;", "is_target": true}, {"number": 225, "content": "            }", "is_target": false}, {"number": 226, "content": "            mean /= model.errorHistory.size();", "is_target": false}, {"number": 227, "content": "            ", "is_target": false}, {"number": 228, "content": "            double variance = 0;", "is_target": false}, {"number": 229, "content": "            for (double e : model.errorHistory) {", "is_target": false}]}, "45": {"lines": [{"number": 225, "content": "            }", "is_target": false}, {"number": 226, "content": "            mean /= model.errorHistory.size();", "is_target": false}, {"number": 227, "content": "            ", "is_target": false}, {"number": 228, "content": "            double variance = 0;", "is_target": false}, {"number": 229, "content": "            for (double e : model.errorHistory) {", "is_target": false}, {"number": 230, "content": "                variance += (e - mean) * (e - mean);", "is_target": true}, {"number": 231, "content": "            }", "is_target": false}, {"number": 232, "content": "            variance /= model.errorHistory.size();", "is_target": false}, {"number": 233, "content": "            ", "is_target": false}, {"number": 234, "content": "            // Calculate trend (improving or worsening)", "is_target": false}, {"number": 235, "content": "            double trend = 0;", "is_target": false}]}, "46": {"lines": [{"number": 276, "content": "    ", "is_target": false}, {"number": 277, "content": "    // Normalize weights", "is_target": false}, {"number": 278, "content": "    if (conf.useWeightedCombination) {", "is_target": false}, {"number": 279, "content": "        double sum_weights = 0;", "is_target": false}, {"number": 280, "content": "        for (const ForwardModel& model : models) {", "is_target": false}, {"number": 281, "content": "            sum_weights += model.weight;", "is_target": true}, {"number": 282, "content": "        }", "is_target": false}, {"number": 283, "content": "        if (sum_weights > 0) {", "is_target": false}, {"number": 284, "content": "            for (ForwardModel& model : models) {", "is_target": false}, {"number": 285, "content": "                model.weight /= sum_weights;", "is_target": false}, {"number": 286, "content": "            }", "is_target": false}]}, "47": {"lines": [{"number": 456, "content": "double AHSox::getAverageUncertainty() const {", "is_target": false}, {"number": 457, "content": "    if (models.empty()) return 0.0;", "is_target": false}, {"number": 458, "content": "    ", "is_target": false}, {"number": 459, "content": "    double sum = 0.0;", "is_target": false}, {"number": 460, "content": "    for (const auto& model : models) {", "is_target": false}, {"number": 461, "content": "        sum += model.uncertainty;", "is_target": true}, {"number": 462, "content": "    }", "is_target": false}, {"number": 463, "content": "    return sum / models.size();", "is_target": false}, {"number": 464, "content": "}", "is_target": false}, {"number": 465, "content": "", "is_target": false}, {"number": 466, "content": "Matrix AHSox::getBufferedSensor(int offset) const {", "is_target": false}]}, "51": {"lines": [{"number": 32, "content": "class SensorMotorInfo{", "is_target": false}, {"number": 33, "content": "public:", "is_target": false}, {"number": 34, "content": "  enum Type { Continuous, Discrete, Binary };", "is_target": false}, {"number": 35, "content": "  enum Quantity { Position, Velocity, Force, Distance, Other };", "is_target": false}, {"number": 36, "content": "", "is_target": false}, {"number": 37, "content": "  SensorMotorInfo(const std::string& name = std::string())", "is_target": true}, {"number": 38, "content": "    : name(name)", "is_target": false}, {"number": 39, "content": "    , min(-1.0)", "is_target": false}, {"number": 40, "content": "    , max(1.0)", "is_target": false}, {"number": 41, "content": "    , index(0)", "is_target": false}, {"number": 42, "content": "    , quantity(Position)", "is_target": false}]}, "52": {"lines": [{"number": 56, "content": "  AbstractController(const std::string& name, const std::string& revision)", "is_target": false}, {"number": 57, "content": "    : Configurable(name, revision)", "is_target": false}, {"number": 58, "content": "    , Inspectable(name) {}", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  /// virtual destructor", "is_target": false}, {"number": 61, "content": "  ~AbstractController() = default;", "is_target": true}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "  /** initialisation of the controller with the given sensor/ motornumber", "is_target": false}, {"number": 64, "content": "      Must be called before use. The random generator is optional.", "is_target": false}, {"number": 65, "content": "  */", "is_target": false}, {"number": 66, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr) = 0;", "is_target": false}]}, "53": {"lines": [{"number": 48, "content": "            int eligibility,", "is_target": false}, {"number": 49, "content": "            bool random_initQ = false,", "is_target": false}, {"number": 50, "content": "            bool useSARSA = false,", "is_target": false}, {"number": 51, "content": "            int tau = 1000);", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "  virtual ~QLearning();", "is_target": true}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "  /** initialisation with the given number of action and states", "is_target": false}, {"number": 56, "content": "      @param actionDim number of actions", "is_target": false}, {"number": 57, "content": "      @param stateDim number of states", "is_target": false}, {"number": 58, "content": "      @param unit_map if 0 the parametes are choosen randomly.", "is_target": false}]}, "54": {"lines": [{"number": 114, "content": "  /// returns q table (mxn) == (states x actions)", "is_target": false}, {"number": 115, "content": "  virtual const matrix::Matrix& getQ() const {", "is_target": false}, {"number": 116, "content": "    return Q;", "is_target": false}, {"number": 117, "content": "  };", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "  virtual bool store(FILE* f) const;", "is_target": true}, {"number": 120, "content": "", "is_target": false}, {"number": 121, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "protected:", "is_target": false}, {"number": 124, "content": "  double eps;", "is_target": false}]}, "55": {"lines": [{"number": 116, "content": "    return Q;", "is_target": false}, {"number": 117, "content": "  };", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 120, "content": "", "is_target": false}, {"number": 121, "content": "  virtual bool restore(FILE* f);", "is_target": true}, {"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "protected:", "is_target": false}, {"number": 124, "content": "  double eps;", "is_target": false}, {"number": 125, "content": "  double discount;", "is_target": false}, {"number": 126, "content": "  double exploration;", "is_target": false}]}, "57": {"lines": [{"number": 49, "content": " */", "is_target": false}, {"number": 50, "content": "class ClassicReinforce : public AbstractController {", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "public:", "is_target": false}, {"number": 53, "content": "  explicit ClassicReinforce(ClassicReinforceConf conf = getDefaultConf());", "is_target": false}, {"number": 54, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "  virtual ~ClassicReinforce();", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 59, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "58": {"lines": [{"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "public:", "is_target": false}, {"number": 53, "content": "  explicit ClassicReinforce(ClassicReinforceConf conf = getDefaultConf());", "is_target": false}, {"number": 54, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "  virtual ~ClassicReinforce();", "is_target": true}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 59, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 60, "content": "    return number_sensors;", "is_target": false}, {"number": 61, "content": "  }", "is_target": false}]}, "59": {"lines": [{"number": 64, "content": "    return number_motors;", "is_target": false}, {"number": 65, "content": "  }", "is_target": false}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 68, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 69, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 70, "content": "", "is_target": false}, {"number": 71, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 72, "content": "  virtual void stepNoLearning(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "  // !!!!!!!!!!!!!!!!!!! MISC STUFF !!!!!!!!", "is_target": false}]}, "60": {"lines": [{"number": 67, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 68, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 69, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 70, "content": "", "is_target": false}, {"number": 71, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 72, "content": "  virtual void stepNoLearning(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "  // !!!!!!!!!!!!!!!!!!! MISC STUFF !!!!!!!!", "is_target": false}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "  /** enables/disables manual control, action_ is the sat network number to be used", "is_target": false}, {"number": 77, "content": "      if mControl is false, action is ignored", "is_target": false}]}, "61": {"lines": [{"number": 77, "content": "      if mControl is false, action is ignored", "is_target": false}, {"number": 78, "content": "   */", "is_target": false}, {"number": 79, "content": "  void setManualControl(bool mControl, int action_ = 0);", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  /************** CONFIGURABLE ********************************/", "is_target": false}, {"number": 82, "content": "  virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  /**** STOREABLE ****/", "is_target": false}, {"number": 85, "content": "  /** stores the controller values to a given file. */", "is_target": false}, {"number": 86, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 87, "content": "  /** loads the controller values from a given file. */", "is_target": false}]}, "62": {"lines": [{"number": 86, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 87, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 88, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "  /**** INSPECTABLE ****/", "is_target": false}, {"number": 91, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": true}, {"number": 92, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 93, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 94, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "  static ClassicReinforceConf getDefaultConf() {", "is_target": false}]}, "63": {"lines": [{"number": 87, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 88, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "  /**** INSPECTABLE ****/", "is_target": false}, {"number": 91, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 92, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": true}, {"number": 93, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 94, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "  static ClassicReinforceConf getDefaultConf() {", "is_target": false}, {"number": 97, "content": "    ClassicReinforceConf c;", "is_target": false}]}, "64": {"lines": [{"number": 88, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "  /**** INSPECTABLE ****/", "is_target": false}, {"number": 91, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 92, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 93, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": true}, {"number": 94, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "  static ClassicReinforceConf getDefaultConf() {", "is_target": false}, {"number": 97, "content": "    ClassicReinforceConf c;", "is_target": false}, {"number": 98, "content": "    c.buffersize = 10;", "is_target": false}]}, "65": {"lines": [{"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "  /**** INSPECTABLE ****/", "is_target": false}, {"number": 91, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 92, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 93, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 94, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": true}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "  static ClassicReinforceConf getDefaultConf() {", "is_target": false}, {"number": 97, "content": "    ClassicReinforceConf c;", "is_target": false}, {"number": 98, "content": "    c.buffersize = 10;", "is_target": false}, {"number": 99, "content": "    // c.numContext = 0;", "is_target": false}]}, "66": {"lines": [{"number": 37, "content": "  // difficulties", "is_target": false}, {"number": 38, "content": "  // AbstractModel() {};", "is_target": false}, {"number": 39, "content": "  AbstractModel(const std::string& name, const std::string& revision)", "is_target": false}, {"number": 40, "content": "    : Configurable(name, revision)", "is_target": false}, {"number": 41, "content": "    , Inspectable(name) {}", "is_target": false}, {"number": 42, "content": "  virtual ~AbstractModel() {};", "is_target": true}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "  /** initialisation of the network with the given number of input and output units", "is_target": false}, {"number": 45, "content": "      @param inputDim length of input vector", "is_target": false}, {"number": 46, "content": "      @param outputDim length of output vector", "is_target": false}, {"number": 47, "content": "      @param unit_map if 0 the parametes are choosen randomly.", "is_target": false}]}, "67": {"lines": [{"number": 41, "content": "  */", "is_target": false}, {"number": 42, "content": "  MultiLayerFFNN(double eps,", "is_target": false}, {"number": 43, "content": "                 const std::vector<Layer>& layers,", "is_target": false}, {"number": 44, "content": "                 bool useBypass = false,", "is_target": false}, {"number": 45, "content": "                 bool someInternalParams = true);", "is_target": false}, {"number": 46, "content": "  virtual ~MultiLayerFFNN() {}", "is_target": true}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "  /** initialisation of the network with the given number of input and output units.", "is_target": false}, {"number": 49, "content": "      The dimensionality of the ouputlayer is automatically adjusted.", "is_target": false}, {"number": 50, "content": "      @param unit_map defines the approximate response of the network", "is_target": false}, {"number": 51, "content": "       after initialisation (if unit_map=1 the weights are unit matrices).", "is_target": false}]}, "68": {"lines": [{"number": 49, "content": "      The dimensionality of the ouputlayer is automatically adjusted.", "is_target": false}, {"number": 50, "content": "      @param unit_map defines the approximate response of the network", "is_target": false}, {"number": 51, "content": "       after initialisation (if unit_map=1 the weights are unit matrices).", "is_target": false}, {"number": 52, "content": "      @param randGen pointer to random generator, if 0 an new one is used", "is_target": false}, {"number": 53, "content": "   */", "is_target": false}, {"number": 54, "content": "  virtual void init(unsigned int inputDim,", "is_target": true}, {"number": 55, "content": "                    unsigned int outputDim,", "is_target": false}, {"number": 56, "content": "                    double unit_map = 0.0,", "is_target": false}, {"number": 57, "content": "                    RandGen* randGen = nullptr);", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  /// passive processing of the input", "is_target": false}]}, "69": {"lines": [{"number": 55, "content": "                    unsigned int outputDim,", "is_target": false}, {"number": 56, "content": "                    double unit_map = 0.0,", "is_target": false}, {"number": 57, "content": "                    RandGen* randGen = nullptr);", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  /// passive processing of the input", "is_target": false}, {"number": 60, "content": "  virtual const matrix::Matrix process(const matrix::Matrix& input);", "is_target": true}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  /** performs learning and returns the network output before learning", "is_target": false}, {"number": 63, "content": "      (process should be called before) */", "is_target": false}, {"number": 64, "content": "  virtual const matrix::Matrix learn(const matrix::Matrix& input,", "is_target": false}, {"number": 65, "content": "                                     const matrix::Matrix& nom_output,", "is_target": false}]}, "70": {"lines": [{"number": 59, "content": "  /// passive processing of the input", "is_target": false}, {"number": 60, "content": "  virtual const matrix::Matrix process(const matrix::Matrix& input);", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  /** performs learning and returns the network output before learning", "is_target": false}, {"number": 63, "content": "      (process should be called before) */", "is_target": false}, {"number": 64, "content": "  virtual const matrix::Matrix learn(const matrix::Matrix& input,", "is_target": true}, {"number": 65, "content": "                                     const matrix::Matrix& nom_output,", "is_target": false}, {"number": 66, "content": "                                     double learnRateFactor = 1) ;", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  /** response matrix of neural network at given input", "is_target": false}, {"number": 69, "content": "", "is_target": false}]}, "71": {"lines": [{"number": 80, "content": "      \\f[o+\\xi = \\psi(i+v)\\f]", "is_target": false}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "      The result is a vector of dimension inputdim.", "is_target": false}, {"number": 83, "content": "      ATTENTION: input is ignored! use process before!", "is_target": false}, {"number": 84, "content": "   */", "is_target": false}, {"number": 85, "content": "  virtual const matrix::Matrix inversion(const matrix::Matrix& input,", "is_target": true}, {"number": 86, "content": "                                         const matrix::Matrix& xsi)  const;", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  /// returns the number of input neurons", "is_target": false}, {"number": 89, "content": "  virtual unsigned int getInputDim() const override {", "is_target": false}, {"number": 90, "content": "    return weights[0].getN();", "is_target": false}]}, "72": {"lines": [{"number": 99, "content": "    assert(layer < layers.size());", "is_target": false}, {"number": 100, "content": "    return ys[layer];", "is_target": false}, {"number": 101, "content": "  }", "is_target": false}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "  /// damps the weights and the biases by multiplying (1-damping)", "is_target": false}, {"number": 104, "content": "  virtual void damp(double damping);", "is_target": true}, {"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "  // total number of layers (1 means no hidden units)", "is_target": false}, {"number": 107, "content": "  virtual unsigned int getLayerNum() const {", "is_target": false}, {"number": 108, "content": "    return layers.size();", "is_target": false}, {"number": 109, "content": "  }", "is_target": false}]}, "73": {"lines": [{"number": 144, "content": "    return bias[of_layer];", "is_target": false}, {"number": 145, "content": "  }", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 148, "content": "  /// stores the layer binary into file stream", "is_target": false}, {"number": 149, "content": "  bool store(FILE* f)  const;", "is_target": true}, {"number": 150, "content": "  /// restores the layer binary from file stream", "is_target": false}, {"number": 151, "content": "  bool restore(FILE* f);", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "  /// writes the layer ASCII into file stream (not in the storable interface)", "is_target": false}, {"number": 154, "content": "  bool write(FILE* f) const;", "is_target": false}]}, "74": {"lines": [{"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 148, "content": "  /// stores the layer binary into file stream", "is_target": false}, {"number": 149, "content": "  bool store(FILE* f)  const;", "is_target": false}, {"number": 150, "content": "  /// restores the layer binary from file stream", "is_target": false}, {"number": 151, "content": "  bool restore(FILE* f);", "is_target": true}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "  /// writes the layer ASCII into file stream (not in the storable interface)", "is_target": false}, {"number": 154, "content": "  bool write(FILE* f) const;", "is_target": false}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "  /************** Inspectable **********************************/", "is_target": false}]}, "75": {"lines": [{"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "  /// writes the layer ASCII into file stream (not in the storable interface)", "is_target": false}, {"number": 154, "content": "  bool write(FILE* f) const;", "is_target": false}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "  /************** Inspectable **********************************/", "is_target": false}, {"number": 157, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": true}, {"number": 158, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 159, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 160, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "  virtual void setSomeInternalParams(bool someInternalParams) {", "is_target": false}]}, "76": {"lines": [{"number": 153, "content": "  /// writes the layer ASCII into file stream (not in the storable interface)", "is_target": false}, {"number": 154, "content": "  bool write(FILE* f) const;", "is_target": false}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "  /************** Inspectable **********************************/", "is_target": false}, {"number": 157, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 158, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": true}, {"number": 159, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 160, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "  virtual void setSomeInternalParams(bool someInternalParams) {", "is_target": false}, {"number": 163, "content": "    assert(!initialised);", "is_target": false}]}, "77": {"lines": [{"number": 154, "content": "  bool write(FILE* f) const;", "is_target": false}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "  /************** Inspectable **********************************/", "is_target": false}, {"number": 157, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 158, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 159, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": true}, {"number": 160, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "  virtual void setSomeInternalParams(bool someInternalParams) {", "is_target": false}, {"number": 163, "content": "    assert(!initialised);", "is_target": false}, {"number": 164, "content": "    this->someInternalParams = someInternalParams;", "is_target": false}]}, "78": {"lines": [{"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "  /************** Inspectable **********************************/", "is_target": false}, {"number": 157, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 158, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 159, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 160, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": true}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "  virtual void setSomeInternalParams(bool someInternalParams) {", "is_target": false}, {"number": 163, "content": "    assert(!initialised);", "is_target": false}, {"number": 164, "content": "    this->someInternalParams = someInternalParams;", "is_target": false}, {"number": 165, "content": "  }", "is_target": false}]}, "79": {"lines": [{"number": 74, "content": "    , useJordan(useJordan) {", "is_target": false}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "    initialised = false;", "is_target": false}, {"number": 77, "content": "  }", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  virtual ~Elman() {}", "is_target": true}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  /// initialisation of the network with the given number of input and output units", "is_target": false}, {"number": 82, "content": "  virtual void init(unsigned int inputDim,", "is_target": false}, {"number": 83, "content": "                    unsigned int outputDim,", "is_target": false}, {"number": 84, "content": "                    double unit_map = 0.0,", "is_target": false}]}, "80": {"lines": [{"number": 45, "content": " */", "is_target": false}, {"number": 46, "content": "class DerInf : public InvertMotorController, public Storeable {", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "public:", "is_target": false}, {"number": 49, "content": "  explicit DerInf(const DerInfConf& conf = getDefaultConf());", "is_target": false}, {"number": 50, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randg);", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  virtual ~DerInf();", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 55, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "81": {"lines": [{"number": 77, "content": "  }", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  virtual ~Elman() {}", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  /// initialisation of the network with the given number of input and output units", "is_target": false}, {"number": 82, "content": "  virtual void init(unsigned int inputDim,", "is_target": true}, {"number": 83, "content": "                    unsigned int outputDim,", "is_target": false}, {"number": 84, "content": "                    double unit_map = 0.0,", "is_target": false}, {"number": 85, "content": "                    RandGen* randGen = nullptr);", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "  /** passive processing of the input", "is_target": false}]}, "82": {"lines": [{"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "public:", "is_target": false}, {"number": 49, "content": "  explicit DerInf(const DerInfConf& conf = getDefaultConf());", "is_target": false}, {"number": 50, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randg);", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  virtual ~DerInf();", "is_target": true}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 55, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 56, "content": "    return number_sensors;", "is_target": false}, {"number": 57, "content": "  }", "is_target": false}]}, "83": {"lines": [{"number": 85, "content": "                    RandGen* randGen = nullptr);", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "  /** passive processing of the input", "is_target": false}, {"number": 88, "content": "      (this will be different for every input, since it is a recurrent network)", "is_target": false}, {"number": 89, "content": "  */", "is_target": false}, {"number": 90, "content": "  virtual const matrix::Matrix process(const matrix::Matrix& input);", "is_target": true}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "  /// performs learning and returns the network output before learning", "is_target": false}, {"number": 93, "content": "  virtual const matrix::Matrix learn(const matrix::Matrix& input,", "is_target": false}, {"number": 94, "content": "                                     const matrix::Matrix& nom_output,", "is_target": false}, {"number": 95, "content": "                                     double learnRateFactor = 1) ;", "is_target": false}]}, "84": {"lines": [{"number": 60, "content": "    return number_motors;", "is_target": false}, {"number": 61, "content": "  }", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 64, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 65, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 68, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 69, "content": "                              int number_sensors,", "is_target": false}, {"number": 70, "content": "                              motor*,", "is_target": false}]}, "85": {"lines": [{"number": 88, "content": "      (this will be different for every input, since it is a recurrent network)", "is_target": false}, {"number": 89, "content": "  */", "is_target": false}, {"number": 90, "content": "  virtual const matrix::Matrix process(const matrix::Matrix& input);", "is_target": false}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "  /// performs learning and returns the network output before learning", "is_target": false}, {"number": 93, "content": "  virtual const matrix::Matrix learn(const matrix::Matrix& input,", "is_target": true}, {"number": 94, "content": "                                     const matrix::Matrix& nom_output,", "is_target": false}, {"number": 95, "content": "                                     double learnRateFactor = 1) ;", "is_target": false}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "  /** determines the weight and bias updates", "is_target": false}, {"number": 98, "content": "   */", "is_target": false}]}, "86": {"lines": [{"number": 63, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 64, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 65, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 68, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 69, "content": "                              int number_sensors,", "is_target": false}, {"number": 70, "content": "                              motor*,", "is_target": false}, {"number": 71, "content": "                              int number_motors);", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  /**************  STOREABLE **********************************/", "is_target": false}]}, "87": {"lines": [{"number": 115, "content": "", "is_target": false}, {"number": 116, "content": "  /* Is implemented in multilayerfnn", "is_target": false}, {"number": 117, "content": "     virtual const matrix::Matrix response(const matrix::Matrix& input) const override;", "is_target": false}, {"number": 118, "content": "   */", "is_target": false}, {"number": 119, "content": "", "is_target": false}, {"number": 120, "content": "  void damp(double damping);", "is_target": true}, {"number": 121, "content": "", "is_target": false}, {"number": 122, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 123, "content": "  /// stores the layer binary into file stream", "is_target": false}, {"number": 124, "content": "  bool store(FILE* f)  const;", "is_target": false}, {"number": 125, "content": "  /// restores the layer binary from file stream", "is_target": false}]}, "88": {"lines": [{"number": 70, "content": "                              motor*,", "is_target": false}, {"number": 71, "content": "                              int number_motors);", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 74, "content": "  /** stores the controller values to a given file. */", "is_target": false}, {"number": 75, "content": "  virtual bool store(FILE* f)  const;", "is_target": true}, {"number": 76, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 77, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 80, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}]}, "89": {"lines": [{"number": 119, "content": "", "is_target": false}, {"number": 120, "content": "  void damp(double damping);", "is_target": false}, {"number": 121, "content": "", "is_target": false}, {"number": 122, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 123, "content": "  /// stores the layer binary into file stream", "is_target": false}, {"number": 124, "content": "  bool store(FILE* f)  const;", "is_target": true}, {"number": 125, "content": "  /// restores the layer binary from file stream", "is_target": false}, {"number": 126, "content": "  bool restore(FILE* f);", "is_target": false}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "  /************** CONFIGURABLE INTERFACE ************************/", "is_target": false}, {"number": 129, "content": "  virtual std::string getName() const noexcept override {", "is_target": false}]}, "90": {"lines": [{"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 74, "content": "  /** stores the controller values to a given file. */", "is_target": false}, {"number": 75, "content": "  virtual bool store(FILE* f)  const;", "is_target": false}, {"number": 76, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 77, "content": "  virtual bool restore(FILE* f);", "is_target": true}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 80, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 81, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 82, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}]}, "91": {"lines": [{"number": 121, "content": "", "is_target": false}, {"number": 122, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 123, "content": "  /// stores the layer binary into file stream", "is_target": false}, {"number": 124, "content": "  bool store(FILE* f)  const;", "is_target": false}, {"number": 125, "content": "  /// restores the layer binary from file stream", "is_target": false}, {"number": 126, "content": "  bool restore(FILE* f);", "is_target": true}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "  /************** CONFIGURABLE INTERFACE ************************/", "is_target": false}, {"number": 129, "content": "  virtual std::string getName() const noexcept override {", "is_target": false}, {"number": 130, "content": "    return std::string(\"elmanNN\");", "is_target": false}, {"number": 131, "content": "  }", "is_target": false}]}, "92": {"lines": [{"number": 50, "content": " */", "is_target": false}, {"number": 51, "content": "class DerController : public InvertMotorController {", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "public:", "is_target": false}, {"number": 54, "content": "  explicit DerController(const DerControllerConf& conf = getDefaultConf());", "is_target": false}, {"number": 55, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "  virtual ~DerController();", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 60, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "93": {"lines": [{"number": 75, "content": "  virtual bool store(FILE* f)  const;", "is_target": false}, {"number": 76, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 77, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 80, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": true}, {"number": 81, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 82, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 83, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  static DerInfConf getDefaultConf() {", "is_target": false}]}, "94": {"lines": [{"number": 129, "content": "  virtual std::string getName() const noexcept override {", "is_target": false}, {"number": 130, "content": "    return std::string(\"elmanNN\");", "is_target": false}, {"number": 131, "content": "  }", "is_target": false}, {"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "  /************** Inspectable INTERFACE ************************/", "is_target": false}, {"number": 134, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": true}, {"number": 135, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 136, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 137, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "protected:", "is_target": false}]}, "95": {"lines": [{"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "public:", "is_target": false}, {"number": 54, "content": "  explicit DerController(const DerControllerConf& conf = getDefaultConf());", "is_target": false}, {"number": 55, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "  virtual ~DerController();", "is_target": true}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 60, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 61, "content": "    return number_sensors;", "is_target": false}, {"number": 62, "content": "  }", "is_target": false}]}, "96": {"lines": [{"number": 76, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 77, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 80, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 81, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": true}, {"number": 82, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 83, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  static DerInfConf getDefaultConf() {", "is_target": false}, {"number": 86, "content": "    DerInfConf c;", "is_target": false}]}, "97": {"lines": [{"number": 130, "content": "    return std::string(\"elmanNN\");", "is_target": false}, {"number": 131, "content": "  }", "is_target": false}, {"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "  /************** Inspectable INTERFACE ************************/", "is_target": false}, {"number": 134, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 135, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": true}, {"number": 136, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 137, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "protected:", "is_target": false}, {"number": 140, "content": "  matrix::Matrix elmanWeights;", "is_target": false}]}, "98": {"lines": [{"number": 65, "content": "    return number_motors;", "is_target": false}, {"number": 66, "content": "  }", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 69, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 70, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 73, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 74, "content": "                              int number_sensors,", "is_target": false}, {"number": 75, "content": "                              motor*,", "is_target": false}]}, "99": {"lines": [{"number": 77, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 80, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 81, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 82, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": true}, {"number": 83, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  static DerInfConf getDefaultConf() {", "is_target": false}, {"number": 86, "content": "    DerInfConf c;", "is_target": false}, {"number": 87, "content": "    c.buffersize = 50;", "is_target": false}]}, "100": {"lines": [{"number": 131, "content": "  }", "is_target": false}, {"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "  /************** Inspectable INTERFACE ************************/", "is_target": false}, {"number": 134, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 135, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 136, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": true}, {"number": 137, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "protected:", "is_target": false}, {"number": 140, "content": "  matrix::Matrix elmanWeights;", "is_target": false}, {"number": 141, "content": "  matrix::Matrix elmanContext;", "is_target": false}]}, "101": {"lines": [{"number": 68, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 69, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 70, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 73, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 74, "content": "                              int number_sensors,", "is_target": false}, {"number": 75, "content": "                              motor*,", "is_target": false}, {"number": 76, "content": "                              int number_motors);", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "  /**** STOREABLE ****/", "is_target": false}]}, "102": {"lines": [{"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 80, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 81, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 82, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 83, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": true}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  static DerInfConf getDefaultConf() {", "is_target": false}, {"number": 86, "content": "    DerInfConf c;", "is_target": false}, {"number": 87, "content": "    c.buffersize = 50;", "is_target": false}, {"number": 88, "content": "    c.cInit = 1.05;", "is_target": false}]}, "103": {"lines": [{"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "  /************** Inspectable INTERFACE ************************/", "is_target": false}, {"number": 134, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 135, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 136, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 137, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": true}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "protected:", "is_target": false}, {"number": 140, "content": "  matrix::Matrix elmanWeights;", "is_target": false}, {"number": 141, "content": "  matrix::Matrix elmanContext;", "is_target": false}, {"number": 142, "content": "  matrix::Matrix jordanWeights;", "is_target": false}]}, "104": {"lines": [{"number": 78, "content": "  /**** STOREABLE ****/", "is_target": false}, {"number": 79, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 80, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "  /**** CONFIGURABLE ****/", "is_target": false}, {"number": 83, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": true}, {"number": 84, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 85, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 86, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  /**** TEACHING ****/", "is_target": false}]}, "105": {"lines": [{"number": 57, "content": "class InvertMotorNStep : public InvertMotorController, public Teachable {", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "public:", "is_target": false}, {"number": 60, "content": "  explicit InvertMotorNStep(const InvertMotorNStepConf& conf = getDefaultConf());", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "  virtual ~InvertMotorNStep();", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 67, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "106": {"lines": [{"number": 65, "content": " * class for universal linear controller with neural network", "is_target": false}, {"number": 66, "content": " */", "is_target": false}, {"number": 67, "content": "class DerLinUnivers : public AbstractController, public Storeable {", "is_target": false}, {"number": 68, "content": "public:", "is_target": false}, {"number": 69, "content": "  explicit DerLinUnivers(const DerLinUniversConf& conf = getDefaultConf());", "is_target": false}, {"number": 70, "content": "  virtual ~DerLinUnivers();", "is_target": true}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  static DerLinUniversConf getDefaultConf() {", "is_target": false}, {"number": 73, "content": "    DerLinUniversConf c;", "is_target": false}, {"number": 74, "content": "    c.buffersize = 50;", "is_target": false}, {"number": 75, "content": "    c.init = 1;", "is_target": false}]}, "107": {"lines": [{"number": 79, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 80, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "  /**** CONFIGURABLE ****/", "is_target": false}, {"number": 83, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 84, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": true}, {"number": 85, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 86, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  /**** TEACHING ****/", "is_target": false}, {"number": 89, "content": "  virtual void setTeachingMode(bool onOff);", "is_target": false}]}, "108": {"lines": [{"number": 59, "content": "public:", "is_target": false}, {"number": 60, "content": "  explicit InvertMotorNStep(const InvertMotorNStepConf& conf = getDefaultConf());", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "  virtual ~InvertMotorNStep();", "is_target": true}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 67, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 68, "content": "    return number_sensors;", "is_target": false}, {"number": 69, "content": "  }", "is_target": false}]}, "109": {"lines": [{"number": 91, "content": "    Elman* e = new Elman(1, layers, false, false, false);", "is_target": false}, {"number": 92, "content": "    c.net = e;", "is_target": false}, {"number": 93, "content": "    return c;", "is_target": false}, {"number": 94, "content": "  }", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 99, "content": "    return number_sensors;", "is_target": false}, {"number": 100, "content": "  }", "is_target": false}, {"number": 101, "content": "", "is_target": false}]}, "110": {"lines": [{"number": 80, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "  /**** CONFIGURABLE ****/", "is_target": false}, {"number": 83, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 84, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 85, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": true}, {"number": 86, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  /**** TEACHING ****/", "is_target": false}, {"number": 89, "content": "  virtual void setTeachingMode(bool onOff);", "is_target": false}, {"number": 90, "content": "  virtual bool getTeachingMode() const;", "is_target": false}]}, "111": {"lines": [{"number": 72, "content": "    return number_motors;", "is_target": false}, {"number": 73, "content": "  }", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 76, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 77, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 80, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 81, "content": "                              int number_sensors,", "is_target": false}, {"number": 82, "content": "                              motor*,", "is_target": false}]}, "112": {"lines": [{"number": 101, "content": "", "is_target": false}, {"number": 102, "content": "  virtual int getMotorNumber() const override {", "is_target": false}, {"number": 103, "content": "    return number_motors;", "is_target": false}, {"number": 104, "content": "  }", "is_target": false}, {"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "  virtual void step(const sensor* sensors,", "is_target": true}, {"number": 107, "content": "                    int sensornumber,", "is_target": false}, {"number": 108, "content": "                    motor* motors,", "is_target": false}, {"number": 109, "content": "                    int motornumber);", "is_target": false}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}]}, "113": {"lines": [{"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "  /**** CONFIGURABLE ****/", "is_target": false}, {"number": 83, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 84, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 85, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 86, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": true}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  /**** TEACHING ****/", "is_target": false}, {"number": 89, "content": "  virtual void setTeachingMode(bool onOff);", "is_target": false}, {"number": 90, "content": "  virtual bool getTeachingMode() const;", "is_target": false}, {"number": 91, "content": "  virtual void setMotorTeachingSignal(const motor* teaching, int len);", "is_target": false}]}, "114": {"lines": [{"number": 75, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 76, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 77, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 80, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 81, "content": "                              int number_sensors,", "is_target": false}, {"number": 82, "content": "                              motor*,", "is_target": false}, {"number": 83, "content": "                              int number_motors);", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  /**** STOREABLE ****/", "is_target": false}]}, "115": {"lines": [{"number": 106, "content": "  virtual void step(const sensor* sensors,", "is_target": false}, {"number": 107, "content": "                    int sensornumber,", "is_target": false}, {"number": 108, "content": "                    motor* motors,", "is_target": false}, {"number": 109, "content": "                    int motornumber);", "is_target": false}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 112, "content": "                              int number_sensors,", "is_target": false}, {"number": 113, "content": "                              motor*,", "is_target": false}, {"number": 114, "content": "                              int number_motors);", "is_target": false}, {"number": 115, "content": "", "is_target": false}, {"number": 116, "content": "protected:", "is_target": false}]}, "116": {"lines": [{"number": 187, "content": "  /// calculates the city block distance (abs norm) of the matrix. (abs sum of absolutes / size of", "is_target": false}, {"number": 188, "content": "  /// matrix)", "is_target": false}, {"number": 189, "content": "  virtual double calcMatrixNorm(const matrix::Matrix& m);", "is_target": false}, {"number": 190, "content": "  /// calculates the error_factor for either logarithmic (E=ln(e^T*e)) or square (E=sqrt(e^t*e))", "is_target": false}, {"number": 191, "content": "  /// error", "is_target": false}, {"number": 192, "content": "  virtual double calcErrorFactor(const matrix::Matrix& e, bool loga, bool root);", "is_target": true}, {"number": 193, "content": "  ", "is_target": false}, {"number": 194, "content": "  // Helper methods for vector-based buffers (overload base class methods)", "is_target": false}, {"number": 195, "content": "  void putInBuffer(std::vector<matrix::Matrix>& buffer, const matrix::Matrix& vec, int delay = 0) {", "is_target": false}, {"number": 196, "content": "    buffer[(t - delay) % buffersize] = vec;", "is_target": false}, {"number": 197, "content": "  }", "is_target": false}]}, "117": {"lines": [{"number": 87, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 88, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 89, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "  /**** INSPECTABLE ****/", "is_target": false}, {"number": 92, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": true}, {"number": 93, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  /**** TEACHING ****/", "is_target": false}, {"number": 96, "content": "  /** The given motor teaching signal is used for this timestep.", "is_target": false}, {"number": 97, "content": "      It is used as a feed forward teaching signal for the controller.", "is_target": false}]}, "118": {"lines": [{"number": 137, "content": "   */", "is_target": false}, {"number": 138, "content": "  static double calcErrorFactor(const matrix::Matrix& e, int Enorm);", "is_target": false}, {"number": 139, "content": "", "is_target": false}, {"number": 140, "content": "public:", "is_target": false}, {"number": 141, "content": "  /********* INSPECTABLE INTERFACE ******/", "is_target": false}, {"number": 142, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": true}, {"number": 143, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 144, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 145, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  /********* STORABLE INTERFACE ******/", "is_target": false}]}, "119": {"lines": [{"number": 88, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 89, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "  /**** INSPECTABLE ****/", "is_target": false}, {"number": 92, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 93, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": true}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  /**** TEACHING ****/", "is_target": false}, {"number": 96, "content": "  /** The given motor teaching signal is used for this timestep.", "is_target": false}, {"number": 97, "content": "      It is used as a feed forward teaching signal for the controller.", "is_target": false}, {"number": 98, "content": "      Please note, that the teaching signal has to be given each timestep", "is_target": false}]}, "120": {"lines": [{"number": 138, "content": "  static double calcErrorFactor(const matrix::Matrix& e, int Enorm);", "is_target": false}, {"number": 139, "content": "", "is_target": false}, {"number": 140, "content": "public:", "is_target": false}, {"number": 141, "content": "  /********* INSPECTABLE INTERFACE ******/", "is_target": false}, {"number": 142, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 143, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": true}, {"number": 144, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 145, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  /********* STORABLE INTERFACE ******/", "is_target": false}, {"number": 148, "content": "  virtual bool store(FILE* f)  const;", "is_target": false}]}, "121": {"lines": [{"number": 113, "content": "      It is used as a feed forward teaching signal for the controller.", "is_target": false}, {"number": 114, "content": "      Please note, that the teaching signal has to be given each timestep", "is_target": false}, {"number": 115, "content": "       for a continuous teaching process.", "is_target": false}, {"number": 116, "content": "     @param teaching: matrix with dimensions (motornumber,1)", "is_target": false}, {"number": 117, "content": "   */", "is_target": false}, {"number": 118, "content": "  virtual void setMotorTeaching(const matrix::Matrix& teaching);", "is_target": true}, {"number": 119, "content": "", "is_target": false}, {"number": 120, "content": "  /** The given sensor teaching signal (distal learning) is used for this timestep.", "is_target": false}, {"number": 121, "content": "      The belonging motor teachung signal is calculated by the inverse model.", "is_target": false}, {"number": 122, "content": "      See setMotorTeaching", "is_target": false}, {"number": 123, "content": "     @param teaching: matrix with dimensions (motorsensors,1)", "is_target": false}]}, "122": {"lines": [{"number": 139, "content": "", "is_target": false}, {"number": 140, "content": "public:", "is_target": false}, {"number": 141, "content": "  /********* INSPECTABLE INTERFACE ******/", "is_target": false}, {"number": 142, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 143, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 144, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": true}, {"number": 145, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  /********* STORABLE INTERFACE ******/", "is_target": false}, {"number": 148, "content": "  virtual bool store(FILE* f)  const;", "is_target": false}, {"number": 149, "content": "  virtual bool restore(FILE* f);", "is_target": false}]}, "123": {"lines": [{"number": 120, "content": "  /** The given sensor teaching signal (distal learning) is used for this timestep.", "is_target": false}, {"number": 121, "content": "      The belonging motor teachung signal is calculated by the inverse model.", "is_target": false}, {"number": 122, "content": "      See setMotorTeaching", "is_target": false}, {"number": 123, "content": "     @param teaching: matrix with dimensions (motorsensors,1)", "is_target": false}, {"number": 124, "content": "   */", "is_target": false}, {"number": 125, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": true}, {"number": 126, "content": "  /// returns the last motor values (useful for cross motor coupling)", "is_target": false}, {"number": 127, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 128, "content": "  /// returns the last sensor values (useful for cross sensor coupling)", "is_target": false}, {"number": 129, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 130, "content": "", "is_target": false}]}, "124": {"lines": [{"number": 140, "content": "public:", "is_target": false}, {"number": 141, "content": "  /********* INSPECTABLE INTERFACE ******/", "is_target": false}, {"number": 142, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 143, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 144, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 145, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": true}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  /********* STORABLE INTERFACE ******/", "is_target": false}, {"number": 148, "content": "  virtual bool store(FILE* f)  const;", "is_target": false}, {"number": 149, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "125": {"lines": [{"number": 122, "content": "      See setMotorTeaching", "is_target": false}, {"number": 123, "content": "     @param teaching: matrix with dimensions (motorsensors,1)", "is_target": false}, {"number": 124, "content": "   */", "is_target": false}, {"number": 125, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 126, "content": "  /// returns the last motor values (useful for cross motor coupling)", "is_target": false}, {"number": 127, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": true}, {"number": 128, "content": "  /// returns the last sensor values (useful for cross sensor coupling)", "is_target": false}, {"number": 129, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 130, "content": "", "is_target": false}, {"number": 131, "content": "  // UNUSED! OLD IMPLEMENTATION which hat some consistency arguments", "is_target": false}, {"number": 132, "content": "  void calcCandHUpdatesTeaching(matrix::Matrix& C_update, matrix::Matrix& H_update, int y_delay);", "is_target": false}]}, "126": {"lines": [{"number": 143, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 144, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 145, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  /********* STORABLE INTERFACE ******/", "is_target": false}, {"number": 148, "content": "  virtual bool store(FILE* f)  const;", "is_target": true}, {"number": 149, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "protected:", "is_target": false}, {"number": 152, "content": "  unsigned int t = 0;", "is_target": false}, {"number": 153, "content": "  unsigned int number_sensors = 0;", "is_target": false}]}, "127": {"lines": [{"number": 124, "content": "   */", "is_target": false}, {"number": 125, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 126, "content": "  /// returns the last motor values (useful for cross motor coupling)", "is_target": false}, {"number": 127, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 128, "content": "  /// returns the last sensor values (useful for cross sensor coupling)", "is_target": false}, {"number": 129, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": true}, {"number": 130, "content": "", "is_target": false}, {"number": 131, "content": "  // UNUSED! OLD IMPLEMENTATION which hat some consistency arguments", "is_target": false}, {"number": 132, "content": "  void calcCandHUpdatesTeaching(matrix::Matrix& C_update, matrix::Matrix& H_update, int y_delay);", "is_target": false}, {"number": 133, "content": "", "is_target": false}, {"number": 134, "content": "  /**** REINFORCEMENT ****/", "is_target": false}]}, "128": {"lines": [{"number": 144, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 145, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  /********* STORABLE INTERFACE ******/", "is_target": false}, {"number": 148, "content": "  virtual bool store(FILE* f)  const;", "is_target": false}, {"number": 149, "content": "  virtual bool restore(FILE* f);", "is_target": true}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "protected:", "is_target": false}, {"number": 152, "content": "  unsigned int t = 0;", "is_target": false}, {"number": 153, "content": "  unsigned int number_sensors = 0;", "is_target": false}, {"number": 154, "content": "  unsigned int number_motors = 0;", "is_target": false}]}, "129": {"lines": [{"number": 152, "content": "    return c;", "is_target": false}, {"number": 153, "content": "  }", "is_target": false}, {"number": 154, "content": "", "is_target": false}, {"number": 155, "content": "  /// sets the sensor channel weights (matrix should be (getSensorNumber() x 1)", "is_target": false}, {"number": 156, "content": "  void setSensorWeights(const matrix::Matrix& weights);", "is_target": false}, {"number": 157, "content": "  matrix::Matrix getSensorWeights() const {", "is_target": true}, {"number": 158, "content": "    return sensorweights;", "is_target": false}, {"number": 159, "content": "  }", "is_target": false}, {"number": 160, "content": "  /// reference to C-matrix", "is_target": false}, {"number": 161, "content": "  const matrix::Matrix& getC() const {", "is_target": false}, {"number": 162, "content": "    return C;", "is_target": false}]}, "130": {"lines": [{"number": 72, "content": "  Matrix(I _m, I _n, D def);", "is_target": false}, {"number": 73, "content": "  /// constucts a instance on the base of a deep copy of the given matrix", "is_target": false}, {"number": 74, "content": "  Matrix(const Matrix& c);", "is_target": false}, {"number": 75, "content": "  /// copy move constructor", "is_target": false}, {"number": 76, "content": "  Matrix(Matrix&& c) noexcept;", "is_target": false}, {"number": 77, "content": "  ~Matrix() {", "is_target": true}, {"number": 78, "content": "    if (data)", "is_target": false}, {"number": 79, "content": "      free(data);", "is_target": false}, {"number": 80, "content": "  };", "is_target": false}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "public:", "is_target": false}]}, "131": {"lines": [{"number": 157, "content": "  }", "is_target": false}, {"number": 158, "content": "", "is_target": false}, {"number": 159, "content": "  /*       STOREABLE       */", "is_target": false}, {"number": 160, "content": "  /** stores the Matrix into the given file stream (same as write)", "is_target": false}, {"number": 161, "content": "   */", "is_target": false}, {"number": 162, "content": "  bool store(FILE* f) const;", "is_target": true}, {"number": 163, "content": "", "is_target": false}, {"number": 164, "content": "  /** reads a Matrix from the given file stream", "is_target": false}, {"number": 165, "content": "      uses read (or old binary format)", "is_target": false}, {"number": 166, "content": "   */", "is_target": false}, {"number": 167, "content": "  bool restore(FILE* f);", "is_target": false}]}, "132": {"lines": [{"number": 162, "content": "  bool store(FILE* f) const;", "is_target": false}, {"number": 163, "content": "", "is_target": false}, {"number": 164, "content": "  /** reads a Matrix from the given file stream", "is_target": false}, {"number": 165, "content": "      uses read (or old binary format)", "is_target": false}, {"number": 166, "content": "   */", "is_target": false}, {"number": 167, "content": "  bool restore(FILE* f);", "is_target": true}, {"number": 168, "content": "", "is_target": false}, {"number": 169, "content": "  /** writes the Matrix into the given file stream (ascii)", "is_target": false}, {"number": 170, "content": "   */", "is_target": false}, {"number": 171, "content": "  bool write(FILE* f) const;", "is_target": false}, {"number": 172, "content": "", "is_target": false}]}, "133": {"lines": [{"number": 166, "content": "    ", "is_target": false}, {"number": 167, "content": "    /// Destructor", "is_target": false}, {"number": 168, "content": "    virtual ~APEXSox();", "is_target": false}, {"number": 169, "content": "    ", "is_target": false}, {"number": 170, "content": "    /// Initializes the controller", "is_target": false}, {"number": 171, "content": "    virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 172, "content": "    ", "is_target": false}, {"number": 173, "content": "    /// Returns the number of sensors", "is_target": false}, {"number": 174, "content": "    virtual int getSensorNumber() const override { return number_sensors; }", "is_target": false}, {"number": 175, "content": "    ", "is_target": false}, {"number": 176, "content": "    /// Returns the number of motors", "is_target": false}]}, "134": {"lines": [{"number": 175, "content": "    ", "is_target": false}, {"number": 176, "content": "    /// Returns the number of motors", "is_target": false}, {"number": 177, "content": "    virtual int getMotorNumber() const override { return number_motors; }", "is_target": false}, {"number": 178, "content": "    ", "is_target": false}, {"number": 179, "content": "    /// Performs one step with learning", "is_target": false}, {"number": 180, "content": "    virtual void step(const sensor* sensors, int sensornumber,", "is_target": true}, {"number": 181, "content": "                     motor* motors, int motornumber);", "is_target": false}, {"number": 182, "content": "    ", "is_target": false}, {"number": 183, "content": "    /// Performs one step without learning", "is_target": false}, {"number": 184, "content": "    virtual void stepNoLearning(const sensor* sensors, int sensornumber,", "is_target": false}, {"number": 185, "content": "                               motor* motors, int motornumber);", "is_target": false}]}, "135": {"lines": [{"number": 179, "content": "    /// Performs one step with learning", "is_target": false}, {"number": 180, "content": "    virtual void step(const sensor* sensors, int sensornumber,", "is_target": false}, {"number": 181, "content": "                     motor* motors, int motornumber);", "is_target": false}, {"number": 182, "content": "    ", "is_target": false}, {"number": 183, "content": "    /// Performs one step without learning", "is_target": false}, {"number": 184, "content": "    virtual void stepNoLearning(const sensor* sensors, int sensornumber,", "is_target": true}, {"number": 185, "content": "                               motor* motors, int motornumber);", "is_target": false}, {"number": 186, "content": "    ", "is_target": false}, {"number": 187, "content": "    /// Store controller state", "is_target": false}, {"number": 188, "content": "    virtual bool store(FILE* f) const;", "is_target": false}, {"number": 189, "content": "    ", "is_target": false}]}, "136": {"lines": [{"number": 334, "content": "        const Matrix& v = Lplus * xi;", "is_target": false}, {"number": 335, "content": "        const Matrix& chi = (Lplus^T) * v;", "is_target": false}, {"number": 336, "content": "        const Matrix& mu = ((model->A^T) & g_prime) * chi;", "is_target": false}, {"number": 337, "content": "        ", "is_target": false}, {"number": 338, "content": "        // Update with meta-learned rates", "is_target": false}, {"number": 339, "content": "        double epsC_meta = metaState.optimalLearningRate;", "is_target": true}, {"number": 340, "content": "        double epsA_meta = metaState.optimalLearningRate;", "is_target": false}, {"number": 341, "content": "        ", "is_target": false}, {"number": 342, "content": "        // Anti-Hebbian learning with adaptive sense", "is_target": false}, {"number": 343, "content": "        double sense = 1.0 + metaState.currentExploration * 0.5; // Adaptive sense based on exploration", "is_target": false}, {"number": 344, "content": "        Matrix epsrel = (mu & (model->C * v)) * (sense * 2.0);", "is_target": false}]}, "137": {"lines": [{"number": 54, "content": " */", "is_target": false}, {"number": 55, "content": "class DerPseudoSensor : public InvertMotorController, public Storeable {", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "public:", "is_target": false}, {"number": 58, "content": "  explicit DerPseudoSensor(const DerPseudoSensorConf& conf = getDefaultConf());", "is_target": false}, {"number": 59, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "  virtual ~DerPseudoSensor();", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 64, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "138": {"lines": [{"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "public:", "is_target": false}, {"number": 58, "content": "  explicit DerPseudoSensor(const DerPseudoSensorConf& conf = getDefaultConf());", "is_target": false}, {"number": 59, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "  virtual ~DerPseudoSensor();", "is_target": true}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 64, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 65, "content": "    return number_sensors;", "is_target": false}, {"number": 66, "content": "  }", "is_target": false}]}, "139": {"lines": [{"number": 69, "content": "    return number_motors;", "is_target": false}, {"number": 70, "content": "  }", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 73, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 74, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 77, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 78, "content": "                              int number_sensors,", "is_target": false}, {"number": 79, "content": "                              motor*,", "is_target": false}]}, "140": {"lines": [{"number": 72, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 73, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 74, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 77, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 78, "content": "                              int number_sensors,", "is_target": false}, {"number": 79, "content": "                              motor*,", "is_target": false}, {"number": 80, "content": "                              int number_motors);", "is_target": false}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "  /**************  STOREABLE **********************************/", "is_target": false}]}, "141": {"lines": [{"number": 79, "content": "                              motor*,", "is_target": false}, {"number": 80, "content": "                              int number_motors);", "is_target": false}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 83, "content": "  /** stores the controller values to a given file. */", "is_target": false}, {"number": 84, "content": "  virtual bool store(FILE* f)  const;", "is_target": true}, {"number": 85, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 86, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 89, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}]}, "142": {"lines": [{"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 83, "content": "  /** stores the controller values to a given file. */", "is_target": false}, {"number": 84, "content": "  virtual bool store(FILE* f)  const;", "is_target": false}, {"number": 85, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 86, "content": "  virtual bool restore(FILE* f);", "is_target": true}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 89, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 90, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 91, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}]}, "143": {"lines": [{"number": 84, "content": "  virtual bool store(FILE* f)  const;", "is_target": false}, {"number": 85, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 86, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 89, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": true}, {"number": 90, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 91, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 92, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 93, "content": "", "is_target": false}, {"number": 94, "content": "  /************** CONFIGURABLE ********************************/", "is_target": false}]}, "144": {"lines": [{"number": 85, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 86, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 89, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 90, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": true}, {"number": 91, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 92, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 93, "content": "", "is_target": false}, {"number": 94, "content": "  /************** CONFIGURABLE ********************************/", "is_target": false}, {"number": 95, "content": "  virtual void notifyOnChange(const paramkey& key);", "is_target": false}]}, "145": {"lines": [{"number": 86, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 89, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 90, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 91, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": true}, {"number": 92, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 93, "content": "", "is_target": false}, {"number": 94, "content": "  /************** CONFIGURABLE ********************************/", "is_target": false}, {"number": 95, "content": "  virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 96, "content": "", "is_target": false}]}, "146": {"lines": [{"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 89, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 90, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 91, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 92, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": true}, {"number": 93, "content": "", "is_target": false}, {"number": 94, "content": "  /************** CONFIGURABLE ********************************/", "is_target": false}, {"number": 95, "content": "  virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "  /**** TEACHING ****/", "is_target": false}]}, "147": {"lines": [{"number": 638, "content": "    ", "is_target": false}, {"number": 639, "content": "    // Add curiosity-driven exploration", "is_target": false}, {"number": 640, "content": "    for (int i = 0; i < y.getM(); i++) {", "is_target": false}, {"number": 641, "content": "        // Curiosity pushes away from zero (encourages movement)", "is_target": false}, {"number": 642, "content": "        double val = y.val(i, 0);", "is_target": false}, {"number": 643, "content": "        double push = metaState.currentCuriosity * conf.curiosityBonus;", "is_target": true}, {"number": 644, "content": "        ", "is_target": false}, {"number": 645, "content": "        if (abs(val) < 0.3) { // Only apply to low-activity motors", "is_target": false}, {"number": 646, "content": "            if (val >= 0) {", "is_target": false}, {"number": 647, "content": "                y_curious.val(i, 0) = min(1.0, val + push);", "is_target": false}, {"number": 648, "content": "            } else {", "is_target": false}]}, "148": {"lines": [{"number": 299, "content": "    const Matrix& x = x_buffer.get(-1);", "is_target": false}, {"number": 300, "content": "    const Matrix& y = y_buffer.get(-1);", "is_target": false}, {"number": 301, "content": "    const Matrix& x_fut = x_buffer.get(0);", "is_target": false}, {"number": 302, "content": "    ", "is_target": false}, {"number": 303, "content": "    // Update each model", "is_target": false}, {"number": 304, "content": "    for (auto& model : models) {", "is_target": true}, {"number": 305, "content": "        // Predict future sensor values", "is_target": false}, {"number": 306, "content": "        const Matrix& x_pred = model->A * y + model->b + model->S * x;", "is_target": false}, {"number": 307, "content": "        const Matrix& xi = x_fut - x_pred;", "is_target": false}, {"number": 308, "content": "        ", "is_target": false}, {"number": 309, "content": "        // Update error history", "is_target": false}]}, "149": {"lines": [{"number": 482, "content": "            new_model->A.toId();", "is_target": false}, {"number": 483, "content": "            ", "is_target": false}, {"number": 484, "content": "            models.push_back(std::move(new_model));", "is_target": false}, {"number": 485, "content": "            ", "is_target": false}, {"number": 486, "content": "            // Renormalize weights", "is_target": false}, {"number": 487, "content": "            for (auto& model : models) {", "is_target": true}, {"number": 488, "content": "                model->scale_weight = 1.0 / models.size();", "is_target": false}, {"number": 489, "content": "            }", "is_target": false}, {"number": 490, "content": "        }", "is_target": false}, {"number": 491, "content": "    }", "is_target": false}, {"number": 492, "content": "}", "is_target": false}]}, "150": {"lines": [{"number": 606, "content": "        instabilityCounter++;", "is_target": false}, {"number": 607, "content": "        ", "is_target": false}, {"number": 608, "content": "        // Emergency measures if unstable", "is_target": false}, {"number": 609, "content": "        if (instabilityCounter > 5) {", "is_target": false}, {"number": 610, "content": "            // Reduce all learning rates temporarily", "is_target": false}, {"number": 611, "content": "            for (auto& model : models) {", "is_target": true}, {"number": 612, "content": "                model->C *= 0.9;", "is_target": false}, {"number": 613, "content": "                model->A *= 0.9;", "is_target": false}, {"number": 614, "content": "            }", "is_target": false}, {"number": 615, "content": "            ", "is_target": false}, {"number": 616, "content": "            // Increase damping", "is_target": false}]}, "151": {"lines": [{"number": 230, "content": "            weights.push_back(match_score * model->scale_weight);", "is_target": false}, {"number": 231, "content": "        }", "is_target": false}, {"number": 232, "content": "    } else {", "is_target": false}, {"number": 233, "content": "        // Use all models with their scale weights", "is_target": false}, {"number": 234, "content": "        for (const auto& model : models) {", "is_target": false}, {"number": 235, "content": "            weights.push_back(model->scale_weight);", "is_target": true}, {"number": 236, "content": "        }", "is_target": false}, {"number": 237, "content": "    }", "is_target": false}, {"number": 238, "content": "    ", "is_target": false}, {"number": 239, "content": "    // Normalize weights", "is_target": false}, {"number": 240, "content": "    double weight_sum = accumulate(weights.begin(), weights.end(), 0.0);", "is_target": false}]}, "152": {"lines": [{"number": 237, "content": "    }", "is_target": false}, {"number": 238, "content": "    ", "is_target": false}, {"number": 239, "content": "    // Normalize weights", "is_target": false}, {"number": 240, "content": "    double weight_sum = accumulate(weights.begin(), weights.end(), 0.0);", "is_target": false}, {"number": 241, "content": "    if (weight_sum > 0) {", "is_target": false}, {"number": 242, "content": "        for (auto& w : weights) w /= weight_sum;", "is_target": true}, {"number": 243, "content": "    }", "is_target": false}, {"number": 244, "content": "    ", "is_target": false}, {"number": 245, "content": "    // Generate outputs from each model", "is_target": false}, {"number": 246, "content": "    for (size_t i = 0; i < models.size(); i++) {", "is_target": false}, {"number": 247, "content": "        const auto& model = models[i];", "is_target": false}]}, "153": {"lines": [{"number": 436, "content": "        }", "is_target": false}, {"number": 437, "content": "        ", "is_target": false}, {"number": 438, "content": "        // Remove if significantly worse than average", "is_target": false}, {"number": 439, "content": "        double avg_error = 0;", "is_target": false}, {"number": 440, "content": "        for (const auto& model : models) {", "is_target": false}, {"number": 441, "content": "            avg_error += model->avg_error;", "is_target": true}, {"number": 442, "content": "        }", "is_target": false}, {"number": 443, "content": "        avg_error /= models.size();", "is_target": false}, {"number": 444, "content": "        ", "is_target": false}, {"number": 445, "content": "        if (worst_score > avg_error * 2.0) {", "is_target": false}, {"number": 446, "content": "            models.erase(models.begin() + worst_idx);", "is_target": false}]}, "154": {"lines": [{"number": 451, "content": "    if (models.size() < static_cast<size_t>(conf.maxContexts)) {", "is_target": false}, {"number": 452, "content": "        // Check if all models have similar performance", "is_target": false}, {"number": 453, "content": "        double error_variance = 0;", "is_target": false}, {"number": 454, "content": "        double avg_error = 0;", "is_target": false}, {"number": 455, "content": "        for (const auto& model : models) {", "is_target": false}, {"number": 456, "content": "            avg_error += model->avg_error;", "is_target": true}, {"number": 457, "content": "        }", "is_target": false}, {"number": 458, "content": "        avg_error /= models.size();", "is_target": false}, {"number": 459, "content": "        ", "is_target": false}, {"number": 460, "content": "        for (const auto& model : models) {", "is_target": false}, {"number": 461, "content": "            double diff = model->avg_error - avg_error;", "is_target": false}]}, "155": {"lines": [{"number": 394, "content": "  if (conf.modelCompliant != 0) { // learning of the forward task", "is_target": false}, {"number": 395, "content": "    // eta is difference between last y and reconstructed one -> used as forward error signal", "is_target": false}, {"number": 396, "content": "    // The question is wether to use eta (linearised), zeta (neuron inverse) or eta*g' (Backprop) !", "is_target": false}, {"number": 397, "content": "    const Matrix g_p = z.map(g_derivative);", "is_target": false}, {"number": 398, "content": "    const Matrix& g_eta = eta.multrowwise(g_p);", "is_target": false}, {"number": 399, "content": "    C_updateTeaching += (g_eta * (x ^ T)) * conf.modelCompliant * epsC;", "is_target": true}, {"number": 400, "content": "    H_updateTeaching += g_eta * conf.modelCompliant * epsC;", "is_target": false}, {"number": 401, "content": "  }", "is_target": false}, {"number": 402, "content": "", "is_target": false}, {"number": 403, "content": "  if (useTeaching) {", "is_target": false}, {"number": 404, "content": "    const Matrix& y_local = y_buffer[(t) % buffersize]; // eventuell t-1", "is_target": false}]}, "156": {"lines": [{"number": 51, "content": " */", "is_target": false}, {"number": 52, "content": "class DerLinInvert : public InvertMotorController, public Storeable {", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "public:", "is_target": false}, {"number": 55, "content": "  explicit DerLinInvert(const DerLinInvertConf& conf = getDefaultConf());", "is_target": false}, {"number": 56, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randg);", "is_target": true}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  virtual ~DerLinInvert();", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 61, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "157": {"lines": [{"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "public:", "is_target": false}, {"number": 55, "content": "  explicit DerLinInvert(const DerLinInvertConf& conf = getDefaultConf());", "is_target": false}, {"number": 56, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randg);", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  virtual ~DerLinInvert();", "is_target": true}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 61, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 62, "content": "    return number_sensors;", "is_target": false}, {"number": 63, "content": "  }", "is_target": false}]}, "158": {"lines": [{"number": 395, "content": "    // eta is difference between last y and reconstructed one -> used as forward error signal", "is_target": false}, {"number": 396, "content": "    // The question is wether to use eta (linearised), zeta (neuron inverse) or eta*g' (Backprop) !", "is_target": false}, {"number": 397, "content": "    const Matrix g_p = z.map(g_derivative);", "is_target": false}, {"number": 398, "content": "    const Matrix& g_eta = eta.multrowwise(g_p);", "is_target": false}, {"number": 399, "content": "    C_updateTeaching += (g_eta * (x ^ T)) * conf.modelCompliant * epsC;", "is_target": false}, {"number": 400, "content": "    H_updateTeaching += g_eta * conf.modelCompliant * epsC;", "is_target": true}, {"number": 401, "content": "  }", "is_target": false}, {"number": 402, "content": "", "is_target": false}, {"number": 403, "content": "  if (useTeaching) {", "is_target": false}, {"number": 404, "content": "    const Matrix& y_local = y_buffer[(t) % buffersize]; // eventuell t-1", "is_target": false}, {"number": 405, "content": "    const Matrix& kappa = y_teaching - y_local;", "is_target": false}]}, "159": {"lines": [{"number": 66, "content": "    return number_motors;", "is_target": false}, {"number": 67, "content": "  }", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 70, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 71, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 74, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 75, "content": "                              int number_sensors,", "is_target": false}, {"number": 76, "content": "                              motor*,", "is_target": false}]}, "160": {"lines": [{"number": 69, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 70, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 71, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 74, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 75, "content": "                              int number_sensors,", "is_target": false}, {"number": 76, "content": "                              motor*,", "is_target": false}, {"number": 77, "content": "                              int number_motors);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /**************  STOREABLE **********************************/", "is_target": false}]}, "161": {"lines": [{"number": 76, "content": "                              motor*,", "is_target": false}, {"number": 77, "content": "                              int number_motors);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 80, "content": "  /** stores the controller values to a given file. */", "is_target": false}, {"number": 81, "content": "  virtual bool store(FILE* f)  const;", "is_target": true}, {"number": 82, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 83, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 86, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}]}, "162": {"lines": [{"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 80, "content": "  /** stores the controller values to a given file. */", "is_target": false}, {"number": 81, "content": "  virtual bool store(FILE* f)  const;", "is_target": false}, {"number": 82, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 83, "content": "  virtual bool restore(FILE* f);", "is_target": true}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 86, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 87, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 88, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}]}, "163": {"lines": [{"number": 81, "content": "  virtual bool store(FILE* f)  const;", "is_target": false}, {"number": 82, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 83, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 86, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": true}, {"number": 87, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 88, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 89, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "  /**** TEACHING ****/", "is_target": false}]}, "164": {"lines": [{"number": 82, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 83, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 86, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 87, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": true}, {"number": 88, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 89, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "  /**** TEACHING ****/", "is_target": false}, {"number": 92, "content": "  /** The given motor teaching signal is used for this timestep.", "is_target": false}]}, "165": {"lines": [{"number": 83, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 86, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 87, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 88, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": true}, {"number": 89, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "  /**** TEACHING ****/", "is_target": false}, {"number": 92, "content": "  /** The given motor teaching signal is used for this timestep.", "is_target": false}, {"number": 93, "content": "      It is used as a feed forward teaching signal for the controller.", "is_target": false}]}, "166": {"lines": [{"number": 46, "content": "public:", "is_target": false}, {"number": 47, "content": "  /**", "is_target": false}, {"number": 48, "content": "     @param controlmask bitmask to select channels to control (default all)", "is_target": false}, {"number": 49, "content": "     @param function controller function to use", "is_target": false}, {"number": 50, "content": "   */", "is_target": false}, {"number": 51, "content": "  ESN(const ESNConf& conf = getDefaultConf());", "is_target": true}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "  static ESNConf getDefaultConf() {", "is_target": false}, {"number": 54, "content": "    ESNConf c;", "is_target": false}, {"number": 55, "content": "    c.numNeurons = 100;", "is_target": false}, {"number": 56, "content": "    c.inputStrength = 0.1;", "is_target": false}]}, "167": {"lines": [{"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 86, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 87, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 88, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 89, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "  /**** TEACHING ****/", "is_target": false}, {"number": 92, "content": "  /** The given motor teaching signal is used for this timestep.", "is_target": false}, {"number": 93, "content": "      It is used as a feed forward teaching signal for the controller.", "is_target": false}, {"number": 94, "content": "      Please note, that the teaching signal has to be given each timestep", "is_target": false}]}, "168": {"lines": [{"number": 37, "content": "  // difficulties", "is_target": false}, {"number": 38, "content": "  // AbstractModel() {};", "is_target": false}, {"number": 39, "content": "  AbstractModel(const std::string& name, const std::string& revision)", "is_target": false}, {"number": 40, "content": "    : Configurable(name, revision)", "is_target": false}, {"number": 41, "content": "    , Inspectable(name) {}", "is_target": false}, {"number": 42, "content": "  virtual ~AbstractModel() {};", "is_target": true}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "  /** initialisation of the network with the given number of input and output units", "is_target": false}, {"number": 45, "content": "      @param inputDim length of input vector", "is_target": false}, {"number": 46, "content": "      @param outputDim length of output vector", "is_target": false}, {"number": 47, "content": "      @param unit_map if 0 the parametes are choosen randomly.", "is_target": false}]}, "169": {"lines": [{"number": 68, "content": "      @param unit_map if 0 the parametes are choosen randomly.", "is_target": false}, {"number": 69, "content": "             Otherwise the model is initialised to represent a unit_map", "is_target": false}, {"number": 70, "content": "             with the given response strength.", "is_target": false}, {"number": 71, "content": "      @param randGen pointer to random generator, if 0 an new one is used", "is_target": false}, {"number": 72, "content": "   */", "is_target": false}, {"number": 73, "content": "  virtual void init(unsigned int inputDim,", "is_target": true}, {"number": 74, "content": "                    unsigned int outputDim,", "is_target": false}, {"number": 75, "content": "                    double unit_map = 0.0,", "is_target": false}, {"number": 76, "content": "                    RandGen* randGen = nullptr);", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "  /** passive processing of the input", "is_target": false}]}, "170": {"lines": [{"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "  /** passive processing of the input", "is_target": false}, {"number": 79, "content": "     (this function is not constant since a recurrent network", "is_target": false}, {"number": 80, "content": "     for example might change internal states", "is_target": false}, {"number": 81, "content": "  */", "is_target": false}, {"number": 82, "content": "  virtual const matrix::Matrix process(const matrix::Matrix& input);", "is_target": true}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  /* performs learning and returns the network output before learning.", "is_target": false}, {"number": 85, "content": "     Neural networks process the input before. (no need to call process before)", "is_target": false}, {"number": 86, "content": "     \\param learnRateFactor can be given to modify eps for this learning step.", "is_target": false}, {"number": 87, "content": "  */", "is_target": false}]}, "171": {"lines": [{"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  /* performs learning and returns the network output before learning.", "is_target": false}, {"number": 85, "content": "     Neural networks process the input before. (no need to call process before)", "is_target": false}, {"number": 86, "content": "     \\param learnRateFactor can be given to modify eps for this learning step.", "is_target": false}, {"number": 87, "content": "  */", "is_target": false}, {"number": 88, "content": "  virtual const matrix::Matrix learn(const matrix::Matrix& input,", "is_target": true}, {"number": 89, "content": "                                     const matrix::Matrix& nom_output,", "is_target": false}, {"number": 90, "content": "                                     double learnRateFactor = 1) ;", "is_target": false}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "  /* calculates the partial derivative of the of the output with repect to the input(const Jacobi& matrix).", "is_target": false}, {"number": 93, "content": "", "is_target": false}]}, "172": {"lines": [{"number": 403, "content": "  if (useTeaching) {", "is_target": false}, {"number": 404, "content": "    const Matrix& y_local = y_buffer[(t) % buffersize]; // eventuell t-1", "is_target": false}, {"number": 405, "content": "    const Matrix& kappa = y_teaching - y_local;", "is_target": false}, {"number": 406, "content": "    const Matrix g_p = z.map(g_derivative);", "is_target": false}, {"number": 407, "content": "    const Matrix& delta_local = (kappa).multrowwise(g_p);", "is_target": false}, {"number": 408, "content": "    C_updateTeaching += (delta_local * (x ^ T)) * teacher; // * epsC;", "is_target": true}, {"number": 409, "content": "    H_updateTeaching += delta_local * teacher;             // * epsC;", "is_target": false}, {"number": 410, "content": "    // C_updateTeaching += ( (y_buffer[(t)% buffersize])*(x^T) ) * teacher;// * epsC;", "is_target": false}, {"number": 411, "content": "    // H_updateTeaching +=  y_buffer[(t)% buffersize]* teacher;// * epsC;", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    useTeaching =", "is_target": false}]}, "173": {"lines": [{"number": 101, "content": "", "is_target": false}, {"number": 102, "content": "      \\f[o+\\xi = \\pi(i+v)\\f]", "is_target": false}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "      The input is ignored, the network must  be processed or learned before!", "is_target": false}, {"number": 105, "content": "   */", "is_target": false}, {"number": 106, "content": "  virtual const matrix::Matrix inversion(const matrix::Matrix& input,", "is_target": true}, {"number": 107, "content": "                                         const matrix::Matrix& xsi)  const;", "is_target": false}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "  /// damps the weights and the biases by multiplying (1-damping)", "is_target": false}, {"number": 110, "content": "  virtual void damp(double damping);", "is_target": false}, {"number": 111, "content": "", "is_target": false}]}, "174": {"lines": [{"number": 105, "content": "   */", "is_target": false}, {"number": 106, "content": "  virtual const matrix::Matrix inversion(const matrix::Matrix& input,", "is_target": false}, {"number": 107, "content": "                                         const matrix::Matrix& xsi)  const;", "is_target": false}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "  /// damps the weights and the biases by multiplying (1-damping)", "is_target": false}, {"number": 110, "content": "  virtual void damp(double damping);", "is_target": true}, {"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "  /// returns the number of input neurons", "is_target": false}, {"number": 113, "content": "  virtual unsigned int getInputDim()  const;", "is_target": false}, {"number": 114, "content": "  /// returns the number of output neurons", "is_target": false}, {"number": 115, "content": "  virtual unsigned int getOutputDim()  const;", "is_target": false}]}, "175": {"lines": [{"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "  /// damps the weights and the biases by multiplying (1-damping)", "is_target": false}, {"number": 110, "content": "  virtual void damp(double damping);", "is_target": false}, {"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "  /// returns the number of input neurons", "is_target": false}, {"number": 113, "content": "  virtual unsigned int getInputDim()  const;", "is_target": true}, {"number": 114, "content": "  /// returns the number of output neurons", "is_target": false}, {"number": 115, "content": "  virtual unsigned int getOutputDim()  const;", "is_target": false}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "  virtual bool store(FILE* f)  const;", "is_target": false}, {"number": 118, "content": "", "is_target": false}]}, "176": {"lines": [{"number": 110, "content": "  virtual void damp(double damping);", "is_target": false}, {"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "  /// returns the number of input neurons", "is_target": false}, {"number": 113, "content": "  virtual unsigned int getInputDim()  const;", "is_target": false}, {"number": 114, "content": "  /// returns the number of output neurons", "is_target": false}, {"number": 115, "content": "  virtual unsigned int getOutputDim()  const;", "is_target": true}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "  virtual bool store(FILE* f)  const;", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 120, "content": "", "is_target": false}]}, "177": {"lines": [{"number": 112, "content": "  /// returns the number of input neurons", "is_target": false}, {"number": 113, "content": "  virtual unsigned int getInputDim()  const;", "is_target": false}, {"number": 114, "content": "  /// returns the number of output neurons", "is_target": false}, {"number": 115, "content": "  virtual unsigned int getOutputDim()  const;", "is_target": false}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "  virtual bool store(FILE* f)  const;", "is_target": true}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 120, "content": "", "is_target": false}, {"number": 121, "content": "  static double tanh_prime(double z) {", "is_target": false}, {"number": 122, "content": "    double k = tanh(z);", "is_target": false}]}, "178": {"lines": [{"number": 114, "content": "  /// returns the number of output neurons", "is_target": false}, {"number": 115, "content": "  virtual unsigned int getOutputDim()  const;", "is_target": false}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "  virtual bool store(FILE* f)  const;", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "  virtual bool restore(FILE* f);", "is_target": true}, {"number": 120, "content": "", "is_target": false}, {"number": 121, "content": "  static double tanh_prime(double z) {", "is_target": false}, {"number": 122, "content": "    double k = tanh(z);", "is_target": false}, {"number": 123, "content": "    return 1.0 - k * k;", "is_target": false}, {"number": 124, "content": "  };", "is_target": false}]}, "179": {"lines": [{"number": 404, "content": "    const Matrix& y_local = y_buffer[(t) % buffersize]; // eventuell t-1", "is_target": false}, {"number": 405, "content": "    const Matrix& kappa = y_teaching - y_local;", "is_target": false}, {"number": 406, "content": "    const Matrix g_p = z.map(g_derivative);", "is_target": false}, {"number": 407, "content": "    const Matrix& delta_local = (kappa).multrowwise(g_p);", "is_target": false}, {"number": 408, "content": "    C_updateTeaching += (delta_local * (x ^ T)) * teacher; // * epsC;", "is_target": false}, {"number": 409, "content": "    H_updateTeaching += delta_local * teacher;             // * epsC;", "is_target": true}, {"number": 410, "content": "    // C_updateTeaching += ( (y_buffer[(t)% buffersize])*(x^T) ) * teacher;// * epsC;", "is_target": false}, {"number": 411, "content": "    // H_updateTeaching +=  y_buffer[(t)% buffersize]* teacher;// * epsC;", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    useTeaching =", "is_target": false}, {"number": 414, "content": "      false; // false; after we applied teaching signal it is switched off until new signal is given", "is_target": false}]}, "180": {"lines": [{"number": 49, "content": " * class for robot controller based on homeokinetic learning with a large neural network", "is_target": false}, {"number": 50, "content": " */", "is_target": false}, {"number": 51, "content": "class DerBigController : public InvertMotorController, public Storeable {", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "public:", "is_target": false}, {"number": 54, "content": "  DerBigController(const DerBigControllerConf& conf = getDefaultConf());", "is_target": true}, {"number": 55, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "  virtual ~DerBigController();", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}]}, "181": {"lines": [{"number": 50, "content": " */", "is_target": false}, {"number": 51, "content": "class DerBigController : public InvertMotorController, public Storeable {", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "public:", "is_target": false}, {"number": 54, "content": "  DerBigController(const DerBigControllerConf& conf = getDefaultConf());", "is_target": false}, {"number": 55, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "  virtual ~DerBigController();", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 60, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "182": {"lines": [{"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "public:", "is_target": false}, {"number": 54, "content": "  DerBigController(const DerBigControllerConf& conf = getDefaultConf());", "is_target": false}, {"number": 55, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "  virtual ~DerBigController();", "is_target": true}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 60, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 61, "content": "    return number_sensors;", "is_target": false}, {"number": 62, "content": "  }", "is_target": false}]}, "183": {"lines": [{"number": 65, "content": "    return number_motors;", "is_target": false}, {"number": 66, "content": "  }", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 69, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 70, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 73, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 74, "content": "                              int number_sensors,", "is_target": false}, {"number": 75, "content": "                              motor*,", "is_target": false}]}, "184": {"lines": [{"number": 68, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 69, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 70, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 73, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 74, "content": "                              int number_sensors,", "is_target": false}, {"number": 75, "content": "                              motor*,", "is_target": false}, {"number": 76, "content": "                              int number_motors);", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "  /**************  STOREABLE **********************************/", "is_target": false}]}, "185": {"lines": [{"number": 75, "content": "                              motor*,", "is_target": false}, {"number": 76, "content": "                              int number_motors);", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 79, "content": "  /** stores the controller values to a given file. */", "is_target": false}, {"number": 80, "content": "  virtual bool store(FILE* f) const;", "is_target": true}, {"number": 81, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 82, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 85, "content": "  virtual iparamkeylist getInternalParamNames() const override;", "is_target": false}]}, "186": {"lines": [{"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 79, "content": "  /** stores the controller values to a given file. */", "is_target": false}, {"number": 80, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 81, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 82, "content": "  virtual bool restore(FILE* f);", "is_target": true}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 85, "content": "  virtual iparamkeylist getInternalParamNames() const override;", "is_target": false}, {"number": 86, "content": "  virtual iparamvallist getInternalParams() const override;", "is_target": false}, {"number": 87, "content": "  virtual ilayerlist getStructuralLayers() const override;", "is_target": false}]}, "187": {"lines": [{"number": 34, "content": " */", "is_target": false}, {"number": 35, "content": "class InvertNChannelController : public InvertController {", "is_target": false}, {"number": 36, "content": "", "is_target": false}, {"number": 37, "content": "public:", "is_target": false}, {"number": 38, "content": "  explicit InvertNChannelController(int _buffersize, bool _update_only_1 = false);", "is_target": false}, {"number": 39, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  virtual ~InvertNChannelController();", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "  /// returns the name of the object (with version number)", "is_target": false}, {"number": 44, "content": "  virtual paramkey getName() const noexcept override {", "is_target": false}]}, "188": {"lines": [{"number": 53, "content": "    return number_channels;", "is_target": false}, {"number": 54, "content": "  }", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 57, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 58, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 61, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 62, "content": "                              int number_sensors,", "is_target": false}, {"number": 63, "content": "                              motor*,", "is_target": false}]}, "189": {"lines": [{"number": 56, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 57, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 58, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 61, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 62, "content": "                              int number_sensors,", "is_target": false}, {"number": 63, "content": "                              motor*,", "is_target": false}, {"number": 64, "content": "                              int number_motors);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  /***** STOREABLE ****/", "is_target": false}]}, "190": {"lines": [{"number": 67, "content": " */", "is_target": false}, {"number": 68, "content": "class DampingManagement : public ManagementStrategy {", "is_target": false}, {"number": 69, "content": "public:", "is_target": false}, {"number": 70, "content": "    explicit DampingManagement(double damping = 0.00001, int interval = 10);", "is_target": false}, {"number": 71, "content": "    ", "is_target": false}, {"number": 72, "content": "    void manage(matrix::Matrix& C,", "is_target": true}, {"number": 73, "content": "               matrix::Matrix& A,", "is_target": false}, {"number": 74, "content": "               matrix::Matrix& h,", "is_target": false}, {"number": 75, "content": "               matrix::Matrix& b,", "is_target": false}, {"number": 76, "content": "               int t);", "is_target": false}, {"number": 77, "content": "    ", "is_target": false}]}, "191": {"lines": [{"number": 91, "content": " */", "is_target": false}, {"number": 92, "content": "class KWTAManagement : public ManagementStrategy {", "is_target": false}, {"number": 93, "content": "public:", "is_target": false}, {"number": 94, "content": "    explicit KWTAManagement(unsigned int k, double damping = 0.001, int interval = 100);", "is_target": false}, {"number": 95, "content": "    ", "is_target": false}, {"number": 96, "content": "    void manage(matrix::Matrix& C,", "is_target": true}, {"number": 97, "content": "               matrix::Matrix& A,", "is_target": false}, {"number": 98, "content": "               matrix::Matrix& h,", "is_target": false}, {"number": 99, "content": "               matrix::Matrix& b,", "is_target": false}, {"number": 100, "content": "               int t);", "is_target": false}, {"number": 101, "content": "    ", "is_target": false}]}, "192": {"lines": [{"number": 118, "content": " */", "is_target": false}, {"number": 119, "content": "class ReceptiveFieldManagement : public ManagementStrategy {", "is_target": false}, {"number": 120, "content": "public:", "is_target": false}, {"number": 121, "content": "    explicit ReceptiveFieldManagement(unsigned int rfSize, int interval = 100);", "is_target": false}, {"number": 122, "content": "    ", "is_target": false}, {"number": 123, "content": "    void manage(matrix::Matrix& C,", "is_target": true}, {"number": 124, "content": "               matrix::Matrix& A,", "is_target": false}, {"number": 125, "content": "               matrix::Matrix& h,", "is_target": false}, {"number": 126, "content": "               matrix::Matrix& b,", "is_target": false}, {"number": 127, "content": "               int t);", "is_target": false}, {"number": 128, "content": "    ", "is_target": false}]}, "194": {"lines": [{"number": 162, "content": "            }", "is_target": false}, {"number": 163, "content": "        }", "is_target": false}, {"number": 164, "content": "    }", "is_target": false}, {"number": 165, "content": "    ", "is_target": false}, {"number": 166, "content": "    bool shouldManage(int t) const override {", "is_target": false}, {"number": 167, "content": "        for (const auto& strategy : strategies) {", "is_target": true}, {"number": 168, "content": "            if (strategy->shouldManage(t)) {", "is_target": false}, {"number": 169, "content": "                return true;", "is_target": false}, {"number": 170, "content": "            }", "is_target": false}, {"number": 171, "content": "        }", "is_target": false}, {"number": 172, "content": "        return false;", "is_target": false}]}, "195": {"lines": [{"number": 495, "content": "  conf.sat->learn(x_buffer[(t - delay - 10) % buffersize],", "is_target": false}, {"number": 496, "content": "                  y_buffer[(t - 10) % buffersize] * .99,", "is_target": false}, {"number": 497, "content": "                  epsSat); //*causalfactor);//learning with the current causalfactor", "is_target": false}, {"number": 498, "content": "  const Matrix delta = (y_sat * .95 - y).multrowwise(g_prime);", "is_target": false}, {"number": 499, "content": "  // const Matrix delta = ( x - y ).multrowwise(g_prime); //TEST", "is_target": false}, {"number": 500, "content": "  C_update += delta * (x ^ T) * teacher; //*causalfactor ;// *epsC;", "is_target": true}, {"number": 501, "content": "                                         //  H_update += delta * teacher*causalfactor;// *epsC;", "is_target": false}, {"number": 502, "content": "  H_update += (C ^ T) * delta * teacher; //*causalfactor;// *epsC; TEST H ??????????", "is_target": false}, {"number": 503, "content": "  // const  Matrix yy = conf.sat->process(x_smooth);//TEST ?????????????????????????????", "is_target": false}, {"number": 504, "content": "  //   conf.sat->learn(x_smooth,yy - mue,epsSat);//TEST", "is_target": false}, {"number": 505, "content": "", "is_target": false}]}, "196": {"lines": [{"number": 497, "content": "                  epsSat); //*causalfactor);//learning with the current causalfactor", "is_target": false}, {"number": 498, "content": "  const Matrix delta = (y_sat * .95 - y).multrowwise(g_prime);", "is_target": false}, {"number": 499, "content": "  // const Matrix delta = ( x - y ).multrowwise(g_prime); //TEST", "is_target": false}, {"number": 500, "content": "  C_update += delta * (x ^ T) * teacher; //*causalfactor ;// *epsC;", "is_target": false}, {"number": 501, "content": "                                         //  H_update += delta * teacher*causalfactor;// *epsC;", "is_target": false}, {"number": 502, "content": "  H_update += (C ^ T) * delta * teacher; //*causalfactor;// *epsC; TEST H ??????????", "is_target": true}, {"number": 503, "content": "  // const  Matrix yy = conf.sat->process(x_smooth);//TEST ?????????????????????????????", "is_target": false}, {"number": 504, "content": "  //   conf.sat->learn(x_smooth,yy - mue,epsSat);//TEST", "is_target": false}, {"number": 505, "content": "", "is_target": false}, {"number": 506, "content": "  // Controlling the learning parameters:", "is_target": false}, {"number": 507, "content": "  //   double Test_squashSize = squashSize/5.0;", "is_target": false}]}, "198": {"lines": [{"number": 35, "content": "     @param model pointer to model to accomplish by memory", "is_target": false}, {"number": 36, "content": "     @param memorySize number of pattern that are stored", "is_target": false}, {"number": 37, "content": "     @param numPatternsPerStep number of past patterns to learn each step", "is_target": false}, {"number": 38, "content": "  */", "is_target": false}, {"number": 39, "content": "  ModelWithMemoryAdapter(InvertableModel* model, int memorySize, int numPatternsPerStep);", "is_target": false}, {"number": 40, "content": "  virtual ~ModelWithMemoryAdapter() {}", "is_target": true}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "  virtual void init(unsigned int inputDim,", "is_target": false}, {"number": 43, "content": "                    unsigned int outputDim,", "is_target": false}, {"number": 44, "content": "                    double unit_map = 0.0,", "is_target": false}, {"number": 45, "content": "                    RandGen* randGen = nullptr);", "is_target": false}]}, "199": {"lines": [{"number": 37, "content": "     @param numPatternsPerStep number of past patterns to learn each step", "is_target": false}, {"number": 38, "content": "  */", "is_target": false}, {"number": 39, "content": "  ModelWithMemoryAdapter(InvertableModel* model, int memorySize, int numPatternsPerStep);", "is_target": false}, {"number": 40, "content": "  virtual ~ModelWithMemoryAdapter() {}", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "  virtual void init(unsigned int inputDim,", "is_target": true}, {"number": 43, "content": "                    unsigned int outputDim,", "is_target": false}, {"number": 44, "content": "                    double unit_map = 0.0,", "is_target": false}, {"number": 45, "content": "                    RandGen* randGen = nullptr);", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "  /**", "is_target": false}]}, "200": {"lines": [{"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "  /**", "is_target": false}, {"number": 48, "content": "     learn the input output mapping but also learn mappings from the memory.", "is_target": false}, {"number": 49, "content": "     \\see InvertableModel::learn", "is_target": false}, {"number": 50, "content": "   */", "is_target": false}, {"number": 51, "content": "  virtual const matrix::Matrix learn(const matrix::Matrix& input,", "is_target": true}, {"number": 52, "content": "                                     const matrix::Matrix& nom_output,", "is_target": false}, {"number": 53, "content": "                                     double learnRateFactor = 1) ;", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "  /* ********* Delegations *****************/", "is_target": false}, {"number": 56, "content": "", "is_target": false}]}, "201": {"lines": [{"number": 37, "content": "", "is_target": false}, {"number": 38, "content": "  /**", "is_target": false}, {"number": 39, "content": "     @param controlmask bitmask to select channels to control (default all)", "is_target": false}, {"number": 40, "content": "     @param function controller function to use", "is_target": false}, {"number": 41, "content": "   */", "is_target": false}, {"number": 42, "content": "  MotorBabbler(function func = function::Sine);", "is_target": true}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 45, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 46, "content": "    return number_sensors;", "is_target": false}, {"number": 47, "content": "  }", "is_target": false}]}, "202": {"lines": [{"number": 48, "content": "   */", "is_target": false}, {"number": 49, "content": "  explicit MeasureAdapter(AbstractController* controller,", "is_target": false}, {"number": 50, "content": "                          const std::string& name = \"MeasureAdapter\",", "is_target": false}, {"number": 51, "content": "                          const std::string& revision = \"$ID$\");", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "  virtual ~MeasureAdapter();", "is_target": true}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "  /**", "is_target": false}, {"number": 56, "content": "   * Adds a ComplexMeasure for measuring sensor values. For each", "is_target": false}, {"number": 57, "content": "   * sensor a ComplexMeasure is created.", "is_target": false}, {"number": 58, "content": "   */", "is_target": false}]}, "203": {"lines": [{"number": 39, "content": "     @param controlmask bitmask to select channels to control (default all)", "is_target": false}, {"number": 40, "content": "     @param function controller function to use", "is_target": false}, {"number": 41, "content": "   */", "is_target": false}, {"number": 42, "content": "  MotorBabbler(function func = function::Sine);", "is_target": false}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 45, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 46, "content": "    return number_sensors;", "is_target": false}, {"number": 47, "content": "  }", "is_target": false}, {"number": 48, "content": "  virtual int getMotorNumber() const override {", "is_target": false}, {"number": 49, "content": "    return number_motors;", "is_target": false}]}, "204": {"lines": [{"number": 68, "content": "  /** initialisation of the controller with the given sensor/ motornumber", "is_target": false}, {"number": 69, "content": "   * Must NORMALLY be called before use. For all ControllerAdapters", "is_target": false}, {"number": 70, "content": "   * call first AbstractControllerAdapter::init(sensornumber,motornumber)", "is_target": false}, {"number": 71, "content": "   * if you overwrite this method", "is_target": false}, {"number": 72, "content": "   */", "is_target": false}, {"number": 73, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "  /** performs one step (includes learning).", "is_target": false}, {"number": 76, "content": "      Calculates motor commands from sensor inputs.", "is_target": false}, {"number": 77, "content": "  @param sensors sensors inputs scaled to [-1,1]", "is_target": false}, {"number": 78, "content": "  @param sensornumber length of the sensor array", "is_target": false}]}, "205": {"lines": [{"number": 52, "content": "                    int sensornumber,", "is_target": false}, {"number": 53, "content": "                    motor* motors,", "is_target": false}, {"number": 54, "content": "                    int motornumber) override {", "is_target": false}, {"number": 55, "content": "    stepNoLearning(sensors, sensornumber, motors, motornumber);", "is_target": false}, {"number": 56, "content": "  }", "is_target": false}, {"number": 57, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 58, "content": "                              int number_sensors,", "is_target": false}, {"number": 59, "content": "                              motor*,", "is_target": false}, {"number": 60, "content": "                              int number_motors);", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  // samples a new set of frequencies", "is_target": false}]}, "206": {"lines": [{"number": 77, "content": "  @param sensors sensors inputs scaled to [-1,1]", "is_target": false}, {"number": 78, "content": "  @param sensornumber length of the sensor array", "is_target": false}, {"number": 79, "content": "  @param motors motors outputs. MUST have enough space for motor values!", "is_target": false}, {"number": 80, "content": "  @param motornumber length of the provided motor array", "is_target": false}, {"number": 81, "content": "  */", "is_target": false}, {"number": 82, "content": "  virtual void step(const sensor* sensors,", "is_target": true}, {"number": 83, "content": "                    int sensornumber,", "is_target": false}, {"number": 84, "content": "                    motor* motors,", "is_target": false}, {"number": 85, "content": "                    int motornumber);", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "  /** performs one step without learning.", "is_target": false}]}, "207": {"lines": [{"number": 85, "content": "                    int motornumber);", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "  /** performs one step without learning.", "is_target": false}, {"number": 88, "content": "  @see step", "is_target": false}, {"number": 89, "content": "  */", "is_target": false}, {"number": 90, "content": "  virtual void stepNoLearning(const sensor* sensors,", "is_target": true}, {"number": 91, "content": "                              int sensornumber,", "is_target": false}, {"number": 92, "content": "                              motor* motors,", "is_target": false}, {"number": 93, "content": "                              int motornumber);", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  /****************************************************************************/", "is_target": false}]}, "209": {"lines": [{"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "  /** passive processing of the input.", "is_target": false}, {"number": 65, "content": "      This has to be done before calling reponse, and the back/forward propagation/projection", "is_target": false}, {"number": 66, "content": "     functions. The activations and the response matrix are stored internally.", "is_target": false}, {"number": 67, "content": "   */", "is_target": false}, {"number": 68, "content": "  virtual const matrix::Matrix process(const matrix::Matrix& input);", "is_target": true}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  /** like process just with the opportunity to overwrite the activation of", "is_target": false}, {"number": 71, "content": "      a specific layer", "is_target": false}, {"number": 72, "content": "      @param injections the input that is clamped at layer injectInLayer", "is_target": false}, {"number": 73, "content": "      @param injectInLayer the injection is clamped at this layer", "is_target": false}]}, "210": {"lines": [{"number": 75, "content": "  virtual const matrix::Matrix processX(const matrix::Matrix& input,", "is_target": false}, {"number": 76, "content": "                                        const matrix::Matrix& injection,", "is_target": false}, {"number": 77, "content": "                                        unsigned int injectInLayer);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /// damps the weights and the biases by multiplying (1-damping)", "is_target": false}, {"number": 80, "content": "  virtual void damp(double damping);", "is_target": true}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "  // Implement the pure virtual from AbstractModel", "is_target": false}, {"number": 83, "content": "  virtual const matrix::Matrix learn(const matrix::Matrix& input,", "is_target": false}, {"number": 84, "content": "                                     const matrix::Matrix& nom_output,", "is_target": false}, {"number": 85, "content": "                                     double learnRateFactor = 1) override {", "is_target": false}]}, "211": {"lines": [{"number": 269, "content": "    return bias[of_layer];", "is_target": false}, {"number": 270, "content": "  }", "is_target": false}, {"number": 271, "content": "", "is_target": false}, {"number": 272, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 273, "content": "  /// stores the layer binary into file stream", "is_target": false}, {"number": 274, "content": "  bool store(FILE* f)  const;", "is_target": true}, {"number": 275, "content": "  /// restores the layer binary from file stream", "is_target": false}, {"number": 276, "content": "  bool restore(FILE* f);", "is_target": false}, {"number": 277, "content": "", "is_target": false}, {"number": 278, "content": "  /// writes the layer ASCII into file stream (not in the storable interface)", "is_target": false}, {"number": 279, "content": "  bool write(FILE* f) const;", "is_target": false}]}, "212": {"lines": [{"number": 271, "content": "", "is_target": false}, {"number": 272, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 273, "content": "  /// stores the layer binary into file stream", "is_target": false}, {"number": 274, "content": "  bool store(FILE* f)  const;", "is_target": false}, {"number": 275, "content": "  /// restores the layer binary from file stream", "is_target": false}, {"number": 276, "content": "  bool restore(FILE* f);", "is_target": true}, {"number": 277, "content": "", "is_target": false}, {"number": 278, "content": "  /// writes the layer ASCII into file stream (not in the storable interface)", "is_target": false}, {"number": 279, "content": "  bool write(FILE* f) const;", "is_target": false}, {"number": 280, "content": "", "is_target": false}, {"number": 281, "content": "protected:", "is_target": false}]}, "214": {"lines": [{"number": 17, "content": "  , s4avg(1)", "is_target": false}, {"number": 18, "content": "  , t(0)", "is_target": false}, {"number": 19, "content": "  , init_wait(init_wait)", "is_target": false}, {"number": 20, "content": "  , x_buffer()", "is_target": false}, {"number": 21, "content": "  , y_buffer()", "is_target": false}, {"number": 22, "content": "  , net(new MultiLayerFFNN(0.01, std::vector<Layer>()))", "is_target": true}, {"number": 23, "content": "  , initialised(false) {", "is_target": false}, {"number": 24, "content": "  FILE* f = fopen(networkfilename.c_str(), \"r\");", "is_target": false}, {"number": 25, "content": "  if (!f || !net->restore(f)) {", "is_target": false}, {"number": 26, "content": "    cerr << \"could not load network from file: \" << networkfilename << endl;", "is_target": false}, {"number": 27, "content": "    perror(\"\");", "is_target": false}]}, "215": {"lines": [{"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "  // Implement the pure virtual from InvertableModel", "is_target": false}, {"number": 106, "content": "  virtual const matrix::Matrix inversion(const matrix::Matrix& input,", "is_target": false}, {"number": 107, "content": "                                        const matrix::Matrix& xsi) const override {", "is_target": false}, {"number": 108, "content": "    // Simple pseudo-inverse implementation", "is_target": false}, {"number": 109, "content": "    matrix::Matrix R = response(input);", "is_target": true}, {"number": 110, "content": "    return (R^matrix::T) * xsi;", "is_target": false}, {"number": 111, "content": "  }", "is_target": false}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "  /** like response, just that only a range of layers is considered", "is_target": false}, {"number": 114, "content": "      The Bypass is not considered here.", "is_target": false}]}, "216": {"lines": [{"number": 41, "content": "  */", "is_target": false}, {"number": 42, "content": "  MultiLayerFFNN(double eps,", "is_target": false}, {"number": 43, "content": "                 const std::vector<Layer>& layers,", "is_target": false}, {"number": 44, "content": "                 bool useBypass = false,", "is_target": false}, {"number": 45, "content": "                 bool someInternalParams = true);", "is_target": false}, {"number": 46, "content": "  virtual ~MultiLayerFFNN() {}", "is_target": true}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "  /** initialisation of the network with the given number of input and output units.", "is_target": false}, {"number": 49, "content": "      The dimensionality of the ouputlayer is automatically adjusted.", "is_target": false}, {"number": 50, "content": "      @param unit_map defines the approximate response of the network", "is_target": false}, {"number": 51, "content": "       after initialisation (if unit_map=1 the weights are unit matrices).", "is_target": false}]}, "217": {"lines": [{"number": 49, "content": "      The dimensionality of the ouputlayer is automatically adjusted.", "is_target": false}, {"number": 50, "content": "      @param unit_map defines the approximate response of the network", "is_target": false}, {"number": 51, "content": "       after initialisation (if unit_map=1 the weights are unit matrices).", "is_target": false}, {"number": 52, "content": "      @param randGen pointer to random generator, if 0 an new one is used", "is_target": false}, {"number": 53, "content": "   */", "is_target": false}, {"number": 54, "content": "  virtual void init(unsigned int inputDim,", "is_target": true}, {"number": 55, "content": "                    unsigned int outputDim,", "is_target": false}, {"number": 56, "content": "                    double unit_map = 0.0,", "is_target": false}, {"number": 57, "content": "                    RandGen* randGen = nullptr);", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  /// passive processing of the input", "is_target": false}]}, "218": {"lines": [{"number": 55, "content": "                    unsigned int outputDim,", "is_target": false}, {"number": 56, "content": "                    double unit_map = 0.0,", "is_target": false}, {"number": 57, "content": "                    RandGen* randGen = nullptr);", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  /// passive processing of the input", "is_target": false}, {"number": 60, "content": "  virtual const matrix::Matrix process(const matrix::Matrix& input);", "is_target": true}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  /** performs learning and returns the network output before learning", "is_target": false}, {"number": 63, "content": "      (process should be called before) */", "is_target": false}, {"number": 64, "content": "  virtual const matrix::Matrix learn(const matrix::Matrix& input,", "is_target": false}, {"number": 65, "content": "                                     const matrix::Matrix& nom_output,", "is_target": false}]}, "219": {"lines": [{"number": 59, "content": "  /// passive processing of the input", "is_target": false}, {"number": 60, "content": "  virtual const matrix::Matrix process(const matrix::Matrix& input);", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  /** performs learning and returns the network output before learning", "is_target": false}, {"number": 63, "content": "      (process should be called before) */", "is_target": false}, {"number": 64, "content": "  virtual const matrix::Matrix learn(const matrix::Matrix& input,", "is_target": true}, {"number": 65, "content": "                                     const matrix::Matrix& nom_output,", "is_target": false}, {"number": 66, "content": "                                     double learnRateFactor = 1) ;", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  /** response matrix of neural network at given input", "is_target": false}, {"number": 69, "content": "", "is_target": false}]}, "220": {"lines": [{"number": 80, "content": "      \\f[o+\\xi = \\psi(i+v)\\f]", "is_target": false}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "      The result is a vector of dimension inputdim.", "is_target": false}, {"number": 83, "content": "      ATTENTION: input is ignored! use process before!", "is_target": false}, {"number": 84, "content": "   */", "is_target": false}, {"number": 85, "content": "  virtual const matrix::Matrix inversion(const matrix::Matrix& input,", "is_target": true}, {"number": 86, "content": "                                         const matrix::Matrix& xsi)  const;", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  /// returns the number of input neurons", "is_target": false}, {"number": 89, "content": "  virtual unsigned int getInputDim() const override {", "is_target": false}, {"number": 90, "content": "    return weights[0].getN();", "is_target": false}]}, "221": {"lines": [{"number": 99, "content": "    assert(layer < layers.size());", "is_target": false}, {"number": 100, "content": "    return ys[layer];", "is_target": false}, {"number": 101, "content": "  }", "is_target": false}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "  /// damps the weights and the biases by multiplying (1-damping)", "is_target": false}, {"number": 104, "content": "  virtual void damp(double damping);", "is_target": true}, {"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "  // total number of layers (1 means no hidden units)", "is_target": false}, {"number": 107, "content": "  virtual unsigned int getLayerNum() const {", "is_target": false}, {"number": 108, "content": "    return layers.size();", "is_target": false}, {"number": 109, "content": "  }", "is_target": false}]}, "222": {"lines": [{"number": 144, "content": "    return bias[of_layer];", "is_target": false}, {"number": 145, "content": "  }", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 148, "content": "  /// stores the layer binary into file stream", "is_target": false}, {"number": 149, "content": "  bool store(FILE* f)  const;", "is_target": true}, {"number": 150, "content": "  /// restores the layer binary from file stream", "is_target": false}, {"number": 151, "content": "  bool restore(FILE* f);", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "  /// writes the layer ASCII into file stream (not in the storable interface)", "is_target": false}, {"number": 154, "content": "  bool write(FILE* f) const;", "is_target": false}]}, "223": {"lines": [{"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 148, "content": "  /// stores the layer binary into file stream", "is_target": false}, {"number": 149, "content": "  bool store(FILE* f)  const;", "is_target": false}, {"number": 150, "content": "  /// restores the layer binary from file stream", "is_target": false}, {"number": 151, "content": "  bool restore(FILE* f);", "is_target": true}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "  /// writes the layer ASCII into file stream (not in the storable interface)", "is_target": false}, {"number": 154, "content": "  bool write(FILE* f) const;", "is_target": false}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "  /************** Inspectable **********************************/", "is_target": false}]}, "224": {"lines": [{"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "  /// writes the layer ASCII into file stream (not in the storable interface)", "is_target": false}, {"number": 154, "content": "  bool write(FILE* f) const;", "is_target": false}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "  /************** Inspectable **********************************/", "is_target": false}, {"number": 157, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": true}, {"number": 158, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 159, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 160, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "  virtual void setSomeInternalParams(bool someInternalParams) {", "is_target": false}]}, "225": {"lines": [{"number": 153, "content": "  /// writes the layer ASCII into file stream (not in the storable interface)", "is_target": false}, {"number": 154, "content": "  bool write(FILE* f) const;", "is_target": false}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "  /************** Inspectable **********************************/", "is_target": false}, {"number": 157, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 158, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": true}, {"number": 159, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 160, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "  virtual void setSomeInternalParams(bool someInternalParams) {", "is_target": false}, {"number": 163, "content": "    assert(!initialised);", "is_target": false}]}, "226": {"lines": [{"number": 154, "content": "  bool write(FILE* f) const;", "is_target": false}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "  /************** Inspectable **********************************/", "is_target": false}, {"number": 157, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 158, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 159, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": true}, {"number": 160, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "  virtual void setSomeInternalParams(bool someInternalParams) {", "is_target": false}, {"number": 163, "content": "    assert(!initialised);", "is_target": false}, {"number": 164, "content": "    this->someInternalParams = someInternalParams;", "is_target": false}]}, "227": {"lines": [{"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "  /************** Inspectable **********************************/", "is_target": false}, {"number": 157, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 158, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 159, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 160, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": true}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "  virtual void setSomeInternalParams(bool someInternalParams) {", "is_target": false}, {"number": 163, "content": "    assert(!initialised);", "is_target": false}, {"number": 164, "content": "    this->someInternalParams = someInternalParams;", "is_target": false}, {"number": 165, "content": "  }", "is_target": false}]}, "228": {"lines": [{"number": 53, "content": "     x_{t-1},y_{t-2},...,x_{t-history})^T \\f]", "is_target": false}, {"number": 54, "content": "      @param init_wait number of timesteps to wait before controlling", "is_target": false}, {"number": 55, "content": "  */", "is_target": false}, {"number": 56, "content": "  FFNNController(MultiLayerFFNN* net, int history, bool input_only_x, unsigned int init_wait = 0);", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  virtual ~FFNNController();", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 63, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "229": {"lines": [{"number": 55, "content": "  */", "is_target": false}, {"number": 56, "content": "  FFNNController(MultiLayerFFNN* net, int history, bool input_only_x, unsigned int init_wait = 0);", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  virtual ~FFNNController();", "is_target": true}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 63, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 64, "content": "    return number_sensors;", "is_target": false}, {"number": 65, "content": "  }", "is_target": false}]}, "230": {"lines": [{"number": 66, "content": "  /// returns the mumber of motors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 67, "content": "  virtual int getMotorNumber() const override {", "is_target": false}, {"number": 68, "content": "    return number_motors;", "is_target": false}, {"number": 69, "content": "  }", "is_target": false}, {"number": 70, "content": "", "is_target": false}, {"number": 71, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 72, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 73, "content": "                              int number_sensors,", "is_target": false}, {"number": 74, "content": "                              motor*,", "is_target": false}, {"number": 75, "content": "                              int number_motors);", "is_target": false}, {"number": 76, "content": "", "is_target": false}]}, "231": {"lines": [{"number": 67, "content": "  virtual int getMotorNumber() const override {", "is_target": false}, {"number": 68, "content": "    return number_motors;", "is_target": false}, {"number": 69, "content": "  }", "is_target": false}, {"number": 70, "content": "", "is_target": false}, {"number": 71, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 72, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 73, "content": "                              int number_sensors,", "is_target": false}, {"number": 74, "content": "                              motor*,", "is_target": false}, {"number": 75, "content": "                              int number_motors);", "is_target": false}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "  /**** CONFIGURABLE ****/", "is_target": false}]}, "232": {"lines": [{"number": 73, "content": "                              int number_sensors,", "is_target": false}, {"number": 74, "content": "                              motor*,", "is_target": false}, {"number": 75, "content": "                              int number_motors);", "is_target": false}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "  /**** CONFIGURABLE ****/", "is_target": false}, {"number": 78, "content": "  void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "  /**** STOREABLE ****/", "is_target": false}, {"number": 81, "content": "  /** stores the controller values to a given file (binary).  */", "is_target": false}, {"number": 82, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 83, "content": "  /** loads the controller values from a given file (binary). */", "is_target": false}]}, "234": {"lines": [{"number": 83, "content": "  matrix::Matrix h; // Controller Bias", "is_target": false}, {"number": 84, "content": "  matrix::Matrix L; // Jacobi Matrix", "is_target": false}, {"number": 85, "content": "  std::vector<matrix::Matrix> x_buffer;", "is_target": false}, {"number": 86, "content": "  std::vector<matrix::Matrix> y_buffer;", "is_target": false}, {"number": 87, "content": "  int t = 0;", "is_target": false}, {"number": 88, "content": "  paramkey name;", "is_target": true}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "  /*   virtual void iteration(double *column, */", "is_target": false}, {"number": 91, "content": "  /*                          double dommy[NUMBER_CHANNELS][NUMBER_CHANNELS], */", "is_target": false}, {"number": 92, "content": "  /*                          double *improvment); */", "is_target": false}, {"number": 93, "content": "", "is_target": false}]}, "235": {"lines": [{"number": 97, "content": "  static double sawtooth(double x, double _unused);", "is_target": false}, {"number": 98, "content": "  /// impuls shaped oscillator (+-1 for impulsWidth part of the time)", "is_target": false}, {"number": 99, "content": "  static double impuls(double x, double impulsWidth);", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "protected:", "is_target": false}, {"number": 102, "content": "  std::string name;", "is_target": true}, {"number": 103, "content": "  int number_sensors = 0;", "is_target": false}, {"number": 104, "content": "  int number_motors = 0;", "is_target": false}, {"number": 105, "content": "  unsigned long int controlmask; // bitmask to select channels. (the others are set to 0)", "is_target": false}, {"number": 106, "content": "  bool individual = false;", "is_target": false}, {"number": 107, "content": "", "is_target": false}]}, "236": {"lines": [{"number": 57, "content": "public:", "is_target": false}, {"number": 58, "content": "  /// constructor", "is_target": false}, {"number": 59, "content": "  explicit Sox(const SoxConf& conf = getDefaultConf());", "is_target": false}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "  /// constructor provided for convenience, use conf object to customize more", "is_target": false}, {"number": 62, "content": "  Sox(double init_feedback_strength,", "is_target": true}, {"number": 63, "content": "               bool useExtendedModel = true,", "is_target": false}, {"number": 64, "content": "               bool useTeaching = false);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 67, "content": "", "is_target": false}]}, "237": {"lines": [{"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "  /**", "is_target": false}, {"number": 40, "content": "     @param controlmask bitmask to select channels to control (default all)", "is_target": false}, {"number": 41, "content": "     @param function controller function to use", "is_target": false}, {"number": 42, "content": "   */", "is_target": false}, {"number": 43, "content": "  SineController(unsigned long int controlmask = (~0), function func = function::Sine);", "is_target": true}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "  /** initialisation of the controller with the given sensor/ motornumber", "is_target": false}, {"number": 46, "content": "      Must be called before use.", "is_target": false}, {"number": 47, "content": "  */", "is_target": false}, {"number": 48, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}]}, "238": {"lines": [{"number": 114, "content": "  double (*osci)(double x, double param); // oscillator function", "is_target": false}, {"number": 115, "content": "};", "is_target": false}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "class MultiSineController : public SineController {", "is_target": false}, {"number": 118, "content": "public:", "is_target": false}, {"number": 119, "content": "  MultiSineController(unsigned long int controlmask = (~0),", "is_target": true}, {"number": 120, "content": "                               function func = function::Sine);", "is_target": false}, {"number": 121, "content": "  virtual ~MultiSineController();", "is_target": false}, {"number": 122, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 123, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 124, "content": "                              int number_sensors,", "is_target": false}]}, "239": {"lines": [{"number": 90, "content": "class HomeokineticsLearning : public LearningStrategy {", "is_target": false}, {"number": 91, "content": "public:", "is_target": false}, {"number": 92, "content": "    explicit HomeokineticsLearning(double epsC = 0.1, double epsA = 0.1);", "is_target": false}, {"number": 93, "content": "    ", "is_target": false}, {"number": 94, "content": "    std::pair<matrix::Matrix, matrix::Matrix> ", "is_target": false}, {"number": 95, "content": "    calculateControllerUpdate(const matrix::Matrix& C,", "is_target": true}, {"number": 96, "content": "                             const matrix::Matrix& h,", "is_target": false}, {"number": 97, "content": "                             const matrix::Matrix& xsi,", "is_target": false}, {"number": 98, "content": "                             const matrix::Matrix* x_buffer,", "is_target": false}, {"number": 99, "content": "                             const matrix::Matrix* y_buffer,", "is_target": false}, {"number": 100, "content": "                             int t);", "is_target": false}]}, "240": {"lines": [{"number": 98, "content": "                             const matrix::Matrix* x_buffer,", "is_target": false}, {"number": 99, "content": "                             const matrix::Matrix* y_buffer,", "is_target": false}, {"number": 100, "content": "                             int t);", "is_target": false}, {"number": 101, "content": "    ", "is_target": false}, {"number": 102, "content": "    std::pair<matrix::Matrix, matrix::Matrix>", "is_target": false}, {"number": 103, "content": "    calculateModelUpdate(const matrix::Matrix& A,", "is_target": true}, {"number": 104, "content": "                        const matrix::Matrix& b,", "is_target": false}, {"number": 105, "content": "                        const matrix::Matrix& xsi,", "is_target": false}, {"number": 106, "content": "                        const matrix::Matrix* x_buffer,", "is_target": false}, {"number": 107, "content": "                        const matrix::Matrix* y_buffer,", "is_target": false}, {"number": 108, "content": "                        int t);", "is_target": false}]}, "241": {"lines": [{"number": 61, "content": "  /// constructor provided for convenience, use conf object to customize more", "is_target": false}, {"number": 62, "content": "  Sox(double init_feedback_strength,", "is_target": false}, {"number": 63, "content": "               bool useExtendedModel = true,", "is_target": false}, {"number": 64, "content": "               bool useTeaching = false);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  virtual ~Sox();", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  static SoxConf getDefaultConf() {", "is_target": false}, {"number": 71, "content": "    SoxConf conf;", "is_target": false}]}, "242": {"lines": [{"number": 133, "content": "class TeachableHomeokineticsLearning : public HomeokineticsLearning {", "is_target": false}, {"number": 134, "content": "public:", "is_target": false}, {"number": 135, "content": "    explicit TeachableHomeokineticsLearning(double epsC = 0.1, double epsA = 0.1, double gamma_teach = 0.001);", "is_target": false}, {"number": 136, "content": "    ", "is_target": false}, {"number": 137, "content": "    std::pair<matrix::Matrix, matrix::Matrix> ", "is_target": false}, {"number": 138, "content": "    calculateControllerUpdate(const matrix::Matrix& C,", "is_target": true}, {"number": 139, "content": "                             const matrix::Matrix& h,", "is_target": false}, {"number": 140, "content": "                             const matrix::Matrix& xsi,", "is_target": false}, {"number": 141, "content": "                             const matrix::Matrix* x_buffer,", "is_target": false}, {"number": 142, "content": "                             const matrix::Matrix* y_buffer,", "is_target": false}, {"number": 143, "content": "                             int t);", "is_target": false}]}, "243": {"lines": [{"number": 63, "content": "               bool useExtendedModel = true,", "is_target": false}, {"number": 64, "content": "               bool useTeaching = false);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  virtual ~Sox();", "is_target": true}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  static SoxConf getDefaultConf() {", "is_target": false}, {"number": 71, "content": "    SoxConf conf;", "is_target": false}, {"number": 72, "content": "    conf.initFeedbackStrength = 1.0;", "is_target": false}, {"number": 73, "content": "    conf.useExtendedModel = true;", "is_target": false}]}, "244": {"lines": [{"number": 92, "content": "    return number_motors;", "is_target": false}, {"number": 93, "content": "  }", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 96, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 97, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 100, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 101, "content": "                              int number_sensors,", "is_target": false}, {"number": 102, "content": "                              motor*,", "is_target": false}]}, "245": {"lines": [{"number": 95, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 96, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 97, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 100, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 101, "content": "                              int number_sensors,", "is_target": false}, {"number": 102, "content": "                              motor*,", "is_target": false}, {"number": 103, "content": "                              int number_motors);", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "  /// called during babbling phase", "is_target": false}]}, "246": {"lines": [{"number": 101, "content": "                              int number_sensors,", "is_target": false}, {"number": 102, "content": "                              motor*,", "is_target": false}, {"number": 103, "content": "                              int number_motors);", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "  /// called during babbling phase", "is_target": false}, {"number": 106, "content": "  virtual void motorBabblingStep(const sensor*,", "is_target": true}, {"number": 107, "content": "                                 int number_sensors,", "is_target": false}, {"number": 108, "content": "                                 const motor*,", "is_target": false}, {"number": 109, "content": "                                 int number_motors);", "is_target": false}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "  /***** STOREABLE ****/", "is_target": false}]}, "247": {"lines": [{"number": 121, "content": "  virtual void setC(const matrix::Matrix& C);", "is_target": false}, {"number": 122, "content": "  virtual matrix::Matrix geth() const;", "is_target": false}, {"number": 123, "content": "  virtual void seth(const matrix::Matrix& h);", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "  /***** TEACHABLE ****/", "is_target": false}, {"number": 126, "content": "  virtual void setMotorTeaching(const matrix::Matrix& teaching);", "is_target": true}, {"number": 127, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 128, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 129, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 130, "content": "", "is_target": false}, {"number": 131, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}]}, "248": {"lines": [{"number": 122, "content": "  virtual matrix::Matrix geth() const;", "is_target": false}, {"number": 123, "content": "  virtual void seth(const matrix::Matrix& h);", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "  /***** TEACHABLE ****/", "is_target": false}, {"number": 126, "content": "  virtual void setMotorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 127, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": true}, {"number": 128, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 129, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 130, "content": "", "is_target": false}, {"number": 131, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}, {"number": 132, "content": "  virtual std::list<matrix::Matrix> getParameters() const;", "is_target": false}]}, "249": {"lines": [{"number": 123, "content": "  virtual void seth(const matrix::Matrix& h);", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "  /***** TEACHABLE ****/", "is_target": false}, {"number": 126, "content": "  virtual void setMotorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 127, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 128, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": true}, {"number": 129, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 130, "content": "", "is_target": false}, {"number": 131, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}, {"number": 132, "content": "  virtual std::list<matrix::Matrix> getParameters() const;", "is_target": false}, {"number": 133, "content": "  virtual int setParameters(const std::list<matrix::Matrix>& params);", "is_target": false}]}, "250": {"lines": [{"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "  /***** TEACHABLE ****/", "is_target": false}, {"number": 126, "content": "  virtual void setMotorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 127, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 128, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 129, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": true}, {"number": 130, "content": "", "is_target": false}, {"number": 131, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}, {"number": 132, "content": "  virtual std::list<matrix::Matrix> getParameters() const;", "is_target": false}, {"number": 133, "content": "  virtual int setParameters(const std::list<matrix::Matrix>& params);", "is_target": false}, {"number": 134, "content": "", "is_target": false}]}, "251": {"lines": [{"number": 45, "content": " */", "is_target": false}, {"number": 46, "content": "class SoxExpand : public AbstractController {", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "public:", "is_target": false}, {"number": 49, "content": "  explicit SoxExpand(const SoxExpandConf& conf = getDefaultConf());", "is_target": false}, {"number": 50, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  virtual ~SoxExpand();", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "  static SoxExpandConf getDefaultConf() {", "is_target": false}, {"number": 55, "content": "    SoxExpandConf c;", "is_target": false}]}, "252": {"lines": [{"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "public:", "is_target": false}, {"number": 49, "content": "  explicit SoxExpand(const SoxExpandConf& conf = getDefaultConf());", "is_target": false}, {"number": 50, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  virtual ~SoxExpand();", "is_target": true}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "  static SoxExpandConf getDefaultConf() {", "is_target": false}, {"number": 55, "content": "    SoxExpandConf c;", "is_target": false}, {"number": 56, "content": "    c.initFeedbackStrength = 1.0;", "is_target": false}, {"number": 57, "content": "    c.numberContextSensors = 0;", "is_target": false}]}, "253": {"lines": [{"number": 67, "content": "    return number_motors;", "is_target": false}, {"number": 68, "content": "  }", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 71, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 72, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 75, "content": "  virtual void stepNoLearning(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "  /***** STOREABLE ****/", "is_target": false}]}, "254": {"lines": [{"number": 70, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 71, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 72, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 75, "content": "  virtual void stepNoLearning(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "  /***** STOREABLE ****/", "is_target": false}, {"number": 78, "content": "  /** stores the controller values to a given file. */", "is_target": false}, {"number": 79, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 80, "content": "  /** loads the controller values from a given file. */", "is_target": false}]}, "255": {"lines": [{"number": 34, "content": " */", "is_target": false}, {"number": 35, "content": "class Sos : public AbstractController {", "is_target": false}, {"number": 36, "content": "", "is_target": false}, {"number": 37, "content": "public:", "is_target": false}, {"number": 38, "content": "  explicit Sos(double init_feedback_strength = 1.0);", "is_target": false}, {"number": 39, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  virtual ~Sos();", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 44, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "256": {"lines": [{"number": 36, "content": "", "is_target": false}, {"number": 37, "content": "public:", "is_target": false}, {"number": 38, "content": "  explicit Sos(double init_feedback_strength = 1.0);", "is_target": false}, {"number": 39, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  virtual ~Sos();", "is_target": true}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 44, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 45, "content": "    return number_sensors;", "is_target": false}, {"number": 46, "content": "  }", "is_target": false}]}, "257": {"lines": [{"number": 33, "content": " * generated motor values from the active controller.", "is_target": false}, {"number": 34, "content": " */", "is_target": false}, {"number": 35, "content": "class OneActiveMultiPassiveController : public AbstractMultiController {", "is_target": false}, {"number": 36, "content": "public:", "is_target": false}, {"number": 37, "content": "  /// contructor (hint: use $ID$ for revision)", "is_target": false}, {"number": 38, "content": "  OneActiveMultiPassiveController(AbstractController* controller,", "is_target": true}, {"number": 39, "content": "                                           const std::string& name = \"1ActXPassController\",", "is_target": false}, {"number": 40, "content": "                                           const std::string& revision = \"$ID$\");", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "  virtual ~OneActiveMultiPassiveController();", "is_target": false}, {"number": 43, "content": "", "is_target": false}]}, "258": {"lines": [{"number": 49, "content": "    return number_motors;", "is_target": false}, {"number": 50, "content": "  }", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 53, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 54, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 57, "content": "  virtual void stepNoLearning(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  /***** STOREABLE ****/", "is_target": false}]}, "259": {"lines": [{"number": 52, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 53, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 54, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 57, "content": "  virtual void stepNoLearning(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  /***** STOREABLE ****/", "is_target": false}, {"number": 60, "content": "  /** stores the controller values to a given file. */", "is_target": false}, {"number": 61, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 62, "content": "  /** loads the controller values from a given file. */", "is_target": false}]}, "260": {"lines": [{"number": 37, "content": "  /// contructor (hint: use $ID$ for revision)", "is_target": false}, {"number": 38, "content": "  OneActiveMultiPassiveController(AbstractController* controller,", "is_target": false}, {"number": 39, "content": "                                           const std::string& name = \"1ActXPassController\",", "is_target": false}, {"number": 40, "content": "                                           const std::string& revision = \"$ID$\");", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "  virtual ~OneActiveMultiPassiveController();", "is_target": true}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "  /****************************************************************************/", "is_target": false}, {"number": 45, "content": "  /*        AbstractMultiController should implement the following classes:                */", "is_target": false}, {"number": 46, "content": "  /*        AbstractController, Configurable, Inspectable, Storeable                    */", "is_target": false}, {"number": 47, "content": "  /****************************************************************************/", "is_target": false}]}, "261": {"lines": [{"number": 53, "content": "  /** initialisation of the controller with the given sensor/ motornumber", "is_target": false}, {"number": 54, "content": "   * Must NORMALLY be called before use. For all multicontroller", "is_target": false}, {"number": 55, "content": "   * call first AbstractMultiController::init(sensornumber,motornumber)", "is_target": false}, {"number": 56, "content": "   * if you overwrite this method", "is_target": false}, {"number": 57, "content": "   */", "is_target": false}, {"number": 58, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  /** performs one step (includes learning).", "is_target": false}, {"number": 61, "content": "Calculates motor commands from sensor inputs.", "is_target": false}, {"number": 62, "content": "@param sensors sensors inputs scaled to [-1,1]", "is_target": false}, {"number": 63, "content": "@param sensornumber length of the sensor array", "is_target": false}]}, "262": {"lines": [{"number": 62, "content": "@param sensors sensors inputs scaled to [-1,1]", "is_target": false}, {"number": 63, "content": "@param sensornumber length of the sensor array", "is_target": false}, {"number": 64, "content": "@param motors motors outputs. MUST have enough space for motor values!", "is_target": false}, {"number": 65, "content": "@param motornumber length of the provided motor array", "is_target": false}, {"number": 66, "content": "*/", "is_target": false}, {"number": 67, "content": "  virtual void step(const sensor* sensors,", "is_target": true}, {"number": 68, "content": "                    int sensornumber,", "is_target": false}, {"number": 69, "content": "                    motor* motors,", "is_target": false}, {"number": 70, "content": "                    int motornumber);", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  /** performs one step without learning.", "is_target": false}]}, "263": {"lines": [{"number": 70, "content": "                    int motornumber);", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  /** performs one step without learning.", "is_target": false}, {"number": 73, "content": "        @see step", "is_target": false}, {"number": 74, "content": "  */", "is_target": false}, {"number": 75, "content": "  virtual void stepNoLearning(const sensor* sensors,", "is_target": true}, {"number": 76, "content": "                              int sensornumber,", "is_target": false}, {"number": 77, "content": "                              motor* motors,", "is_target": false}, {"number": 78, "content": "                              int motornumber);", "is_target": false}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "  /****************************************************************************/", "is_target": false}]}, "264": {"lines": [{"number": 60, "content": "class PiMax : public AbstractController, public Teachable, public Parametrizable {", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "public:", "is_target": false}, {"number": 63, "content": "  explicit PiMax(const PiMaxConf& conf = getDefaultConf());", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "  virtual ~PiMax();", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "  static PiMaxConf getDefaultConf() {", "is_target": false}, {"number": 70, "content": "    PiMaxConf conf;", "is_target": false}]}, "265": {"lines": [{"number": 62, "content": "public:", "is_target": false}, {"number": 63, "content": "  explicit PiMax(const PiMaxConf& conf = getDefaultConf());", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "  virtual ~PiMax();", "is_target": true}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "  static PiMaxConf getDefaultConf() {", "is_target": false}, {"number": 70, "content": "    PiMaxConf conf;", "is_target": false}, {"number": 71, "content": "    conf.initFeedbackStrength = 1.0;", "is_target": false}, {"number": 72, "content": "    conf.useExtendedModel = false;", "is_target": false}]}, "266": {"lines": [{"number": 88, "content": "    return number_motors;", "is_target": false}, {"number": 89, "content": "  }", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 92, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 93, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 96, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 97, "content": "                              int number_sensors,", "is_target": false}, {"number": 98, "content": "                              motor*,", "is_target": false}]}, "267": {"lines": [{"number": 91, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 92, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 93, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 96, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 97, "content": "                              int number_sensors,", "is_target": false}, {"number": 98, "content": "                              motor*,", "is_target": false}, {"number": 99, "content": "                              int number_motors);", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "  /// called during babbling phase", "is_target": false}]}, "268": {"lines": [{"number": 97, "content": "                              int number_sensors,", "is_target": false}, {"number": 98, "content": "                              motor*,", "is_target": false}, {"number": 99, "content": "                              int number_motors);", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "  /// called during babbling phase", "is_target": false}, {"number": 102, "content": "  virtual void motorBabblingStep(const sensor*,", "is_target": true}, {"number": 103, "content": "                                 int number_sensors,", "is_target": false}, {"number": 104, "content": "                                 const motor*,", "is_target": false}, {"number": 105, "content": "                                 int number_motors);", "is_target": false}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "  /***** STOREABLE ****/", "is_target": false}]}, "269": {"lines": [{"number": 117, "content": "  virtual void setC(const matrix::Matrix& C);", "is_target": false}, {"number": 118, "content": "  virtual matrix::Matrix geth();", "is_target": false}, {"number": 119, "content": "  virtual void seth(const matrix::Matrix& h);", "is_target": false}, {"number": 120, "content": "", "is_target": false}, {"number": 121, "content": "  /***** TEACHABLE ****/", "is_target": false}, {"number": 122, "content": "  virtual void setMotorTeaching(const matrix::Matrix& teaching);", "is_target": true}, {"number": 123, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 124, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 125, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 126, "content": "", "is_target": false}, {"number": 127, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}]}, "270": {"lines": [{"number": 33, "content": "    The output of the network is  \\f$exp(- |x-w_i|^2/cellsize)\\f$ for each neuron,", "is_target": false}, {"number": 34, "content": "    where cellsize is distance to the second closest neigbour.", "is_target": false}, {"number": 35, "content": "*/", "is_target": false}, {"number": 36, "content": "class NeuralGas : public AbstractModel {", "is_target": false}, {"number": 37, "content": "public:", "is_target": false}, {"number": 38, "content": "  NeuralGas(const std::string& name = \"NeuralGas\", const std::string& revision = \"$Id$\");", "is_target": true}, {"number": 39, "content": "  /** create a som", "is_target": false}, {"number": 40, "content": "      @param lambda initial competetive constant for neighborhood learning", "is_target": false}, {"number": 41, "content": "      @param eps initial  learning rate", "is_target": false}, {"number": 42, "content": "      @param maxTime maximal time we expect the network to learn, if 0 no annealing is performed", "is_target": false}, {"number": 43, "content": "   */", "is_target": false}]}, "271": {"lines": [{"number": 118, "content": "  virtual matrix::Matrix geth();", "is_target": false}, {"number": 119, "content": "  virtual void seth(const matrix::Matrix& h);", "is_target": false}, {"number": 120, "content": "", "is_target": false}, {"number": 121, "content": "  /***** TEACHABLE ****/", "is_target": false}, {"number": 122, "content": "  virtual void setMotorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 123, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": true}, {"number": 124, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 125, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 126, "content": "", "is_target": false}, {"number": 127, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}, {"number": 128, "content": "  virtual std::list<matrix::Matrix> getParameters()  const ;", "is_target": false}]}, "272": {"lines": [{"number": 119, "content": "  virtual void seth(const matrix::Matrix& h);", "is_target": false}, {"number": 120, "content": "", "is_target": false}, {"number": 121, "content": "  /***** TEACHABLE ****/", "is_target": false}, {"number": 122, "content": "  virtual void setMotorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 123, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 124, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": true}, {"number": 125, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 126, "content": "", "is_target": false}, {"number": 127, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}, {"number": 128, "content": "  virtual std::list<matrix::Matrix> getParameters()  const ;", "is_target": false}, {"number": 129, "content": "  virtual int setParameters(const std::list<matrix::Matrix>& params);", "is_target": false}]}, "273": {"lines": [{"number": 44, "content": "  NeuralGas(double lambda,", "is_target": false}, {"number": 45, "content": "            double eps,", "is_target": false}, {"number": 46, "content": "            int maxTime,", "is_target": false}, {"number": 47, "content": "            const std::string& name = \"NeuralGas\",", "is_target": false}, {"number": 48, "content": "            const std::string& revision = \"$Id$\");", "is_target": false}, {"number": 49, "content": "  virtual ~NeuralGas() {};", "is_target": true}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "  /** initialised som", "is_target": false}, {"number": 52, "content": "      @param inputDim dimension of input vector", "is_target": false}, {"number": 53, "content": "      @param outputDim number of outputneurons", "is_target": false}, {"number": 54, "content": "      @param unit_map interval for randomly choosen weights.", "is_target": false}]}, "274": {"lines": [{"number": 120, "content": "", "is_target": false}, {"number": 121, "content": "  /***** TEACHABLE ****/", "is_target": false}, {"number": 122, "content": "  virtual void setMotorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 123, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 124, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 125, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": true}, {"number": 126, "content": "", "is_target": false}, {"number": 127, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}, {"number": 128, "content": "  virtual std::list<matrix::Matrix> getParameters()  const ;", "is_target": false}, {"number": 129, "content": "  virtual int setParameters(const std::list<matrix::Matrix>& params);", "is_target": false}, {"number": 130, "content": "", "is_target": false}]}, "275": {"lines": [{"number": 52, "content": "      @param inputDim dimension of input vector", "is_target": false}, {"number": 53, "content": "      @param outputDim number of outputneurons", "is_target": false}, {"number": 54, "content": "      @param unit_map interval for randomly choosen weights.", "is_target": false}, {"number": 55, "content": "               if zero then (-1,1) is used otherwise (-unit_map, unit_map) (in all dimensions)", "is_target": false}, {"number": 56, "content": "   */", "is_target": false}, {"number": 57, "content": "  virtual void init(unsigned int inputDim,", "is_target": true}, {"number": 58, "content": "                    unsigned int outputDim,", "is_target": false}, {"number": 59, "content": "                    double unit_map = 0.0,", "is_target": false}, {"number": 60, "content": "                    RandGen* randGen = nullptr);", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  virtual const matrix::Matrix process(const matrix::Matrix& input);", "is_target": false}]}, "276": {"lines": [{"number": 123, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 124, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 125, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 126, "content": "", "is_target": false}, {"number": 127, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}, {"number": 128, "content": "  virtual std::list<matrix::Matrix> getParameters()  const ;", "is_target": true}, {"number": 129, "content": "  virtual int setParameters(const std::list<matrix::Matrix>& params);", "is_target": false}, {"number": 130, "content": "", "is_target": false}, {"number": 131, "content": "protected:", "is_target": false}, {"number": 132, "content": "  unsigned short number_sensors = 0;", "is_target": false}, {"number": 133, "content": "  unsigned short number_motors = 0;", "is_target": false}]}, "277": {"lines": [{"number": 57, "content": "  virtual void init(unsigned int inputDim,", "is_target": false}, {"number": 58, "content": "                    unsigned int outputDim,", "is_target": false}, {"number": 59, "content": "                    double unit_map = 0.0,", "is_target": false}, {"number": 60, "content": "                    RandGen* randGen = nullptr);", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  virtual const matrix::Matrix process(const matrix::Matrix& input);", "is_target": true}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "  /*  performs training. Nominal output is ignored.", "is_target": false}, {"number": 65, "content": "      A zero matrix is returned.", "is_target": false}, {"number": 66, "content": "      learnRateFactor can be given to modify eps for this learning step", "is_target": false}, {"number": 67, "content": "      (process should be called before)", "is_target": false}]}, "278": {"lines": [{"number": 124, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 125, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 126, "content": "", "is_target": false}, {"number": 127, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}, {"number": 128, "content": "  virtual std::list<matrix::Matrix> getParameters()  const ;", "is_target": false}, {"number": 129, "content": "  virtual int setParameters(const std::list<matrix::Matrix>& params);", "is_target": true}, {"number": 130, "content": "", "is_target": false}, {"number": 131, "content": "protected:", "is_target": false}, {"number": 132, "content": "  unsigned short number_sensors = 0;", "is_target": false}, {"number": 133, "content": "  unsigned short number_motors = 0;", "is_target": false}, {"number": 134, "content": "  static constexpr unsigned short buffersize = 20;", "is_target": false}]}, "279": {"lines": [{"number": 32, "content": " */", "is_target": false}, {"number": 33, "content": "class InvertMotorSpace : public InvertMotorController {", "is_target": false}, {"number": 34, "content": "", "is_target": false}, {"number": 35, "content": "public:", "is_target": false}, {"number": 36, "content": "  explicit InvertMotorSpace(int buffersize, double cInit = 0.1, bool someInternalParams = true);", "is_target": false}, {"number": 37, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "  virtual ~InvertMotorSpace();", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 42, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "280": {"lines": [{"number": 64, "content": "  /*  performs training. Nominal output is ignored.", "is_target": false}, {"number": 65, "content": "      A zero matrix is returned.", "is_target": false}, {"number": 66, "content": "      learnRateFactor can be given to modify eps for this learning step", "is_target": false}, {"number": 67, "content": "      (process should be called before)", "is_target": false}, {"number": 68, "content": "  */", "is_target": false}, {"number": 69, "content": "  virtual const matrix::Matrix learn(const matrix::Matrix& input,", "is_target": true}, {"number": 70, "content": "                                     const matrix::Matrix& nom_output,", "is_target": false}, {"number": 71, "content": "                                     double learnRateFactor = 1) ;", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  virtual void damp(double damping) override {", "is_target": false}, {"number": 74, "content": "    return;", "is_target": false}]}, "281": {"lines": [{"number": 34, "content": "", "is_target": false}, {"number": 35, "content": "public:", "is_target": false}, {"number": 36, "content": "  explicit InvertMotorSpace(int buffersize, double cInit = 0.1, bool someInternalParams = true);", "is_target": false}, {"number": 37, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "  virtual ~InvertMotorSpace();", "is_target": true}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 42, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 43, "content": "    return number_sensors;", "is_target": false}, {"number": 44, "content": "  }", "is_target": false}]}, "282": {"lines": [{"number": 47, "content": "    return number_motors;", "is_target": false}, {"number": 48, "content": "  }", "is_target": false}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 51, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 52, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 55, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 56, "content": "                              int number_sensors,", "is_target": false}, {"number": 57, "content": "                              motor*,", "is_target": false}]}, "283": {"lines": [{"number": 50, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 51, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 52, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 55, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 56, "content": "                              int number_sensors,", "is_target": false}, {"number": 57, "content": "                              motor*,", "is_target": false}, {"number": 58, "content": "                              int number_motors);", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  /**** STOREABLE ****/", "is_target": false}]}, "284": {"lines": [{"number": 62, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 63, "content": "  /** loads the controller values from a given file (binary). */", "is_target": false}, {"number": 64, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  // inspectable interface", "is_target": false}, {"number": 67, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": true}, {"number": 68, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "protected:", "is_target": false}, {"number": 71, "content": "  unsigned short number_sensors = 0;", "is_target": false}, {"number": 72, "content": "  unsigned short number_motors = 0;", "is_target": false}]}, "285": {"lines": [{"number": 52, "content": " */", "is_target": false}, {"number": 53, "content": "class InvertMotorBigModel : public InvertMotorController {", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "public:", "is_target": false}, {"number": 56, "content": "  explicit InvertMotorBigModel(const InvertMotorBigModelConf& conf = getDefaultConf());", "is_target": false}, {"number": 57, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  virtual ~InvertMotorBigModel();", "is_target": false}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 62, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "286": {"lines": [{"number": 63, "content": "  /** loads the controller values from a given file (binary). */", "is_target": false}, {"number": 64, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  // inspectable interface", "is_target": false}, {"number": 67, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 68, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": true}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "protected:", "is_target": false}, {"number": 71, "content": "  unsigned short number_sensors = 0;", "is_target": false}, {"number": 72, "content": "  unsigned short number_motors = 0;", "is_target": false}, {"number": 73, "content": "", "is_target": false}]}, "287": {"lines": [{"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "public:", "is_target": false}, {"number": 56, "content": "  explicit InvertMotorBigModel(const InvertMotorBigModelConf& conf = getDefaultConf());", "is_target": false}, {"number": 57, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  virtual ~InvertMotorBigModel();", "is_target": true}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 62, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 63, "content": "    return number_sensors;", "is_target": false}, {"number": 64, "content": "  }", "is_target": false}]}, "288": {"lines": [{"number": 67, "content": "    return number_motors;", "is_target": false}, {"number": 68, "content": "  }", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 71, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 72, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 75, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 76, "content": "                              int number_sensors,", "is_target": false}, {"number": 77, "content": "                              motor*,", "is_target": false}]}, "289": {"lines": [{"number": 70, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 71, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 72, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 75, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 76, "content": "                              int number_sensors,", "is_target": false}, {"number": 77, "content": "                              motor*,", "is_target": false}, {"number": 78, "content": "                              int number_motors);", "is_target": false}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "  /**************  STOREABLE **********************************/", "is_target": false}]}, "290": {"lines": [{"number": 26, "content": "#include \"regularisation.h\"", "is_target": false}, {"number": 27, "content": "", "is_target": false}, {"number": 28, "content": "using namespace matrix;", "is_target": false}, {"number": 29, "content": "using namespace std;", "is_target": false}, {"number": 30, "content": "", "is_target": false}, {"number": 31, "content": "const char* actFun2String(ActivationFunction actfun) {", "is_target": true}, {"number": 32, "content": "  if(actfun == FeedForwardNN::linear) {", "is_target": false}, {"number": 33, "content": "    return \"linear\";", "is_target": false}, {"number": 34, "content": "  } else if (actfun == FeedForwardNN::sigmoid) {", "is_target": false}, {"number": 35, "content": "    return \"sigmoid\";", "is_target": false}, {"number": 36, "content": "  }else if (actfun == FeedForwardNN::tanh) {", "is_target": false}]}, "291": {"lines": [{"number": 112, "content": "        ", "is_target": false}, {"number": 113, "content": "        return conf;", "is_target": false}, {"number": 114, "content": "    }", "is_target": false}, {"number": 115, "content": "    ", "is_target": false}, {"number": 116, "content": "    /// Constructor", "is_target": false}, {"number": 117, "content": "    MSHC(const MSHCConf& conf = getDefaultConf());", "is_target": true}, {"number": 118, "content": "    ", "is_target": false}, {"number": 119, "content": "    /// Destructor", "is_target": false}, {"number": 120, "content": "    virtual ~MSHC();", "is_target": false}, {"number": 121, "content": "    ", "is_target": false}, {"number": 122, "content": "    /// Initializes the controller", "is_target": false}]}, "292": {"lines": [{"number": 118, "content": "    ", "is_target": false}, {"number": 119, "content": "    /// Destructor", "is_target": false}, {"number": 120, "content": "    virtual ~MSHC();", "is_target": false}, {"number": 121, "content": "    ", "is_target": false}, {"number": 122, "content": "    /// Initializes the controller", "is_target": false}, {"number": 123, "content": "    virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 124, "content": "    ", "is_target": false}, {"number": 125, "content": "    /// Performs one step without learning", "is_target": false}, {"number": 126, "content": "    virtual void stepNoLearning(const sensor* sensors, int number_sensors,", "is_target": false}, {"number": 127, "content": "                               motor* motors, int number_motors);", "is_target": false}, {"number": 128, "content": "    ", "is_target": false}]}, "293": {"lines": [{"number": 121, "content": "    ", "is_target": false}, {"number": 122, "content": "    /// Initializes the controller", "is_target": false}, {"number": 123, "content": "    virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 124, "content": "    ", "is_target": false}, {"number": 125, "content": "    /// Performs one step without learning", "is_target": false}, {"number": 126, "content": "    virtual void stepNoLearning(const sensor* sensors, int number_sensors,", "is_target": true}, {"number": 127, "content": "                               motor* motors, int number_motors);", "is_target": false}, {"number": 128, "content": "    ", "is_target": false}, {"number": 129, "content": "    /// Performs one step with learning", "is_target": false}, {"number": 130, "content": "    virtual void step(const sensor* sensors, int number_sensors,", "is_target": false}, {"number": 131, "content": "                     motor* motors, int number_motors);", "is_target": false}]}, "294": {"lines": [{"number": 125, "content": "    /// Performs one step without learning", "is_target": false}, {"number": 126, "content": "    virtual void stepNoLearning(const sensor* sensors, int number_sensors,", "is_target": false}, {"number": 127, "content": "                               motor* motors, int number_motors);", "is_target": false}, {"number": 128, "content": "    ", "is_target": false}, {"number": 129, "content": "    /// Performs one step with learning", "is_target": false}, {"number": 130, "content": "    virtual void step(const sensor* sensors, int number_sensors,", "is_target": true}, {"number": 131, "content": "                     motor* motors, int number_motors);", "is_target": false}, {"number": 132, "content": "    ", "is_target": false}, {"number": 133, "content": "    /// Returns the number of sensors", "is_target": false}, {"number": 134, "content": "    virtual int getSensorNumber() const override { return number_sensors; }", "is_target": false}, {"number": 135, "content": "    ", "is_target": false}]}, "295": {"lines": [{"number": 113, "content": "      It is used as a feed forward teaching signal for the controller.", "is_target": false}, {"number": 114, "content": "      Please note, that the teaching signal has to be given each timestep", "is_target": false}, {"number": 115, "content": "       for a continuous teaching process.", "is_target": false}, {"number": 116, "content": "     @param teaching: matrix with dimensions (motornumber,1)", "is_target": false}, {"number": 117, "content": "   */", "is_target": false}, {"number": 118, "content": "  virtual void setMotorTeaching(const matrix::Matrix& teaching);", "is_target": true}, {"number": 119, "content": "", "is_target": false}, {"number": 120, "content": "  /** The given sensor teaching signal (distal learning) is used for this timestep.", "is_target": false}, {"number": 121, "content": "      The belonging motor teachung signal is calculated by the inverse model.", "is_target": false}, {"number": 122, "content": "      See setMotorTeaching", "is_target": false}, {"number": 123, "content": "     @param teaching: matrix with dimensions (motorsensors,1)", "is_target": false}]}, "296": {"lines": [{"number": 120, "content": "  /** The given sensor teaching signal (distal learning) is used for this timestep.", "is_target": false}, {"number": 121, "content": "      The belonging motor teachung signal is calculated by the inverse model.", "is_target": false}, {"number": 122, "content": "      See setMotorTeaching", "is_target": false}, {"number": 123, "content": "     @param teaching: matrix with dimensions (motorsensors,1)", "is_target": false}, {"number": 124, "content": "   */", "is_target": false}, {"number": 125, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": true}, {"number": 126, "content": "  /// returns the last motor values (useful for cross motor coupling)", "is_target": false}, {"number": 127, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 128, "content": "  /// returns the last sensor values (useful for cross sensor coupling)", "is_target": false}, {"number": 129, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 130, "content": "", "is_target": false}]}, "297": {"lines": [{"number": 122, "content": "      See setMotorTeaching", "is_target": false}, {"number": 123, "content": "     @param teaching: matrix with dimensions (motorsensors,1)", "is_target": false}, {"number": 124, "content": "   */", "is_target": false}, {"number": 125, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 126, "content": "  /// returns the last motor values (useful for cross motor coupling)", "is_target": false}, {"number": 127, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": true}, {"number": 128, "content": "  /// returns the last sensor values (useful for cross sensor coupling)", "is_target": false}, {"number": 129, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 130, "content": "", "is_target": false}, {"number": 131, "content": "  // UNUSED! OLD IMPLEMENTATION which hat some consistency arguments", "is_target": false}, {"number": 132, "content": "  void calcCandHUpdatesTeaching(matrix::Matrix& C_update, matrix::Matrix& H_update, int y_delay);", "is_target": false}]}, "298": {"lines": [{"number": 124, "content": "   */", "is_target": false}, {"number": 125, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 126, "content": "  /// returns the last motor values (useful for cross motor coupling)", "is_target": false}, {"number": 127, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 128, "content": "  /// returns the last sensor values (useful for cross sensor coupling)", "is_target": false}, {"number": 129, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": true}, {"number": 130, "content": "", "is_target": false}, {"number": 131, "content": "  // UNUSED! OLD IMPLEMENTATION which hat some consistency arguments", "is_target": false}, {"number": 132, "content": "  void calcCandHUpdatesTeaching(matrix::Matrix& C_update, matrix::Matrix& H_update, int y_delay);", "is_target": false}, {"number": 133, "content": "", "is_target": false}, {"number": 134, "content": "  /**** REINFORCEMENT ****/", "is_target": false}]}, "299": {"lines": [{"number": 36, "content": "", "is_target": false}, {"number": 37, "content": "public:", "is_target": false}, {"number": 38, "content": "  explicit InvertNChannelController(int _buffersize, bool _update_only_1 = false);", "is_target": false}, {"number": 39, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  virtual ~InvertNChannelController();", "is_target": true}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "  /// returns the name of the object (with version number)", "is_target": false}, {"number": 44, "content": "  virtual paramkey getName() const noexcept override {", "is_target": false}, {"number": 45, "content": "    return name;", "is_target": false}, {"number": 46, "content": "  }", "is_target": false}]}, "300": {"lines": [{"number": 68, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 69, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 70, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  // inspectable interface", "is_target": false}, {"number": 73, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": true}, {"number": 74, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "protected:", "is_target": false}, {"number": 77, "content": "  unsigned short number_channels = 0;", "is_target": false}, {"number": 78, "content": "  unsigned short buffersize = 0;", "is_target": false}]}, "301": {"lines": [{"number": 69, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 70, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  // inspectable interface", "is_target": false}, {"number": 73, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 74, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "protected:", "is_target": false}, {"number": 77, "content": "  unsigned short number_channels = 0;", "is_target": false}, {"number": 78, "content": "  unsigned short buffersize = 0;", "is_target": false}, {"number": 79, "content": "  bool update_only_1 = false;", "is_target": false}]}, "302": {"lines": [{"number": 43, "content": "  SineController(unsigned long int controlmask = (~0), function func = function::Sine);", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "  /** initialisation of the controller with the given sensor/ motornumber", "is_target": false}, {"number": 46, "content": "      Must be called before use.", "is_target": false}, {"number": 47, "content": "  */", "is_target": false}, {"number": 48, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "  /** @return Number of sensors the controller was initialised", "is_target": false}, {"number": 51, "content": "      with or 0 if not initialised */", "is_target": false}, {"number": 52, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 53, "content": "    return number_sensors;", "is_target": false}]}, "303": {"lines": [{"number": 64, "content": "      @param sensors sensors inputs scaled to [-1,1]", "is_target": false}, {"number": 65, "content": "      @param sensornumber length of the sensor array", "is_target": false}, {"number": 66, "content": "      @param motors motors outputs. MUST have enough space for motor values!", "is_target": false}, {"number": 67, "content": "      @param motornumber length of the provided motor array", "is_target": false}, {"number": 68, "content": "  */", "is_target": false}, {"number": 69, "content": "  virtual void step(const sensor* sensors,", "is_target": true}, {"number": 70, "content": "                    int sensornumber,", "is_target": false}, {"number": 71, "content": "                    motor* motors,", "is_target": false}, {"number": 72, "content": "                    int motornumber);", "is_target": false}, {"number": 73, "content": "  /** performs one step.", "is_target": false}, {"number": 74, "content": "      @see step", "is_target": false}]}, "304": {"lines": [{"number": 71, "content": "                    motor* motors,", "is_target": false}, {"number": 72, "content": "                    int motornumber);", "is_target": false}, {"number": 73, "content": "  /** performs one step.", "is_target": false}, {"number": 74, "content": "      @see step", "is_target": false}, {"number": 75, "content": "  */", "is_target": false}, {"number": 76, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 77, "content": "                              int number_sensors,", "is_target": false}, {"number": 78, "content": "                              motor*,", "is_target": false}, {"number": 79, "content": "                              int number_motors);", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  /********* STORABLE INTERFACE ******/", "is_target": false}]}, "305": {"lines": [{"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "class MultiSineController : public SineController {", "is_target": false}, {"number": 118, "content": "public:", "is_target": false}, {"number": 119, "content": "  MultiSineController(unsigned long int controlmask = (~0),", "is_target": false}, {"number": 120, "content": "                               function func = function::Sine);", "is_target": false}, {"number": 121, "content": "  virtual ~MultiSineController();", "is_target": true}, {"number": 122, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 123, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 124, "content": "                              int number_sensors,", "is_target": false}, {"number": 125, "content": "                              motor*,", "is_target": false}, {"number": 126, "content": "                              int number_motors);", "is_target": false}]}, "306": {"lines": [{"number": 117, "content": "class MultiSineController : public SineController {", "is_target": false}, {"number": 118, "content": "public:", "is_target": false}, {"number": 119, "content": "  MultiSineController(unsigned long int controlmask = (~0),", "is_target": false}, {"number": 120, "content": "                               function func = function::Sine);", "is_target": false}, {"number": 121, "content": "  virtual ~MultiSineController();", "is_target": false}, {"number": 122, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 123, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 124, "content": "                              int number_sensors,", "is_target": false}, {"number": 125, "content": "                              motor*,", "is_target": false}, {"number": 126, "content": "                              int number_motors);", "is_target": false}, {"number": 127, "content": "", "is_target": false}]}, "307": {"lines": [{"number": 118, "content": "public:", "is_target": false}, {"number": 119, "content": "  MultiSineController(unsigned long int controlmask = (~0),", "is_target": false}, {"number": 120, "content": "                               function func = function::Sine);", "is_target": false}, {"number": 121, "content": "  virtual ~MultiSineController();", "is_target": false}, {"number": 122, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 123, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 124, "content": "                              int number_sensors,", "is_target": false}, {"number": 125, "content": "                              motor*,", "is_target": false}, {"number": 126, "content": "                              int number_motors);", "is_target": false}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "protected:", "is_target": false}]}, "308": {"lines": [{"number": 74, "content": "  OneControllerPerChannel(ControllerGenerator* controllerGenerator,", "is_target": false}, {"number": 75, "content": "                          std::string controllerName,", "is_target": false}, {"number": 76, "content": "                          int numCtrlCreateBeforeInit = 1,", "is_target": false}, {"number": 77, "content": "                          int numContextSensors = 0);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  virtual ~OneControllerPerChannel();", "is_target": true}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  virtual void step(const sensor* sensors, int sensornumber, motor* motors, int motornumber);", "is_target": false}, {"number": 84, "content": "", "is_target": false}]}, "309": {"lines": [{"number": 76, "content": "                          int numCtrlCreateBeforeInit = 1,", "is_target": false}, {"number": 77, "content": "                          int numContextSensors = 0);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  virtual ~OneControllerPerChannel();", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  virtual void step(const sensor* sensors, int sensornumber, motor* motors, int motornumber);", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  virtual void stepNoLearning(const sensor* sensors,", "is_target": false}, {"number": 86, "content": "                              int sensornumber,", "is_target": false}]}, "310": {"lines": [{"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  virtual ~OneControllerPerChannel();", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  virtual void step(const sensor* sensors, int sensornumber, motor* motors, int motornumber);", "is_target": true}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  virtual void stepNoLearning(const sensor* sensors,", "is_target": false}, {"number": 86, "content": "                              int sensornumber,", "is_target": false}, {"number": 87, "content": "                              motor* motors,", "is_target": false}, {"number": 88, "content": "                              int motornumber);", "is_target": false}]}, "311": {"lines": [{"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  virtual void step(const sensor* sensors, int sensornumber, motor* motors, int motornumber);", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  virtual void stepNoLearning(const sensor* sensors,", "is_target": true}, {"number": 86, "content": "                              int sensornumber,", "is_target": false}, {"number": 87, "content": "                              motor* motors,", "is_target": false}, {"number": 88, "content": "                              int motornumber);", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "312": {"lines": [{"number": 452, "content": "    ", "is_target": false}, {"number": 453, "content": "    // Slow-to-fast coupling: Slow scale predictions influence fast scale targets", "is_target": false}, {"number": 454, "content": "    if (scales.size() >= 2) {", "is_target": false}, {"number": 455, "content": "        for (size_t i = 1; i < scales.size(); i++) {", "is_target": false}, {"number": 456, "content": "            TimeScale& slowScale = scales[i];", "is_target": false}, {"number": 457, "content": "            TimeScale& fastScale = scales[i - 1];", "is_target": true}, {"number": 458, "content": "            ", "is_target": false}, {"number": 459, "content": "            if (t >= slowScale.horizon) {", "is_target": false}, {"number": 460, "content": "                // Use slow scale prediction to bias fast scale", "is_target": false}, {"number": 461, "content": "                Matrix slowPred = slowScale.A * getBufferedMotor(-slowScale.horizon) + slowScale.b;", "is_target": false}, {"number": 462, "content": "                ", "is_target": false}]}, "313": {"lines": [{"number": 180, "content": "public:", "is_target": false}, {"number": 181, "content": "    /// Get current scale activities", "is_target": false}, {"number": 182, "content": "    std::vector<double> getScaleActivities() const {", "is_target": false}, {"number": 183, "content": "        std::vector<double> activities;", "is_target": false}, {"number": 184, "content": "        for (const TimeScale& scale : scales) {", "is_target": false}, {"number": 185, "content": "            activities.push_back(scale.activity);", "is_target": true}, {"number": 186, "content": "        }", "is_target": false}, {"number": 187, "content": "        return activities;", "is_target": false}, {"number": 188, "content": "    }", "is_target": false}, {"number": 189, "content": "    ", "is_target": false}, {"number": 190, "content": "    ", "is_target": false}]}, "314": {"lines": [{"number": 256, "content": "                            / scale.errors.size();", "is_target": false}, {"number": 257, "content": "            ", "is_target": false}, {"number": 258, "content": "            // Calculate error variance (consistency)", "is_target": false}, {"number": 259, "content": "            double variance = 0;", "is_target": false}, {"number": 260, "content": "            for (double e : scale.errors) {", "is_target": false}, {"number": 261, "content": "                variance += (e - avgError) * (e - avgError);", "is_target": true}, {"number": 262, "content": "            }", "is_target": false}, {"number": 263, "content": "            variance /= scale.errors.size();", "is_target": false}, {"number": 264, "content": "            ", "is_target": false}, {"number": 265, "content": "            // Calculate temporal coherence (how well does this scale capture patterns)", "is_target": false}, {"number": 266, "content": "            double coherence = 1.0;", "is_target": false}]}, "315": {"lines": [{"number": 305, "content": "        }", "is_target": false}, {"number": 306, "content": "        ", "is_target": false}, {"number": 307, "content": "        // Ensure weights sum to 1", "is_target": false}, {"number": 308, "content": "        double sum_weights = 0;", "is_target": false}, {"number": 309, "content": "        for (const TimeScale& scale : scales) {", "is_target": false}, {"number": 310, "content": "            sum_weights += scale.weight;", "is_target": true}, {"number": 311, "content": "        }", "is_target": false}, {"number": 312, "content": "        if (sum_weights > 0) {", "is_target": false}, {"number": 313, "content": "            for (TimeScale& scale : scales) {", "is_target": false}, {"number": 314, "content": "                scale.weight /= sum_weights;", "is_target": false}, {"number": 315, "content": "            }", "is_target": false}]}, "316": {"lines": [{"number": 337, "content": "    }", "is_target": false}, {"number": 338, "content": "    ", "is_target": false}, {"number": 339, "content": "    // Ensure weights sum to 1", "is_target": false}, {"number": 340, "content": "    double sumWeights = 0;", "is_target": false}, {"number": 341, "content": "    for (const TimeScale& scale : scales) {", "is_target": false}, {"number": 342, "content": "        sumWeights += scale.weight;", "is_target": true}, {"number": 343, "content": "    }", "is_target": false}, {"number": 344, "content": "    if (sumWeights > 0) {", "is_target": false}, {"number": 345, "content": "        for (TimeScale& scale : scales) {", "is_target": false}, {"number": 346, "content": "            scale.weight /= sumWeights;", "is_target": false}, {"number": 347, "content": "        }", "is_target": false}]}, "317": {"lines": [{"number": 497, "content": "", "is_target": false}, {"number": 498, "content": "std::vector<double> MSHC::getScaleWeights() const {", "is_target": false}, {"number": 499, "content": "    std::vector<double> weights;", "is_target": false}, {"number": 500, "content": "    weights.reserve(scales.size());", "is_target": false}, {"number": 501, "content": "    for (const auto& scale : scales) {", "is_target": false}, {"number": 502, "content": "        weights.push_back(scale.weight);", "is_target": true}, {"number": 503, "content": "    }", "is_target": false}, {"number": 504, "content": "    return weights;", "is_target": false}, {"number": 505, "content": "}", "is_target": false}, {"number": 506, "content": "", "is_target": false}, {"number": 507, "content": "bool MSHC::store(FILE* f) const {", "is_target": false}]}, "318": {"lines": [{"number": 39, "content": "  for (int i = 0; i < numCtrlCreateBeforeInit; ++i) {", "is_target": false}, {"number": 40, "content": "    AbstractController* c = (*controllerGenerator)(i);", "is_target": false}, {"number": 41, "content": "    ctrl.push_back(c);", "is_target": false}, {"number": 42, "content": "    addConfigurable(c);", "is_target": false}, {"number": 43, "content": "  }", "is_target": false}, {"number": 44, "content": "  sensorbuffer = new sensor[1 + numContextSensors];", "is_target": true}, {"number": 45, "content": "}", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "OneControllerPerChannel::~OneControllerPerChannel() {", "is_target": false}, {"number": 48, "content": "  FOREACH(std::vector<AbstractController*>, ctrl, c) {", "is_target": false}, {"number": 49, "content": "    delete *c;", "is_target": false}]}, "319": {"lines": [{"number": 39, "content": "  for (int i = 0; i < numCtrlCreateBeforeInit; ++i) {", "is_target": false}, {"number": 40, "content": "    AbstractController* c = (*controllerGenerator)(i);", "is_target": false}, {"number": 41, "content": "    ctrl.push_back(c);", "is_target": false}, {"number": 42, "content": "    addConfigurable(c);", "is_target": false}, {"number": 43, "content": "  }", "is_target": false}, {"number": 44, "content": "  sensorbuffer = new sensor[1 + numContextSensors];", "is_target": true}, {"number": 45, "content": "}", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "OneControllerPerChannel::~OneControllerPerChannel() {", "is_target": false}, {"number": 48, "content": "  FOREACH(std::vector<AbstractController*>, ctrl, c) {", "is_target": false}, {"number": 49, "content": "    delete *c;", "is_target": false}]}, "320": {"lines": [{"number": 36, "content": "class SOM : public AbstractModel {", "is_target": false}, {"number": 37, "content": "public:", "is_target": false}, {"number": 38, "content": "  using Neighbours = std::list<std::pair<int, double>>;", "is_target": false}, {"number": 39, "content": "  using Neighbourhood = std::vector<std::pair<matrix::Matrix, double>>;", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  SOM(const std::string& name = \"SOM\", const std::string& revision = \"$Id$\");", "is_target": true}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "  /** create a som", "is_target": false}, {"number": 44, "content": "      @param dimensions number of dimensions of the neuron lattice", "is_target": false}, {"number": 45, "content": "   */", "is_target": false}, {"number": 46, "content": "  SOM(unsigned int dimensions,", "is_target": false}]}, "321": {"lines": [{"number": 47, "content": "      double sigma,", "is_target": false}, {"number": 48, "content": "      double eps,", "is_target": false}, {"number": 49, "content": "      double rbfsize,", "is_target": false}, {"number": 50, "content": "      const std::string& name = \"SOM\",", "is_target": false}, {"number": 51, "content": "      const std::string& revision = \"$Id$\");", "is_target": false}, {"number": 52, "content": "  virtual ~SOM() {};", "is_target": true}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "  /** initialised som", "is_target": false}, {"number": 55, "content": "      @param inputDim dimension of input vector", "is_target": false}, {"number": 56, "content": "      @param outputDim number of outputneurons (must be a multiple of __PLACEHOLDER_6__ given at", "is_target": false}, {"number": 57, "content": "     constructor)", "is_target": false}]}, "322": {"lines": [{"number": 56, "content": "      @param outputDim number of outputneurons (must be a multiple of __PLACEHOLDER_6__ given at", "is_target": false}, {"number": 57, "content": "     constructor)", "is_target": false}, {"number": 58, "content": "      @param unit_map if zero then weights are randomly choosed, otherwise", "is_target": false}, {"number": 59, "content": "             uniformly distributed in the inputspace of size (unit_map x unit_map x ...)", "is_target": false}, {"number": 60, "content": "   */", "is_target": false}, {"number": 61, "content": "  virtual void init(unsigned int inputDim,", "is_target": true}, {"number": 62, "content": "                    unsigned int outputDim,", "is_target": false}, {"number": 63, "content": "                    double unit_map = 0.0,", "is_target": false}, {"number": 64, "content": "                    RandGen* randGen = nullptr);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  virtual const matrix::Matrix process(const matrix::Matrix& input);", "is_target": false}]}, "323": {"lines": [{"number": 61, "content": "  virtual void init(unsigned int inputDim,", "is_target": false}, {"number": 62, "content": "                    unsigned int outputDim,", "is_target": false}, {"number": 63, "content": "                    double unit_map = 0.0,", "is_target": false}, {"number": 64, "content": "                    RandGen* randGen = nullptr);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  virtual const matrix::Matrix process(const matrix::Matrix& input);", "is_target": true}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  /*  performs training. Nominal output is ignored.", "is_target": false}, {"number": 69, "content": "      A zero-Matrix is returned.", "is_target": false}, {"number": 70, "content": "      learnRateFactor can be given to modify eps for this learning step", "is_target": false}, {"number": 71, "content": "      (process should be called before)", "is_target": false}]}, "324": {"lines": [{"number": 68, "content": "  /*  performs training. Nominal output is ignored.", "is_target": false}, {"number": 69, "content": "      A zero-Matrix is returned.", "is_target": false}, {"number": 70, "content": "      learnRateFactor can be given to modify eps for this learning step", "is_target": false}, {"number": 71, "content": "      (process should be called before)", "is_target": false}, {"number": 72, "content": "  */", "is_target": false}, {"number": 73, "content": "  virtual const matrix::Matrix learn(const matrix::Matrix& input,", "is_target": true}, {"number": 74, "content": "                                     const matrix::Matrix& nom_output,", "is_target": false}, {"number": 75, "content": "                                     double learnRateFactor = 1) ;", "is_target": false}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "  virtual void damp(double damping) override {", "is_target": false}, {"number": 78, "content": "    return;", "is_target": false}]}, "325": {"lines": [{"number": 74, "content": "  OneControllerPerChannel(ControllerGenerator* controllerGenerator,", "is_target": false}, {"number": 75, "content": "                          std::string controllerName,", "is_target": false}, {"number": 76, "content": "                          int numCtrlCreateBeforeInit = 1,", "is_target": false}, {"number": 77, "content": "                          int numContextSensors = 0);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  virtual ~OneControllerPerChannel();", "is_target": true}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  virtual void step(const sensor* sensors, int sensornumber, motor* motors, int motornumber);", "is_target": false}, {"number": 84, "content": "", "is_target": false}]}, "326": {"lines": [{"number": 76, "content": "                          int numCtrlCreateBeforeInit = 1,", "is_target": false}, {"number": 77, "content": "                          int numContextSensors = 0);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  virtual ~OneControllerPerChannel();", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  virtual void step(const sensor* sensors, int sensornumber, motor* motors, int motornumber);", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  virtual void stepNoLearning(const sensor* sensors,", "is_target": false}, {"number": 86, "content": "                              int sensornumber,", "is_target": false}]}, "327": {"lines": [{"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  virtual ~OneControllerPerChannel();", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  virtual void step(const sensor* sensors, int sensornumber, motor* motors, int motornumber);", "is_target": true}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  virtual void stepNoLearning(const sensor* sensors,", "is_target": false}, {"number": 86, "content": "                              int sensornumber,", "is_target": false}, {"number": 87, "content": "                              motor* motors,", "is_target": false}, {"number": 88, "content": "                              int motornumber);", "is_target": false}]}, "328": {"lines": [{"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  virtual void step(const sensor* sensors, int sensornumber, motor* motors, int motornumber);", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  virtual void stepNoLearning(const sensor* sensors,", "is_target": true}, {"number": 86, "content": "                              int sensornumber,", "is_target": false}, {"number": 87, "content": "                              motor* motors,", "is_target": false}, {"number": 88, "content": "                              int motornumber);", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "329": {"lines": [{"number": 25, "content": "", "is_target": false}, {"number": 26, "content": "#include <cassert>", "is_target": false}, {"number": 27, "content": "#include <cstring>", "is_target": false}, {"number": 28, "content": "", "is_target": false}, {"number": 29, "content": "OneControllerPerChannel::OneControllerPerChannel(ControllerGenerator* controllerGenerator,", "is_target": false}, {"number": 30, "content": "                                                 std::string controllerName,", "is_target": true}, {"number": 31, "content": "                                                 int numCtrlCreateBeforeInit,", "is_target": false}, {"number": 32, "content": "                                                 int numContextSensors)", "is_target": false}, {"number": 33, "content": "  : AbstractController(controllerName, \"1\")", "is_target": false}, {"number": 34, "content": "  , controllerGenerator(controllerGenerator)", "is_target": false}, {"number": 35, "content": "  , numCtrlCreateBeforeInit(numCtrlCreateBeforeInit)", "is_target": false}]}, "330": {"lines": [{"number": 56, "content": "  AbstractController(const std::string& name, const std::string& revision)", "is_target": false}, {"number": 57, "content": "    : Configurable(name, revision)", "is_target": false}, {"number": 58, "content": "    , Inspectable(name) {}", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  /// virtual destructor", "is_target": false}, {"number": 61, "content": "  ~AbstractController() = default;", "is_target": true}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "  /** initialisation of the controller with the given sensor/ motornumber", "is_target": false}, {"number": 64, "content": "      Must be called before use. The random generator is optional.", "is_target": false}, {"number": 65, "content": "  */", "is_target": false}, {"number": 66, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr) = 0;", "is_target": false}]}, "331": {"lines": [{"number": 120, "content": "    ", "is_target": false}, {"number": 121, "content": "    /// Constructor", "is_target": false}, {"number": 122, "content": "    explicit ITSox(const ITSoxConf& conf = getDefaultConf());", "is_target": false}, {"number": 123, "content": "    ", "is_target": false}, {"number": 124, "content": "    /// Destructor", "is_target": false}, {"number": 125, "content": "    virtual ~ITSox();", "is_target": true}, {"number": 126, "content": "    ", "is_target": false}, {"number": 127, "content": "    /// Initializes the controller", "is_target": false}, {"number": 128, "content": "    virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 129, "content": "    ", "is_target": false}, {"number": 130, "content": "    /// Returns the number of sensors", "is_target": false}]}, "332": {"lines": [{"number": 123, "content": "    ", "is_target": false}, {"number": 124, "content": "    /// Destructor", "is_target": false}, {"number": 125, "content": "    virtual ~ITSox();", "is_target": false}, {"number": 126, "content": "    ", "is_target": false}, {"number": 127, "content": "    /// Initializes the controller", "is_target": false}, {"number": 128, "content": "    virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 129, "content": "    ", "is_target": false}, {"number": 130, "content": "    /// Returns the number of sensors", "is_target": false}, {"number": 131, "content": "    virtual int getSensorNumber() const override { return number_sensors; }", "is_target": false}, {"number": 132, "content": "    ", "is_target": false}, {"number": 133, "content": "    /// Returns the number of motors  ", "is_target": false}]}, "333": {"lines": [{"number": 132, "content": "    ", "is_target": false}, {"number": 133, "content": "    /// Returns the number of motors  ", "is_target": false}, {"number": 134, "content": "    virtual int getMotorNumber() const override { return number_motors; }", "is_target": false}, {"number": 135, "content": "    ", "is_target": false}, {"number": 136, "content": "    /// Performs one step with learning", "is_target": false}, {"number": 137, "content": "    virtual void step(const sensor* sensors, int sensornumber, ", "is_target": true}, {"number": 138, "content": "                     motor* motors, int motornumber);", "is_target": false}, {"number": 139, "content": "    ", "is_target": false}, {"number": 140, "content": "    /// Performs one step without learning", "is_target": false}, {"number": 141, "content": "    virtual void stepNoLearning(const sensor* sensors, int sensornumber,", "is_target": false}, {"number": 142, "content": "                               motor* motors, int motornumber);", "is_target": false}]}, "334": {"lines": [{"number": 136, "content": "    /// Performs one step with learning", "is_target": false}, {"number": 137, "content": "    virtual void step(const sensor* sensors, int sensornumber, ", "is_target": false}, {"number": 138, "content": "                     motor* motors, int motornumber);", "is_target": false}, {"number": 139, "content": "    ", "is_target": false}, {"number": 140, "content": "    /// Performs one step without learning", "is_target": false}, {"number": 141, "content": "    virtual void stepNoLearning(const sensor* sensors, int sensornumber,", "is_target": true}, {"number": 142, "content": "                               motor* motors, int motornumber);", "is_target": false}, {"number": 143, "content": "    ", "is_target": false}, {"number": 144, "content": "    /// Stores the controller to file", "is_target": false}, {"number": 145, "content": "    virtual bool store(FILE* f) const;", "is_target": false}, {"number": 146, "content": "    ", "is_target": false}]}, "335": {"lines": [{"number": 30, "content": " * meta controller for switching control between", "is_target": false}, {"number": 31, "content": " * different subcontrollers.", "is_target": false}, {"number": 32, "content": " */", "is_target": false}, {"number": 33, "content": "class SwitchController : public AbstractController {", "is_target": false}, {"number": 34, "content": "public:", "is_target": false}, {"number": 35, "content": "  SwitchController(const std::list<AbstractController*>& controllers,", "is_target": true}, {"number": 36, "content": "                            const std::string& name = \"SwitchController\",", "is_target": false}, {"number": 37, "content": "                            const std::string& revision = \"1.0\");", "is_target": false}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "  virtual ~SwitchController();", "is_target": false}, {"number": 40, "content": "", "is_target": false}]}, "336": {"lines": [{"number": 36, "content": "                            const std::string& name = \"SwitchController\",", "is_target": false}, {"number": 37, "content": "                            const std::string& revision = \"1.0\");", "is_target": false}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "  virtual ~SwitchController();", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 42, "content": "  virtual void step(const sensor* sensors,", "is_target": false}, {"number": 43, "content": "                    int sensornumber,", "is_target": false}, {"number": 44, "content": "                    motor* motors,", "is_target": false}, {"number": 45, "content": "                    int motornumber);", "is_target": false}, {"number": 46, "content": "  virtual void stepNoLearning(const sensor* sensors,", "is_target": false}]}, "337": {"lines": [{"number": 37, "content": "                            const std::string& revision = \"1.0\");", "is_target": false}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "  virtual ~SwitchController();", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 42, "content": "  virtual void step(const sensor* sensors,", "is_target": true}, {"number": 43, "content": "                    int sensornumber,", "is_target": false}, {"number": 44, "content": "                    motor* motors,", "is_target": false}, {"number": 45, "content": "                    int motornumber);", "is_target": false}, {"number": 46, "content": "  virtual void stepNoLearning(const sensor* sensors,", "is_target": false}, {"number": 47, "content": "                              int sensornumber,", "is_target": false}]}, "338": {"lines": [{"number": 41, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 42, "content": "  virtual void step(const sensor* sensors,", "is_target": false}, {"number": 43, "content": "                    int sensornumber,", "is_target": false}, {"number": 44, "content": "                    motor* motors,", "is_target": false}, {"number": 45, "content": "                    int motornumber);", "is_target": false}, {"number": 46, "content": "  virtual void stepNoLearning(const sensor* sensors,", "is_target": true}, {"number": 47, "content": "                              int sensornumber,", "is_target": false}, {"number": 48, "content": "                              motor* motors,", "is_target": false}, {"number": 49, "content": "                              int motornumber);", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "339": {"lines": [{"number": 46, "content": "   * is important for generating the internal matrices.", "is_target": false}, {"number": 47, "content": "   * @param minSensorValue is the minimum value the sensors can become", "is_target": false}, {"number": 48, "content": "   * @param maxSensorValue is the maximum value the sensors can become", "is_target": false}, {"number": 49, "content": "   *", "is_target": false}, {"number": 50, "content": "   */", "is_target": false}, {"number": 51, "content": "  MutualInformationController(int sensorIntervalCount,", "is_target": true}, {"number": 52, "content": "                                       double minSensorValue = -1,", "is_target": false}, {"number": 53, "content": "                                       double maxSensorValue = 1,", "is_target": false}, {"number": 54, "content": "                                       bool showF = false,", "is_target": false}, {"number": 55, "content": "                                       bool showP = false,", "is_target": false}, {"number": 56, "content": "                                       bool showXsiF = false);", "is_target": false}]}, "340": {"lines": [{"number": 97, "content": "  /** initialisation of the controller with the given sensor/ motornumber", "is_target": false}, {"number": 98, "content": "   * Must NORMALLY be called before use. For all ControllerAdapters", "is_target": false}, {"number": 99, "content": "   * call first AbstractControllerAdapter::init(sensornumber,motornumber)", "is_target": false}, {"number": 100, "content": "   * if you overwrite this method", "is_target": false}, {"number": 101, "content": "   */", "is_target": false}, {"number": 102, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "  /** @return Number of sensors the controller", "is_target": false}, {"number": 105, "content": "      was initialised with or 0 if not initialised */", "is_target": false}, {"number": 106, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 107, "content": "    return sensorNumber;", "is_target": false}]}, "341": {"lines": [{"number": 118, "content": "  @param sensors sensors inputs scaled to [-1,1]", "is_target": false}, {"number": 119, "content": "  @param sensornumber length of the sensor array", "is_target": false}, {"number": 120, "content": "  @param motors motors outputs. MUST have enough space for motor values!", "is_target": false}, {"number": 121, "content": "  @param motornumber length of the provided motor array", "is_target": false}, {"number": 122, "content": "  */", "is_target": false}, {"number": 123, "content": "  virtual void step(const sensor* sensors,", "is_target": true}, {"number": 124, "content": "                    int sensornumber,", "is_target": false}, {"number": 125, "content": "                    motor* motors,", "is_target": false}, {"number": 126, "content": "                    int motornumber);", "is_target": false}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "  /** performs one step without learning.", "is_target": false}]}, "342": {"lines": [{"number": 126, "content": "                    int motornumber);", "is_target": false}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "  /** performs one step without learning.", "is_target": false}, {"number": 129, "content": "  @see step", "is_target": false}, {"number": 130, "content": "  */", "is_target": false}, {"number": 131, "content": "  virtual void stepNoLearning(const sensor* sensors,", "is_target": true}, {"number": 132, "content": "                              int sensornumber,", "is_target": false}, {"number": 133, "content": "                              motor* motors,", "is_target": false}, {"number": 134, "content": "                              int motornumber);", "is_target": false}, {"number": 135, "content": "", "is_target": false}, {"number": 136, "content": "  /****************************************************************************/", "is_target": false}]}, "343": {"lines": [{"number": 10, "content": "  /**", "is_target": false}, {"number": 11, "content": "     Uses linear activation function", "is_target": false}, {"number": 12, "content": "     @param eps learning rate", "is_target": false}, {"number": 13, "content": "     @param factor_bias learning rate factor for bias learning", "is_target": false}, {"number": 14, "content": "  */", "is_target": false}, {"number": 15, "content": "  OneLayerFFNN(", "is_target": true}, {"number": 16, "content": "    double eps,", "is_target": false}, {"number": 17, "content": "    double factor_bias = 0.1,", "is_target": false}, {"number": 18, "content": "    const std::string& name = \"OneLayerFFN\",", "is_target": false}, {"number": 19, "content": "    const std::string& revision = \"$Id: onelayerffnn.h,v 1.10 2011/05/30 13:52:54 martius Exp $\")", "is_target": false}, {"number": 20, "content": "    : FeedForwardNN(name, revision)", "is_target": false}]}, "344": {"lines": [{"number": 46, "content": "    , dactfun(dactfun) {", "is_target": false}, {"number": 47, "content": "    addParameter(\"eps\", &this->eps, 0, 1, \"learning rate\");", "is_target": false}, {"number": 48, "content": "    addParameter(\"factor_bias\", &this->factor_bias, 0, 2, \"factor for learningrate of bias\");", "is_target": false}, {"number": 49, "content": "    initialised = false;", "is_target": false}, {"number": 50, "content": "  }", "is_target": false}, {"number": 51, "content": "  virtual ~OneLayerFFNN() {}", "is_target": true}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "  /* initialisation of the network with the given number of input and output units", "is_target": false}, {"number": 54, "content": "     @param unit_map defines the approximate response of the network", "is_target": false}, {"number": 55, "content": "       after initialisation (if unit_map=1 the weights are unit matrices).", "is_target": false}, {"number": 56, "content": "     @param randGen pointer to random generator, if 0 an new one is used", "is_target": false}]}, "345": {"lines": [{"number": 53, "content": "  /* initialisation of the network with the given number of input and output units", "is_target": false}, {"number": 54, "content": "     @param unit_map defines the approximate response of the network", "is_target": false}, {"number": 55, "content": "       after initialisation (if unit_map=1 the weights are unit matrices).", "is_target": false}, {"number": 56, "content": "     @param randGen pointer to random generator, if 0 an new one is used", "is_target": false}, {"number": 57, "content": "  */", "is_target": false}, {"number": 58, "content": "  virtual void init(unsigned int inputDim,", "is_target": true}, {"number": 59, "content": "                    unsigned int outputDim,", "is_target": false}, {"number": 60, "content": "                    double unit_map = 0.0,", "is_target": false}, {"number": 61, "content": "                    RandGen* randGen = nullptr);", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "  virtual const matrix::Matrix process(const matrix::Matrix& input);", "is_target": false}]}, "346": {"lines": [{"number": 58, "content": "  virtual void init(unsigned int inputDim,", "is_target": false}, {"number": 59, "content": "                    unsigned int outputDim,", "is_target": false}, {"number": 60, "content": "                    double unit_map = 0.0,", "is_target": false}, {"number": 61, "content": "                    RandGen* randGen = nullptr);", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "  virtual const matrix::Matrix process(const matrix::Matrix& input);", "is_target": true}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "  virtual const matrix::Matrix learn(const matrix::Matrix& input,", "is_target": false}, {"number": 66, "content": "                                     const matrix::Matrix& nom_output,", "is_target": false}, {"number": 67, "content": "                                     double learnRateFactor = 1) ;", "is_target": false}, {"number": 68, "content": "", "is_target": false}]}, "347": {"lines": [{"number": 60, "content": "                    double unit_map = 0.0,", "is_target": false}, {"number": 61, "content": "                    RandGen* randGen = nullptr);", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "  virtual const matrix::Matrix process(const matrix::Matrix& input);", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "  virtual const matrix::Matrix learn(const matrix::Matrix& input,", "is_target": true}, {"number": 66, "content": "                                     const matrix::Matrix& nom_output,", "is_target": false}, {"number": 67, "content": "                                     double learnRateFactor = 1) ;", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "  /// returns the number of input neurons", "is_target": false}, {"number": 70, "content": "  virtual unsigned int getInputDim() const override {", "is_target": false}]}, "348": {"lines": [{"number": 88, "content": "    bias *= (1 - damping);", "is_target": false}, {"number": 89, "content": "  }", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 92, "content": "  /// stores the layer binary into file stream", "is_target": false}, {"number": 93, "content": "  virtual bool store(FILE* f)  const;", "is_target": true}, {"number": 94, "content": "  /// restores the layer binary from file stream", "is_target": false}, {"number": 95, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "private:", "is_target": false}, {"number": 98, "content": "  double eps = 0;", "is_target": false}]}, "349": {"lines": [{"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 92, "content": "  /// stores the layer binary into file stream", "is_target": false}, {"number": 93, "content": "  virtual bool store(FILE* f)  const;", "is_target": false}, {"number": 94, "content": "  /// restores the layer binary from file stream", "is_target": false}, {"number": 95, "content": "  virtual bool restore(FILE* f);", "is_target": true}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "private:", "is_target": false}, {"number": 98, "content": "  double eps = 0;", "is_target": false}, {"number": 99, "content": "  double factor_bias = 0;", "is_target": false}, {"number": 100, "content": "  ActivationFunction actfun;  ///< callback activation function", "is_target": false}]}, "351": {"lines": [{"number": 61, "content": " */", "is_target": false}, {"number": 62, "content": "class MultiReinforce : public AbstractController {", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "public:", "is_target": false}, {"number": 65, "content": "  explicit MultiReinforce(const MultiReinforceConf& conf = getDefaultConf());", "is_target": false}, {"number": 66, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  virtual ~MultiReinforce();", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 71, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "352": {"lines": [{"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "public:", "is_target": false}, {"number": 65, "content": "  explicit MultiReinforce(const MultiReinforceConf& conf = getDefaultConf());", "is_target": false}, {"number": 66, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  virtual ~MultiReinforce();", "is_target": true}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 71, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 72, "content": "    return number_sensors;", "is_target": false}, {"number": 73, "content": "  }", "is_target": false}]}, "353": {"lines": [{"number": 76, "content": "    return number_motors;", "is_target": false}, {"number": 77, "content": "  }", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 80, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 81, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 84, "content": "  virtual void stepNoLearning(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 85, "content": "", "is_target": false}, {"number": 86, "content": "  // !!!!!!!!!!!!!!!!!!! MISC STUFF !!!!!!!!", "is_target": false}]}, "354": {"lines": [{"number": 79, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 80, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 81, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 84, "content": "  virtual void stepNoLearning(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 85, "content": "", "is_target": false}, {"number": 86, "content": "  // !!!!!!!!!!!!!!!!!!! MISC STUFF !!!!!!!!", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  /// restores the sat networks from seperate files", "is_target": false}, {"number": 89, "content": "  static std::list<std::string> createFileList(const char* filestem, int n);", "is_target": false}]}, "355": {"lines": [{"number": 96, "content": "      if mControl is false, action is ignored", "is_target": false}, {"number": 97, "content": "   */", "is_target": false}, {"number": 98, "content": "  void setManualControl(bool mControl, int action_ = 0);", "is_target": false}, {"number": 99, "content": "", "is_target": false}, {"number": 100, "content": "  /************** CONFIGURABLE ********************************/", "is_target": false}, {"number": 101, "content": "  virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "  /**** STOREABLE ****/", "is_target": false}, {"number": 104, "content": "  /** stores the controller values to a given file. */", "is_target": false}, {"number": 105, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 106, "content": "  /** loads the controller values from a given file. */", "is_target": false}]}, "356": {"lines": [{"number": 105, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 106, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 107, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "  /**** INSPECTABLE ****/", "is_target": false}, {"number": 110, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": true}, {"number": 111, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 112, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 113, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "  static MultiReinforceConf getDefaultConf() {", "is_target": false}]}, "357": {"lines": [{"number": 106, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 107, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "  /**** INSPECTABLE ****/", "is_target": false}, {"number": 110, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 111, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": true}, {"number": 112, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 113, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "  static MultiReinforceConf getDefaultConf() {", "is_target": false}, {"number": 116, "content": "    MultiReinforceConf c;", "is_target": false}]}, "358": {"lines": [{"number": 107, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "  /**** INSPECTABLE ****/", "is_target": false}, {"number": 110, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 111, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 112, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": true}, {"number": 113, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "  static MultiReinforceConf getDefaultConf() {", "is_target": false}, {"number": 116, "content": "    MultiReinforceConf c;", "is_target": false}, {"number": 117, "content": "    c.buffersize = 10;", "is_target": false}]}, "359": {"lines": [{"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "  /**** INSPECTABLE ****/", "is_target": false}, {"number": 110, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 111, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 112, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 113, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": true}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "  static MultiReinforceConf getDefaultConf() {", "is_target": false}, {"number": 116, "content": "    MultiReinforceConf c;", "is_target": false}, {"number": 117, "content": "    c.buffersize = 10;", "is_target": false}, {"number": 118, "content": "    c.numContext = 0;", "is_target": false}]}, "360": {"lines": [{"number": 27, "content": "  sensors[1]=motors[1]+(double(rand())/RAND_MAX-0.5)*0.3;", "is_target": false}, {"number": 28, "content": "", "is_target": false}, {"number": 29, "content": "}", "is_target": false}, {"number": 30, "content": "", "is_target": false}, {"number": 31, "content": "", "is_target": false}, {"number": 32, "content": "inttest(AbstractController* controller){", "is_target": true}, {"number": 33, "content": "", "is_target": false}, {"number": 34, "content": "  controller->init(2,2); // initialise with 2 motors and 2 sensors", "is_target": false}, {"number": 35, "content": "  controller->setParam(\"epsA\",0.01); // set parameter epsA (learning rate for Model A)", "is_target": false}, {"number": 36, "content": "  controller->print(stderr,0); // print parameters (see Configurable) to stderr", "is_target": false}, {"number": 37, "content": "", "is_target": false}]}, "361": {"lines": [{"number": 74, "content": "  OneControllerPerChannel(ControllerGenerator* controllerGenerator,", "is_target": false}, {"number": 75, "content": "                          std::string controllerName,", "is_target": false}, {"number": 76, "content": "                          int numCtrlCreateBeforeInit = 1,", "is_target": false}, {"number": 77, "content": "                          int numContextSensors = 0);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  virtual ~OneControllerPerChannel();", "is_target": true}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  virtual void step(const sensor* sensors, int sensornumber, motor* motors, int motornumber);", "is_target": false}, {"number": 84, "content": "", "is_target": false}]}, "362": {"lines": [{"number": 76, "content": "                          int numCtrlCreateBeforeInit = 1,", "is_target": false}, {"number": 77, "content": "                          int numContextSensors = 0);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  virtual ~OneControllerPerChannel();", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  virtual void step(const sensor* sensors, int sensornumber, motor* motors, int motornumber);", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  virtual void stepNoLearning(const sensor* sensors,", "is_target": false}, {"number": 86, "content": "                              int sensornumber,", "is_target": false}]}, "363": {"lines": [{"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  virtual ~OneControllerPerChannel();", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  virtual void step(const sensor* sensors, int sensornumber, motor* motors, int motornumber);", "is_target": true}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  virtual void stepNoLearning(const sensor* sensors,", "is_target": false}, {"number": 86, "content": "                              int sensornumber,", "is_target": false}, {"number": 87, "content": "                              motor* motors,", "is_target": false}, {"number": 88, "content": "                              int motornumber);", "is_target": false}]}, "364": {"lines": [{"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  virtual void step(const sensor* sensors, int sensornumber, motor* motors, int motornumber);", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  virtual void stepNoLearning(const sensor* sensors,", "is_target": true}, {"number": 86, "content": "                              int sensornumber,", "is_target": false}, {"number": 87, "content": "                              motor* motors,", "is_target": false}, {"number": 88, "content": "                              int motornumber);", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "365": {"lines": [{"number": 61, "content": "               const Assoziations& assoziations,", "is_target": false}, {"number": 62, "content": "               std::string controllerName,", "is_target": false}, {"number": 63, "content": "               int numCtrlCreateBeforeInit = 1,", "is_target": false}, {"number": 64, "content": "               int numContextSensors = 0);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  virtual ~SplitControl();", "is_target": true}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  virtual void step(const sensor* sensors, int sensornumber, motor* motors, int motornumber);", "is_target": false}, {"number": 71, "content": "", "is_target": false}]}, "366": {"lines": [{"number": 63, "content": "               int numCtrlCreateBeforeInit = 1,", "is_target": false}, {"number": 64, "content": "               int numContextSensors = 0);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  virtual ~SplitControl();", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  virtual void step(const sensor* sensors, int sensornumber, motor* motors, int motornumber);", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  virtual void stepNoLearning(const sensor* sensors,", "is_target": false}, {"number": 73, "content": "                              int sensornumber,", "is_target": false}]}, "367": {"lines": [{"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  virtual ~SplitControl();", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  virtual void step(const sensor* sensors, int sensornumber, motor* motors, int motornumber);", "is_target": true}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  virtual void stepNoLearning(const sensor* sensors,", "is_target": false}, {"number": 73, "content": "                              int sensornumber,", "is_target": false}, {"number": 74, "content": "                              motor* motors,", "is_target": false}, {"number": 75, "content": "                              int motornumber);", "is_target": false}]}, "368": {"lines": [{"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  virtual void step(const sensor* sensors, int sensornumber, motor* motors, int motornumber);", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  virtual void stepNoLearning(const sensor* sensors,", "is_target": true}, {"number": 73, "content": "                              int sensornumber,", "is_target": false}, {"number": 74, "content": "                              motor* motors,", "is_target": false}, {"number": 75, "content": "                              int motornumber);", "is_target": false}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "370": {"lines": [{"number": 26, "content": "#include <cassert>", "is_target": false}, {"number": 27, "content": "#include <cstring>", "is_target": false}, {"number": 28, "content": "", "is_target": false}, {"number": 29, "content": "SplitControl::SplitControl(ControllerGenerator* controllerGenerator,", "is_target": false}, {"number": 30, "content": "                           const Assoziations& assoziations,", "is_target": false}, {"number": 31, "content": "                           std::string controllerName,", "is_target": true}, {"number": 32, "content": "                           int numCtrlCreateBeforeInit,", "is_target": false}, {"number": 33, "content": "                           int numContextSensors)", "is_target": false}, {"number": 34, "content": "  : AbstractController(controllerName, \"1\")", "is_target": false}, {"number": 35, "content": "  , controllerGenerator(controllerGenerator)", "is_target": false}, {"number": 36, "content": "  , assoz(assoziations)", "is_target": false}]}, "371": {"lines": [{"number": 34, "content": " */", "is_target": false}, {"number": 35, "content": "class Sos : public AbstractController {", "is_target": false}, {"number": 36, "content": "", "is_target": false}, {"number": 37, "content": "public:", "is_target": false}, {"number": 38, "content": "  explicit Sos(double init_feedback_strength = 1.0);", "is_target": false}, {"number": 39, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  virtual ~Sos();", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 44, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "372": {"lines": [{"number": 36, "content": "", "is_target": false}, {"number": 37, "content": "public:", "is_target": false}, {"number": 38, "content": "  explicit Sos(double init_feedback_strength = 1.0);", "is_target": false}, {"number": 39, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  virtual ~Sos();", "is_target": true}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 44, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 45, "content": "    return number_sensors;", "is_target": false}, {"number": 46, "content": "  }", "is_target": false}]}, "373": {"lines": [{"number": 49, "content": "    return number_motors;", "is_target": false}, {"number": 50, "content": "  }", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 53, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 54, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 57, "content": "  virtual void stepNoLearning(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  /***** STOREABLE ****/", "is_target": false}]}, "374": {"lines": [{"number": 52, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 53, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 54, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 57, "content": "  virtual void stepNoLearning(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  /***** STOREABLE ****/", "is_target": false}, {"number": 60, "content": "  /** stores the controller values to a given file. */", "is_target": false}, {"number": 61, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 62, "content": "  /** loads the controller values from a given file. */", "is_target": false}]}, "377": {"lines": [{"number": 41, "content": "  addInspectableMatrix(\"A\", &A, false, \"model matrix\");", "is_target": false}, {"number": 42, "content": "  addInspectableMatrix(\"C\", &C, false, \"controller matrix\");", "is_target": false}, {"number": 43, "content": "  addInspectableMatrix(\"h\", &h, false, \"controller bias\");", "is_target": false}, {"number": 44, "content": "  addInspectableMatrix(\"b\", &b, false, \"model bias\");", "is_target": false}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "  addInspectableMatrix(\"v_avg\", &v_avg, \"input shift (averaged)\");", "is_target": true}, {"number": 47, "content": "};", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "Sos::~Sos() {}", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "void", "is_target": false}]}, "378": {"lines": [{"number": 74, "content": "    c.someInternalParams = true;", "is_target": false}, {"number": 75, "content": "    c.numContext = 0;", "is_target": false}, {"number": 76, "content": "    return c;", "is_target": false}, {"number": 77, "content": "  }", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  virtual ~SeMoX();", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 84, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "379": {"lines": [{"number": 76, "content": "    return c;", "is_target": false}, {"number": 77, "content": "  }", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  virtual ~SeMoX();", "is_target": true}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 84, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 85, "content": "    return number_sensors;", "is_target": false}, {"number": 86, "content": "  }", "is_target": false}]}, "380": {"lines": [{"number": 89, "content": "    return number_motors;", "is_target": false}, {"number": 90, "content": "  }", "is_target": false}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 93, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 94, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 97, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 98, "content": "                              int number_sensors,", "is_target": false}, {"number": 99, "content": "                              motor*,", "is_target": false}]}, "381": {"lines": [{"number": 92, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 93, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 94, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 97, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 98, "content": "                              int number_sensors,", "is_target": false}, {"number": 99, "content": "                              motor*,", "is_target": false}, {"number": 100, "content": "                              int number_motors);", "is_target": false}, {"number": 101, "content": "", "is_target": false}, {"number": 102, "content": "  /**** STOREABLE ****/", "is_target": false}]}, "382": {"lines": [{"number": 104, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 105, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 106, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "  /**** INSPECTABLE ****/", "is_target": false}, {"number": 109, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": true}, {"number": 110, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "  /**** TEACHABLE ****/", "is_target": false}, {"number": 113, "content": "  /** The given motor teaching signal is used for this timestep.", "is_target": false}, {"number": 114, "content": "      It is used as a feed forward teaching signal for the controller.", "is_target": false}]}, "383": {"lines": [{"number": 105, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 106, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "  /**** INSPECTABLE ****/", "is_target": false}, {"number": 109, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 110, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": true}, {"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "  /**** TEACHABLE ****/", "is_target": false}, {"number": 113, "content": "  /** The given motor teaching signal is used for this timestep.", "is_target": false}, {"number": 114, "content": "      It is used as a feed forward teaching signal for the controller.", "is_target": false}, {"number": 115, "content": "      Please note, that the teaching signal has to be given each timestep", "is_target": false}]}, "384": {"lines": [{"number": 114, "content": "      It is used as a feed forward teaching signal for the controller.", "is_target": false}, {"number": 115, "content": "      Please note, that the teaching signal has to be given each timestep", "is_target": false}, {"number": 116, "content": "       for a continuous teaching process.", "is_target": false}, {"number": 117, "content": "     @param teaching: matrix with dimensions (motornumber,1)", "is_target": false}, {"number": 118, "content": "   */", "is_target": false}, {"number": 119, "content": "  virtual void setMotorTeaching(const matrix::Matrix& teaching);", "is_target": true}, {"number": 120, "content": "", "is_target": false}, {"number": 121, "content": "  /** The given sensor teaching signal (distal learning) is used for this timestep.", "is_target": false}, {"number": 122, "content": "      The belonging motor teachung signal is calculated by the inverse model.", "is_target": false}, {"number": 123, "content": "      See setMotorTeaching", "is_target": false}, {"number": 124, "content": "     @param teaching: matrix with dimensions (motorsensors,1)", "is_target": false}]}, "385": {"lines": [{"number": 121, "content": "  /** The given sensor teaching signal (distal learning) is used for this timestep.", "is_target": false}, {"number": 122, "content": "      The belonging motor teachung signal is calculated by the inverse model.", "is_target": false}, {"number": 123, "content": "      See setMotorTeaching", "is_target": false}, {"number": 124, "content": "     @param teaching: matrix with dimensions (motorsensors,1)", "is_target": false}, {"number": 125, "content": "   */", "is_target": false}, {"number": 126, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": true}, {"number": 127, "content": "  /// returns the last motor values (useful for cross motor coupling)", "is_target": false}, {"number": 128, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 129, "content": "  /// returns the last sensor values (useful for cross sensor coupling)", "is_target": false}, {"number": 130, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 131, "content": "", "is_target": false}]}, "386": {"lines": [{"number": 123, "content": "      See setMotorTeaching", "is_target": false}, {"number": 124, "content": "     @param teaching: matrix with dimensions (motorsensors,1)", "is_target": false}, {"number": 125, "content": "   */", "is_target": false}, {"number": 126, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 127, "content": "  /// returns the last motor values (useful for cross motor coupling)", "is_target": false}, {"number": 128, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": true}, {"number": 129, "content": "  /// returns the last sensor values (useful for cross sensor coupling)", "is_target": false}, {"number": 130, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}, {"number": 133, "content": "  virtual std::list<matrix::Matrix> getParameters()  const ;", "is_target": false}]}, "387": {"lines": [{"number": 125, "content": "   */", "is_target": false}, {"number": 126, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 127, "content": "  /// returns the last motor values (useful for cross motor coupling)", "is_target": false}, {"number": 128, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 129, "content": "  /// returns the last sensor values (useful for cross sensor coupling)", "is_target": false}, {"number": 130, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}, {"number": 133, "content": "  virtual std::list<matrix::Matrix> getParameters()  const ;", "is_target": false}, {"number": 134, "content": "  virtual int setParameters(const std::list<matrix::Matrix>& params);", "is_target": false}, {"number": 135, "content": "", "is_target": false}]}, "388": {"lines": [{"number": 60, "content": "class PiMax : public AbstractController, public Teachable, public Parametrizable {", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "public:", "is_target": false}, {"number": 63, "content": "  explicit PiMax(const PiMaxConf& conf = getDefaultConf());", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "  virtual ~PiMax();", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "  static PiMaxConf getDefaultConf() {", "is_target": false}, {"number": 70, "content": "    PiMaxConf conf;", "is_target": false}]}, "389": {"lines": [{"number": 128, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 129, "content": "  /// returns the last sensor values (useful for cross sensor coupling)", "is_target": false}, {"number": 130, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}, {"number": 133, "content": "  virtual std::list<matrix::Matrix> getParameters()  const ;", "is_target": true}, {"number": 134, "content": "  virtual int setParameters(const std::list<matrix::Matrix>& params);", "is_target": false}, {"number": 135, "content": "", "is_target": false}, {"number": 136, "content": "protected:", "is_target": false}, {"number": 137, "content": "  unsigned short number_sensors = 0;", "is_target": false}, {"number": 138, "content": "  unsigned short number_motors = 0;", "is_target": false}]}, "390": {"lines": [{"number": 62, "content": "public:", "is_target": false}, {"number": 63, "content": "  explicit PiMax(const PiMaxConf& conf = getDefaultConf());", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "  virtual ~PiMax();", "is_target": true}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "  static PiMaxConf getDefaultConf() {", "is_target": false}, {"number": 70, "content": "    PiMaxConf conf;", "is_target": false}, {"number": 71, "content": "    conf.initFeedbackStrength = 1.0;", "is_target": false}, {"number": 72, "content": "    conf.useExtendedModel = false;", "is_target": false}]}, "391": {"lines": [{"number": 129, "content": "  /// returns the last sensor values (useful for cross sensor coupling)", "is_target": false}, {"number": 130, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}, {"number": 133, "content": "  virtual std::list<matrix::Matrix> getParameters()  const ;", "is_target": false}, {"number": 134, "content": "  virtual int setParameters(const std::list<matrix::Matrix>& params);", "is_target": true}, {"number": 135, "content": "", "is_target": false}, {"number": 136, "content": "protected:", "is_target": false}, {"number": 137, "content": "  unsigned short number_sensors = 0;", "is_target": false}, {"number": 138, "content": "  unsigned short number_motors = 0;", "is_target": false}, {"number": 139, "content": "", "is_target": false}]}, "392": {"lines": [{"number": 88, "content": "    return number_motors;", "is_target": false}, {"number": 89, "content": "  }", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 92, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 93, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 96, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 97, "content": "                              int number_sensors,", "is_target": false}, {"number": 98, "content": "                              motor*,", "is_target": false}]}, "393": {"lines": [{"number": 91, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 92, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 93, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 96, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 97, "content": "                              int number_sensors,", "is_target": false}, {"number": 98, "content": "                              motor*,", "is_target": false}, {"number": 99, "content": "                              int number_motors);", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "  /// called during babbling phase", "is_target": false}]}, "394": {"lines": [{"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "  /** passive processing of the input.", "is_target": false}, {"number": 65, "content": "      This has to be done before calling reponse, and the back/forward propagation/projection", "is_target": false}, {"number": 66, "content": "     functions. The activations and the response matrix are stored internally.", "is_target": false}, {"number": 67, "content": "   */", "is_target": false}, {"number": 68, "content": "  virtual const matrix::Matrix process(const matrix::Matrix& input);", "is_target": true}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  /** like process just with the opportunity to overwrite the activation of", "is_target": false}, {"number": 71, "content": "      a specific layer", "is_target": false}, {"number": 72, "content": "      @param injections the input that is clamped at layer injectInLayer", "is_target": false}, {"number": 73, "content": "      @param injectInLayer the injection is clamped at this layer", "is_target": false}]}, "395": {"lines": [{"number": 97, "content": "                              int number_sensors,", "is_target": false}, {"number": 98, "content": "                              motor*,", "is_target": false}, {"number": 99, "content": "                              int number_motors);", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "  /// called during babbling phase", "is_target": false}, {"number": 102, "content": "  virtual void motorBabblingStep(const sensor*,", "is_target": true}, {"number": 103, "content": "                                 int number_sensors,", "is_target": false}, {"number": 104, "content": "                                 const motor*,", "is_target": false}, {"number": 105, "content": "                                 int number_motors);", "is_target": false}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "  /***** STOREABLE ****/", "is_target": false}]}, "396": {"lines": [{"number": 75, "content": "  virtual const matrix::Matrix processX(const matrix::Matrix& input,", "is_target": false}, {"number": 76, "content": "                                        const matrix::Matrix& injection,", "is_target": false}, {"number": 77, "content": "                                        unsigned int injectInLayer);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /// damps the weights and the biases by multiplying (1-damping)", "is_target": false}, {"number": 80, "content": "  virtual void damp(double damping);", "is_target": true}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "  // Implement the pure virtual from AbstractModel", "is_target": false}, {"number": 83, "content": "  virtual const matrix::Matrix learn(const matrix::Matrix& input,", "is_target": false}, {"number": 84, "content": "                                     const matrix::Matrix& nom_output,", "is_target": false}, {"number": 85, "content": "                                     double learnRateFactor = 1) override {", "is_target": false}]}, "397": {"lines": [{"number": 269, "content": "    return bias[of_layer];", "is_target": false}, {"number": 270, "content": "  }", "is_target": false}, {"number": 271, "content": "", "is_target": false}, {"number": 272, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 273, "content": "  /// stores the layer binary into file stream", "is_target": false}, {"number": 274, "content": "  bool store(FILE* f)  const;", "is_target": true}, {"number": 275, "content": "  /// restores the layer binary from file stream", "is_target": false}, {"number": 276, "content": "  bool restore(FILE* f);", "is_target": false}, {"number": 277, "content": "", "is_target": false}, {"number": 278, "content": "  /// writes the layer ASCII into file stream (not in the storable interface)", "is_target": false}, {"number": 279, "content": "  bool write(FILE* f) const;", "is_target": false}]}, "398": {"lines": [{"number": 271, "content": "", "is_target": false}, {"number": 272, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 273, "content": "  /// stores the layer binary into file stream", "is_target": false}, {"number": 274, "content": "  bool store(FILE* f)  const;", "is_target": false}, {"number": 275, "content": "  /// restores the layer binary from file stream", "is_target": false}, {"number": 276, "content": "  bool restore(FILE* f);", "is_target": true}, {"number": 277, "content": "", "is_target": false}, {"number": 278, "content": "  /// writes the layer ASCII into file stream (not in the storable interface)", "is_target": false}, {"number": 279, "content": "  bool write(FILE* f) const;", "is_target": false}, {"number": 280, "content": "", "is_target": false}, {"number": 281, "content": "protected:", "is_target": false}]}, "399": {"lines": [{"number": 64, "content": "    c.useS = false;", "is_target": false}, {"number": 65, "content": "    c.initUnitMatrix = true;", "is_target": false}, {"number": 66, "content": "    return c;", "is_target": false}, {"number": 67, "content": "  }", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 70, "content": "", "is_target": false}, {"number": 71, "content": "  virtual ~SoML();", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 74, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "400": {"lines": [{"number": 66, "content": "    return c;", "is_target": false}, {"number": 67, "content": "  }", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 70, "content": "", "is_target": false}, {"number": 71, "content": "  virtual ~SoML();", "is_target": true}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 74, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 75, "content": "    return number_sensors;", "is_target": false}, {"number": 76, "content": "  }", "is_target": false}]}, "401": {"lines": [{"number": 79, "content": "    return number_motors;", "is_target": false}, {"number": 80, "content": "  }", "is_target": false}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 83, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 84, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 85, "content": "", "is_target": false}, {"number": 86, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 87, "content": "  virtual void stepNoLearning(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "  // motor babbling: learn the basic relations from observed sensors/motors", "is_target": false}]}, "402": {"lines": [{"number": 82, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 83, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 84, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 85, "content": "", "is_target": false}, {"number": 86, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 87, "content": "  virtual void stepNoLearning(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "  // motor babbling: learn the basic relations from observed sensors/motors", "is_target": false}, {"number": 90, "content": "  virtual void motorBabblingStep(const sensor*,", "is_target": false}, {"number": 91, "content": "                                 int number_sensors,", "is_target": false}, {"number": 92, "content": "                                 const motor*,", "is_target": false}]}, "403": {"lines": [{"number": 85, "content": "", "is_target": false}, {"number": 86, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 87, "content": "  virtual void stepNoLearning(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "  // motor babbling: learn the basic relations from observed sensors/motors", "is_target": false}, {"number": 90, "content": "  virtual void motorBabblingStep(const sensor*,", "is_target": true}, {"number": 91, "content": "                                 int number_sensors,", "is_target": false}, {"number": 92, "content": "                                 const motor*,", "is_target": false}, {"number": 93, "content": "                                 int number_motors);", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  /***** STOREABLE ****/", "is_target": false}]}, "404": {"lines": [{"number": 45, "content": " */", "is_target": false}, {"number": 46, "content": "class SoxExpand : public AbstractController {", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "public:", "is_target": false}, {"number": 49, "content": "  explicit SoxExpand(const SoxExpandConf& conf = getDefaultConf());", "is_target": false}, {"number": 50, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  virtual ~SoxExpand();", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "  static SoxExpandConf getDefaultConf() {", "is_target": false}, {"number": 55, "content": "    SoxExpandConf c;", "is_target": false}]}, "405": {"lines": [{"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "public:", "is_target": false}, {"number": 49, "content": "  explicit SoxExpand(const SoxExpandConf& conf = getDefaultConf());", "is_target": false}, {"number": 50, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  virtual ~SoxExpand();", "is_target": true}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "  static SoxExpandConf getDefaultConf() {", "is_target": false}, {"number": 55, "content": "    SoxExpandConf c;", "is_target": false}, {"number": 56, "content": "    c.initFeedbackStrength = 1.0;", "is_target": false}, {"number": 57, "content": "    c.numberContextSensors = 0;", "is_target": false}]}, "406": {"lines": [{"number": 67, "content": "    return number_motors;", "is_target": false}, {"number": 68, "content": "  }", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 71, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 72, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 75, "content": "  virtual void stepNoLearning(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "  /***** STOREABLE ****/", "is_target": false}]}, "407": {"lines": [{"number": 70, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 71, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 72, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 75, "content": "  virtual void stepNoLearning(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "  /***** STOREABLE ****/", "is_target": false}, {"number": 78, "content": "  /** stores the controller values to a given file. */", "is_target": false}, {"number": 79, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 80, "content": "  /** loads the controller values from a given file. */", "is_target": false}]}, "408": {"lines": [{"number": 97, "content": "  static double sawtooth(double x, double _unused);", "is_target": false}, {"number": 98, "content": "  /// impuls shaped oscillator (+-1 for impulsWidth part of the time)", "is_target": false}, {"number": 99, "content": "  static double impuls(double x, double impulsWidth);", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "protected:", "is_target": false}, {"number": 102, "content": "  std::string name;", "is_target": true}, {"number": 103, "content": "  int number_sensors = 0;", "is_target": false}, {"number": 104, "content": "  int number_motors = 0;", "is_target": false}, {"number": 105, "content": "  unsigned long int controlmask; // bitmask to select channels. (the others are set to 0)", "is_target": false}, {"number": 106, "content": "  bool individual = false;", "is_target": false}, {"number": 107, "content": "", "is_target": false}]}, "409": {"lines": [{"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "  /**", "is_target": false}, {"number": 40, "content": "     @param controlmask bitmask to select channels to control (default all)", "is_target": false}, {"number": 41, "content": "     @param function controller function to use", "is_target": false}, {"number": 42, "content": "   */", "is_target": false}, {"number": 43, "content": "  SineController(unsigned long int controlmask = (~0), function func = function::Sine);", "is_target": true}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "  /** initialisation of the controller with the given sensor/ motornumber", "is_target": false}, {"number": 46, "content": "      Must be called before use.", "is_target": false}, {"number": 47, "content": "  */", "is_target": false}, {"number": 48, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}]}, "410": {"lines": [{"number": 114, "content": "  double (*osci)(double x, double param); // oscillator function", "is_target": false}, {"number": 115, "content": "};", "is_target": false}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "class MultiSineController : public SineController {", "is_target": false}, {"number": 118, "content": "public:", "is_target": false}, {"number": 119, "content": "  MultiSineController(unsigned long int controlmask = (~0),", "is_target": true}, {"number": 120, "content": "                               function func = function::Sine);", "is_target": false}, {"number": 121, "content": "  virtual ~MultiSineController();", "is_target": false}, {"number": 122, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 123, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 124, "content": "                              int number_sensors,", "is_target": false}]}, "411": {"lines": [{"number": 43, "content": "  SineController(unsigned long int controlmask = (~0), function func = function::Sine);", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "  /** initialisation of the controller with the given sensor/ motornumber", "is_target": false}, {"number": 46, "content": "      Must be called before use.", "is_target": false}, {"number": 47, "content": "  */", "is_target": false}, {"number": 48, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "  /** @return Number of sensors the controller was initialised", "is_target": false}, {"number": 51, "content": "      with or 0 if not initialised */", "is_target": false}, {"number": 52, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 53, "content": "    return number_sensors;", "is_target": false}]}, "412": {"lines": [{"number": 64, "content": "      @param sensors sensors inputs scaled to [-1,1]", "is_target": false}, {"number": 65, "content": "      @param sensornumber length of the sensor array", "is_target": false}, {"number": 66, "content": "      @param motors motors outputs. MUST have enough space for motor values!", "is_target": false}, {"number": 67, "content": "      @param motornumber length of the provided motor array", "is_target": false}, {"number": 68, "content": "  */", "is_target": false}, {"number": 69, "content": "  virtual void step(const sensor* sensors,", "is_target": true}, {"number": 70, "content": "                    int sensornumber,", "is_target": false}, {"number": 71, "content": "                    motor* motors,", "is_target": false}, {"number": 72, "content": "                    int motornumber);", "is_target": false}, {"number": 73, "content": "  /** performs one step.", "is_target": false}, {"number": 74, "content": "      @see step", "is_target": false}]}, "413": {"lines": [{"number": 61, "content": "  /// constructor provided for convenience, use conf object to customize more", "is_target": false}, {"number": 62, "content": "  Sox(double init_feedback_strength,", "is_target": false}, {"number": 63, "content": "               bool useExtendedModel = true,", "is_target": false}, {"number": 64, "content": "               bool useTeaching = false);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  virtual ~Sox();", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  static SoxConf getDefaultConf() {", "is_target": false}, {"number": 71, "content": "    SoxConf conf;", "is_target": false}]}, "414": {"lines": [{"number": 71, "content": "                    motor* motors,", "is_target": false}, {"number": 72, "content": "                    int motornumber);", "is_target": false}, {"number": 73, "content": "  /** performs one step.", "is_target": false}, {"number": 74, "content": "      @see step", "is_target": false}, {"number": 75, "content": "  */", "is_target": false}, {"number": 76, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 77, "content": "                              int number_sensors,", "is_target": false}, {"number": 78, "content": "                              motor*,", "is_target": false}, {"number": 79, "content": "                              int number_motors);", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  /********* STORABLE INTERFACE ******/", "is_target": false}]}, "415": {"lines": [{"number": 63, "content": "               bool useExtendedModel = true,", "is_target": false}, {"number": 64, "content": "               bool useTeaching = false);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  virtual ~Sox();", "is_target": true}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  static SoxConf getDefaultConf() {", "is_target": false}, {"number": 71, "content": "    SoxConf conf;", "is_target": false}, {"number": 72, "content": "    conf.initFeedbackStrength = 1.0;", "is_target": false}, {"number": 73, "content": "    conf.useExtendedModel = true;", "is_target": false}]}, "416": {"lines": [{"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "class MultiSineController : public SineController {", "is_target": false}, {"number": 118, "content": "public:", "is_target": false}, {"number": 119, "content": "  MultiSineController(unsigned long int controlmask = (~0),", "is_target": false}, {"number": 120, "content": "                               function func = function::Sine);", "is_target": false}, {"number": 121, "content": "  virtual ~MultiSineController();", "is_target": true}, {"number": 122, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 123, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 124, "content": "                              int number_sensors,", "is_target": false}, {"number": 125, "content": "                              motor*,", "is_target": false}, {"number": 126, "content": "                              int number_motors);", "is_target": false}]}, "417": {"lines": [{"number": 92, "content": "    return number_motors;", "is_target": false}, {"number": 93, "content": "  }", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 96, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 97, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 100, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 101, "content": "                              int number_sensors,", "is_target": false}, {"number": 102, "content": "                              motor*,", "is_target": false}]}, "418": {"lines": [{"number": 47, "content": " * Universal controller for robots with any number of sensors and motors", "is_target": false}, {"number": 48, "content": " */", "is_target": false}, {"number": 49, "content": "class UniversalController : public AbstractController {", "is_target": false}, {"number": 50, "content": "public:", "is_target": false}, {"number": 51, "content": "  explicit UniversalController(const UniversalControllerConf& conf = getDefaultConf());", "is_target": false}, {"number": 52, "content": "  virtual ~UniversalController();", "is_target": true}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "  static UniversalControllerConf getDefaultConf() {", "is_target": false}, {"number": 55, "content": "    UniversalControllerConf c;", "is_target": false}, {"number": 56, "content": "    c.buffersize = 50;", "is_target": false}, {"number": 57, "content": "    c.init = 1;", "is_target": false}]}, "419": {"lines": [{"number": 117, "content": "class MultiSineController : public SineController {", "is_target": false}, {"number": 118, "content": "public:", "is_target": false}, {"number": 119, "content": "  MultiSineController(unsigned long int controlmask = (~0),", "is_target": false}, {"number": 120, "content": "                               function func = function::Sine);", "is_target": false}, {"number": 121, "content": "  virtual ~MultiSineController();", "is_target": false}, {"number": 122, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 123, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 124, "content": "                              int number_sensors,", "is_target": false}, {"number": 125, "content": "                              motor*,", "is_target": false}, {"number": 126, "content": "                              int number_motors);", "is_target": false}, {"number": 127, "content": "", "is_target": false}]}, "420": {"lines": [{"number": 95, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 96, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 97, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 100, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 101, "content": "                              int number_sensors,", "is_target": false}, {"number": 102, "content": "                              motor*,", "is_target": false}, {"number": 103, "content": "                              int number_motors);", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "  /// called during babbling phase", "is_target": false}]}, "421": {"lines": [{"number": 73, "content": "    Elman* e = new Elman(1, layers, false, false, false);", "is_target": false}, {"number": 74, "content": "    c.net = e;", "is_target": false}, {"number": 75, "content": "    return c;", "is_target": false}, {"number": 76, "content": "  }", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 81, "content": "    return number_sensors;", "is_target": false}, {"number": 82, "content": "  }", "is_target": false}, {"number": 83, "content": "", "is_target": false}]}, "422": {"lines": [{"number": 118, "content": "public:", "is_target": false}, {"number": 119, "content": "  MultiSineController(unsigned long int controlmask = (~0),", "is_target": false}, {"number": 120, "content": "                               function func = function::Sine);", "is_target": false}, {"number": 121, "content": "  virtual ~MultiSineController();", "is_target": false}, {"number": 122, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 123, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 124, "content": "                              int number_sensors,", "is_target": false}, {"number": 125, "content": "                              motor*,", "is_target": false}, {"number": 126, "content": "                              int number_motors);", "is_target": false}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "protected:", "is_target": false}]}, "423": {"lines": [{"number": 101, "content": "                              int number_sensors,", "is_target": false}, {"number": 102, "content": "                              motor*,", "is_target": false}, {"number": 103, "content": "                              int number_motors);", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "  /// called during babbling phase", "is_target": false}, {"number": 106, "content": "  virtual void motorBabblingStep(const sensor*,", "is_target": true}, {"number": 107, "content": "                                 int number_sensors,", "is_target": false}, {"number": 108, "content": "                                 const motor*,", "is_target": false}, {"number": 109, "content": "                                 int number_motors);", "is_target": false}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "  /***** STOREABLE ****/", "is_target": false}]}, "424": {"lines": [{"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  virtual int getMotorNumber() const override {", "is_target": false}, {"number": 85, "content": "    return number_motors;", "is_target": false}, {"number": 86, "content": "  }", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  virtual void step(const sensor* sensors,", "is_target": true}, {"number": 89, "content": "                    int sensornumber,", "is_target": false}, {"number": 90, "content": "                    motor* motors,", "is_target": false}, {"number": 91, "content": "                    int motornumber);", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}]}, "425": {"lines": [{"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "  // Implement the pure virtual from InvertableModel", "is_target": false}, {"number": 106, "content": "  virtual const matrix::Matrix inversion(const matrix::Matrix& input,", "is_target": false}, {"number": 107, "content": "                                        const matrix::Matrix& xsi) const override {", "is_target": false}, {"number": 108, "content": "    // Simple pseudo-inverse implementation", "is_target": false}, {"number": 109, "content": "    matrix::Matrix R = response(input);", "is_target": true}, {"number": 110, "content": "    return (R^matrix::T) * xsi;", "is_target": false}, {"number": 111, "content": "  }", "is_target": false}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "  /** like response, just that only a range of layers is considered", "is_target": false}, {"number": 114, "content": "      The Bypass is not considered here.", "is_target": false}]}, "426": {"lines": [{"number": 88, "content": "  virtual void step(const sensor* sensors,", "is_target": false}, {"number": 89, "content": "                    int sensornumber,", "is_target": false}, {"number": 90, "content": "                    motor* motors,", "is_target": false}, {"number": 91, "content": "                    int motornumber);", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 94, "content": "                              int number_sensors,", "is_target": false}, {"number": 95, "content": "                              motor*,", "is_target": false}, {"number": 96, "content": "                              int number_motors);", "is_target": false}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "protected:", "is_target": false}]}, "427": {"lines": [{"number": 32, "content": " */", "is_target": false}, {"number": 33, "content": "class InvertMotorSpace : public InvertMotorController {", "is_target": false}, {"number": 34, "content": "", "is_target": false}, {"number": 35, "content": "public:", "is_target": false}, {"number": 36, "content": "  explicit InvertMotorSpace(int buffersize, double cInit = 0.1, bool someInternalParams = true);", "is_target": false}, {"number": 37, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "  virtual ~InvertMotorSpace();", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 42, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "428": {"lines": [{"number": 34, "content": "", "is_target": false}, {"number": 35, "content": "public:", "is_target": false}, {"number": 36, "content": "  explicit InvertMotorSpace(int buffersize, double cInit = 0.1, bool someInternalParams = true);", "is_target": false}, {"number": 37, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "  virtual ~InvertMotorSpace();", "is_target": true}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 42, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 43, "content": "    return number_sensors;", "is_target": false}, {"number": 44, "content": "  }", "is_target": false}]}, "429": {"lines": [{"number": 47, "content": "    return number_motors;", "is_target": false}, {"number": 48, "content": "  }", "is_target": false}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 51, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 52, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 55, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 56, "content": "                              int number_sensors,", "is_target": false}, {"number": 57, "content": "                              motor*,", "is_target": false}]}, "430": {"lines": [{"number": 50, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 51, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 52, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 55, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 56, "content": "                              int number_sensors,", "is_target": false}, {"number": 57, "content": "                              motor*,", "is_target": false}, {"number": 58, "content": "                              int number_motors);", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  /**** STOREABLE ****/", "is_target": false}]}, "431": {"lines": [{"number": 62, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 63, "content": "  /** loads the controller values from a given file (binary). */", "is_target": false}, {"number": 64, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  // inspectable interface", "is_target": false}, {"number": 67, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": true}, {"number": 68, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "protected:", "is_target": false}, {"number": 71, "content": "  unsigned short number_sensors = 0;", "is_target": false}, {"number": 72, "content": "  unsigned short number_motors = 0;", "is_target": false}]}, "432": {"lines": [{"number": 63, "content": "  /** loads the controller values from a given file (binary). */", "is_target": false}, {"number": 64, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  // inspectable interface", "is_target": false}, {"number": 67, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 68, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": true}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "protected:", "is_target": false}, {"number": 71, "content": "  unsigned short number_sensors = 0;", "is_target": false}, {"number": 72, "content": "  unsigned short number_motors = 0;", "is_target": false}, {"number": 73, "content": "", "is_target": false}]}, "434": {"lines": [{"number": 58, "content": "                                  unsigned int ldb,", "is_target": false}, {"number": 59, "content": "                                  unsigned int ldc,", "is_target": false}, {"number": 60, "content": "                                  unsigned int k);", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  // Helper to add 4 doubles at once", "is_target": false}, {"number": 63, "content": "  static inline float64x2_t add4_f64(float64x2_t a, float64x2_t b, float64x2_t c, float64x2_t d) {", "is_target": true}, {"number": 64, "content": "    return vaddq_f64(vaddq_f64(a, b), vaddq_f64(c, d));", "is_target": false}, {"number": 65, "content": "  }", "is_target": false}, {"number": 66, "content": "#endif // __ARM_NEON", "is_target": false}, {"number": 67, "content": "};", "is_target": false}, {"number": 68, "content": "", "is_target": false}]}, "435": {"lines": [{"number": 57, "content": "  }", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  gamma = 0;", "is_target": false}, {"number": 60, "content": "  if (conf.useTeaching) {", "is_target": false}, {"number": 61, "content": "    addParameterDef(\"gamma\", &gamma, 0.01, 0, 1, \"guidance factor (teaching)\");", "is_target": false}, {"number": 62, "content": "    addInspectableMatrix(\"a_G\", &a_teaching, \"teaching signal at motor neurons\");", "is_target": true}, {"number": 63, "content": "  }", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "  addInspectableMatrix(\"A\", &A, conf.someInternalParams, \"model matrix\");", "is_target": false}, {"number": 66, "content": "  if (conf.useExtendedModel)", "is_target": false}, {"number": 67, "content": "    addInspectableMatrix(\"S\", &S, conf.someInternalParams, \"model matrix (sensor branch)\");", "is_target": false}]}, "436": {"lines": [{"number": 79, "content": "  }", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  gamma = 0;", "is_target": false}, {"number": 82, "content": "  if (conf.useTeaching) {", "is_target": false}, {"number": 83, "content": "    addParameterDef(\"gamma\", &gamma, 0.01, 0, 1, \"guidance factor (teaching)\");", "is_target": false}, {"number": 84, "content": "    addInspectableMatrix(\"y_G\", &y_teaching, \"teaching signal at motor neurons\");", "is_target": true}, {"number": 85, "content": "  }", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "  addInspectableMatrix(\"A\", &A, conf.someInternalParams, \"model matrix\");", "is_target": false}, {"number": 88, "content": "  if (conf.useExtendedModel)", "is_target": false}, {"number": 89, "content": "    addInspectableMatrix(\"S\", &S, conf.someInternalParams, \"model matrix (sensor branch)\");", "is_target": false}]}, "437": {"lines": [{"number": 91, "content": "  addInspectableMatrix(\"L\", &L, conf.someInternalParams, \"Jacobi matrix\");", "is_target": false}, {"number": 92, "content": "  addInspectableMatrix(\"h\", &h, conf.someInternalParams, \"controller bias\");", "is_target": false}, {"number": 93, "content": "  addInspectableMatrix(\"b\", &b, conf.someInternalParams, \"model bias\");", "is_target": false}, {"number": 94, "content": "  addInspectableMatrix(\"R\", &R, conf.someInternalParams, \"linear response matrix\");", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "  addInspectableMatrix(\"v_avg\", &v_avg, \"input shift (averaged)\");", "is_target": true}, {"number": 97, "content": "};", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "Sox::~Sox() {}", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "void", "is_target": false}]}, "438": {"lines": [{"number": 58, "content": "void", "is_target": false}, {"number": 59, "content": "UniversalController::init(int sensornumber, int motornumber, RandGen* randGen) {", "is_target": false}, {"number": 60, "content": "  number_sensors = sensornumber;", "is_target": false}, {"number": 61, "content": "  number_motors = motornumber;", "is_target": false}, {"number": 62, "content": "  if (!randGen)", "is_target": false}, {"number": 63, "content": "    randGen = new RandGen(); // this gives a small memory leak", "is_target": true}, {"number": 64, "content": "  assert(conf.net);", "is_target": false}, {"number": 65, "content": "  assert(conf.net->getLayerNum() > 1);", "is_target": false}, {"number": 66, "content": "  // if no motorlayer is given, we use the second last (n-1)", "is_target": false}, {"number": 67, "content": "  if (conf.motorlayer == -1)", "is_target": false}, {"number": 68, "content": "    conf.motorlayer = conf.net->getLayerNum() - 2;", "is_target": false}]}, "439": {"lines": [{"number": 58, "content": "    }", "is_target": false}, {"number": 59, "content": "  }", "is_target": false}, {"number": 60, "content": "}", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "void", "is_target": false}, {"number": 63, "content": "MatrixNEON::mult_scalar_neon(const Matrix& a, double scalar, Matrix& result) {", "is_target": true}, {"number": 64, "content": "  assert(result.getM() == a.getM() && result.getN() == a.getN());", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  const unsigned int size = a.size();", "is_target": false}, {"number": 67, "content": "  const double* aData = a.data;", "is_target": false}, {"number": 68, "content": "  double* rData = result.data;", "is_target": false}]}, "440": {"lines": [{"number": 87, "content": "    rData[i] = aData[i] * scalar;", "is_target": false}, {"number": 88, "content": "  }", "is_target": false}, {"number": 89, "content": "}", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "void", "is_target": false}, {"number": 92, "content": "MatrixNEON::add_neon(const Matrix& a, const Matrix& b, Matrix& result) {", "is_target": true}, {"number": 93, "content": "  assert(a.getM() == b.getM() && a.getN() == b.getN());", "is_target": false}, {"number": 94, "content": "  assert(result.getM() == a.getM() && result.getN() == a.getN());", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "  const unsigned int size = a.size();", "is_target": false}, {"number": 97, "content": "  const double* aData = a.data;", "is_target": false}]}, "441": {"lines": [{"number": 118, "content": "    rData[i] = aData[i] + bData[i];", "is_target": false}, {"number": 119, "content": "  }", "is_target": false}, {"number": 120, "content": "}", "is_target": false}, {"number": 121, "content": "", "is_target": false}, {"number": 122, "content": "void", "is_target": false}, {"number": 123, "content": "MatrixNEON::transpose_neon(const Matrix& src, Matrix& result) {", "is_target": true}, {"number": 124, "content": "  assert(result.getM() == src.getN() && result.getN() == src.getM());", "is_target": false}, {"number": 125, "content": "", "is_target": false}, {"number": 126, "content": "  const unsigned int m = src.getM();", "is_target": false}, {"number": 127, "content": "  const unsigned int n = src.getN();", "is_target": false}, {"number": 128, "content": "  const double* sData = src.data;", "is_target": false}]}, "442": {"lines": [{"number": 203, "content": "  assert(\"Not implemented!\");", "is_target": false}, {"number": 204, "content": "  return Matrix();", "is_target": false}, {"number": 205, "content": "}", "is_target": false}, {"number": 206, "content": "", "is_target": false}, {"number": 207, "content": "bool", "is_target": false}, {"number": 208, "content": "eigenValuesVectorsRealSym(const Matrix& m, Matrix& eigenvalues, Matrix& eigenvectors) {", "is_target": true}, {"number": 209, "content": "  assert(\"Not implemented!\");", "is_target": false}, {"number": 210, "content": "  return false;", "is_target": false}, {"number": 211, "content": "}", "is_target": false}, {"number": 212, "content": "", "is_target": false}, {"number": 213, "content": "bool", "is_target": false}]}, "443": {"lines": [{"number": 203, "content": "  assert(\"Not implemented!\");", "is_target": false}, {"number": 204, "content": "  return Matrix();", "is_target": false}, {"number": 205, "content": "}", "is_target": false}, {"number": 206, "content": "", "is_target": false}, {"number": 207, "content": "bool", "is_target": false}, {"number": 208, "content": "eigenValuesVectorsRealSym(const Matrix& m, Matrix& eigenvalues, Matrix& eigenvectors) {", "is_target": true}, {"number": 209, "content": "  assert(\"Not implemented!\");", "is_target": false}, {"number": 210, "content": "  return false;", "is_target": false}, {"number": 211, "content": "}", "is_target": false}, {"number": 212, "content": "", "is_target": false}, {"number": 213, "content": "bool", "is_target": false}]}, "444": {"lines": [{"number": 209, "content": "  assert(\"Not implemented!\");", "is_target": false}, {"number": 210, "content": "  return false;", "is_target": false}, {"number": 211, "content": "}", "is_target": false}, {"number": 212, "content": "", "is_target": false}, {"number": 213, "content": "bool", "is_target": false}, {"number": 214, "content": "eigenValues(const Matrix& m, Matrix& real, Matrix& imag) {", "is_target": true}, {"number": 215, "content": "  assert(\"Not implemented!\");", "is_target": false}, {"number": 216, "content": "  return false;", "is_target": false}, {"number": 217, "content": "}", "is_target": false}, {"number": 218, "content": "", "is_target": false}, {"number": 219, "content": "bool", "is_target": false}]}, "445": {"lines": [{"number": 209, "content": "  assert(\"Not implemented!\");", "is_target": false}, {"number": 210, "content": "  return false;", "is_target": false}, {"number": 211, "content": "}", "is_target": false}, {"number": 212, "content": "", "is_target": false}, {"number": 213, "content": "bool", "is_target": false}, {"number": 214, "content": "eigenValues(const Matrix& m, Matrix& real, Matrix& imag) {", "is_target": true}, {"number": 215, "content": "  assert(\"Not implemented!\");", "is_target": false}, {"number": 216, "content": "  return false;", "is_target": false}, {"number": 217, "content": "}", "is_target": false}, {"number": 218, "content": "", "is_target": false}, {"number": 219, "content": "bool", "is_target": false}]}, "446": {"lines": [{"number": 216, "content": "  return false;", "is_target": false}, {"number": 217, "content": "}", "is_target": false}, {"number": 218, "content": "", "is_target": false}, {"number": 219, "content": "bool", "is_target": false}, {"number": 220, "content": "eigenValuesVectors(const Matrix& m,", "is_target": false}, {"number": 221, "content": "                   Matrix& vals_real,", "is_target": true}, {"number": 222, "content": "                   Matrix& vals_imag,", "is_target": false}, {"number": 223, "content": "                   Matrix& vecs_real,", "is_target": false}, {"number": 224, "content": "                   const Matrix& vecs_imag) {", "is_target": false}, {"number": 225, "content": "  assert(\"Not implemented!\");", "is_target": false}, {"number": 226, "content": "  return false;", "is_target": false}]}, "447": {"lines": [{"number": 217, "content": "}", "is_target": false}, {"number": 218, "content": "", "is_target": false}, {"number": 219, "content": "bool", "is_target": false}, {"number": 220, "content": "eigenValuesVectors(const Matrix& m,", "is_target": false}, {"number": 221, "content": "                   Matrix& vals_real,", "is_target": false}, {"number": 222, "content": "                   Matrix& vals_imag,", "is_target": true}, {"number": 223, "content": "                   Matrix& vecs_real,", "is_target": false}, {"number": 224, "content": "                   const Matrix& vecs_imag) {", "is_target": false}, {"number": 225, "content": "  assert(\"Not implemented!\");", "is_target": false}, {"number": 226, "content": "  return false;", "is_target": false}, {"number": 227, "content": "}", "is_target": false}]}, "448": {"lines": [{"number": 218, "content": "", "is_target": false}, {"number": 219, "content": "bool", "is_target": false}, {"number": 220, "content": "eigenValuesVectors(const Matrix& m,", "is_target": false}, {"number": 221, "content": "                   Matrix& vals_real,", "is_target": false}, {"number": 222, "content": "                   Matrix& vals_imag,", "is_target": false}, {"number": 223, "content": "                   Matrix& vecs_real,", "is_target": true}, {"number": 224, "content": "                   const Matrix& vecs_imag) {", "is_target": false}, {"number": 225, "content": "  assert(\"Not implemented!\");", "is_target": false}, {"number": 226, "content": "  return false;", "is_target": false}, {"number": 227, "content": "}", "is_target": false}, {"number": 228, "content": "", "is_target": false}]}, "449": {"lines": [{"number": 94, "content": "      x[len] = speed.toArray()[i];", "is_target": false}, {"number": 95, "content": "      ++len;", "is_target": false}, {"number": 96, "content": "      if(len>=sensornumber) return;", "is_target": false}, {"number": 97, "content": "    }", "is_target": false}, {"number": 98, "content": "    //  sense other agents static_cast<distance>(for)(list<const MyRobot*>::iterator i = otherRobots.begin();", "is_target": false}, {"number": 99, "content": "        i!= otherRobots.end(); ++i) {", "is_target": true}, {"number": 100, "content": "      Position opos = (*i)->getPosition();", "is_target": false}, {"number": 101, "content": "      double dist = fabs(pos.x-opos.x);", "is_target": false}, {"number": 102, "content": "      x[len] = dist<1 ? dist : 2-dist; // measure always shortest distance", "is_target": false}, {"number": 103, "content": "      ++len;", "is_target": false}, {"number": 104, "content": "      if(len>=sensornumber) return;", "is_target": false}]}, "452": {"lines": [{"number": 298, "content": "}", "is_target": false}, {"number": 299, "content": "", "is_target": false}, {"number": 300, "content": "bool com_show (const GlobalData& globalData, char* line, char* arg) {", "is_target": false}, {"number": 301, "content": "  if (arg && *arg){", "is_target": false}, {"number": 302, "content": "    int id = atoi(arg);", "is_target": false}, {"number": 303, "content": "    if(id>=0 && id < static_cast<int>globalData.configs.size()){", "is_target": true}, {"number": 304, "content": "      showParam(globalData.configs[id]);", "is_target": false}, {"number": 305, "content": "      return true;", "is_target": false}, {"number": 306, "content": "    }", "is_target": false}, {"number": 307, "content": "  }", "is_target": false}, {"number": 308, "content": "  showParams(globalData.configs);", "is_target": false}]}, "453": {"lines": [{"number": 298, "content": "}", "is_target": false}, {"number": 299, "content": "", "is_target": false}, {"number": 300, "content": "bool com_show (const GlobalData& globalData, char* line, char* arg) {", "is_target": false}, {"number": 301, "content": "  if (arg && *arg){", "is_target": false}, {"number": 302, "content": "    int id = atoi(arg);", "is_target": false}, {"number": 303, "content": "    if(id>=0 && id < static_cast<int>globalData.configs.size()){", "is_target": true}, {"number": 304, "content": "      showParam(globalData.configs[id]);", "is_target": false}, {"number": 305, "content": "      return true;", "is_target": false}, {"number": 306, "content": "    }", "is_target": false}, {"number": 307, "content": "  }", "is_target": false}, {"number": 308, "content": "  showParams(globalData.configs);", "is_target": false}]}, "454": {"lines": [{"number": 98, "content": "             bool trackSpeed,", "is_target": false}, {"number": 99, "content": "             bool trackOrientation,", "is_target": false}, {"number": 100, "content": "             bool displayTrace,", "is_target": false}, {"number": 101, "content": "             const char* scene = \"\",", "is_target": false}, {"number": 102, "content": "             int interval = 1) {", "is_target": false}, {"number": 103, "content": "    conf = getDefaultConf();", "is_target": true}, {"number": 104, "content": "    conf.trackPos = trackPos;", "is_target": false}, {"number": 105, "content": "    conf.trackSpeed = trackSpeed;", "is_target": false}, {"number": 106, "content": "    conf.trackOrientation = trackOrientation;", "is_target": false}, {"number": 107, "content": "    conf.displayTrace = displayTrace;", "is_target": false}, {"number": 108, "content": "    conf.interval = interval;", "is_target": false}]}, "455": {"lines": [{"number": 18, "content": "", "is_target": false}, {"number": 19, "content": "class MyRobot{", "is_target": false}, {"number": 20, "content": "public:", "is_target": false}, {"number": 21, "content": "  MyRobot()", "is_target": false}, {"number": 22, "content": "    : AbstractRobot(\"MyRobot\", \"$Id$\") {", "is_target": false}, {"number": 23, "content": "    myparam=0;", "is_target": true}, {"number": 24, "content": "    motornumber  = 3;", "is_target": false}, {"number": 25, "content": "    sensornumber = 3;", "is_target": false}, {"number": 26, "content": "    x = new double[sensornumber];", "is_target": false}, {"number": 27, "content": "    y = new double[motornumber];", "is_target": false}, {"number": 28, "content": "  }", "is_target": false}]}, "456": {"lines": [{"number": 36, "content": "class SOM : public AbstractModel {", "is_target": false}, {"number": 37, "content": "public:", "is_target": false}, {"number": 38, "content": "  using Neighbours = std::list<std::pair<int, double>>;", "is_target": false}, {"number": 39, "content": "  using Neighbourhood = std::vector<std::pair<matrix::Matrix, double>>;", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  SOM(const std::string& name = \"SOM\", const std::string& revision = \"$Id$\");", "is_target": true}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "  /** create a som", "is_target": false}, {"number": 44, "content": "      @param dimensions number of dimensions of the neuron lattice", "is_target": false}, {"number": 45, "content": "   */", "is_target": false}, {"number": 46, "content": "  SOM(unsigned int dimensions,", "is_target": false}]}, "457": {"lines": [{"number": 33, "content": "    The output of the network is  \\f$exp(- |x-w_i|^2/cellsize)\\f$ for each neuron,", "is_target": false}, {"number": 34, "content": "    where cellsize is distance to the second closest neigbour.", "is_target": false}, {"number": 35, "content": "*/", "is_target": false}, {"number": 36, "content": "class NeuralGas : public AbstractModel {", "is_target": false}, {"number": 37, "content": "public:", "is_target": false}, {"number": 38, "content": "  NeuralGas(const std::string& name = \"NeuralGas\", const std::string& revision = \"$Id$\");", "is_target": true}, {"number": 39, "content": "  /** create a som", "is_target": false}, {"number": 40, "content": "      @param lambda initial competetive constant for neighborhood learning", "is_target": false}, {"number": 41, "content": "      @param eps initial  learning rate", "is_target": false}, {"number": 42, "content": "      @param maxTime maximal time we expect the network to learn, if 0 no annealing is performed", "is_target": false}, {"number": 43, "content": "   */", "is_target": false}]}, "458": {"lines": [{"number": 21, "content": "  MyRobot()", "is_target": false}, {"number": 22, "content": "    : AbstractRobot(\"MyRobot\", \"$Id$\") {", "is_target": false}, {"number": 23, "content": "    myparam=0;", "is_target": false}, {"number": 24, "content": "    motornumber  = 3;", "is_target": false}, {"number": 25, "content": "    sensornumber = 3;", "is_target": false}, {"number": 26, "content": "    x = new double[sensornumber];", "is_target": true}, {"number": 27, "content": "    y = new double[motornumber];", "is_target": false}, {"number": 28, "content": "  }", "is_target": false}, {"number": 29, "content": "", "is_target": false}, {"number": 30, "content": "  ~MyRobot(){", "is_target": false}, {"number": 31, "content": "    if (x) delete[] x;", "is_target": false}]}, "459": {"lines": [{"number": 21, "content": "  MyRobot()", "is_target": false}, {"number": 22, "content": "    : AbstractRobot(\"MyRobot\", \"$Id$\") {", "is_target": false}, {"number": 23, "content": "    myparam=0;", "is_target": false}, {"number": 24, "content": "    motornumber  = 3;", "is_target": false}, {"number": 25, "content": "    sensornumber = 3;", "is_target": false}, {"number": 26, "content": "    x = new double[sensornumber];", "is_target": true}, {"number": 27, "content": "    y = new double[motornumber];", "is_target": false}, {"number": 28, "content": "  }", "is_target": false}, {"number": 29, "content": "", "is_target": false}, {"number": 30, "content": "  ~MyRobot(){", "is_target": false}, {"number": 31, "content": "    if (x) delete[] x;", "is_target": false}]}, "460": {"lines": [{"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "  /// sets a filter to this plotoption: To export only selected channels", "is_target": false}, {"number": 106, "content": "  virtual void setFilter(const std::list<std::string>& accept,", "is_target": false}, {"number": 107, "content": "                         const std::list<std::string>& ignore);", "is_target": false}, {"number": 108, "content": "  /// sets a filter to this plotoption: syntax: +accept_substr -ignore_substr ...", "is_target": false}, {"number": 109, "content": "  virtual void setFilter(const std::string& filter);", "is_target": true}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "  // flushes pipe (depending on mode)", "is_target": false}, {"number": 112, "content": "  virtual void flush(long step);", "is_target": false}, {"number": 113, "content": "", "is_target": false}, {"number": 114, "content": "  /// nice predicate function for finding by mode", "is_target": false}]}, "461": {"lines": [{"number": 298, "content": "}", "is_target": false}, {"number": 299, "content": "", "is_target": false}, {"number": 300, "content": "bool com_show (const GlobalData& globalData, char* line, char* arg) {", "is_target": false}, {"number": 301, "content": "  if (arg && *arg){", "is_target": false}, {"number": 302, "content": "    int id = atoi(arg);", "is_target": false}, {"number": 303, "content": "    if(id>=0 && id < static_cast<int>globalData.configs.size()){", "is_target": true}, {"number": 304, "content": "      showParam(globalData.configs[id]);", "is_target": false}, {"number": 305, "content": "      return true;", "is_target": false}, {"number": 306, "content": "    }", "is_target": false}, {"number": 307, "content": "  }", "is_target": false}, {"number": 308, "content": "  showParams(globalData.configs);", "is_target": false}]}, "462": {"lines": [{"number": 31, "content": "#include \"abstractcontroller.h\"", "is_target": false}, {"number": 32, "content": "", "is_target": false}, {"number": 33, "content": "class PlotOptionEngine {", "is_target": false}, {"number": 34, "content": "public:", "is_target": false}, {"number": 35, "content": "  explicit PlotOptionEngine(const PlotOption& plotOption);", "is_target": false}, {"number": 36, "content": "  PlotOptionEngine(const std::list<PlotOption>& plotOptions);", "is_target": true}, {"number": 37, "content": "", "is_target": false}, {"number": 38, "content": "  virtual ~PlotOptionEngine();", "is_target": false}, {"number": 39, "content": "", "is_target": false}, {"number": 40, "content": "  /** initializes PlotOptionEngine and opens all pipes and stuff.", "is_target": false}, {"number": 41, "content": "      The optional controller is used to print structure information", "is_target": false}]}, "463": {"lines": [{"number": 41, "content": "class Agent : public WiredController {", "is_target": false}, {"number": 42, "content": "public:", "is_target": false}, {"number": 43, "content": "  /** constructor. PlotOption as output setting.", "is_target": false}, {"number": 44, "content": "      noisefactor is used to set the relative noise strength of this agent", "is_target": false}, {"number": 45, "content": "   */", "is_target": false}, {"number": 46, "content": "  Agent(const PlotOption& plotOption = PlotOption(PlotMode::NoPlot), double noisefactor = 1, const Inspectable::iparamkey& name = \"Agent\", const Inspectable::iparamkey& revision = \"$ID\");", "is_target": true}, {"number": 47, "content": "  /** constructor. A list of PlotOption can given.", "is_target": false}, {"number": 48, "content": "      noisefactor is used to set the relative noise strength of this agent", "is_target": false}, {"number": 49, "content": "   */", "is_target": false}, {"number": 50, "content": "  Agent(const std::list<PlotOption>& plotOptions, double noisefactor = 1, const Inspectable::iparamkey& name = \"Agent\", const Inspectable::iparamkey& revision = \"$ID\");", "is_target": false}, {"number": 51, "content": "", "is_target": false}]}, "464": {"lines": [{"number": 45, "content": "   */", "is_target": false}, {"number": 46, "content": "  Agent(const PlotOption& plotOption = PlotOption(PlotMode::NoPlot), double noisefactor = 1, const Inspectable::iparamkey& name = \"Agent\", const Inspectable::iparamkey& revision = \"$ID\");", "is_target": false}, {"number": 47, "content": "  /** constructor. A list of PlotOption can given.", "is_target": false}, {"number": 48, "content": "      noisefactor is used to set the relative noise strength of this agent", "is_target": false}, {"number": 49, "content": "   */", "is_target": false}, {"number": 50, "content": "  Agent(const std::list<PlotOption>& plotOptions, double noisefactor = 1, const Inspectable::iparamkey& name = \"Agent\", const Inspectable::iparamkey& revision = \"$ID\");", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  /** destructor", "is_target": false}, {"number": 53, "content": "   */", "is_target": false}, {"number": 54, "content": "  virtual ~Agent();", "is_target": false}, {"number": 55, "content": "", "is_target": false}]}, "465": {"lines": [{"number": 35, "content": "      @param noise NoiseGenerator that is used for adding noise to sensor values", "is_target": false}, {"number": 36, "content": "      @param plotMode see AbstractWiring", "is_target": false}, {"number": 37, "content": "      @param blind number of blind channels", "is_target": false}, {"number": 38, "content": "        (additional sensors and motors coupled directly)", "is_target": false}, {"number": 39, "content": "   */", "is_target": false}, {"number": 40, "content": "  One2OneWiring(NoiseGenerator* noise, int plotMode=Controller, int blind=0, const std::string& name = \"One2OneWiring\");", "is_target": true}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "  /** destructor", "is_target": false}, {"number": 43, "content": "   */", "is_target": false}, {"number": 44, "content": "  virtual ~One2OneWiring();", "is_target": false}, {"number": 45, "content": "", "is_target": false}]}, "466": {"lines": [{"number": 61, "content": "      initialised(false) {", "is_target": false}, {"number": 62, "content": "  }", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "  /** destructor", "is_target": false}, {"number": 65, "content": "   */", "is_target": false}, {"number": 66, "content": "  virtual ~AbstractWiring() {", "is_target": true}, {"number": 67, "content": "    if(noiseGenerator) delete noiseGenerator;", "is_target": false}, {"number": 68, "content": "  }", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  /** Initializes the  number of sensors and motors from robot", "is_target": false}, {"number": 71, "content": "   *  (to be precise the internal parameters rsensornumber and rmotornumber!),", "is_target": false}]}, "467": {"lines": [{"number": 58, "content": "   */", "is_target": false}, {"number": 59, "content": "  explicit WiredController(const std::list<PlotOption>& plotOptions, double noisefactor = 1, const Inspectable::iparamkey& name = \"WiredController\", const Inspectable::iparamkey& revision = \"$ID\");", "is_target": false}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "  /** destructor", "is_target": false}, {"number": 62, "content": "   */", "is_target": false}, {"number": 63, "content": "  virtual ~WiredController();", "is_target": true}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "  /** initializes the object with the given controller and wiring", "is_target": false}, {"number": 66, "content": "      and initializes the output options", "is_target": false}, {"number": 67, "content": "      It is also possible to provide a random seed,", "is_target": false}, {"number": 68, "content": "       if not given static_cast<0>(rand)() is used to create one", "is_target": false}]}, "468": {"lines": [{"number": 48, "content": "   */", "is_target": false}, {"number": 49, "content": "  AbstractRobot(const std::string& name=\"abstractRobot\", const std::string& revision = \"$ID$\")", "is_target": false}, {"number": 50, "content": "    : Configurable(name, revision) {", "is_target": false}, {"number": 51, "content": "  };", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "  virtual ~AbstractRobot() {}", "is_target": true}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "  /** returns actual sensorvalues", "is_target": false}, {"number": 56, "content": "      @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 57, "content": "      @param sensornumber length of the sensor array", "is_target": false}, {"number": 58, "content": "      @return number of actually written sensors", "is_target": false}]}, "469": {"lines": [{"number": 49, "content": "   */", "is_target": false}, {"number": 50, "content": "  Agent(const std::list<PlotOption>& plotOptions, double noisefactor = 1, const Inspectable::iparamkey& name = \"Agent\", const Inspectable::iparamkey& revision = \"$ID\");", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  /** destructor", "is_target": false}, {"number": 53, "content": "   */", "is_target": false}, {"number": 54, "content": "  virtual ~Agent();", "is_target": true}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "  // Bring base class methods into scope to avoid hiding", "is_target": false}, {"number": 57, "content": "  using WiredController::init;", "is_target": false}, {"number": 58, "content": "  using WiredController::step;", "is_target": false}, {"number": 59, "content": "", "is_target": false}]}, "470": {"lines": [{"number": 47, "content": "      double sigma,", "is_target": false}, {"number": 48, "content": "      double eps,", "is_target": false}, {"number": 49, "content": "      double rbfsize,", "is_target": false}, {"number": 50, "content": "      const std::string& name = \"SOM\",", "is_target": false}, {"number": 51, "content": "      const std::string& revision = \"$Id$\");", "is_target": false}, {"number": 52, "content": "  virtual ~SOM() {};", "is_target": true}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "  /** initialised som", "is_target": false}, {"number": 55, "content": "      @param inputDim dimension of input vector", "is_target": false}, {"number": 56, "content": "      @param outputDim number of outputneurons (must be a multiple of __PLACEHOLDER_6__ given at", "is_target": false}, {"number": 57, "content": "     constructor)", "is_target": false}]}, "471": {"lines": [{"number": 56, "content": "      @param outputDim number of outputneurons (must be a multiple of __PLACEHOLDER_6__ given at", "is_target": false}, {"number": 57, "content": "     constructor)", "is_target": false}, {"number": 58, "content": "      @param unit_map if zero then weights are randomly choosed, otherwise", "is_target": false}, {"number": 59, "content": "             uniformly distributed in the inputspace of size (unit_map x unit_map x ...)", "is_target": false}, {"number": 60, "content": "   */", "is_target": false}, {"number": 61, "content": "  virtual void init(unsigned int inputDim,", "is_target": true}, {"number": 62, "content": "                    unsigned int outputDim,", "is_target": false}, {"number": 63, "content": "                    double unit_map = 0.0,", "is_target": false}, {"number": 64, "content": "                    RandGen* randGen = nullptr);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  virtual const matrix::Matrix process(const matrix::Matrix& input);", "is_target": false}]}, "472": {"lines": [{"number": 61, "content": "  virtual void init(unsigned int inputDim,", "is_target": false}, {"number": 62, "content": "                    unsigned int outputDim,", "is_target": false}, {"number": 63, "content": "                    double unit_map = 0.0,", "is_target": false}, {"number": 64, "content": "                    RandGen* randGen = nullptr);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  virtual const matrix::Matrix process(const matrix::Matrix& input);", "is_target": true}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  /*  performs training. Nominal output is ignored.", "is_target": false}, {"number": 69, "content": "      A zero-Matrix is returned.", "is_target": false}, {"number": 70, "content": "      learnRateFactor can be given to modify eps for this learning step", "is_target": false}, {"number": 71, "content": "      (process should be called before)", "is_target": false}]}, "473": {"lines": [{"number": 68, "content": "  /*  performs training. Nominal output is ignored.", "is_target": false}, {"number": 69, "content": "      A zero-Matrix is returned.", "is_target": false}, {"number": 70, "content": "      learnRateFactor can be given to modify eps for this learning step", "is_target": false}, {"number": 71, "content": "      (process should be called before)", "is_target": false}, {"number": 72, "content": "  */", "is_target": false}, {"number": 73, "content": "  virtual const matrix::Matrix learn(const matrix::Matrix& input,", "is_target": true}, {"number": 74, "content": "                                     const matrix::Matrix& nom_output,", "is_target": false}, {"number": 75, "content": "                                     double learnRateFactor = 1) ;", "is_target": false}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "  virtual void damp(double damping) override {", "is_target": false}, {"number": 78, "content": "    return;", "is_target": false}]}, "474": {"lines": [{"number": 83, "content": "  }", "is_target": false}, {"number": 84, "content": "  virtual unsigned int getOutputDim() const override {", "is_target": false}, {"number": 85, "content": "    return weights.size();", "is_target": false}, {"number": 86, "content": "  }", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  virtual bool store(FILE* f)  const;", "is_target": true}, {"number": 89, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "  virtual void printWeights(FILE* f) const;", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "  const Neighbourhood& getNeighbourhood() const {", "is_target": false}]}, "475": {"lines": [{"number": 84, "content": "  virtual unsigned int getOutputDim() const override {", "is_target": false}, {"number": 85, "content": "    return weights.size();", "is_target": false}, {"number": 86, "content": "  }", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  virtual bool store(FILE* f)  const;", "is_target": false}, {"number": 89, "content": "  virtual bool restore(FILE* f);", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "  virtual void printWeights(FILE* f) const;", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "  const Neighbourhood& getNeighbourhood() const {", "is_target": false}, {"number": 94, "content": "    return neighbourhood;", "is_target": false}]}, "476": {"lines": [{"number": 44, "content": "  NeuralGas(double lambda,", "is_target": false}, {"number": 45, "content": "            double eps,", "is_target": false}, {"number": 46, "content": "            int maxTime,", "is_target": false}, {"number": 47, "content": "            const std::string& name = \"NeuralGas\",", "is_target": false}, {"number": 48, "content": "            const std::string& revision = \"$Id$\");", "is_target": false}, {"number": 49, "content": "  virtual ~NeuralGas() {};", "is_target": true}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "  /** initialised som", "is_target": false}, {"number": 52, "content": "      @param inputDim dimension of input vector", "is_target": false}, {"number": 53, "content": "      @param outputDim number of outputneurons", "is_target": false}, {"number": 54, "content": "      @param unit_map interval for randomly choosen weights.", "is_target": false}]}, "477": {"lines": [{"number": 39, "content": "   */", "is_target": false}, {"number": 40, "content": "  One2OneWiring(NoiseGenerator* noise, int plotMode=Controller, int blind=0, const std::string& name = \"One2OneWiring\");", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "  /** destructor", "is_target": false}, {"number": 43, "content": "   */", "is_target": false}, {"number": 44, "content": "  virtual ~One2OneWiring();", "is_target": true}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "protected:", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "  /** initializes the number of sensors and motors on robot side, calculate", "is_target": false}, {"number": 49, "content": "      number of sensors and motors on controller side", "is_target": false}]}, "478": {"lines": [{"number": 52, "content": "      @param inputDim dimension of input vector", "is_target": false}, {"number": 53, "content": "      @param outputDim number of outputneurons", "is_target": false}, {"number": 54, "content": "      @param unit_map interval for randomly choosen weights.", "is_target": false}, {"number": 55, "content": "               if zero then (-1,1) is used otherwise (-unit_map, unit_map) (in all dimensions)", "is_target": false}, {"number": 56, "content": "   */", "is_target": false}, {"number": 57, "content": "  virtual void init(unsigned int inputDim,", "is_target": true}, {"number": 58, "content": "                    unsigned int outputDim,", "is_target": false}, {"number": 59, "content": "                    double unit_map = 0.0,", "is_target": false}, {"number": 60, "content": "                    RandGen* randGen = nullptr);", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  virtual const matrix::Matrix process(const matrix::Matrix& input);", "is_target": false}]}, "479": {"lines": [{"number": 46, "content": "protected:", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "  /** initializes the number of sensors and motors on robot side, calculate", "is_target": false}, {"number": 49, "content": "      number of sensors and motors on controller side", "is_target": false}, {"number": 50, "content": "   */", "is_target": false}, {"number": 51, "content": "  virtual bool initIntern();", "is_target": true}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "  /** Realizes one to one wiring from robot sensors to controller sensors.", "is_target": false}, {"number": 54, "content": "      @param rsensors pointer to array of sensorvalues from robot", "is_target": false}, {"number": 55, "content": "      @param rsensornumber number of sensors from robot", "is_target": false}, {"number": 56, "content": "      @param csensors pointer to array of sensorvalues for controller", "is_target": false}]}, "480": {"lines": [{"number": 57, "content": "  virtual void init(unsigned int inputDim,", "is_target": false}, {"number": 58, "content": "                    unsigned int outputDim,", "is_target": false}, {"number": 59, "content": "                    double unit_map = 0.0,", "is_target": false}, {"number": 60, "content": "                    RandGen* randGen = nullptr);", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  virtual const matrix::Matrix process(const matrix::Matrix& input);", "is_target": true}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "  /*  performs training. Nominal output is ignored.", "is_target": false}, {"number": 65, "content": "      A zero matrix is returned.", "is_target": false}, {"number": 66, "content": "      learnRateFactor can be given to modify eps for this learning step", "is_target": false}, {"number": 67, "content": "      (process should be called before)", "is_target": false}]}, "481": {"lines": [{"number": 55, "content": "      @param rsensornumber number of sensors from robot", "is_target": false}, {"number": 56, "content": "      @param csensors pointer to array of sensorvalues for controller", "is_target": false}, {"number": 57, "content": "      @param csensornumber number of sensors to controller", "is_target": false}, {"number": 58, "content": "      @param noise size of the noise added to the sensors", "is_target": false}, {"number": 59, "content": "  */", "is_target": false}, {"number": 60, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": true}, {"number": 61, "content": "                           sensor* csensors, int csensornumber,", "is_target": false}, {"number": 62, "content": "                           double noise);", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "  /** Realizes one to one wiring from controller motor outputs to robot motors.", "is_target": false}, {"number": 65, "content": "      @param rmotors pointer to array of motorvalues for robot", "is_target": false}]}, "482": {"lines": [{"number": 64, "content": "  /*  performs training. Nominal output is ignored.", "is_target": false}, {"number": 65, "content": "      A zero matrix is returned.", "is_target": false}, {"number": 66, "content": "      learnRateFactor can be given to modify eps for this learning step", "is_target": false}, {"number": 67, "content": "      (process should be called before)", "is_target": false}, {"number": 68, "content": "  */", "is_target": false}, {"number": 69, "content": "  virtual const matrix::Matrix learn(const matrix::Matrix& input,", "is_target": true}, {"number": 70, "content": "                                     const matrix::Matrix& nom_output,", "is_target": false}, {"number": 71, "content": "                                     double learnRateFactor = 1) ;", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  virtual void damp(double damping) override {", "is_target": false}, {"number": 74, "content": "    return;", "is_target": false}]}, "483": {"lines": [{"number": 65, "content": "      @param rmotors pointer to array of motorvalues for robot", "is_target": false}, {"number": 66, "content": "      @param rmotornumber number of robot motors", "is_target": false}, {"number": 67, "content": "      @param cmotors pointer to array of motorvalues from controller", "is_target": false}, {"number": 68, "content": "      @param cmotornumber number of motorvalues from controller", "is_target": false}, {"number": 69, "content": "  */", "is_target": false}, {"number": 70, "content": "  virtual bool wireMotorsIntern(motor* rmotors, int rmotornumber,", "is_target": true}, {"number": 71, "content": "                          const motor* cmotors, int cmotornumber);", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "protected:", "is_target": false}, {"number": 75, "content": "  int blind = 0; /// number of blind channels", "is_target": false}]}, "484": {"lines": [{"number": 79, "content": "  }", "is_target": false}, {"number": 80, "content": "  virtual unsigned int getOutputDim() const override {", "is_target": false}, {"number": 81, "content": "    return weights.size();", "is_target": false}, {"number": 82, "content": "  }", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  virtual bool store(FILE* f)  const;", "is_target": true}, {"number": 85, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "  virtual void printWeights(FILE* f) const ;", "is_target": false}, {"number": 88, "content": "  virtual void printCellsizes(FILE* f) const ;", "is_target": false}, {"number": 89, "content": "", "is_target": false}]}, "485": {"lines": [{"number": 53, "content": "  DerivativeWiring(const DerivativeWiringConf& conf,", "is_target": false}, {"number": 54, "content": "                   NoiseGenerator* noise, const std::string& name = \"DerivativeWiring\");", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "  /** destructor", "is_target": false}, {"number": 57, "content": "   */", "is_target": false}, {"number": 58, "content": "  virtual ~DerivativeWiring();", "is_target": true}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  /** Providing default configuration for DerivativeWiring with first derivative.", "is_target": false}, {"number": 61, "content": "      No smoothing and no scaling. ( as static method )", "is_target": false}, {"number": 62, "content": "   */", "is_target": false}, {"number": 63, "content": "  static DerivativeWiringConf getDefaultConf() {", "is_target": false}]}, "486": {"lines": [{"number": 80, "content": "  virtual unsigned int getOutputDim() const override {", "is_target": false}, {"number": 81, "content": "    return weights.size();", "is_target": false}, {"number": 82, "content": "  }", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  virtual bool store(FILE* f)  const;", "is_target": false}, {"number": 85, "content": "  virtual bool restore(FILE* f);", "is_target": true}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "  virtual void printWeights(FILE* f) const ;", "is_target": false}, {"number": 88, "content": "  virtual void printCellsizes(FILE* f) const ;", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "protected:", "is_target": false}]}, "487": {"lines": [{"number": 84, "content": "    c.derivativeScale=5;   // scaling with 5", "is_target": false}, {"number": 85, "content": "    c.blindMotors=0;       // no blind motors used", "is_target": false}, {"number": 86, "content": "    return c;", "is_target": false}, {"number": 87, "content": "  };", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "  virtual void reset();", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "protected:", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "  virtual bool initIntern();", "is_target": false}, {"number": 94, "content": "", "is_target": false}]}, "488": {"lines": [{"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "  virtual void reset();", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "protected:", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "  virtual bool initIntern();", "is_target": true}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": false}, {"number": 96, "content": "                                 sensor* csensors, int csensornumber,", "is_target": false}, {"number": 97, "content": "                                 double noise);", "is_target": false}, {"number": 98, "content": "", "is_target": false}]}, "489": {"lines": [{"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "protected:", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "  virtual bool initIntern();", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": true}, {"number": 96, "content": "                                 sensor* csensors, int csensornumber,", "is_target": false}, {"number": 97, "content": "                                 double noise);", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "  virtual bool wireMotorsIntern(motor* rmotors, int rmotornumber,", "is_target": false}, {"number": 100, "content": "                                const motor* cmotors, int cmotornumber);", "is_target": false}]}, "490": {"lines": [{"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": false}, {"number": 96, "content": "                                 sensor* csensors, int csensornumber,", "is_target": false}, {"number": 97, "content": "                                 double noise);", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "  virtual bool wireMotorsIntern(motor* rmotors, int rmotornumber,", "is_target": true}, {"number": 100, "content": "                                const motor* cmotors, int cmotornumber);", "is_target": false}, {"number": 101, "content": "", "is_target": false}, {"number": 102, "content": "protected:", "is_target": false}, {"number": 103, "content": "  /** Calculate the first derivative of the sensorvalues given by the robot", "is_target": false}, {"number": 104, "content": "   *  f'(x) = (f(x+1) - f(x-1)) / 2", "is_target": false}]}, "491": {"lines": [{"number": 302, "content": "  srand(time(0));", "is_target": false}, {"number": 303, "content": "  bool mltests = false;", "is_target": false}, {"number": 304, "content": "  bool somtests = false;", "is_target": false}, {"number": 305, "content": "  bool contrtests = true;", "is_target": false}, {"number": 306, "content": "", "is_target": false}, {"number": 307, "content": "  if (mltests){", "is_target": true}, {"number": 308, "content": "    vector<Layer> layers1;", "is_target": false}, {"number": 309, "content": "    layers1.push_back(Layer(2,0));", "is_target": false}, {"number": 310, "content": "    MultiLayerFFNN netlinear(0.1, layers1);", "is_target": false}, {"number": 311, "content": "    netlinear.init(2,2);", "is_target": false}, {"number": 312, "content": "    ", "is_target": false}]}, "492": {"lines": [{"number": 342, "content": "    cout << \"******************** testinvertation (nonlinear)\\n\";", "is_target": false}, {"number": 343, "content": "    testinvertation(netnonlinear);", "is_target": false}, {"number": 344, "content": "    cout << \"******************** testinvertation (bypass)\\n\";", "is_target": false}, {"number": 345, "content": "    testinvertation(netbypass);", "is_target": false}, {"number": 346, "content": "  }", "is_target": false}, {"number": 347, "content": "  if (somtests){", "is_target": true}, {"number": 348, "content": "    cout << \"******************** TEST SOM\\n\";", "is_target": false}, {"number": 349, "content": "    testsom1D();", "is_target": false}, {"number": 350, "content": "    testsom2D();", "is_target": false}, {"number": 351, "content": "    testsom1D_local();", "is_target": false}, {"number": 352, "content": "    ", "is_target": false}]}, "493": {"lines": [{"number": 351, "content": "    testsom1D_local();", "is_target": false}, {"number": 352, "content": "    ", "is_target": false}, {"number": 353, "content": "    cout << \"******************** TEST Neural Gas\\n\";", "is_target": false}, {"number": 354, "content": "    testneuralgas();", "is_target": false}, {"number": 355, "content": "  }", "is_target": false}, {"number": 356, "content": "  if (contrtests){", "is_target": true}, {"number": 357, "content": "    controllernettest();", "is_target": false}, {"number": 358, "content": "  }", "is_target": false}, {"number": 359, "content": "", "is_target": false}, {"number": 360, "content": " ", "is_target": false}, {"number": 361, "content": "  return 0;", "is_target": false}]}, "494": {"lines": [{"number": 298, "content": "}", "is_target": false}, {"number": 299, "content": "", "is_target": false}, {"number": 300, "content": "bool com_show (const GlobalData& globalData, char* line, char* arg) {", "is_target": false}, {"number": 301, "content": "  if (arg && *arg){", "is_target": false}, {"number": 302, "content": "    int id = atoi(arg);", "is_target": false}, {"number": 303, "content": "    if(id>=0 && id < static_cast<int>globalData.configs.size()){", "is_target": true}, {"number": 304, "content": "      showParam(globalData.configs[id]);", "is_target": false}, {"number": 305, "content": "      return true;", "is_target": false}, {"number": 306, "content": "    }", "is_target": false}, {"number": 307, "content": "  }", "is_target": false}, {"number": 308, "content": "  showParams(globalData.configs);", "is_target": false}]}, "495": {"lines": [{"number": 34, "content": "bool reset=true;", "is_target": false}, {"number": 35, "content": "double realtimefactor=10;", "is_target": false}, {"number": 36, "content": "double noise = 0.1;", "is_target": false}, {"number": 37, "content": "GlobalData globaldata;", "is_target": false}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "doubletoEnv(double pos){", "is_target": true}, {"number": 40, "content": "  // environment is cyclic", "is_target": false}, {"number": 41, "content": "  if(pos>1) pos-=2;", "is_target": false}, {"number": 42, "content": "  if(pos<-1) pos+=2;", "is_target": false}, {"number": 43, "content": "  return pos;", "is_target": false}, {"number": 44, "content": "}", "is_target": false}]}, "496": {"lines": [{"number": 33, "content": "bool reset=true;", "is_target": false}, {"number": 34, "content": "double realtimefactor=10;", "is_target": false}, {"number": 35, "content": "double shadowdist = 0.6;", "is_target": false}, {"number": 36, "content": "double noise = 0.1;", "is_target": false}, {"number": 37, "content": "", "is_target": false}, {"number": 38, "content": "doubletoEnv(double pos){", "is_target": true}, {"number": 39, "content": "  // environment is cyclic", "is_target": false}, {"number": 40, "content": "  if(pos>1) pos-=2;", "is_target": false}, {"number": 41, "content": "  if(pos<-1) pos+=2;", "is_target": false}, {"number": 42, "content": "  return pos;", "is_target": false}, {"number": 43, "content": "}", "is_target": false}]}, "497": {"lines": [{"number": 298, "content": "}", "is_target": false}, {"number": 299, "content": "", "is_target": false}, {"number": 300, "content": "bool com_show (const GlobalData& globalData, char* line, char* arg) {", "is_target": false}, {"number": 301, "content": "  if (arg && *arg){", "is_target": false}, {"number": 302, "content": "    int id = atoi(arg);", "is_target": false}, {"number": 303, "content": "    if(id>=0 && id < static_cast<int>globalData.configs.size()){", "is_target": true}, {"number": 304, "content": "      showParam(globalData.configs[id]);", "is_target": false}, {"number": 305, "content": "      return true;", "is_target": false}, {"number": 306, "content": "    }", "is_target": false}, {"number": 307, "content": "  }", "is_target": false}, {"number": 308, "content": "  showParams(globalData.configs);", "is_target": false}]}, "498": {"lines": [{"number": 43, "content": "//char* replay=__PLACEHOLDER_3__;", "is_target": false}, {"number": 44, "content": "// char* replay=__PLACEHOLDER_4__;", "is_target": false}, {"number": 45, "content": "//char* replay=__PLACEHOLDER_5__;", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "/// returns the value of the camera, when looking at point x", "is_target": false}, {"number": 48, "content": "doublecamera(double x){", "is_target": true}, {"number": 49, "content": "  // basically a smoothed view at the discrete background array", "is_target": false}, {"number": 50, "content": "  double xt = (x+1.0)*bgsize/2;", "is_target": false}, {"number": 51, "content": "  int pl = static_cast<int>(floor(xt));", "is_target": false}, {"number": 52, "content": "  int ph = static_cast<int>(ceil(xt));", "is_target": false}, {"number": 53, "content": "  double frac = xt-pl;", "is_target": false}]}, "499": {"lines": [{"number": 36, "content": "double noise = 0.05;", "is_target": false}, {"number": 37, "content": "const int bgsize = 40;", "is_target": false}, {"number": 38, "content": "int background[bgsize];", "is_target": false}, {"number": 39, "content": "", "is_target": false}, {"number": 40, "content": "/// returns the value of the camera, when looking at point x", "is_target": false}, {"number": 41, "content": "doublecamera(double x){", "is_target": true}, {"number": 42, "content": "  // basically an smoothed view at the discrete background array", "is_target": false}, {"number": 43, "content": "  double xt = (x+1.0)*bgsize/2;", "is_target": false}, {"number": 44, "content": "  int pl = static_cast<int>(floor(xt));", "is_target": false}, {"number": 45, "content": "  int ph = static_cast<int>(ceil(xt));", "is_target": false}, {"number": 46, "content": "  double frac = xt-pl;", "is_target": false}]}, "500": {"lines": [{"number": 39, "content": "    : AbstractRobot(name, \"$Id$\") {", "is_target": false}, {"number": 40, "content": "    prevRobot = 0;", "is_target": false}, {"number": 41, "content": "    // This is how to add configurable parameters", "is_target": false}, {"number": 42, "content": "    addParameterDef(\"myparam\", &myparam,0, 0, 100, \"my parameter description\");", "is_target": false}, {"number": 43, "content": "    degrees  = dof;", "is_target": false}, {"number": 44, "content": "    x = new double[degrees];", "is_target": true}, {"number": 45, "content": "    y = new double[degrees];", "is_target": false}, {"number": 46, "content": "    memset(x,0,sizeof(double) * degrees);", "is_target": false}, {"number": 47, "content": "    memset(y,0,sizeof(double) * degrees);", "is_target": false}, {"number": 48, "content": "    t = 0.01;", "is_target": false}, {"number": 49, "content": "  }", "is_target": false}]}, "501": {"lines": [{"number": 39, "content": "    : AbstractRobot(name, \"$Id$\") {", "is_target": false}, {"number": 40, "content": "    prevRobot = 0;", "is_target": false}, {"number": 41, "content": "    // This is how to add configurable parameters", "is_target": false}, {"number": 42, "content": "    addParameterDef(\"myparam\", &myparam,0, 0, 100, \"my parameter description\");", "is_target": false}, {"number": 43, "content": "    degrees  = dof;", "is_target": false}, {"number": 44, "content": "    x = new double[degrees];", "is_target": true}, {"number": 45, "content": "    y = new double[degrees];", "is_target": false}, {"number": 46, "content": "    memset(x,0,sizeof(double) * degrees);", "is_target": false}, {"number": 47, "content": "    memset(y,0,sizeof(double) * degrees);", "is_target": false}, {"number": 48, "content": "    t = 0.01;", "is_target": false}, {"number": 49, "content": "  }", "is_target": false}]}, "502": {"lines": [{"number": 50, "content": "      @param mode Motor|Context|All: Motor: motor outputs send feedback;", "is_target": false}, {"number": 51, "content": "           Context: virtual motor outputs for each context sensor with feedback", "is_target": false}, {"number": 52, "content": "      @param feedbackratio default ratio used to feed back the output to the input,", "is_target": false}, {"number": 53, "content": "         meaning \\f[ x_t = 0.1*x_t + 0.9*y_{t-1} \\f]", "is_target": false}, {"number": 54, "content": "   */", "is_target": false}, {"number": 55, "content": "  FeedbackWiring(NoiseGenerator* noise, Mode mode = Context,double feedbackratio=0.9, const std::string& name = \"FeedBackWiring\");", "is_target": true}, {"number": 56, "content": "  virtual ~FeedbackWiring();", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "protected:", "is_target": false}, {"number": 59, "content": "  virtual bool initIntern();", "is_target": false}, {"number": 60, "content": "", "is_target": false}]}, "503": {"lines": [{"number": 57, "content": "class InvertMotorNStep : public InvertMotorController, public Teachable {", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "public:", "is_target": false}, {"number": 60, "content": "  explicit InvertMotorNStep(const InvertMotorNStepConf& conf = getDefaultConf());", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "  virtual ~InvertMotorNStep();", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 67, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "504": {"lines": [{"number": 59, "content": "public:", "is_target": false}, {"number": 60, "content": "  explicit InvertMotorNStep(const InvertMotorNStepConf& conf = getDefaultConf());", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "  virtual ~InvertMotorNStep();", "is_target": true}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 67, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 68, "content": "    return number_sensors;", "is_target": false}, {"number": 69, "content": "  }", "is_target": false}]}, "505": {"lines": [{"number": 72, "content": "    return number_motors;", "is_target": false}, {"number": 73, "content": "  }", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 76, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 77, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 80, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 81, "content": "                              int number_sensors,", "is_target": false}, {"number": 82, "content": "                              motor*,", "is_target": false}]}, "506": {"lines": [{"number": 75, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 76, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 77, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 80, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 81, "content": "                              int number_sensors,", "is_target": false}, {"number": 82, "content": "                              motor*,", "is_target": false}, {"number": 83, "content": "                              int number_motors);", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  /**** STOREABLE ****/", "is_target": false}]}, "507": {"lines": [{"number": 87, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 88, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 89, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "  /**** INSPECTABLE ****/", "is_target": false}, {"number": 92, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": true}, {"number": 93, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  /**** TEACHING ****/", "is_target": false}, {"number": 96, "content": "  /** The given motor teaching signal is used for this timestep.", "is_target": false}, {"number": 97, "content": "      It is used as a feed forward teaching signal for the controller.", "is_target": false}]}, "508": {"lines": [{"number": 88, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 89, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "  /**** INSPECTABLE ****/", "is_target": false}, {"number": 92, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 93, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": true}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  /**** TEACHING ****/", "is_target": false}, {"number": 96, "content": "  /** The given motor teaching signal is used for this timestep.", "is_target": false}, {"number": 97, "content": "      It is used as a feed forward teaching signal for the controller.", "is_target": false}, {"number": 98, "content": "      Please note, that the teaching signal has to be given each timestep", "is_target": false}]}, "509": {"lines": [{"number": 113, "content": "      It is used as a feed forward teaching signal for the controller.", "is_target": false}, {"number": 114, "content": "      Please note, that the teaching signal has to be given each timestep", "is_target": false}, {"number": 115, "content": "       for a continuous teaching process.", "is_target": false}, {"number": 116, "content": "     @param teaching: matrix with dimensions (motornumber,1)", "is_target": false}, {"number": 117, "content": "   */", "is_target": false}, {"number": 118, "content": "  virtual void setMotorTeaching(const matrix::Matrix& teaching);", "is_target": true}, {"number": 119, "content": "", "is_target": false}, {"number": 120, "content": "  /** The given sensor teaching signal (distal learning) is used for this timestep.", "is_target": false}, {"number": 121, "content": "      The belonging motor teachung signal is calculated by the inverse model.", "is_target": false}, {"number": 122, "content": "      See setMotorTeaching", "is_target": false}, {"number": 123, "content": "     @param teaching: matrix with dimensions (motorsensors,1)", "is_target": false}]}, "510": {"lines": [{"number": 120, "content": "  /** The given sensor teaching signal (distal learning) is used for this timestep.", "is_target": false}, {"number": 121, "content": "      The belonging motor teachung signal is calculated by the inverse model.", "is_target": false}, {"number": 122, "content": "      See setMotorTeaching", "is_target": false}, {"number": 123, "content": "     @param teaching: matrix with dimensions (motorsensors,1)", "is_target": false}, {"number": 124, "content": "   */", "is_target": false}, {"number": 125, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": true}, {"number": 126, "content": "  /// returns the last motor values (useful for cross motor coupling)", "is_target": false}, {"number": 127, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 128, "content": "  /// returns the last sensor values (useful for cross sensor coupling)", "is_target": false}, {"number": 129, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 130, "content": "", "is_target": false}]}, "511": {"lines": [{"number": 122, "content": "      See setMotorTeaching", "is_target": false}, {"number": 123, "content": "     @param teaching: matrix with dimensions (motorsensors,1)", "is_target": false}, {"number": 124, "content": "   */", "is_target": false}, {"number": 125, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 126, "content": "  /// returns the last motor values (useful for cross motor coupling)", "is_target": false}, {"number": 127, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": true}, {"number": 128, "content": "  /// returns the last sensor values (useful for cross sensor coupling)", "is_target": false}, {"number": 129, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 130, "content": "", "is_target": false}, {"number": 131, "content": "  // UNUSED! OLD IMPLEMENTATION which hat some consistency arguments", "is_target": false}, {"number": 132, "content": "  void calcCandHUpdatesTeaching(matrix::Matrix& C_update, matrix::Matrix& H_update, int y_delay);", "is_target": false}]}, "512": {"lines": [{"number": 124, "content": "   */", "is_target": false}, {"number": 125, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 126, "content": "  /// returns the last motor values (useful for cross motor coupling)", "is_target": false}, {"number": 127, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 128, "content": "  /// returns the last sensor values (useful for cross sensor coupling)", "is_target": false}, {"number": 129, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": true}, {"number": 130, "content": "", "is_target": false}, {"number": 131, "content": "  // UNUSED! OLD IMPLEMENTATION which hat some consistency arguments", "is_target": false}, {"number": 132, "content": "  void calcCandHUpdatesTeaching(matrix::Matrix& C_update, matrix::Matrix& H_update, int y_delay);", "is_target": false}, {"number": 133, "content": "", "is_target": false}, {"number": 134, "content": "  /**** REINFORCEMENT ****/", "is_target": false}]}, "513": {"lines": [{"number": 35, "content": "double shadowdist = 0.6;", "is_target": false}, {"number": 36, "content": "double noise = 0.1;", "is_target": false}, {"number": 37, "content": "", "is_target": false}, {"number": 38, "content": "list<Position> objects;", "is_target": false}, {"number": 39, "content": "", "is_target": false}, {"number": 40, "content": "doubletoEnv(double pos){", "is_target": true}, {"number": 41, "content": "  // environment is cyclic", "is_target": false}, {"number": 42, "content": "  if(pos>1) pos-=2;", "is_target": false}, {"number": 43, "content": "  if(pos<-1) pos+=2;", "is_target": false}, {"number": 44, "content": "  return pos;", "is_target": false}, {"number": 45, "content": "}", "is_target": false}]}, "514": {"lines": [{"number": 51, "content": "           Context: virtual motor outputs for each context sensor with feedback", "is_target": false}, {"number": 52, "content": "      @param feedbackratio default ratio used to feed back the output to the input,", "is_target": false}, {"number": 53, "content": "         meaning \\f[ x_t = 0.1*x_t + 0.9*y_{t-1} \\f]", "is_target": false}, {"number": 54, "content": "   */", "is_target": false}, {"number": 55, "content": "  FeedbackWiring(NoiseGenerator* noise, Mode mode = Context,double feedbackratio=0.9, const std::string& name = \"FeedBackWiring\");", "is_target": false}, {"number": 56, "content": "  virtual ~FeedbackWiring();", "is_target": true}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "protected:", "is_target": false}, {"number": 59, "content": "  virtual bool initIntern();", "is_target": false}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": false}]}, "515": {"lines": [{"number": 36, "content": "double noise = 0.05;", "is_target": false}, {"number": 37, "content": "const int bgsize = 40;", "is_target": false}, {"number": 38, "content": "int background[bgsize];", "is_target": false}, {"number": 39, "content": "", "is_target": false}, {"number": 40, "content": "/// returns the value of the camera, when looking at point x", "is_target": false}, {"number": 41, "content": "doublecamera(double x){", "is_target": true}, {"number": 42, "content": "  // basically an smoothed view at the discrete background array", "is_target": false}, {"number": 43, "content": "  double xt = (x+1.0)*bgsize/2;", "is_target": false}, {"number": 44, "content": "  int pl = static_cast<int>(floor(xt));", "is_target": false}, {"number": 45, "content": "  int ph = static_cast<int>(ceil(xt));", "is_target": false}, {"number": 46, "content": "  double frac = xt-pl;", "is_target": false}]}, "516": {"lines": [{"number": 54, "content": "   */", "is_target": false}, {"number": 55, "content": "  FeedbackWiring(NoiseGenerator* noise, Mode mode = Context,double feedbackratio=0.9, const std::string& name = \"FeedBackWiring\");", "is_target": false}, {"number": 56, "content": "  virtual ~FeedbackWiring();", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "protected:", "is_target": false}, {"number": 59, "content": "  virtual bool initIntern();", "is_target": true}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": false}, {"number": 62, "content": "                                 sensor* csensors, int csensornumber,", "is_target": false}, {"number": 63, "content": "                                 double noise);", "is_target": false}, {"number": 64, "content": "", "is_target": false}]}, "517": {"lines": [{"number": 56, "content": "  virtual ~FeedbackWiring();", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "protected:", "is_target": false}, {"number": 59, "content": "  virtual bool initIntern();", "is_target": false}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": true}, {"number": 62, "content": "                                 sensor* csensors, int csensornumber,", "is_target": false}, {"number": 63, "content": "                                 double noise);", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "  virtual bool wireMotorsIntern(motor* rmotors, int rmotornumber,", "is_target": false}, {"number": 66, "content": "                                const motor* cmotors, int cmotornumber);", "is_target": false}]}, "518": {"lines": [{"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": false}, {"number": 62, "content": "                                 sensor* csensors, int csensornumber,", "is_target": false}, {"number": 63, "content": "                                 double noise);", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "  virtual bool wireMotorsIntern(motor* rmotors, int rmotornumber,", "is_target": true}, {"number": 66, "content": "                                const motor* cmotors, int cmotornumber);", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "public:", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}]}, "519": {"lines": [{"number": 65, "content": "  virtual bool wireMotorsIntern(motor* rmotors, int rmotornumber,", "is_target": false}, {"number": 66, "content": "                                const motor* cmotors, int cmotornumber);", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "public:", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": true}, {"number": 71, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  /// return the feedback ratio vector", "is_target": false}, {"number": 74, "content": "  virtual matrix::Matrix getFeedbackRatio() const;", "is_target": false}, {"number": 75, "content": "  /** sets the feedback ratio vector.", "is_target": false}]}, "520": {"lines": [{"number": 66, "content": "                                const motor* cmotors, int cmotornumber);", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "public:", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 71, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": true}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  /// return the feedback ratio vector", "is_target": false}, {"number": 74, "content": "  virtual matrix::Matrix getFeedbackRatio() const;", "is_target": false}, {"number": 75, "content": "  /** sets the feedback ratio vector.", "is_target": false}, {"number": 76, "content": "      The size of the vector must be at least as large as getFeedbackRatio()*/", "is_target": false}]}, "521": {"lines": [{"number": 298, "content": "}", "is_target": false}, {"number": 299, "content": "", "is_target": false}, {"number": 300, "content": "bool com_show (const GlobalData& globalData, char* line, char* arg) {", "is_target": false}, {"number": 301, "content": "  if (arg && *arg){", "is_target": false}, {"number": 302, "content": "    int id = atoi(arg);", "is_target": false}, {"number": 303, "content": "    if(id>=0 && id < static_cast<int>globalData.configs.size()){", "is_target": true}, {"number": 304, "content": "      showParam(globalData.configs[id]);", "is_target": false}, {"number": 305, "content": "      return true;", "is_target": false}, {"number": 306, "content": "    }", "is_target": false}, {"number": 307, "content": "  }", "is_target": false}, {"number": 308, "content": "  showParams(globalData.configs);", "is_target": false}]}, "522": {"lines": [{"number": 152, "content": "    return c;", "is_target": false}, {"number": 153, "content": "  }", "is_target": false}, {"number": 154, "content": "", "is_target": false}, {"number": 155, "content": "  /// sets the sensor channel weights (matrix should be (getSensorNumber() x 1)", "is_target": false}, {"number": 156, "content": "  void setSensorWeights(const matrix::Matrix& weights);", "is_target": false}, {"number": 157, "content": "  matrix::Matrix getSensorWeights() const {", "is_target": true}, {"number": 158, "content": "    return sensorweights;", "is_target": false}, {"number": 159, "content": "  }", "is_target": false}, {"number": 160, "content": "  /// reference to C-matrix", "is_target": false}, {"number": 161, "content": "  const matrix::Matrix& getC() const {", "is_target": false}, {"number": 162, "content": "    return C;", "is_target": false}]}, "523": {"lines": [{"number": 302, "content": "  return *this;", "is_target": false}, {"number": 303, "content": "}", "is_target": false}, {"number": 304, "content": "", "is_target": false}, {"number": 305, "content": "Matrix&", "is_target": false}, {"number": 306, "content": "Matrix::toZero() {", "is_target": false}, {"number": 307, "content": "  memset(data, D_Zero, m * n * sizeof(D));", "is_target": true}, {"number": 308, "content": "  return *this;", "is_target": false}, {"number": 309, "content": "}", "is_target": false}, {"number": 310, "content": "", "is_target": false}, {"number": 311, "content": "Matrix&", "is_target": false}, {"number": 312, "content": "Matrix::toId() {", "is_target": false}]}, "524": {"lines": [{"number": 123, "content": "  paramval myparam;", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "};", "is_target": false}, {"number": 126, "content": "", "is_target": false}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "void printRobots(vector<Agent*> robots){", "is_target": true}, {"number": 129, "content": "  char line[81];", "is_target": false}, {"number": 130, "content": "  memset(line,'_', sizeof(char)*80);", "is_target": false}, {"number": 131, "content": "  line[80]=0;", "is_target": false}, {"number": 132, "content": "  int k=0;", "is_target": false}, {"number": 133, "content": "  FOREACH(vector<Agent*>, robots, i) {", "is_target": false}]}, "525": {"lines": [{"number": 38, "content": "  // objects have a width and a position", "is_target": false}, {"number": 39, "content": "typedef list< pair<Position,double> > objectlist;", "is_target": false}, {"number": 40, "content": "objectlist objects;", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "/// returns the value of the camera, when looking at point x", "is_target": false}, {"number": 43, "content": "doublecamera(double x){", "is_target": true}, {"number": 44, "content": "  double vision=-1;", "is_target": false}, {"number": 45, "content": "  FOREACHC(objectlist, objects, i){", "is_target": false}, {"number": 46, "content": "    double dist = fabs(x - i->first.x);", "is_target": false}, {"number": 47, "content": "    if(dist>i->second) continue;", "is_target": false}, {"number": 48, "content": "    else vision += 2-2*dist/i->second;", "is_target": false}]}, "526": {"lines": [{"number": 154, "content": "  matrix::Matrix compete(const matrix::Matrix& input,", "is_target": false}, {"number": 155, "content": "                         const matrix::Matrix& nom_output);", "is_target": false}, {"number": 156, "content": "", "is_target": false}, {"number": 157, "content": "  void management();", "is_target": false}, {"number": 158, "content": "", "is_target": false}, {"number": 159, "content": "};", "is_target": true}, {"number": 160, "content": "", "is_target": false}, {"number": 161, "content": "#endif", "is_target": false}]}, "527": {"lines": [{"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "  void management();", "is_target": false}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "  static double min(void* m, double d);", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "};", "is_target": true}, {"number": 154, "content": "", "is_target": false}, {"number": 155, "content": "#endif", "is_target": false}]}, "528": {"lines": [{"number": 35, "content": "double shadowdist = 0.6;", "is_target": false}, {"number": 36, "content": "double noise = 0.05;", "is_target": false}, {"number": 37, "content": "", "is_target": false}, {"number": 38, "content": "list<Position> objects;", "is_target": false}, {"number": 39, "content": "", "is_target": false}, {"number": 40, "content": "doubletoEnv(double pos){", "is_target": true}, {"number": 41, "content": "  // environment is cyclic", "is_target": false}, {"number": 42, "content": "  if(pos>1) pos-=2;", "is_target": false}, {"number": 43, "content": "  if(pos<-1) pos+=2;", "is_target": false}, {"number": 44, "content": "  return pos;", "is_target": false}, {"number": 45, "content": "}", "is_target": false}]}, "529": {"lines": [{"number": 300, "content": "}", "is_target": false}, {"number": 301, "content": "", "is_target": false}, {"number": 302, "content": "bool com_show (const GlobalData& globalData, char* line, char* arg) {", "is_target": false}, {"number": 303, "content": "  if (arg && *arg){", "is_target": false}, {"number": 304, "content": "    int id = atoi(arg);", "is_target": false}, {"number": 305, "content": "    if(id>=0 && id < static_cast<int>globalData.configs.size()){", "is_target": true}, {"number": 306, "content": "      showParam(globalData.configs[id]);", "is_target": false}, {"number": 307, "content": "      return true;", "is_target": false}, {"number": 308, "content": "    }", "is_target": false}, {"number": 309, "content": "  }", "is_target": false}, {"number": 310, "content": "  showParams(globalData.configs);", "is_target": false}]}, "530": {"lines": [{"number": 190, "content": "  }", "is_target": false}, {"number": 191, "content": "", "is_target": false}, {"number": 192, "content": "/** @brief Start a new test definition", "is_target": false}, {"number": 193, "content": " *  @param test_name Name of the test - must be unique in this unit test suite.", "is_target": false}, {"number": 194, "content": " */", "is_target": false}, {"number": 195, "content": "#define DEFINE_TESTstatic_cast<test_name>static_cast<bool>(unit_test_)##test_name reinterpret_cast<void>(/**) @brief Adds a defined test to test run.", "is_target": true}, {"number": 196, "content": " *  @param test_name Test name of a previously defined test to add the the current suite.", "is_target": false}, {"number": 197, "content": " *  @sa DEFINE_TEST UNIT_TEST_RUN", "is_target": false}, {"number": 198, "content": " *  This should be called after UNIT_TEST_RUN for each defined test.", "is_target": false}, {"number": 199, "content": " */", "is_target": false}, {"number": 200, "content": "#define ADD_TESTstatic_cast<test_name>(add_test() &unit_test_##test_name );", "is_target": false}]}, "531": {"lines": [{"number": 37, "content": "double shadowdist = 0.6;", "is_target": false}, {"number": 38, "content": "bool usestatic    = false;", "is_target": false}, {"number": 39, "content": "bool usereinforc  = true;", "is_target": false}, {"number": 40, "content": "double maxsimtime = 3000; // 3000;", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "doubletoEnv(double pos){", "is_target": true}, {"number": 43, "content": "  // environment is cyclic", "is_target": false}, {"number": 44, "content": "  if(pos>1) pos-=2;", "is_target": false}, {"number": 45, "content": "  if(pos<-1) pos+=2;", "is_target": false}, {"number": 46, "content": "  return pos;", "is_target": false}, {"number": 47, "content": "}", "is_target": false}]}, "533": {"lines": [{"number": 31, "content": "", "is_target": false}, {"number": 32, "content": "bool stop=0;", "is_target": false}, {"number": 33, "content": "double sleep_=10000;", "is_target": false}, {"number": 34, "content": "double shadowdist = 0.6;", "is_target": false}, {"number": 35, "content": "", "is_target": false}, {"number": 36, "content": "doubletoEnv(double pos){", "is_target": true}, {"number": 37, "content": "  // environment is cyclic", "is_target": false}, {"number": 38, "content": "  if(pos>1) pos-=2;", "is_target": false}, {"number": 39, "content": "  if(pos<-1) pos+=2;", "is_target": false}, {"number": 40, "content": "  return pos;", "is_target": false}, {"number": 41, "content": "}", "is_target": false}]}, "534": {"lines": [{"number": 19, "content": "  }", "is_target": false}, {"number": 20, "content": "  return 0;", "is_target": false}, {"number": 21, "content": "}", "is_target": false}, {"number": 22, "content": "", "is_target": false}, {"number": 23, "content": "int main(int argc, char** argv){", "is_target": false}, {"number": 24, "content": "  int verboseMode=0;", "is_target": true}, {"number": 25, "content": "  const char* port = \"/dev/ttyS0\";", "is_target": false}, {"number": 26, "content": "  int baud = 38400;", "is_target": false}, {"number": 27, "content": "", "is_target": false}, {"number": 28, "content": "  if(contains(argv,argc,\"-v\")!= nullptr) verboseMode=1;", "is_target": false}, {"number": 29, "content": "  if(contains(argv,argc,\"-vv\")!= nullptr) verboseMode=2;", "is_target": false}]}, "535": {"lines": [{"number": 31, "content": "", "is_target": false}, {"number": 32, "content": "bool stop=0;", "is_target": false}, {"number": 33, "content": "double sleep_=10000;", "is_target": false}, {"number": 34, "content": "double shadowdist = 0.6;", "is_target": false}, {"number": 35, "content": "", "is_target": false}, {"number": 36, "content": "doubletoEnv(double pos){", "is_target": true}, {"number": 37, "content": "  // environment is cyclic", "is_target": false}, {"number": 38, "content": "  if(pos>1) pos-=2;", "is_target": false}, {"number": 39, "content": "  if(pos<-1) pos+=2;", "is_target": false}, {"number": 40, "content": "  return pos;", "is_target": false}, {"number": 41, "content": "}", "is_target": false}]}, "536": {"lines": [{"number": 23, "content": "int main(int argc, char** argv){", "is_target": false}, {"number": 24, "content": "  int verboseMode=0;", "is_target": false}, {"number": 25, "content": "  const char* port = \"/dev/ttyS0\";", "is_target": false}, {"number": 26, "content": "  int baud = 38400;", "is_target": false}, {"number": 27, "content": "", "is_target": false}, {"number": 28, "content": "  if(contains(argv,argc,\"-v\")!= nullptr) verboseMode=1;", "is_target": true}, {"number": 29, "content": "  if(contains(argv,argc,\"-vv\")!= nullptr) verboseMode=2;", "is_target": false}, {"number": 30, "content": "  if(contains(argv,argc,\"-h\")!= nullptr) {", "is_target": false}, {"number": 31, "content": "    printf(\"Usage: %s [-g] [-f] [-v[v]]\\n\",argv[0]);", "is_target": false}, {"number": 32, "content": "    printf(\"\\t-h\\tdisplay this help\\n\");", "is_target": false}, {"number": 33, "content": "    printf(\"\\t-b baud\\tset baud rate\\n\");", "is_target": false}]}, "539": {"lines": [{"number": 447, "content": "    int                _tcpClientSock = 0;", "is_target": false}, {"number": 448, "content": "    sockaddr_in        _addr;", "is_target": false}, {"number": 449, "content": "", "is_target": false}, {"number": 450, "content": "    struct sockaddr_in _myself;", "is_target": false}, {"number": 451, "content": "    struct sockaddr_in _peer;", "is_target": false}, {"number": 452, "content": "};", "is_target": true}, {"number": 453, "content": "", "is_target": false}, {"number": 454, "content": "#endif // __SOCKET_COMMUNICATION_H__", "is_target": false}]}, "540": {"lines": [{"number": 24, "content": "  int verboseMode=0;", "is_target": false}, {"number": 25, "content": "  const char* port = \"/dev/ttyS0\";", "is_target": false}, {"number": 26, "content": "  int baud = 38400;", "is_target": false}, {"number": 27, "content": "", "is_target": false}, {"number": 28, "content": "  if(contains(argv,argc,\"-v\")!= nullptr) verboseMode=1;", "is_target": false}, {"number": 29, "content": "  if(contains(argv,argc,\"-vv\")!= nullptr) verboseMode=2;", "is_target": true}, {"number": 30, "content": "  if(contains(argv,argc,\"-h\")!= nullptr) {", "is_target": false}, {"number": 31, "content": "    printf(\"Usage: %s [-g] [-f] [-v[v]]\\n\",argv[0]);", "is_target": false}, {"number": 32, "content": "    printf(\"\\t-h\\tdisplay this help\\n\");", "is_target": false}, {"number": 33, "content": "    printf(\"\\t-b baud\\tset baud rate\\n\");", "is_target": false}, {"number": 34, "content": "    printf(\"\\t-v\\tenable verbose mode\\n\\t-p port\\tuse give serial port (/dev/ttyS0)\\n\");", "is_target": false}]}, "541": {"lines": [{"number": 165, "content": "  }while( (b != 255) && (b != -1));", "is_target": false}, {"number": 166, "content": "  if (b == -1) return -1;", "is_target": false}, {"number": 167, "content": "  int addr = getByte();", "is_target": false}, {"number": 168, "content": "  if (addr == -1) return -1;", "is_target": false}, {"number": 169, "content": "  int command = getByte();", "is_target": false}, {"number": 170, "content": "  if (command == -1) return -1;", "is_target": true}, {"number": 171, "content": "  *cmd = command;", "is_target": false}, {"number": 172, "content": "  int len = getByte();", "is_target": false}, {"number": 173, "content": "  if (len == -1) return -1;", "is_target": false}, {"number": 174, "content": "  if(addr==my_adr){", "is_target": false}, {"number": 175, "content": "    for(int i = 0; i<len; ++i) {", "is_target": false}]}, "542": {"lines": [{"number": 168, "content": "  if (addr == -1) return -1;", "is_target": false}, {"number": 169, "content": "  int command = getByte();", "is_target": false}, {"number": 170, "content": "  if (command == -1) return -1;", "is_target": false}, {"number": 171, "content": "  *cmd = command;", "is_target": false}, {"number": 172, "content": "  int len = getByte();", "is_target": false}, {"number": 173, "content": "  if (len == -1) return -1;", "is_target": true}, {"number": 174, "content": "  if(addr==my_adr){", "is_target": false}, {"number": 175, "content": "    for(int i = 0; i<len; ++i) {", "is_target": false}, {"number": 176, "content": "      int b =getByte();", "is_target": false}, {"number": 177, "content": "      if(b==-1) return -1;", "is_target": false}, {"number": 178, "content": "      data[i] = b;", "is_target": false}]}, "543": {"lines": [{"number": 172, "content": "  int len = getByte();", "is_target": false}, {"number": 173, "content": "  if (len == -1) return -1;", "is_target": false}, {"number": 174, "content": "  if(addr==my_adr){", "is_target": false}, {"number": 175, "content": "    for(int i = 0; i<len; ++i) {", "is_target": false}, {"number": 176, "content": "      int b =getByte();", "is_target": false}, {"number": 177, "content": "      if(b==-1) return -1;", "is_target": true}, {"number": 178, "content": "      data[i] = b;", "is_target": false}, {"number": 179, "content": "    }", "is_target": false}, {"number": 180, "content": "  }else{", "is_target": false}, {"number": 181, "content": "    printf(\"Got weird packet\\n\");", "is_target": false}, {"number": 182, "content": "  }", "is_target": false}]}, "544": {"lines": [{"number": 171, "content": "  *cmd = command;", "is_target": false}, {"number": 172, "content": "  int len = getByte();", "is_target": false}, {"number": 173, "content": "  if (len == -1) return -1;", "is_target": false}, {"number": 174, "content": "  if(addr==my_adr){", "is_target": false}, {"number": 175, "content": "    for(int i = 0; i<len; ++i) {", "is_target": false}, {"number": 176, "content": "      int b =getByte();", "is_target": true}, {"number": 177, "content": "      if(b==-1) return -1;", "is_target": false}, {"number": 178, "content": "      data[i] = b;", "is_target": false}, {"number": 179, "content": "    }", "is_target": false}, {"number": 180, "content": "  }else{", "is_target": false}, {"number": 181, "content": "    printf(\"Got weird packet\\n\");", "is_target": false}]}, "545": {"lines": [{"number": 67, "content": "  { \"store\", com_store, \"Stores controller of AGENTID to FILE\" },", "is_target": false}, {"number": 68, "content": "  { \"load\", com_load, \"Loads controller of AGENTID from FILE\" },", "is_target": false}, {"number": 69, "content": "  { \"show\", com_show, \"[OBJECTID]: Lists paramters of OBJECTID or of all objects (if no id given)\" },", "is_target": false}, {"number": 70, "content": "  { \"view\", com_show, \"Synonym for `show'\" },", "is_target": false}, {"number": 71, "content": "  { \"quit\", com_quit, \"Quit program\" },", "is_target": false}, {"number": 72, "content": "  { static_cast<char*>nullptr, (commandfunc_t)nullptr, static_cast<char*>nullptr }", "is_target": true}, {"number": 73, "content": "};", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "/* Forward declarations. */", "is_target": false}, {"number": 76, "content": "char * stripwhite (char *string);", "is_target": false}, {"number": 77, "content": "COMMAND *find_command (char *name);", "is_target": false}]}, "546": {"lines": [{"number": 67, "content": "  { \"store\", com_store, \"Stores controller of AGENTID to FILE\" },", "is_target": false}, {"number": 68, "content": "  { \"load\", com_load, \"Loads controller of AGENTID from FILE\" },", "is_target": false}, {"number": 69, "content": "  { \"show\", com_show, \"[OBJECTID]: Lists paramters of OBJECTID or of all objects (if no id given)\" },", "is_target": false}, {"number": 70, "content": "  { \"view\", com_show, \"Synonym for `show'\" },", "is_target": false}, {"number": 71, "content": "  { \"quit\", com_quit, \"Quit program\" },", "is_target": false}, {"number": 72, "content": "  { static_cast<char*>nullptr, (commandfunc_t)nullptr, static_cast<char*>nullptr }", "is_target": true}, {"number": 73, "content": "};", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "/* Forward declarations. */", "is_target": false}, {"number": 76, "content": "char * stripwhite (char *string);", "is_target": false}, {"number": 77, "content": "COMMAND *find_command (char *name);", "is_target": false}]}, "547": {"lines": [{"number": 67, "content": "  { \"store\", com_store, \"Stores controller of AGENTID to FILE\" },", "is_target": false}, {"number": 68, "content": "  { \"load\", com_load, \"Loads controller of AGENTID from FILE\" },", "is_target": false}, {"number": 69, "content": "  { \"show\", com_show, \"[OBJECTID]: Lists paramters of OBJECTID or of all objects (if no id given)\" },", "is_target": false}, {"number": 70, "content": "  { \"view\", com_show, \"Synonym for `show'\" },", "is_target": false}, {"number": 71, "content": "  { \"quit\", com_quit, \"Quit program\" },", "is_target": false}, {"number": 72, "content": "  { static_cast<char*>nullptr, (commandfunc_t)nullptr, static_cast<char*>nullptr }", "is_target": true}, {"number": 73, "content": "};", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "/* Forward declarations. */", "is_target": false}, {"number": 76, "content": "char * stripwhite (char *string);", "is_target": false}, {"number": 77, "content": "COMMAND *find_command (char *name);", "is_target": false}]}, "548": {"lines": [{"number": 157, "content": "  double dS = 0;", "is_target": false}, {"number": 158, "content": "  double val = F[ binNumber ];", "is_target": false}, {"number": 159, "content": "  double t = actualStep;", "is_target": false}, {"number": 160, "content": "  if ( val > 0 )", "is_target": false}, {"number": 161, "content": "  { // calculating log(0) is not smart ;)", "is_target": false}, {"number": 162, "content": "    dS = (- val * log(val)) + ((val+1) * log(val+1));", "is_target": true}, {"number": 163, "content": "  }", "is_target": false}, {"number": 164, "content": "  // update Entropy with old Entropy and dS", "is_target": false}, {"number": 165, "content": "  if (actualStep>1)", "is_target": false}, {"number": 166, "content": "  {", "is_target": false}, {"number": 167, "content": "    value= - ((1./t) * (((value - log(t-1.))*(t-1.)) + dS)) + log(t);", "is_target": false}]}, "549": {"lines": [{"number": 72, "content": "     * @param minValue minimum value the observed value can become", "is_target": false}, {"number": 73, "content": "     * @param maxValue maximum value the observed value can become", "is_target": false}, {"number": 74, "content": "     */", "is_target": false}, {"number": 75, "content": "    virtual void addObservable( double& observedValue, double minValue, double maxValue );", "is_target": false}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "    virtual ~ComplexMeasure();", "is_target": true}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "    /**", "is_target": false}, {"number": 80, "content": "     * defined by AbstractMeasure. This method is called from StatisticTools", "is_target": false}, {"number": 81, "content": "     * for updating the measure in every simStep (ODE).", "is_target": false}, {"number": 82, "content": "     */", "is_target": false}]}, "550": {"lines": [{"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "    /**", "is_target": false}, {"number": 80, "content": "     * defined by AbstractMeasure. This method is called from StatisticTools", "is_target": false}, {"number": 81, "content": "     * for updating the measure in every simStep (ODE).", "is_target": false}, {"number": 82, "content": "     */", "is_target": false}, {"number": 83, "content": "    virtual void step();", "is_target": true}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "", "is_target": false}, {"number": 86, "content": "  protected:", "is_target": false}, {"number": 87, "content": "  std::list<double*> observedValueList; // stores the adresses of the observedValues", "is_target": false}, {"number": 88, "content": "  std::list<Discretisizer*> discretisizerList; // stores the Discretisizer", "is_target": false}]}, "551": {"lines": [{"number": 34, "content": "class StatisticMeasure : public AbstractMeasure {", "is_target": false}, {"number": 35, "content": "", "is_target": false}, {"number": 36, "content": "public:", "is_target": false}, {"number": 37, "content": "  StatisticMeasure(double& observedValue, const char* measureName, MeasureMode mode, long stepSpan, double additionalParam);", "is_target": false}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "  virtual ~StatisticMeasure() {}", "is_target": true}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  virtual void step();", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "protected:", "is_target": false}, {"number": 44, "content": "  double& observedValue; // the observed value from which the statistic is made", "is_target": false}]}, "552": {"lines": [{"number": 36, "content": "public:", "is_target": false}, {"number": 37, "content": "  StatisticMeasure(double& observedValue, const char* measureName, MeasureMode mode, long stepSpan, double additionalParam);", "is_target": false}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "  virtual ~StatisticMeasure() {}", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  virtual void step();", "is_target": true}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "protected:", "is_target": false}, {"number": 44, "content": "  double& observedValue; // the observed value from which the statistic is made", "is_target": false}, {"number": 45, "content": "  MeasureMode mode; // the MeasureMode, e.g. ID, AVG, MED, PEAK, CONV,...", "is_target": false}, {"number": 46, "content": "  long stepSpan = 0; // determines the size of valueHistory", "is_target": false}]}, "553": {"lines": [{"number": 152, "content": "    int len = readB();", "is_target": false}, {"number": 153, "content": "    if (len == -1) continue;", "is_target": false}, {"number": 154, "content": "    if(addr== nullptr){", "is_target": false}, {"number": 155, "content": "      int i = 0;", "is_target": false}, {"number": 156, "content": "      for (i=0; i<len; ++i) {", "is_target": false}, {"number": 157, "content": "        int b =readB();", "is_target": true}, {"number": 158, "content": "        if(b==-1) break;", "is_target": false}, {"number": 159, "content": "        c[i] = b;", "is_target": false}, {"number": 160, "content": "      }", "is_target": false}, {"number": 161, "content": "      if(i<len) continue;", "is_target": false}, {"number": 162, "content": "    }else{", "is_target": false}]}, "555": {"lines": [{"number": 65, "content": "  if (observedValueList.size()== 0)", "is_target": false}, {"number": 66, "content": "    return;", "is_target": false}, {"number": 67, "content": "  int valNumber = 0;", "is_target": false}, {"number": 68, "content": "  int binNumber=0;", "is_target": false}, {"number": 69, "content": "  std::list<Discretisizer*>::iterator di = discretisizerList.begin();", "is_target": false}, {"number": 70, "content": "  std::list<int> binList;", "is_target": true}, {"number": 71, "content": "  switch (mode)", "is_target": false}, {"number": 72, "content": "  {", "is_target": false}, {"number": 73, "content": "  case MI:", "is_target": false}, {"number": 74, "content": "  case PINF:/*", "is_target": false}, {"number": 75, "content": "    binNumber = ( *di ) ->getBinNumber( *(*oValue));", "is_target": false}]}, "556": {"lines": [{"number": 67, "content": "  { \"store\", com_store, \"Stores controller of AGENTID to FILE\" },", "is_target": false}, {"number": 68, "content": "  { \"load\", com_load, \"Loads controller of AGENTID from FILE\" },", "is_target": false}, {"number": 69, "content": "  { \"show\", com_show, \"[OBJECTID]: Lists paramters of OBJECTID or of all objects (if no id given)\" },", "is_target": false}, {"number": 70, "content": "  { \"view\", com_show, \"Synonym for `show'\" },", "is_target": false}, {"number": 71, "content": "  { \"quit\", com_quit, \"Quit program\" },", "is_target": false}, {"number": 72, "content": "  { static_cast<char*>nullptr, (commandfunc_t)nullptr, static_cast<char*>nullptr }", "is_target": true}, {"number": 73, "content": "};", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "/* Forward declarations. */", "is_target": false}, {"number": 76, "content": "char * stripwhite (char *string);", "is_target": false}, {"number": 77, "content": "COMMAND *find_command (char *name);", "is_target": false}]}, "557": {"lines": [{"number": 75, "content": "  ComplexMeasureMode    cmode;", "is_target": false}, {"number": 76, "content": "  TrackMode             tmode;", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "  virtual double findRange(std::list<Position>  positionList,short dim, bool min);", "is_target": false}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "  virtual void addDimension(short dim, std::list<Position> cornerPointList);", "is_target": true}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "};", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "#endif", "is_target": false}]}, "558": {"lines": [{"number": 75, "content": "  ComplexMeasureMode    cmode;", "is_target": false}, {"number": 76, "content": "  TrackMode             tmode;", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "  virtual double findRange(std::list<Position>  positionList,short dim, bool min);", "is_target": false}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "  virtual void addDimension(short dim, std::list<Position> cornerPointList);", "is_target": true}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "};", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "#endif", "is_target": false}]}, "559": {"lines": [{"number": 75, "content": "  ComplexMeasureMode    cmode;", "is_target": false}, {"number": 76, "content": "  TrackMode             tmode;", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "  virtual double findRange(std::list<Position>  positionList,short dim, bool min);", "is_target": false}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "  virtual void addDimension(short dim, std::list<Position> cornerPointList);", "is_target": true}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "};", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "#endif", "is_target": false}]}, "561": {"lines": [{"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  /**", "is_target": false}, {"number": 67, "content": "   * defined by AbstractMeasure. This method is called from StatisticTools", "is_target": false}, {"number": 68, "content": "      for updating the measure in every simStep (ODE).", "is_target": false}, {"number": 69, "content": "   */", "is_target": false}, {"number": 70, "content": "  virtual void step();", "is_target": true}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "protected:", "is_target": false}, {"number": 74, "content": "  std::list<Trackable*> trackableList;", "is_target": false}, {"number": 75, "content": "  ComplexMeasureMode    cmode;", "is_target": false}]}, "563": {"lines": [{"number": 41, "content": "#include <list>", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "class StatisticTools : public Inspectable, public Callbackable {", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "public:", "is_target": false}, {"number": 46, "content": "  StatisticTools(const std::string& name = \"StatisticTools\") : Inspectable(name), beginMeasureCounter(0) { }", "is_target": true}, {"number": 47, "content": "  ", "is_target": false}, {"number": 48, "content": "  // From Callbackable interface", "is_target": false}, {"number": 49, "content": "  virtual void doOnCallBack(BackCaller* source, BackCaller::CallbackableType type = BackCaller::DEFAULT_CALLBACKABLE_TYPE);", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "        /**", "is_target": false}]}, "564": {"lines": [{"number": 34, "content": "class StatisticMeasure : public AbstractMeasure {", "is_target": false}, {"number": 35, "content": "", "is_target": false}, {"number": 36, "content": "public:", "is_target": false}, {"number": 37, "content": "  StatisticMeasure(double& observedValue, const char* measureName, MeasureMode mode, long stepSpan, double additionalParam);", "is_target": false}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "  virtual ~StatisticMeasure() {}", "is_target": true}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  virtual void step();", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "protected:", "is_target": false}, {"number": 44, "content": "  double& observedValue; // the observed value from which the statistic is made", "is_target": false}]}, "565": {"lines": [{"number": 36, "content": "public:", "is_target": false}, {"number": 37, "content": "  StatisticMeasure(double& observedValue, const char* measureName, MeasureMode mode, long stepSpan, double additionalParam);", "is_target": false}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "  virtual ~StatisticMeasure() {}", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  virtual void step();", "is_target": true}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "protected:", "is_target": false}, {"number": 44, "content": "  double& observedValue; // the observed value from which the statistic is made", "is_target": false}, {"number": 45, "content": "  MeasureMode mode; // the MeasureMode, e.g. ID, AVG, MED, PEAK, CONV,...", "is_target": false}, {"number": 46, "content": "  long stepSpan = 0; // determines the size of valueHistory", "is_target": false}]}, "566": {"lines": [{"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "public:", "is_target": false}, {"number": 46, "content": "  StatisticTools(const std::string& name = \"StatisticTools\") : Inspectable(name), beginMeasureCounter(0) { }", "is_target": false}, {"number": 47, "content": "  ", "is_target": false}, {"number": 48, "content": "  // From Callbackable interface", "is_target": false}, {"number": 49, "content": "  virtual void doOnCallBack(BackCaller* source, BackCaller::CallbackableType type = BackCaller::DEFAULT_CALLBACKABLE_TYPE);", "is_target": true}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "        /**", "is_target": false}, {"number": 52, "content": "         * adds a variable to observe and measure the value", "is_target": false}, {"number": 53, "content": "         * @param observedValue    the value to observe.", "is_target": false}, {"number": 54, "content": "         * @param measureName      the name of the measured value", "is_target": false}]}, "567": {"lines": [{"number": 37, "content": " * You can use iterators with the limitation to not delete or insert.", "is_target": false}, {"number": 38, "content": " */", "is_target": false}, {"number": 39, "content": "class ConfigurableList : public std::vector<Configurable*>, public BackCaller {", "is_target": false}, {"number": 40, "content": "public:", "is_target": false}, {"number": 41, "content": "  ConfigurableList();", "is_target": false}, {"number": 42, "content": "  virtual ~ConfigurableList();", "is_target": true}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "  /**", "is_target": false}, {"number": 45, "content": "   * Indicates that the list has been modified, a Configurable instance was either added or removed.", "is_target": false}, {"number": 46, "content": "   */", "is_target": false}, {"number": 47, "content": "  static const BackCaller::CallbackableType CALLBACK_CONFIGURABLE_LIST_MODIFIED = 3;", "is_target": false}]}, "570": {"lines": [{"number": 395, "content": "", "is_target": false}, {"number": 396, "content": "protected:", "is_target": false}, {"number": 397, "content": "  void initController(){", "is_target": false}, {"number": 398, "content": "    if(x) free(x);", "is_target": false}, {"number": 399, "content": "    if(y) free(y);", "is_target": false}, {"number": 400, "content": "    x=static_cast<double*>(malloc)(sizeof(double)*sensornumber);", "is_target": true}, {"number": 401, "content": "    y=static_cast<double*>(malloc)(sizeof(double)*motornumber);", "is_target": false}, {"number": 402, "content": "", "is_target": false}, {"number": 403, "content": "    for (int i = 0; i < motornumber; ++i) {", "is_target": false}, {"number": 404, "content": "      y[i] = 0.0;", "is_target": false}, {"number": 405, "content": "    }", "is_target": false}]}, "572": {"lines": [{"number": 144, "content": "        /**", "is_target": false}, {"number": 145, "content": "         * constructor", "is_target": false}, {"number": 146, "content": "         * Needs a set of values for which the statistical values will calculate.", "is_target": false}, {"number": 147, "content": "         * @param values (vector<type>& the set)", "is_target": false}, {"number": 148, "content": "         */", "is_target": false}, {"number": 149, "content": "        TemplateValueAnalysation(std::vector<type>& values) : m_vector(values), m_list(), m_listCreated(false) {}", "is_target": true}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "        /**", "is_target": false}, {"number": 152, "content": "         * default destructor", "is_target": false}, {"number": 153, "content": "         */", "is_target": false}, {"number": 154, "content": "        ~TemplateValueAnalysation() {}", "is_target": false}]}, "573": {"lines": [{"number": 503, "content": "        /**", "is_target": false}, {"number": 504, "content": "         * help structur for sorting the set.", "is_target": false}, {"number": 505, "content": "         * define the lower than operator", "is_target": false}, {"number": 506, "content": "         */", "is_target": false}, {"number": 507, "content": "        struct TYPE_SAVE {", "is_target": false}, {"number": 508, "content": "                TYPE_SAVE(const type& a) : pointer(&a) {}", "is_target": true}, {"number": 509, "content": "", "is_target": false}, {"number": 510, "content": "                type* pointer;", "is_target": false}, {"number": 511, "content": "", "is_target": false}, {"number": 512, "content": "                bool operator<(const TYPE_SAVE& other) const {", "is_target": false}, {"number": 513, "content": "                        return lower((*pointer),(*other.pointer));", "is_target": false}]}, "574": {"lines": [{"number": 39, "content": "Mediator::addMediatorCollegue(MediatorCollegue* collegue) {", "is_target": false}, {"number": 40, "content": "  collegueList.push_back(collegue);", "is_target": false}, {"number": 41, "content": "}", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "void", "is_target": false}, {"number": 44, "content": "Mediator::removeMediatorCollegue(MediatorCollegue* collegue) {", "is_target": true}, {"number": 45, "content": "  FOREACH(MediatorCollegueListType, collegueList, collIt) {", "is_target": false}, {"number": 46, "content": "    if ((*collIt) == collegue) {", "is_target": false}, {"number": 47, "content": "      collegueList.erase(collIt);", "is_target": false}, {"number": 48, "content": "      break;", "is_target": false}, {"number": 49, "content": "    }", "is_target": false}]}, "575": {"lines": [{"number": 55, "content": "  assert(index < getNumberOfMediatorCollegues());", "is_target": false}, {"number": 56, "content": "  return collegueList[index];", "is_target": false}, {"number": 57, "content": "}", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "unsigned int", "is_target": false}, {"number": 60, "content": "Mediator::getMediatorCollegueIndex(MediatorCollegue* collegue) {", "is_target": true}, {"number": 61, "content": "  for (unsigned int index = 0; index < collegueList.size(); ++index)", "is_target": false}, {"number": 62, "content": "    if (collegueList[index] == collegue)", "is_target": false}, {"number": 63, "content": "      return index;", "is_target": false}, {"number": 64, "content": "  return -1;", "is_target": false}, {"number": 65, "content": "}", "is_target": false}]}, "576": {"lines": [{"number": 162, "content": "        type getAvg() {", "is_target": false}, {"number": 163, "content": "                type avg=zero();                                                                                                                                                //by begin the average is zero", "is_target": false}, {"number": 164, "content": "                typename std::vector<type>::iterator iter;", "is_target": false}, {"number": 165, "content": "", "is_target": false}, {"number": 166, "content": "                for(iter = m_vector.begin(); iter != m_vector.end(); ++iter) {", "is_target": false}, {"number": 167, "content": "                        avg = add(avg,(*iter));                                                                                                                                //for all elements in the set add it to the average.", "is_target": true}, {"number": 168, "content": "                                                                                                                                                                                                //So we become the sum. of all elements in the set.", "is_target": false}, {"number": 169, "content": "                }", "is_target": false}, {"number": 170, "content": "", "is_target": false}, {"number": 171, "content": "                if(m_vector.size()!= 0)", "is_target": false}, {"number": 172, "content": "                        avg = doubleDiv(avg,m_vector.size());                                                                                                //now devide the sum by the count of elements in the set.", "is_target": false}]}, "577": {"lines": [{"number": 39, "content": "   * Takes a list of Inspectables for which the proxy stands.", "is_target": false}, {"number": 40, "content": "   * Attention: The inspectables must have registered", "is_target": false}, {"number": 41, "content": "   * all their variables already!", "is_target": false}, {"number": 42, "content": "   * @param list (list<Inspectable*>&) the list", "is_target": false}, {"number": 43, "content": "   */", "is_target": false}, {"number": 44, "content": "  InspectableProxy(const std::list<Inspectable*>& list,", "is_target": true}, {"number": 45, "content": "                            const iparamkey& name = \"InspectableProxy\");", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "  /**", "is_target": false}, {"number": 48, "content": "   * default destructor", "is_target": false}, {"number": 49, "content": "   */", "is_target": false}]}, "578": {"lines": [{"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "  /**", "is_target": false}, {"number": 66, "content": "   * disable the default constructor", "is_target": false}, {"number": 67, "content": "   * @return", "is_target": false}, {"number": 68, "content": "   */", "is_target": false}, {"number": 69, "content": "  InspectableProxy(const iparamkey& name = \"InspectableProxy\");", "is_target": true}, {"number": 70, "content": "};", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "#endif /* INSPECTABLEPROXY_H_ */", "is_target": false}]}, "579": {"lines": [{"number": 45, "content": "                            const iparamkey& name = \"InspectableProxy\");", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "  /**", "is_target": false}, {"number": 48, "content": "   * default destructor", "is_target": false}, {"number": 49, "content": "   */", "is_target": false}, {"number": 50, "content": "  virtual ~InspectableProxy();", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  /**", "is_target": false}, {"number": 53, "content": "   * this function is for replacing the old list", "is_target": false}, {"number": 54, "content": "   * @param list (list<Inspectable*>& the new list", "is_target": false}, {"number": 55, "content": "   * @return static_cast<bool>(true) if it successful", "is_target": false}]}, "580": {"lines": [{"number": 58, "content": "   */", "is_target": false}, {"number": 59, "content": "  explicit WiredController(const std::list<PlotOption>& plotOptions, double noisefactor = 1, const Inspectable::iparamkey& name = \"WiredController\", const Inspectable::iparamkey& revision = \"$ID\");", "is_target": false}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "  /** destructor", "is_target": false}, {"number": 62, "content": "   */", "is_target": false}, {"number": 63, "content": "  virtual ~WiredController();", "is_target": true}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "  /** initializes the object with the given controller and wiring", "is_target": false}, {"number": 66, "content": "      and initializes the output options", "is_target": false}, {"number": 67, "content": "      It is also possible to provide a random seed,", "is_target": false}, {"number": 68, "content": "       if not given static_cast<0>(rand)() is used to create one", "is_target": false}]}, "581": {"lines": [{"number": 62, "content": "int", "is_target": false}, {"number": 63, "content": "__erand48_r(unsigned short int xsubi[3], struct drand48_data* buffer, double* result) {", "is_target": false}, {"number": 64, "content": "  union ieee754_double temp;", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  /* Compute next state.  */", "is_target": false}, {"number": 67, "content": "  if (__drand48_iterate(xsubi, buffer) < 0)", "is_target": true}, {"number": 68, "content": "    return -1;", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  /* Construct a positive double with the 48 random bits distributed over", "is_target": false}, {"number": 71, "content": "     its fractional part so the resulting FP number is [0.0,1.0).  */", "is_target": false}, {"number": 72, "content": "", "is_target": false}]}, "582": {"lines": [{"number": 51, "content": "public:", "is_target": false}, {"number": 52, "content": "  Pendulum(const string& name, double dt = 0.01)", "is_target": false}, {"number": 53, "content": "    : AbstractRobot(name, \"$Id$\") {", "is_target": false}, {"number": 54, "content": "    motornumber  = 1;", "is_target": false}, {"number": 55, "content": "    sensornumber = 2;", "is_target": false}, {"number": 56, "content": "    x = new double[sensornumber];", "is_target": true}, {"number": 57, "content": "    y = new double[motornumber];", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "    state.set(2,1);", "is_target": false}, {"number": 60, "content": "    state.val(0,0) = 0; // M_PI + M_PI/4; // position", "is_target": false}, {"number": 61, "content": "    state.val(1,0) = 0.0; // speed", "is_target": false}]}, "583": {"lines": [{"number": 51, "content": "public:", "is_target": false}, {"number": 52, "content": "  Pendulum(const string& name, double dt = 0.01)", "is_target": false}, {"number": 53, "content": "    : AbstractRobot(name, \"$Id$\") {", "is_target": false}, {"number": 54, "content": "    motornumber  = 1;", "is_target": false}, {"number": 55, "content": "    sensornumber = 2;", "is_target": false}, {"number": 56, "content": "    x = new double[sensornumber];", "is_target": true}, {"number": 57, "content": "    y = new double[motornumber];", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "    state.set(2,1);", "is_target": false}, {"number": 60, "content": "    state.val(0,0) = 0; // M_PI + M_PI/4; // position", "is_target": false}, {"number": 61, "content": "    state.val(1,0) = 0.0; // speed", "is_target": false}]}, "584": {"lines": [{"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "int reset = 0;", "is_target": false}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "class Pendulum{", "is_target": false}, {"number": 51, "content": "public:", "is_target": false}, {"number": 52, "content": "  Pendulum(const string& name, double dt = 0.01)", "is_target": true}, {"number": 53, "content": "    : AbstractRobot(name, \"$Id$\") {", "is_target": false}, {"number": 54, "content": "    motornumber  = 1;", "is_target": false}, {"number": 55, "content": "    sensornumber = 2;", "is_target": false}, {"number": 56, "content": "    x = new double[sensornumber];", "is_target": false}, {"number": 57, "content": "    y = new double[motornumber];", "is_target": false}]}, "585": {"lines": [{"number": 35, "content": "  ReplayController(const char* filename, bool repeat = false)", "is_target": false}, {"number": 36, "content": "    : AbstractController(\"ReplayController\", \"1.0\")", "is_target": false}, {"number": 37, "content": "    , filename(filename)", "is_target": false}, {"number": 38, "content": "    , repeat(repeat) {", "is_target": false}, {"number": 39, "content": "", "is_target": false}, {"number": 40, "content": "    f = fopen(filename, \"r\");", "is_target": true}, {"number": 41, "content": "    if (!f) {", "is_target": false}, {"number": 42, "content": "      std::cerr << \"ReplayController: error while opening file \" << filename << std::endl;", "is_target": false}, {"number": 43, "content": "      exit(1);", "is_target": false}, {"number": 44, "content": "    }", "is_target": false}, {"number": 45, "content": "    if (!parseDataFileForHeader(f)) {", "is_target": false}]}, "586": {"lines": [{"number": 35, "content": "  ReplayController(const char* filename, bool repeat = false)", "is_target": false}, {"number": 36, "content": "    : AbstractController(\"ReplayController\", \"1.0\")", "is_target": false}, {"number": 37, "content": "    , filename(filename)", "is_target": false}, {"number": 38, "content": "    , repeat(repeat) {", "is_target": false}, {"number": 39, "content": "", "is_target": false}, {"number": 40, "content": "    f = fopen(filename, \"r\");", "is_target": true}, {"number": 41, "content": "    if (!f) {", "is_target": false}, {"number": 42, "content": "      std::cerr << \"ReplayController: error while opening file \" << filename << std::endl;", "is_target": false}, {"number": 43, "content": "      exit(1);", "is_target": false}, {"number": 44, "content": "    }", "is_target": false}, {"number": 45, "content": "    if (!parseDataFileForHeader(f)) {", "is_target": false}]}, "587": {"lines": [{"number": 35, "content": "  ReplayController(const char* filename, bool repeat = false)", "is_target": false}, {"number": 36, "content": "    : AbstractController(\"ReplayController\", \"1.0\")", "is_target": false}, {"number": 37, "content": "    , filename(filename)", "is_target": false}, {"number": 38, "content": "    , repeat(repeat) {", "is_target": false}, {"number": 39, "content": "", "is_target": false}, {"number": 40, "content": "    f = fopen(filename, \"r\");", "is_target": true}, {"number": 41, "content": "    if (!f) {", "is_target": false}, {"number": 42, "content": "      std::cerr << \"ReplayController: error while opening file \" << filename << std::endl;", "is_target": false}, {"number": 43, "content": "      exit(1);", "is_target": false}, {"number": 44, "content": "    }", "is_target": false}, {"number": 45, "content": "    if (!parseDataFileForHeader(f)) {", "is_target": false}]}, "588": {"lines": [{"number": 59, "content": "    return matrix::Matrix::map2(div, m1, m2);", "is_target": false}, {"number": 60, "content": "  });", "is_target": false}, {"number": 61, "content": "}", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "void", "is_target": false}, {"number": 64, "content": "assignPL(ParameterList& pld, const ParameterList& pls) {", "is_target": true}, {"number": 65, "content": "  ParameterList::const_iterator ps = pls.begin();", "is_target": false}, {"number": 66, "content": "  ParameterList::const_iterator __end2 = pls.end();", "is_target": false}, {"number": 67, "content": "  for (ParameterList::iterator pd = pld.begin(), __end1 = pld.end(); pd != __end1 && ps != __end2;", "is_target": false}, {"number": 68, "content": "       ++pd, ++ps)", "is_target": false}, {"number": 69, "content": "    *pd = *ps;", "is_target": false}]}, "589": {"lines": [{"number": 74, "content": "    c.someInternalParams = true;", "is_target": false}, {"number": 75, "content": "    c.numContext = 0;", "is_target": false}, {"number": 76, "content": "    return c;", "is_target": false}, {"number": 77, "content": "  }", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  virtual ~SeMoX();", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 84, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "590": {"lines": [{"number": 76, "content": "    return c;", "is_target": false}, {"number": 77, "content": "  }", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  virtual ~SeMoX();", "is_target": true}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 84, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 85, "content": "    return number_sensors;", "is_target": false}, {"number": 86, "content": "  }", "is_target": false}]}, "591": {"lines": [{"number": 89, "content": "    return number_motors;", "is_target": false}, {"number": 90, "content": "  }", "is_target": false}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 93, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 94, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 97, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 98, "content": "                              int number_sensors,", "is_target": false}, {"number": 99, "content": "                              motor*,", "is_target": false}]}, "592": {"lines": [{"number": 92, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 93, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 94, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 97, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 98, "content": "                              int number_sensors,", "is_target": false}, {"number": 99, "content": "                              motor*,", "is_target": false}, {"number": 100, "content": "                              int number_motors);", "is_target": false}, {"number": 101, "content": "", "is_target": false}, {"number": 102, "content": "  /**** STOREABLE ****/", "is_target": false}]}, "593": {"lines": [{"number": 104, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 105, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 106, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "  /**** INSPECTABLE ****/", "is_target": false}, {"number": 109, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": true}, {"number": 110, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "  /**** TEACHABLE ****/", "is_target": false}, {"number": 113, "content": "  /** The given motor teaching signal is used for this timestep.", "is_target": false}, {"number": 114, "content": "      It is used as a feed forward teaching signal for the controller.", "is_target": false}]}, "594": {"lines": [{"number": 105, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 106, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "  /**** INSPECTABLE ****/", "is_target": false}, {"number": 109, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 110, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": true}, {"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "  /**** TEACHABLE ****/", "is_target": false}, {"number": 113, "content": "  /** The given motor teaching signal is used for this timestep.", "is_target": false}, {"number": 114, "content": "      It is used as a feed forward teaching signal for the controller.", "is_target": false}, {"number": 115, "content": "      Please note, that the teaching signal has to be given each timestep", "is_target": false}]}, "595": {"lines": [{"number": 114, "content": "      It is used as a feed forward teaching signal for the controller.", "is_target": false}, {"number": 115, "content": "      Please note, that the teaching signal has to be given each timestep", "is_target": false}, {"number": 116, "content": "       for a continuous teaching process.", "is_target": false}, {"number": 117, "content": "     @param teaching: matrix with dimensions (motornumber,1)", "is_target": false}, {"number": 118, "content": "   */", "is_target": false}, {"number": 119, "content": "  virtual void setMotorTeaching(const matrix::Matrix& teaching);", "is_target": true}, {"number": 120, "content": "", "is_target": false}, {"number": 121, "content": "  /** The given sensor teaching signal (distal learning) is used for this timestep.", "is_target": false}, {"number": 122, "content": "      The belonging motor teachung signal is calculated by the inverse model.", "is_target": false}, {"number": 123, "content": "      See setMotorTeaching", "is_target": false}, {"number": 124, "content": "     @param teaching: matrix with dimensions (motorsensors,1)", "is_target": false}]}, "596": {"lines": [{"number": 121, "content": "  /** The given sensor teaching signal (distal learning) is used for this timestep.", "is_target": false}, {"number": 122, "content": "      The belonging motor teachung signal is calculated by the inverse model.", "is_target": false}, {"number": 123, "content": "      See setMotorTeaching", "is_target": false}, {"number": 124, "content": "     @param teaching: matrix with dimensions (motorsensors,1)", "is_target": false}, {"number": 125, "content": "   */", "is_target": false}, {"number": 126, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": true}, {"number": 127, "content": "  /// returns the last motor values (useful for cross motor coupling)", "is_target": false}, {"number": 128, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 129, "content": "  /// returns the last sensor values (useful for cross sensor coupling)", "is_target": false}, {"number": 130, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 131, "content": "", "is_target": false}]}, "597": {"lines": [{"number": 123, "content": "      See setMotorTeaching", "is_target": false}, {"number": 124, "content": "     @param teaching: matrix with dimensions (motorsensors,1)", "is_target": false}, {"number": 125, "content": "   */", "is_target": false}, {"number": 126, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 127, "content": "  /// returns the last motor values (useful for cross motor coupling)", "is_target": false}, {"number": 128, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": true}, {"number": 129, "content": "  /// returns the last sensor values (useful for cross sensor coupling)", "is_target": false}, {"number": 130, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}, {"number": 133, "content": "  virtual std::list<matrix::Matrix> getParameters()  const ;", "is_target": false}]}, "598": {"lines": [{"number": 125, "content": "   */", "is_target": false}, {"number": 126, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 127, "content": "  /// returns the last motor values (useful for cross motor coupling)", "is_target": false}, {"number": 128, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 129, "content": "  /// returns the last sensor values (useful for cross sensor coupling)", "is_target": false}, {"number": 130, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}, {"number": 133, "content": "  virtual std::list<matrix::Matrix> getParameters()  const ;", "is_target": false}, {"number": 134, "content": "  virtual int setParameters(const std::list<matrix::Matrix>& params);", "is_target": false}, {"number": 135, "content": "", "is_target": false}]}, "599": {"lines": [{"number": 30, "content": "/**", "is_target": false}, {"number": 31, "content": " * Controller that replays a file", "is_target": false}, {"number": 32, "content": " */", "is_target": false}, {"number": 33, "content": "class ReplayController{", "is_target": false}, {"number": 34, "content": "public:", "is_target": false}, {"number": 35, "content": "  ReplayController(const char* filename, bool repeat = false)", "is_target": true}, {"number": 36, "content": "    : AbstractController(\"ReplayController\", \"1.0\")", "is_target": false}, {"number": 37, "content": "    , filename(filename)", "is_target": false}, {"number": 38, "content": "    , repeat(repeat) {", "is_target": false}, {"number": 39, "content": "", "is_target": false}, {"number": 40, "content": "    f = fopen(filename, \"r\");", "is_target": false}]}, "600": {"lines": [{"number": 128, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 129, "content": "  /// returns the last sensor values (useful for cross sensor coupling)", "is_target": false}, {"number": 130, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}, {"number": 133, "content": "  virtual std::list<matrix::Matrix> getParameters()  const ;", "is_target": true}, {"number": 134, "content": "  virtual int setParameters(const std::list<matrix::Matrix>& params);", "is_target": false}, {"number": 135, "content": "", "is_target": false}, {"number": 136, "content": "protected:", "is_target": false}, {"number": 137, "content": "  unsigned short number_sensors = 0;", "is_target": false}, {"number": 138, "content": "  unsigned short number_motors = 0;", "is_target": false}]}, "601": {"lines": [{"number": 129, "content": "  /// returns the last sensor values (useful for cross sensor coupling)", "is_target": false}, {"number": 130, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}, {"number": 133, "content": "  virtual std::list<matrix::Matrix> getParameters()  const ;", "is_target": false}, {"number": 134, "content": "  virtual int setParameters(const std::list<matrix::Matrix>& params);", "is_target": true}, {"number": 135, "content": "", "is_target": false}, {"number": 136, "content": "protected:", "is_target": false}, {"number": 137, "content": "  unsigned short number_sensors = 0;", "is_target": false}, {"number": 138, "content": "  unsigned short number_motors = 0;", "is_target": false}, {"number": 139, "content": "", "is_target": false}]}, "602": {"lines": [{"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "ParameterList", "is_target": false}, {"number": 42, "content": "liftPL(const ParameterList& pl, std::function<matrix::Matrix(const matrix::Matrix&)> fun) {", "is_target": false}, {"number": 43, "content": "  ParameterList res;", "is_target": false}, {"number": 44, "content": "  for (auto& p : pl)", "is_target": false}, {"number": 45, "content": "    res.push_back(fun(p));", "is_target": true}, {"number": 46, "content": "  return res;", "is_target": false}, {"number": 47, "content": "}", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "ParameterList", "is_target": false}, {"number": 50, "content": "mapPL(const ParameterList& pl, double (*fun)(double)) {", "is_target": false}]}, "604": {"lines": [{"number": 30, "content": "bool AbstractWiring::init(int robotsensornumber, int robotmotornumber, RandGen* _randGen){", "is_target": false}, {"number": 31, "content": "  rsensornumber = robotsensornumber;", "is_target": false}, {"number": 32, "content": "  rmotornumber  = robotmotornumber;", "is_target": false}, {"number": 33, "content": "  noisenumber   = rsensornumber;", "is_target": false}, {"number": 34, "content": "  randGen       = _randGen;", "is_target": false}, {"number": 35, "content": "  noisenumber   = rsensornumber;", "is_target": true}, {"number": 36, "content": "  bool rv= initIntern();", "is_target": false}, {"number": 37, "content": "", "is_target": false}, {"number": 38, "content": "  mNoise.set(noisenumber,1);", "is_target": false}, {"number": 39, "content": "  noisevals = const_cast<sensor*>(mNoise.unsafeGetData()); // hack! we let the noiseval pointer point to the internal memory of the noisematrix.", "is_target": false}, {"number": 40, "content": "", "is_target": false}]}, "606": {"lines": [{"number": 183, "content": "  double x = sin(phi-M_PI)*len;", "is_target": false}, {"number": 184, "content": "  double y = cos(phi-M_PI)*len;", "is_target": false}, {"number": 185, "content": "  return int(round((x+1.0)/2*(SIZEX-1))) + int((y+1.0)/2*SIZEY)*SIZEX;", "is_target": false}, {"number": 186, "content": "}", "is_target": false}, {"number": 187, "content": "", "is_target": false}, {"number": 188, "content": "void printRobots(Pendulum* robot){", "is_target": true}, {"number": 189, "content": "  char field[SIZEX*SIZEY];", "is_target": false}, {"number": 190, "content": "  char color[SIZEX*SIZEY];", "is_target": false}, {"number": 191, "content": "  memset(field,' ', sizeof(char)*SIZEX*SIZEY);", "is_target": false}, {"number": 192, "content": "  memset(color,0, sizeof(char)*SIZEX*SIZEY);", "is_target": false}, {"number": 193, "content": "  double phi = robot->getPosition().x;", "is_target": false}]}, "607": {"lines": [{"number": 218, "content": "  printf(\"Phi: %lf\\tOmega: %lf\\n\", phi, omega);", "is_target": false}, {"number": 219, "content": "  fflush(stdout);", "is_target": false}, {"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "}", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "void reinforce(Agent* a){", "is_target": true}, {"number": 224, "content": "//   MyRobot* r = static_cast<MyRobot*>(a)->getRobot();", "is_target": false}, {"number": 225, "content": "//   InvertMotorNStep* c = dynamic_cast<InvertMotorNStep*>(a->getController());", "is_target": false}, {"number": 226, "content": "//   if(c)", "is_target": false}, {"number": 227, "content": "//     c->setReinforcement(r->getParam(__PLACEHOLDER_18__)*(r->whatDoIFeel != nullptr));", "is_target": false}, {"number": 228, "content": "}", "is_target": false}]}, "608": {"lines": [{"number": 133, "content": "  I smalldimN = min(m.getN(), (I)4);", "is_target": false}, {"number": 134, "content": "  I smallerdim = min(m.getM(), m.getN());", "is_target": false}, {"number": 135, "content": "  // 4x4", "is_target": false}, {"number": 136, "content": "  for (I i = 0; i < smalldimM; ++i) {", "is_target": false}, {"number": 137, "content": "    for (I j = 0; j < smalldimN; ++j) {", "is_target": false}, {"number": 138, "content": "      snprintf(buffer, sizeof(buffer), \"%s[%d,%d]\", matrixName.c_str(), i, j);", "is_target": true}, {"number": 139, "content": "      l.push_back(string(buffer));", "is_target": false}, {"number": 140, "content": "    }", "is_target": false}, {"number": 141, "content": "  }", "is_target": false}, {"number": 142, "content": "  // diagonal below 4x4", "is_target": false}, {"number": 143, "content": "  for (I i = 4; i < smallerdim; ++i) {", "is_target": false}]}, "609": {"lines": [{"number": 133, "content": "  I smalldimN = min(m.getN(), (I)4);", "is_target": false}, {"number": 134, "content": "  I smallerdim = min(m.getM(), m.getN());", "is_target": false}, {"number": 135, "content": "  // 4x4", "is_target": false}, {"number": 136, "content": "  for (I i = 0; i < smalldimM; ++i) {", "is_target": false}, {"number": 137, "content": "    for (I j = 0; j < smalldimN; ++j) {", "is_target": false}, {"number": 138, "content": "      snprintf(buffer, sizeof(buffer), \"%s[%d,%d]\", matrixName.c_str(), i, j);", "is_target": true}, {"number": 139, "content": "      l.push_back(string(buffer));", "is_target": false}, {"number": 140, "content": "    }", "is_target": false}, {"number": 141, "content": "  }", "is_target": false}, {"number": 142, "content": "  // diagonal below 4x4", "is_target": false}, {"number": 143, "content": "  for (I i = 4; i < smallerdim; ++i) {", "is_target": false}]}, "610": {"lines": [{"number": 139, "content": "      l.push_back(string(buffer));", "is_target": false}, {"number": 140, "content": "    }", "is_target": false}, {"number": 141, "content": "  }", "is_target": false}, {"number": 142, "content": "  // diagonal below 4x4", "is_target": false}, {"number": 143, "content": "  for (I i = 4; i < smallerdim; ++i) {", "is_target": false}, {"number": 144, "content": "    snprintf(buffer, sizeof(buffer), \"%s[%d,%d]\", matrixName.c_str(), i, i);", "is_target": true}, {"number": 145, "content": "    l.push_back(string(buffer));", "is_target": false}, {"number": 146, "content": "  }", "is_target": false}, {"number": 147, "content": "  return l;", "is_target": false}, {"number": 148, "content": "}", "is_target": false}, {"number": 149, "content": "", "is_target": false}]}, "611": {"lines": [{"number": 139, "content": "      l.push_back(string(buffer));", "is_target": false}, {"number": 140, "content": "    }", "is_target": false}, {"number": 141, "content": "  }", "is_target": false}, {"number": 142, "content": "  // diagonal below 4x4", "is_target": false}, {"number": 143, "content": "  for (I i = 4; i < smallerdim; ++i) {", "is_target": false}, {"number": 144, "content": "    snprintf(buffer, sizeof(buffer), \"%s[%d,%d]\", matrixName.c_str(), i, i);", "is_target": true}, {"number": 145, "content": "    l.push_back(string(buffer));", "is_target": false}, {"number": 146, "content": "  }", "is_target": false}, {"number": 147, "content": "  return l;", "is_target": false}, {"number": 148, "content": "}", "is_target": false}, {"number": 149, "content": "", "is_target": false}]}, "612": {"lines": [{"number": 160, "content": "  unsigned char keyLen = matrixName.length() + 10;", "is_target": false}, {"number": 161, "content": "  // 4x4", "is_target": false}, {"number": 162, "content": "  for (I i = 0; i < smalldimM; ++i) {", "is_target": false}, {"number": 163, "content": "    for (I j = 0; j < smalldimN; ++j) {", "is_target": false}, {"number": 164, "content": "      keylist[written] = static_cast<char*>(malloc(keyLen));", "is_target": false}, {"number": 165, "content": "      snprintf(keylist[written], keyLen, \"%s[%d,%d]\", matrixName.c_str(), i, j);", "is_target": true}, {"number": 166, "content": "      ++written;", "is_target": false}, {"number": 167, "content": "    }", "is_target": false}, {"number": 168, "content": "  }", "is_target": false}, {"number": 169, "content": "  // diagonal below 4x4", "is_target": false}, {"number": 170, "content": "  for (I i = 4; i < smallerdim; ++i) {", "is_target": false}]}, "613": {"lines": [{"number": 160, "content": "  unsigned char keyLen = matrixName.length() + 10;", "is_target": false}, {"number": 161, "content": "  // 4x4", "is_target": false}, {"number": 162, "content": "  for (I i = 0; i < smalldimM; ++i) {", "is_target": false}, {"number": 163, "content": "    for (I j = 0; j < smalldimN; ++j) {", "is_target": false}, {"number": 164, "content": "      keylist[written] = static_cast<char*>(malloc(keyLen));", "is_target": false}, {"number": 165, "content": "      snprintf(keylist[written], keyLen, \"%s[%d,%d]\", matrixName.c_str(), i, j);", "is_target": true}, {"number": 166, "content": "      ++written;", "is_target": false}, {"number": 167, "content": "    }", "is_target": false}, {"number": 168, "content": "  }", "is_target": false}, {"number": 169, "content": "  // diagonal below 4x4", "is_target": false}, {"number": 170, "content": "  for (I i = 4; i < smallerdim; ++i) {", "is_target": false}]}, "614": {"lines": [{"number": 167, "content": "    }", "is_target": false}, {"number": 168, "content": "  }", "is_target": false}, {"number": 169, "content": "  // diagonal below 4x4", "is_target": false}, {"number": 170, "content": "  for (I i = 4; i < smallerdim; ++i) {", "is_target": false}, {"number": 171, "content": "    keylist[written] = static_cast<char*>(malloc(keyLen));", "is_target": false}, {"number": 172, "content": "    snprintf(keylist[written], keyLen, \"%s[%d,%d]\", matrixName.c_str(), i, i);", "is_target": true}, {"number": 173, "content": "    ++written;", "is_target": false}, {"number": 174, "content": "  }", "is_target": false}, {"number": 175, "content": "  return written;", "is_target": false}, {"number": 176, "content": "}", "is_target": false}, {"number": 177, "content": "", "is_target": false}]}, "616": {"lines": [{"number": 167, "content": "    }", "is_target": false}, {"number": 168, "content": "  }", "is_target": false}, {"number": 169, "content": "  // diagonal below 4x4", "is_target": false}, {"number": 170, "content": "  for (I i = 4; i < smallerdim; ++i) {", "is_target": false}, {"number": 171, "content": "    keylist[written] = static_cast<char*>(malloc(keyLen));", "is_target": false}, {"number": 172, "content": "    snprintf(keylist[written], keyLen, \"%s[%d,%d]\", matrixName.c_str(), i, i);", "is_target": true}, {"number": 173, "content": "    ++written;", "is_target": false}, {"number": 174, "content": "  }", "is_target": false}, {"number": 175, "content": "  return written;", "is_target": false}, {"number": 176, "content": "}", "is_target": false}, {"number": 177, "content": "", "is_target": false}]}, "617": {"lines": [{"number": 182, "content": "  I dimM = m.getM();", "is_target": false}, {"number": 183, "content": "  I dimN = m.getN();", "is_target": false}, {"number": 184, "content": "  //  assert(matrixName);", "is_target": false}, {"number": 185, "content": "  for (I i = 0; i < dimM; ++i) {", "is_target": false}, {"number": 186, "content": "    for (I j = 0; j < dimN; ++j) {", "is_target": false}, {"number": 187, "content": "      snprintf(buffer, sizeof(buffer), \"%s[%d,%d]\", matrixName.c_str(), i, j);", "is_target": true}, {"number": 188, "content": "      l.push_back(string(buffer));", "is_target": false}, {"number": 189, "content": "    }", "is_target": false}, {"number": 190, "content": "  }", "is_target": false}, {"number": 191, "content": "  return l;", "is_target": false}, {"number": 192, "content": "}", "is_target": false}]}, "618": {"lines": [{"number": 182, "content": "  I dimM = m.getM();", "is_target": false}, {"number": 183, "content": "  I dimN = m.getN();", "is_target": false}, {"number": 184, "content": "  //  assert(matrixName);", "is_target": false}, {"number": 185, "content": "  for (I i = 0; i < dimM; ++i) {", "is_target": false}, {"number": 186, "content": "    for (I j = 0; j < dimN; ++j) {", "is_target": false}, {"number": 187, "content": "      snprintf(buffer, sizeof(buffer), \"%s[%d,%d]\", matrixName.c_str(), i, j);", "is_target": true}, {"number": 188, "content": "      l.push_back(string(buffer));", "is_target": false}, {"number": 189, "content": "    }", "is_target": false}, {"number": 190, "content": "  }", "is_target": false}, {"number": 191, "content": "  return l;", "is_target": false}, {"number": 192, "content": "}", "is_target": false}]}, "619": {"lines": [{"number": 195, "content": "storeVectorFieldNames(const Matrix& m, const string& vectorName) {", "is_target": false}, {"number": 196, "content": "  list<Inspectable::iparamkey> l;", "is_target": false}, {"number": 197, "content": "  char buffer[32];", "is_target": false}, {"number": 198, "content": "  I dimM = m.getM() * m.getN();", "is_target": false}, {"number": 199, "content": "  for (I i = 0; i < dimM; ++i) {", "is_target": false}, {"number": 200, "content": "    snprintf(buffer, sizeof(buffer), \"%s[%d]\", vectorName.c_str(), i);", "is_target": true}, {"number": 201, "content": "    l.push_back(string(buffer));", "is_target": false}, {"number": 202, "content": "  }", "is_target": false}, {"number": 203, "content": "  return l;", "is_target": false}, {"number": 204, "content": "}", "is_target": false}, {"number": 205, "content": "", "is_target": false}]}, "620": {"lines": [{"number": 212, "content": "  assert(len >= dimM * dimN);", "is_target": false}, {"number": 213, "content": "  unsigned char keyLen = strlen(matrixName) + 10;", "is_target": false}, {"number": 214, "content": "  for (I i = 0; i < dimM; ++i) {", "is_target": false}, {"number": 215, "content": "    for (I j = 0; j < dimN; ++j) {", "is_target": false}, {"number": 216, "content": "      keylist[written] = static_cast<char*>(malloc(keyLen));", "is_target": false}, {"number": 217, "content": "      snprintf(keylist[written], keyLen, \"%s[%d,%d]\", matrixName, i, j);", "is_target": true}, {"number": 218, "content": "      ++written;", "is_target": false}, {"number": 219, "content": "    }", "is_target": false}, {"number": 220, "content": "  }", "is_target": false}, {"number": 221, "content": "  return written;", "is_target": false}, {"number": 222, "content": "}", "is_target": false}]}, "621": {"lines": [{"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "  /// sets a filter to this plotoption: To export only selected channels", "is_target": false}, {"number": 106, "content": "  virtual void setFilter(const std::list<std::string>& accept,", "is_target": false}, {"number": 107, "content": "                         const std::list<std::string>& ignore);", "is_target": false}, {"number": 108, "content": "  /// sets a filter to this plotoption: syntax: +accept_substr -ignore_substr ...", "is_target": false}, {"number": 109, "content": "  virtual void setFilter(const std::string& filter);", "is_target": true}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "  // flushes pipe (depending on mode)", "is_target": false}, {"number": 112, "content": "  virtual void flush(long step);", "is_target": false}, {"number": 113, "content": "", "is_target": false}, {"number": 114, "content": "  /// nice predicate function for finding by mode", "is_target": false}]}, "622": {"lines": [{"number": 212, "content": "  assert(len >= dimM * dimN);", "is_target": false}, {"number": 213, "content": "  unsigned char keyLen = strlen(matrixName) + 10;", "is_target": false}, {"number": 214, "content": "  for (I i = 0; i < dimM; ++i) {", "is_target": false}, {"number": 215, "content": "    for (I j = 0; j < dimN; ++j) {", "is_target": false}, {"number": 216, "content": "      keylist[written] = static_cast<char*>(malloc(keyLen));", "is_target": false}, {"number": 217, "content": "      snprintf(keylist[written], keyLen, \"%s[%d,%d]\", matrixName, i, j);", "is_target": true}, {"number": 218, "content": "      ++written;", "is_target": false}, {"number": 219, "content": "    }", "is_target": false}, {"number": 220, "content": "  }", "is_target": false}, {"number": 221, "content": "  return written;", "is_target": false}, {"number": 222, "content": "}", "is_target": false}]}, "623": {"lines": [{"number": 51, "content": "  virtual bool reInit();", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "  /**", "is_target": false}, {"number": 54, "content": "   * Closes all open pipes of the current used PlotOptions.", "is_target": false}, {"number": 55, "content": "   */", "is_target": false}, {"number": 56, "content": "  virtual void closePipes();", "is_target": true}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  /**", "is_target": false}, {"number": 59, "content": "     sets the name of all plotoptions (call before init, but after options are added)", "is_target": false}, {"number": 60, "content": "   */", "is_target": false}, {"number": 61, "content": "  virtual void setName(const std::string& name);", "is_target": false}]}, "624": {"lines": [{"number": 228, "content": "  assert(vectorName);", "is_target": false}, {"number": 229, "content": "  assert(len >= dimM);", "is_target": false}, {"number": 230, "content": "  unsigned char keyLen = strlen(vectorName) + 7;", "is_target": false}, {"number": 231, "content": "  for (I i = 0; i < dimM; ++i) {", "is_target": false}, {"number": 232, "content": "    keylist[written] = static_cast<char*>(malloc(keyLen));", "is_target": false}, {"number": 233, "content": "    snprintf(keylist[written], keyLen, \"%s[%d]\", vectorName, i);", "is_target": true}, {"number": 234, "content": "    ++written;", "is_target": false}, {"number": 235, "content": "  }", "is_target": false}, {"number": 236, "content": "  return written;", "is_target": false}, {"number": 237, "content": "}", "is_target": false}, {"number": 238, "content": "", "is_target": false}]}, "625": {"lines": [{"number": 31, "content": "#include \"abstractcontroller.h\"", "is_target": false}, {"number": 32, "content": "", "is_target": false}, {"number": 33, "content": "class PlotOptionEngine {", "is_target": false}, {"number": 34, "content": "public:", "is_target": false}, {"number": 35, "content": "  explicit PlotOptionEngine(const PlotOption& plotOption);", "is_target": false}, {"number": 36, "content": "  PlotOptionEngine(const std::list<PlotOption>& plotOptions);", "is_target": true}, {"number": 37, "content": "", "is_target": false}, {"number": 38, "content": "  virtual ~PlotOptionEngine();", "is_target": false}, {"number": 39, "content": "", "is_target": false}, {"number": 40, "content": "  /** initializes PlotOptionEngine and opens all pipes and stuff.", "is_target": false}, {"number": 41, "content": "      The optional controller is used to print structure information", "is_target": false}]}, "626": {"lines": [{"number": 91, "content": "      virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "  };", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "} // end namespace lpzrobots", "is_target": true}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "// End of header guard", "is_target": false}, {"number": 100, "content": "#endif", "is_target": false}]}, "627": {"lines": [{"number": 58, "content": "  }", "is_target": false}, {"number": 59, "content": "  else { // Move forward", "is_target": false}, {"number": 60, "content": "    motors[MIdx(\"left motor\")] = 1.;", "is_target": false}, {"number": 61, "content": "    motors[MIdx(\"right motor\")] = 1.;", "is_target": false}, {"number": 62, "content": "  }", "is_target": false}, {"number": 63, "content": "}", "is_target": true}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "void BasicController::step(const sensor* sensors, int sensornumber,", "is_target": false}, {"number": 66, "content": "                           motor* motors, int motornumber) {", "is_target": false}, {"number": 67, "content": "  stepNoLearning(sensors,sensornumber, motors, motornumber);", "is_target": false}, {"number": 68, "content": "}", "is_target": false}]}, "628": {"lines": [{"number": 25, "content": "using namespace std;", "is_target": false}, {"number": 26, "content": "using namespace matrix;", "is_target": false}, {"number": 27, "content": "", "is_target": false}, {"number": 28, "content": "bool stop=false;", "is_target": false}, {"number": 29, "content": "", "is_target": false}, {"number": 30, "content": "void reinforce(Agent* a){", "is_target": true}, {"number": 31, "content": "//   MyRobot* r = static_cast<MyRobot*>(a)->getRobot();", "is_target": false}, {"number": 32, "content": "//   InvertMotorNStep* c = dynamic_cast<InvertMotorNStep*>(a->getController());", "is_target": false}, {"number": 33, "content": "//   if(c)", "is_target": false}, {"number": 34, "content": "//     c->setReinforcement(r->getParam(__PLACEHOLDER_5__)*(r->whatDoIFeel != nullptr));", "is_target": false}, {"number": 35, "content": "}", "is_target": false}]}, "629": {"lines": [{"number": 405, "content": "", "is_target": false}, {"number": 406, "content": "", "is_target": false}, {"number": 407, "content": "  void CameraManipulator::manageAgents(const int& fkey) {", "is_target": false}, {"number": 408, "content": "    assert(fkey>0);", "is_target": false}, {"number": 409, "content": "    camHandle.watchingAgentDefined=false;", "is_target": false}, {"number": 410, "content": "    if(globalData.agents.size() >= static_cast<unsigned> fkey){", "is_target": true}, {"number": 411, "content": "      setWatchedAgent(globalData.agents[fkey-1]);", "is_target": false}, {"number": 412, "content": "    }", "is_target": false}, {"number": 413, "content": "  }", "is_target": false}, {"number": 414, "content": "", "is_target": false}, {"number": 415, "content": "  void CameraManipulator::moveBehindAgent() {", "is_target": false}]}, "630": {"lines": [{"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "int main(int argc, char** argv){", "is_target": false}, {"number": 47, "content": "  GlobalData globaldata;", "is_target": false}, {"number": 48, "content": "  initializeConsole();", "is_target": false}, {"number": 49, "content": "  list<PlotOption> plotoptions;", "is_target": false}, {"number": 50, "content": "  char* replayFile=0;", "is_target": true}, {"number": 51, "content": "  bool useMultiAgent=false;", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "  int index = contains(argv,argc,\"-g\");", "is_target": false}, {"number": 54, "content": "  if (index >0 && argc>index) {", "is_target": false}, {"number": 55, "content": "    plotoptions.push_back(PlotOption(GuiLogger,Controller,atoi(argv[index])));", "is_target": false}]}, "631": {"lines": [{"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "    while (fgets(buffer.data(), buffer.size(), f)) {", "is_target": false}, {"number": 116, "content": "      if (buffer[0] == '#' && buffer[1] == 'C') {", "is_target": false}, {"number": 117, "content": "        // scan line and return", "is_target": false}, {"number": 118, "content": "        i = 0;", "is_target": false}, {"number": 119, "content": "        char* p;", "is_target": true}, {"number": 120, "content": "        p = strtok(buffer.data(), \" \");", "is_target": false}, {"number": 121, "content": "        if (!p)", "is_target": false}, {"number": 122, "content": "          return false; // frist one is #C", "is_target": false}, {"number": 123, "content": "        while ((p = strtok(nullptr, \" \")) != nullptr) {", "is_target": false}, {"number": 124, "content": "          if (p[0] == 'x' && p[1] == '[') {", "is_target": false}]}, "632": {"lines": [{"number": 50, "content": "      @param mode Motor|Context|All: Motor: motor outputs send feedback;", "is_target": false}, {"number": 51, "content": "           Context: virtual motor outputs for each context sensor with feedback", "is_target": false}, {"number": 52, "content": "      @param feedbackratio default ratio used to feed back the output to the input,", "is_target": false}, {"number": 53, "content": "         meaning \\f[ x_t = 0.1*x_t + 0.9*y_{t-1} \\f]", "is_target": false}, {"number": 54, "content": "   */", "is_target": false}, {"number": 55, "content": "  FeedbackWiring(NoiseGenerator* noise, Mode mode = Context,double feedbackratio=0.9, const std::string& name = \"FeedBackWiring\");", "is_target": true}, {"number": 56, "content": "  virtual ~FeedbackWiring();", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "protected:", "is_target": false}, {"number": 59, "content": "  virtual bool initIntern();", "is_target": false}, {"number": 60, "content": "", "is_target": false}]}, "633": {"lines": [{"number": 51, "content": "           Context: virtual motor outputs for each context sensor with feedback", "is_target": false}, {"number": 52, "content": "      @param feedbackratio default ratio used to feed back the output to the input,", "is_target": false}, {"number": 53, "content": "         meaning \\f[ x_t = 0.1*x_t + 0.9*y_{t-1} \\f]", "is_target": false}, {"number": 54, "content": "   */", "is_target": false}, {"number": 55, "content": "  FeedbackWiring(NoiseGenerator* noise, Mode mode = Context,double feedbackratio=0.9, const std::string& name = \"FeedBackWiring\");", "is_target": false}, {"number": 56, "content": "  virtual ~FeedbackWiring();", "is_target": true}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "protected:", "is_target": false}, {"number": 59, "content": "  virtual bool initIntern();", "is_target": false}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": false}]}, "634": {"lines": [{"number": 54, "content": "   */", "is_target": false}, {"number": 55, "content": "  FeedbackWiring(NoiseGenerator* noise, Mode mode = Context,double feedbackratio=0.9, const std::string& name = \"FeedBackWiring\");", "is_target": false}, {"number": 56, "content": "  virtual ~FeedbackWiring();", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "protected:", "is_target": false}, {"number": 59, "content": "  virtual bool initIntern();", "is_target": true}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": false}, {"number": 62, "content": "                                 sensor* csensors, int csensornumber,", "is_target": false}, {"number": 63, "content": "                                 double noise);", "is_target": false}, {"number": 64, "content": "", "is_target": false}]}, "635": {"lines": [{"number": 56, "content": "  virtual ~FeedbackWiring();", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "protected:", "is_target": false}, {"number": 59, "content": "  virtual bool initIntern();", "is_target": false}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": true}, {"number": 62, "content": "                                 sensor* csensors, int csensornumber,", "is_target": false}, {"number": 63, "content": "                                 double noise);", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "  virtual bool wireMotorsIntern(motor* rmotors, int rmotornumber,", "is_target": false}, {"number": 66, "content": "                                const motor* cmotors, int cmotornumber);", "is_target": false}]}, "636": {"lines": [{"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": false}, {"number": 62, "content": "                                 sensor* csensors, int csensornumber,", "is_target": false}, {"number": 63, "content": "                                 double noise);", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "  virtual bool wireMotorsIntern(motor* rmotors, int rmotornumber,", "is_target": true}, {"number": 66, "content": "                                const motor* cmotors, int cmotornumber);", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "public:", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}]}, "637": {"lines": [{"number": 35, "content": "      @param noise NoiseGenerator that is used for adding noise to sensor values", "is_target": false}, {"number": 36, "content": "      @param plotMode see AbstractWiring", "is_target": false}, {"number": 37, "content": "      @param blind number of blind channels", "is_target": false}, {"number": 38, "content": "        (additional sensors and motors coupled directly)", "is_target": false}, {"number": 39, "content": "   */", "is_target": false}, {"number": 40, "content": "  One2OneWiring(NoiseGenerator* noise, int plotMode=Controller, int blind=0, const std::string& name = \"One2OneWiring\");", "is_target": true}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "  /** destructor", "is_target": false}, {"number": 43, "content": "   */", "is_target": false}, {"number": 44, "content": "  virtual ~One2OneWiring();", "is_target": false}, {"number": 45, "content": "", "is_target": false}]}, "638": {"lines": [{"number": 51, "content": "      motornumber  = dimension;", "is_target": false}, {"number": 52, "content": "      sensornumber = dimension+1;", "is_target": false}, {"number": 53, "content": "      addParameterDef(\"tau\",          &tau,        100.0);", "is_target": false}, {"number": 54, "content": "      break;", "is_target": false}, {"number": 55, "content": "    }", "is_target": false}, {"number": 56, "content": "    x = new double[sensornumber];", "is_target": true}, {"number": 57, "content": "    y = new double[motornumber];", "is_target": false}, {"number": 58, "content": "    x_buffer = new double*[buffersize];", "is_target": false}, {"number": 59, "content": "    for (unsigned int k = 0; k < buffersize; ++k) {", "is_target": false}, {"number": 60, "content": "      x_buffer[k] = new double[sensornumber];", "is_target": false}, {"number": 61, "content": "      memset(x_buffer[k],0,sizeof(double)*sensornumber);", "is_target": false}]}, "639": {"lines": [{"number": 53, "content": "  DerivativeWiring(const DerivativeWiringConf& conf,", "is_target": false}, {"number": 54, "content": "                   NoiseGenerator* noise, const std::string& name = \"DerivativeWiring\");", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "  /** destructor", "is_target": false}, {"number": 57, "content": "   */", "is_target": false}, {"number": 58, "content": "  virtual ~DerivativeWiring();", "is_target": true}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  /** Providing default configuration for DerivativeWiring with first derivative.", "is_target": false}, {"number": 61, "content": "      No smoothing and no scaling. ( as static method )", "is_target": false}, {"number": 62, "content": "   */", "is_target": false}, {"number": 63, "content": "  static DerivativeWiringConf getDefaultConf() {", "is_target": false}]}, "640": {"lines": [{"number": 51, "content": "      motornumber  = dimension;", "is_target": false}, {"number": 52, "content": "      sensornumber = dimension+1;", "is_target": false}, {"number": 53, "content": "      addParameterDef(\"tau\",          &tau,        100.0);", "is_target": false}, {"number": 54, "content": "      break;", "is_target": false}, {"number": 55, "content": "    }", "is_target": false}, {"number": 56, "content": "    x = new double[sensornumber];", "is_target": true}, {"number": 57, "content": "    y = new double[motornumber];", "is_target": false}, {"number": 58, "content": "    x_buffer = new double*[buffersize];", "is_target": false}, {"number": 59, "content": "    for (unsigned int k = 0; k < buffersize; ++k) {", "is_target": false}, {"number": 60, "content": "      x_buffer[k] = new double[sensornumber];", "is_target": false}, {"number": 61, "content": "      memset(x_buffer[k],0,sizeof(double)*sensornumber);", "is_target": false}]}, "641": {"lines": [{"number": 98, "content": "             bool trackSpeed,", "is_target": false}, {"number": 99, "content": "             bool trackOrientation,", "is_target": false}, {"number": 100, "content": "             bool displayTrace,", "is_target": false}, {"number": 101, "content": "             const char* scene = \"\",", "is_target": false}, {"number": 102, "content": "             int interval = 1) {", "is_target": false}, {"number": 103, "content": "    conf = getDefaultConf();", "is_target": true}, {"number": 104, "content": "    conf.trackPos = trackPos;", "is_target": false}, {"number": 105, "content": "    conf.trackSpeed = trackSpeed;", "is_target": false}, {"number": 106, "content": "    conf.trackOrientation = trackOrientation;", "is_target": false}, {"number": 107, "content": "    conf.displayTrace = displayTrace;", "is_target": false}, {"number": 108, "content": "    conf.interval = interval;", "is_target": false}]}, "642": {"lines": [{"number": 84, "content": "    c.derivativeScale=5;   // scaling with 5", "is_target": false}, {"number": 85, "content": "    c.blindMotors=0;       // no blind motors used", "is_target": false}, {"number": 86, "content": "    return c;", "is_target": false}, {"number": 87, "content": "  };", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "  virtual void reset();", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "protected:", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "  virtual bool initIntern();", "is_target": false}, {"number": 94, "content": "", "is_target": false}]}, "643": {"lines": [{"number": 39, "content": "   */", "is_target": false}, {"number": 40, "content": "  One2OneWiring(NoiseGenerator* noise, int plotMode=Controller, int blind=0, const std::string& name = \"One2OneWiring\");", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "  /** destructor", "is_target": false}, {"number": 43, "content": "   */", "is_target": false}, {"number": 44, "content": "  virtual ~One2OneWiring();", "is_target": true}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "protected:", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "  /** initializes the number of sensors and motors on robot side, calculate", "is_target": false}, {"number": 49, "content": "      number of sensors and motors on controller side", "is_target": false}]}, "644": {"lines": [{"number": 14, "content": "constant(double c, double) {", "is_target": false}, {"number": 15, "content": "  return c;", "is_target": false}, {"number": 16, "content": "}", "is_target": false}, {"number": 17, "content": "", "is_target": false}, {"number": 18, "content": "double", "is_target": false}, {"number": 19, "content": "power(void* c, double x) {", "is_target": true}, {"number": 20, "content": "  return pow(x, *(static_cast<double*>(c)));", "is_target": false}, {"number": 21, "content": "}", "is_target": false}, {"number": 22, "content": "", "is_target": false}, {"number": 23, "content": "double", "is_target": false}, {"number": 24, "content": "power3(double x) {", "is_target": false}]}, "645": {"lines": [{"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "  virtual void reset();", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "protected:", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "  virtual bool initIntern();", "is_target": true}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": false}, {"number": 96, "content": "                                 sensor* csensors, int csensornumber,", "is_target": false}, {"number": 97, "content": "                                 double noise);", "is_target": false}, {"number": 98, "content": "", "is_target": false}]}, "646": {"lines": [{"number": 46, "content": "protected:", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "  /** initializes the number of sensors and motors on robot side, calculate", "is_target": false}, {"number": 49, "content": "      number of sensors and motors on controller side", "is_target": false}, {"number": 50, "content": "   */", "is_target": false}, {"number": 51, "content": "  virtual bool initIntern();", "is_target": true}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "  /** Realizes one to one wiring from robot sensors to controller sensors.", "is_target": false}, {"number": 54, "content": "      @param rsensors pointer to array of sensorvalues from robot", "is_target": false}, {"number": 55, "content": "      @param rsensornumber number of sensors from robot", "is_target": false}, {"number": 56, "content": "      @param csensors pointer to array of sensorvalues for controller", "is_target": false}]}, "647": {"lines": [{"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "protected:", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "  virtual bool initIntern();", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": true}, {"number": 96, "content": "                                 sensor* csensors, int csensornumber,", "is_target": false}, {"number": 97, "content": "                                 double noise);", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "  virtual bool wireMotorsIntern(motor* rmotors, int rmotornumber,", "is_target": false}, {"number": 100, "content": "                                const motor* cmotors, int cmotornumber);", "is_target": false}]}, "648": {"lines": [{"number": 55, "content": "      @param rsensornumber number of sensors from robot", "is_target": false}, {"number": 56, "content": "      @param csensors pointer to array of sensorvalues for controller", "is_target": false}, {"number": 57, "content": "      @param csensornumber number of sensors to controller", "is_target": false}, {"number": 58, "content": "      @param noise size of the noise added to the sensors", "is_target": false}, {"number": 59, "content": "  */", "is_target": false}, {"number": 60, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": true}, {"number": 61, "content": "                           sensor* csensors, int csensornumber,", "is_target": false}, {"number": 62, "content": "                           double noise);", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "  /** Realizes one to one wiring from controller motor outputs to robot motors.", "is_target": false}, {"number": 65, "content": "      @param rmotors pointer to array of motorvalues for robot", "is_target": false}]}, "649": {"lines": [{"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": false}, {"number": 96, "content": "                                 sensor* csensors, int csensornumber,", "is_target": false}, {"number": 97, "content": "                                 double noise);", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "  virtual bool wireMotorsIntern(motor* rmotors, int rmotornumber,", "is_target": true}, {"number": 100, "content": "                                const motor* cmotors, int cmotornumber);", "is_target": false}, {"number": 101, "content": "", "is_target": false}, {"number": 102, "content": "protected:", "is_target": false}, {"number": 103, "content": "  /** Calculate the first derivative of the sensorvalues given by the robot", "is_target": false}, {"number": 104, "content": "   *  f'(x) = (f(x+1) - f(x-1)) / 2", "is_target": false}]}, "650": {"lines": [{"number": 65, "content": "      @param rmotors pointer to array of motorvalues for robot", "is_target": false}, {"number": 66, "content": "      @param rmotornumber number of robot motors", "is_target": false}, {"number": 67, "content": "      @param cmotors pointer to array of motorvalues from controller", "is_target": false}, {"number": 68, "content": "      @param cmotornumber number of motorvalues from controller", "is_target": false}, {"number": 69, "content": "  */", "is_target": false}, {"number": 70, "content": "  virtual bool wireMotorsIntern(motor* rmotors, int rmotornumber,", "is_target": true}, {"number": 71, "content": "                          const motor* cmotors, int cmotornumber);", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "protected:", "is_target": false}, {"number": 75, "content": "  int blind = 0; /// number of blind channels", "is_target": false}]}, "651": {"lines": [{"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "public:", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  /** adds a wiring to the list of wirings*/", "is_target": false}, {"number": 60, "content": "  virtual void addWiring(AbstractWiring* wiring);", "is_target": true}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "protected:", "is_target": false}, {"number": 64, "content": "  std::vector<AbstractWiring*> wirings;", "is_target": false}, {"number": 65, "content": "", "is_target": false}]}, "652": {"lines": [{"number": 40, "content": "};", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "struct select_all : public  select_predicate { };", "is_target": false}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "struct select_firsthalf : public  select_predicate {", "is_target": false}, {"number": 45, "content": "  virtual bool operator()( int index,  int len) { return index < len/2; }", "is_target": true}, {"number": 46, "content": "};", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "/// select sensors in the range [from, to] inclusively", "is_target": false}, {"number": 49, "content": "struct select_from_to : public  select_predicate {", "is_target": false}, {"number": 50, "content": "  select_from_to( int from,  int to) : from(from), to(to) {}", "is_target": false}]}, "653": {"lines": [{"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "public:", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  /** adds a wiring to the list of wirings*/", "is_target": false}, {"number": 60, "content": "  virtual void addWiring(AbstractWiring* wiring);", "is_target": true}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "protected:", "is_target": false}, {"number": 64, "content": "  std::vector<AbstractWiring*> wirings;", "is_target": false}, {"number": 65, "content": "", "is_target": false}]}, "654": {"lines": [{"number": 46, "content": "};", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "/// select sensors in the range [from, to] inclusively", "is_target": false}, {"number": 49, "content": "struct select_from_to : public  select_predicate {", "is_target": false}, {"number": 50, "content": "  select_from_to( int from,  int to) : from(from), to(to) {}", "is_target": false}, {"number": 51, "content": "  virtual bool operator()( int index,  int len) { return (index >= from) && (index <= to); }", "is_target": true}, {"number": 52, "content": "  int from;", "is_target": false}, {"number": 53, "content": "  int to;", "is_target": false}, {"number": 54, "content": "};", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "/**", "is_target": false}]}, "655": {"lines": [{"number": 63, "content": "      @param noise NoiseGenerator that is used for adding noise to sensor values", "is_target": false}, {"number": 64, "content": "      @param sel_sensor binary predicate taking the index and the length (number of sensors)", "is_target": false}, {"number": 65, "content": "             and decides which sensor to select", "is_target": false}, {"number": 66, "content": "  */", "is_target": false}, {"number": 67, "content": "  SelectiveOne2OneWiring(NoiseGenerator* noise, select_predicate* sel_sensor, int plotMode = Controller, const std::string& name = \"SelectiveOne2OneWiring\");", "is_target": false}, {"number": 68, "content": "  virtual ~SelectiveOne2OneWiring();", "is_target": true}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "protected:", "is_target": false}, {"number": 71, "content": "  virtual bool initIntern();", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": false}]}, "656": {"lines": [{"number": 66, "content": "  */", "is_target": false}, {"number": 67, "content": "  SelectiveOne2OneWiring(NoiseGenerator* noise, select_predicate* sel_sensor, int plotMode = Controller, const std::string& name = \"SelectiveOne2OneWiring\");", "is_target": false}, {"number": 68, "content": "  virtual ~SelectiveOne2OneWiring();", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "protected:", "is_target": false}, {"number": 71, "content": "  virtual bool initIntern();", "is_target": true}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": false}, {"number": 74, "content": "                                 sensor* csensors, int csensornumber,", "is_target": false}, {"number": 75, "content": "                                 double noise);", "is_target": false}, {"number": 76, "content": "", "is_target": false}]}, "657": {"lines": [{"number": 33, "content": "public:", "is_target": false}, {"number": 34, "content": "", "is_target": false}, {"number": 35, "content": "  /** constructor: The wirings given in the list", "is_target": false}, {"number": 36, "content": "      are applied in the sequence. For the sensors in normal order and", "is_target": false}, {"number": 37, "content": "      for the motors in reverse order*/", "is_target": false}, {"number": 38, "content": "  WiringSequence(std::list<AbstractWiring*> wirings, NoiseGenerator* noise = nullptr, ", "is_target": true}, {"number": 39, "content": "                 int plotMode = Controller, const std::string& name = \"WiringSequence\");", "is_target": false}, {"number": 40, "content": "  /** constructor provided for convinience, essentially calls addWiring(w1);addWiring(w2)", "is_target": false}, {"number": 41, "content": "   */", "is_target": false}, {"number": 42, "content": "  WiringSequence(AbstractWiring* w1, AbstractWiring* w2);", "is_target": false}, {"number": 43, "content": "", "is_target": false}]}, "658": {"lines": [{"number": 68, "content": "  virtual ~SelectiveOne2OneWiring();", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "protected:", "is_target": false}, {"number": 71, "content": "  virtual bool initIntern();", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": true}, {"number": 74, "content": "                                 sensor* csensors, int csensornumber,", "is_target": false}, {"number": 75, "content": "                                 double noise);", "is_target": false}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "protected:", "is_target": false}, {"number": 78, "content": "  select_predicate* sel_sensor = nullptr;", "is_target": false}]}, "659": {"lines": [{"number": 39, "content": "                 int plotMode = Controller, const std::string& name = \"WiringSequence\");", "is_target": false}, {"number": 40, "content": "  /** constructor provided for convinience, essentially calls addWiring(w1);addWiring(w2)", "is_target": false}, {"number": 41, "content": "   */", "is_target": false}, {"number": 42, "content": "  WiringSequence(AbstractWiring* w1, AbstractWiring* w2);", "is_target": false}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "  virtual ~WiringSequence();", "is_target": true}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "protected:", "is_target": false}, {"number": 47, "content": "  virtual bool initIntern();", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": false}]}, "660": {"lines": [{"number": 42, "content": "  WiringSequence(AbstractWiring* w1, AbstractWiring* w2);", "is_target": false}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "  virtual ~WiringSequence();", "is_target": false}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "protected:", "is_target": false}, {"number": 47, "content": "  virtual bool initIntern();", "is_target": true}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": false}, {"number": 50, "content": "                                 sensor* csensors, int csensornumber,", "is_target": false}, {"number": 51, "content": "                                 double noise);", "is_target": false}, {"number": 52, "content": "", "is_target": false}]}, "661": {"lines": [{"number": 44, "content": "  virtual ~WiringSequence();", "is_target": false}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "protected:", "is_target": false}, {"number": 47, "content": "  virtual bool initIntern();", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": true}, {"number": 50, "content": "                                 sensor* csensors, int csensornumber,", "is_target": false}, {"number": 51, "content": "                                 double noise);", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "  virtual bool wireMotorsIntern(motor* rmotors, int rmotornumber,", "is_target": false}, {"number": 54, "content": "                                const motor* cmotors, int cmotornumber);", "is_target": false}]}, "662": {"lines": [{"number": 37, "content": "", "is_target": false}, {"number": 38, "content": "  /**", "is_target": false}, {"number": 39, "content": "     @param controlmask bitmask to select channels to control (default all)", "is_target": false}, {"number": 40, "content": "     @param function controller function to use", "is_target": false}, {"number": 41, "content": "   */", "is_target": false}, {"number": 42, "content": "  MotorBabbler(function func = function::Sine);", "is_target": true}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 45, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 46, "content": "    return number_sensors;", "is_target": false}, {"number": 47, "content": "  }", "is_target": false}]}, "663": {"lines": [{"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": false}, {"number": 50, "content": "                                 sensor* csensors, int csensornumber,", "is_target": false}, {"number": 51, "content": "                                 double noise);", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "  virtual bool wireMotorsIntern(motor* rmotors, int rmotornumber,", "is_target": true}, {"number": 54, "content": "                                const motor* cmotors, int cmotornumber);", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "public:", "is_target": false}, {"number": 58, "content": "", "is_target": false}]}, "664": {"lines": [{"number": 57, "content": "public:", "is_target": false}, {"number": 58, "content": "  /// constructor", "is_target": false}, {"number": 59, "content": "  explicit Sox(const SoxConf& conf = getDefaultConf());", "is_target": false}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "  /// constructor provided for convenience, use conf object to customize more", "is_target": false}, {"number": 62, "content": "  Sox(double init_feedback_strength,", "is_target": true}, {"number": 63, "content": "               bool useExtendedModel = true,", "is_target": false}, {"number": 64, "content": "               bool useTeaching = false);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 67, "content": "", "is_target": false}]}, "665": {"lines": [{"number": 74, "content": "bool", "is_target": false}, {"number": 75, "content": "PlotOptionEngine::initPlotOption(PlotOption& po) {", "is_target": false}, {"number": 76, "content": "  po.open();", "is_target": false}, {"number": 77, "content": "  if (po.pipe) {", "is_target": false}, {"number": 78, "content": "    // print start", "is_target": false}, {"number": 79, "content": "    time_t t = time(0);", "is_target": true}, {"number": 80, "content": "    fprintf(po.pipe, \"# Start %s\", ctime(&t));", "is_target": false}, {"number": 81, "content": "    if (po.getName().size() > 0) // print name of PlotOption", "is_target": false}, {"number": 82, "content": "      fprintf(po.pipe, \"#IN %s\\n\", po.getName().c_str());", "is_target": false}, {"number": 83, "content": "    // print network description given by the structural information of the controller", "is_target": false}, {"number": 84, "content": "    if (maybe_controller) {", "is_target": false}]}, "666": {"lines": [{"number": 40, "content": "      @param plotMode see AbstractWiring", "is_target": false}, {"number": 41, "content": "      @param boost factor for mismatch integration", "is_target": false}, {"number": 42, "content": "      @param exportBoostError whether to export force boost error to inspectables", "is_target": false}, {"number": 43, "content": "        (guilogger)", "is_target": false}, {"number": 44, "content": "   */", "is_target": false}, {"number": 45, "content": "  ForceBoostWiring(NoiseGenerator* noise, double boost=0, bool exportBoostError=false,", "is_target": true}, {"number": 46, "content": "                   int plotMode=Controller, const std::string& name = \"ForceBoostWiring\");", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "  /** destructor", "is_target": false}, {"number": 49, "content": "   */", "is_target": false}, {"number": 50, "content": "  virtual ~ForceBoostWiring();", "is_target": false}]}, "667": {"lines": [{"number": 61, "content": "      initialised(false) {", "is_target": false}, {"number": 62, "content": "  }", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "  /** destructor", "is_target": false}, {"number": 65, "content": "   */", "is_target": false}, {"number": 66, "content": "  virtual ~AbstractWiring() {", "is_target": true}, {"number": 67, "content": "    if(noiseGenerator) delete noiseGenerator;", "is_target": false}, {"number": 68, "content": "  }", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  /** Initializes the  number of sensors and motors from robot", "is_target": false}, {"number": 71, "content": "   *  (to be precise the internal parameters rsensornumber and rmotornumber!),", "is_target": false}]}, "668": {"lines": [{"number": 45, "content": "  ForceBoostWiring(NoiseGenerator* noise, double boost=0, bool exportBoostError=false,", "is_target": false}, {"number": 46, "content": "                   int plotMode=Controller, const std::string& name = \"ForceBoostWiring\");", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "  /** destructor", "is_target": false}, {"number": 49, "content": "   */", "is_target": false}, {"number": 50, "content": "  virtual ~ForceBoostWiring();", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  virtual void reset();", "is_target": false}, {"number": 53, "content": "protected:", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "  /** initializes the number of sensors and motors on robot side, calculate", "is_target": false}]}, "669": {"lines": [{"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "  /** destructor", "is_target": false}, {"number": 49, "content": "   */", "is_target": false}, {"number": 50, "content": "  virtual ~ForceBoostWiring();", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  virtual void reset();", "is_target": true}, {"number": 53, "content": "protected:", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "  /** initializes the number of sensors and motors on robot side, calculate", "is_target": false}, {"number": 56, "content": "      number of sensors and motors on controller side", "is_target": false}, {"number": 57, "content": "   */", "is_target": false}]}, "670": {"lines": [{"number": 39, "content": "     @param controlmask bitmask to select channels to control (default all)", "is_target": false}, {"number": 40, "content": "     @param function controller function to use", "is_target": false}, {"number": 41, "content": "   */", "is_target": false}, {"number": 42, "content": "  MotorBabbler(function func = function::Sine);", "is_target": false}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 45, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 46, "content": "    return number_sensors;", "is_target": false}, {"number": 47, "content": "  }", "is_target": false}, {"number": 48, "content": "  virtual int getMotorNumber() const override {", "is_target": false}, {"number": 49, "content": "    return number_motors;", "is_target": false}]}, "671": {"lines": [{"number": 53, "content": "protected:", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "  /** initializes the number of sensors and motors on robot side, calculate", "is_target": false}, {"number": 56, "content": "      number of sensors and motors on controller side", "is_target": false}, {"number": 57, "content": "   */", "is_target": false}, {"number": 58, "content": "  virtual bool initIntern();", "is_target": true}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  /** Realizes one to one wiring from robot sensors to controller sensors.", "is_target": false}, {"number": 61, "content": "      @param rsensors pointer to array of sensorvalues from robot", "is_target": false}, {"number": 62, "content": "      @param rsensornumber number of sensors from robot", "is_target": false}, {"number": 63, "content": "      @param csensors pointer to array of sensorvalues for controller", "is_target": false}]}, "672": {"lines": [{"number": 52, "content": "                    int sensornumber,", "is_target": false}, {"number": 53, "content": "                    motor* motors,", "is_target": false}, {"number": 54, "content": "                    int motornumber) override {", "is_target": false}, {"number": 55, "content": "    stepNoLearning(sensors, sensornumber, motors, motornumber);", "is_target": false}, {"number": 56, "content": "  }", "is_target": false}, {"number": 57, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 58, "content": "                              int number_sensors,", "is_target": false}, {"number": 59, "content": "                              motor*,", "is_target": false}, {"number": 60, "content": "                              int number_motors);", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  // samples a new set of frequencies", "is_target": false}]}, "673": {"lines": [{"number": 62, "content": "      @param rsensornumber number of sensors from robot", "is_target": false}, {"number": 63, "content": "      @param csensors pointer to array of sensorvalues for controller", "is_target": false}, {"number": 64, "content": "      @param csensornumber number of sensors to controller", "is_target": false}, {"number": 65, "content": "      @param noise size of the noise added to the sensors", "is_target": false}, {"number": 66, "content": "  */", "is_target": false}, {"number": 67, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": true}, {"number": 68, "content": "                           sensor* csensors, int csensornumber,", "is_target": false}, {"number": 69, "content": "                           double noise);", "is_target": false}, {"number": 70, "content": "", "is_target": false}, {"number": 71, "content": "  /** Realizes one to one wiring from controller motor outputs to robot motors.", "is_target": false}, {"number": 72, "content": "      @param rmotors pointer to array of motorvalues for robot", "is_target": false}]}, "674": {"lines": [{"number": 61, "content": "  /// constructor provided for convenience, use conf object to customize more", "is_target": false}, {"number": 62, "content": "  Sox(double init_feedback_strength,", "is_target": false}, {"number": 63, "content": "               bool useExtendedModel = true,", "is_target": false}, {"number": 64, "content": "               bool useTeaching = false);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  virtual ~Sox();", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  static SoxConf getDefaultConf() {", "is_target": false}, {"number": 71, "content": "    SoxConf conf;", "is_target": false}]}, "675": {"lines": [{"number": 72, "content": "      @param rmotors pointer to array of motorvalues for robot", "is_target": false}, {"number": 73, "content": "      @param rmotornumber number of robot motors", "is_target": false}, {"number": 74, "content": "      @param cmotors pointer to array of motorvalues from controller", "is_target": false}, {"number": 75, "content": "      @param cmotornumber number of motorvalues from controller", "is_target": false}, {"number": 76, "content": "  */", "is_target": false}, {"number": 77, "content": "  virtual bool wireMotorsIntern(motor* rmotors, int rmotornumber,", "is_target": true}, {"number": 78, "content": "                          const motor* cmotors, int cmotornumber);", "is_target": false}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "protected:", "is_target": false}, {"number": 82, "content": "  double boost = 0;", "is_target": false}]}, "676": {"lines": [{"number": 63, "content": "               bool useExtendedModel = true,", "is_target": false}, {"number": 64, "content": "               bool useTeaching = false);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  virtual ~Sox();", "is_target": true}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  static SoxConf getDefaultConf() {", "is_target": false}, {"number": 71, "content": "    SoxConf conf;", "is_target": false}, {"number": 72, "content": "    conf.initFeedbackStrength = 1.0;", "is_target": false}, {"number": 73, "content": "    conf.useExtendedModel = true;", "is_target": false}]}, "677": {"lines": [{"number": 92, "content": "    return number_motors;", "is_target": false}, {"number": 93, "content": "  }", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 96, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 97, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 100, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 101, "content": "                              int number_sensors,", "is_target": false}, {"number": 102, "content": "                              motor*,", "is_target": false}]}, "678": {"lines": [{"number": 95, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 96, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 97, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 100, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 101, "content": "                              int number_sensors,", "is_target": false}, {"number": 102, "content": "                              motor*,", "is_target": false}, {"number": 103, "content": "                              int number_motors);", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "  /// called during babbling phase", "is_target": false}]}, "679": {"lines": [{"number": 101, "content": "                              int number_sensors,", "is_target": false}, {"number": 102, "content": "                              motor*,", "is_target": false}, {"number": 103, "content": "                              int number_motors);", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "  /// called during babbling phase", "is_target": false}, {"number": 106, "content": "  virtual void motorBabblingStep(const sensor*,", "is_target": true}, {"number": 107, "content": "                                 int number_sensors,", "is_target": false}, {"number": 108, "content": "                                 const motor*,", "is_target": false}, {"number": 109, "content": "                                 int number_motors);", "is_target": false}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "  /***** STOREABLE ****/", "is_target": false}]}, "680": {"lines": [{"number": 121, "content": "  virtual void setC(const matrix::Matrix& C);", "is_target": false}, {"number": 122, "content": "  virtual matrix::Matrix geth() const;", "is_target": false}, {"number": 123, "content": "  virtual void seth(const matrix::Matrix& h);", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "  /***** TEACHABLE ****/", "is_target": false}, {"number": 126, "content": "  virtual void setMotorTeaching(const matrix::Matrix& teaching);", "is_target": true}, {"number": 127, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 128, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 129, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 130, "content": "", "is_target": false}, {"number": 131, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}]}, "681": {"lines": [{"number": 122, "content": "  virtual matrix::Matrix geth() const;", "is_target": false}, {"number": 123, "content": "  virtual void seth(const matrix::Matrix& h);", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "  /***** TEACHABLE ****/", "is_target": false}, {"number": 126, "content": "  virtual void setMotorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 127, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": true}, {"number": 128, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 129, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 130, "content": "", "is_target": false}, {"number": 131, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}, {"number": 132, "content": "  virtual std::list<matrix::Matrix> getParameters() const;", "is_target": false}]}, "682": {"lines": [{"number": 123, "content": "  virtual void seth(const matrix::Matrix& h);", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "  /***** TEACHABLE ****/", "is_target": false}, {"number": 126, "content": "  virtual void setMotorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 127, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 128, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": true}, {"number": 129, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": false}, {"number": 130, "content": "", "is_target": false}, {"number": 131, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}, {"number": 132, "content": "  virtual std::list<matrix::Matrix> getParameters() const;", "is_target": false}, {"number": 133, "content": "  virtual int setParameters(const std::list<matrix::Matrix>& params);", "is_target": false}]}, "683": {"lines": [{"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "  /***** TEACHABLE ****/", "is_target": false}, {"number": 126, "content": "  virtual void setMotorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 127, "content": "  virtual void setSensorTeaching(const matrix::Matrix& teaching);", "is_target": false}, {"number": 128, "content": "  virtual matrix::Matrix getLastMotorValues();", "is_target": false}, {"number": 129, "content": "  virtual matrix::Matrix getLastSensorValues();", "is_target": true}, {"number": 130, "content": "", "is_target": false}, {"number": 131, "content": "  /***** PARAMETRIZABLE ****/", "is_target": false}, {"number": 132, "content": "  virtual std::list<matrix::Matrix> getParameters() const;", "is_target": false}, {"number": 133, "content": "  virtual int setParameters(const std::list<matrix::Matrix>& params);", "is_target": false}, {"number": 134, "content": "", "is_target": false}]}, "684": {"lines": [{"number": 45, "content": "  CopyWiring(const Assignment& sensor_assignment, const Assignment& motor_assignment,", "is_target": false}, {"number": 46, "content": "             NoiseGenerator* noise, int plotMode=Controller|Robot, const std::string& name = \"CopyWiring\");", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "  /** destructor", "is_target": false}, {"number": 49, "content": "   */", "is_target": false}, {"number": 50, "content": "  virtual ~CopyWiring();", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  virtual void reset();", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "  static Assignment motorFromSensorAssignment(const Assignment& sensor_assignment);", "is_target": false}, {"number": 55, "content": "", "is_target": false}]}, "685": {"lines": [{"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "  /** destructor", "is_target": false}, {"number": 49, "content": "   */", "is_target": false}, {"number": 50, "content": "  virtual ~CopyWiring();", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  virtual void reset();", "is_target": true}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "  static Assignment motorFromSensorAssignment(const Assignment& sensor_assignment);", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "protected:", "is_target": false}, {"number": 57, "content": "", "is_target": false}]}, "686": {"lines": [{"number": 56, "content": "protected:", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  /** initializes the number of sensors and motors on robot side, calculate", "is_target": false}, {"number": 59, "content": "      number of sensors and motors on controller side", "is_target": false}, {"number": 60, "content": "   */", "is_target": false}, {"number": 61, "content": "  virtual bool initIntern();", "is_target": true}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "  /** Realizes one to one wiring from robot sensors to controller sensors.", "is_target": false}, {"number": 64, "content": "      @param rsensors pointer to array of sensorvalues from robot", "is_target": false}, {"number": 65, "content": "      @param rsensornumber number of sensors from robot", "is_target": false}, {"number": 66, "content": "      @param csensors pointer to array of sensorvalues for controller", "is_target": false}]}, "687": {"lines": [{"number": 65, "content": "      @param rsensornumber number of sensors from robot", "is_target": false}, {"number": 66, "content": "      @param csensors pointer to array of sensorvalues for controller", "is_target": false}, {"number": 67, "content": "      @param csensornumber number of sensors to controller", "is_target": false}, {"number": 68, "content": "      @param noise size of the noise added to the sensors", "is_target": false}, {"number": 69, "content": "  */", "is_target": false}, {"number": 70, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": true}, {"number": 71, "content": "                           sensor* csensors, int csensornumber,", "is_target": false}, {"number": 72, "content": "                           double noise);", "is_target": false}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "  /** Realizes one to one wiring from controller motor outputs to robot motors.", "is_target": false}, {"number": 75, "content": "      @param rmotors pointer to array of motorvalues for robot", "is_target": false}]}, "688": {"lines": [{"number": 75, "content": "      @param rmotors pointer to array of motorvalues for robot", "is_target": false}, {"number": 76, "content": "      @param rmotornumber number of robot motors", "is_target": false}, {"number": 77, "content": "      @param cmotors pointer to array of motorvalues from controller", "is_target": false}, {"number": 78, "content": "      @param cmotornumber number of motorvalues from controller", "is_target": false}, {"number": 79, "content": "  */", "is_target": false}, {"number": 80, "content": "  virtual bool wireMotorsIntern(motor* rmotors, int rmotornumber,", "is_target": true}, {"number": 81, "content": "                          const motor* cmotors, int cmotornumber);", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "protected:", "is_target": false}, {"number": 85, "content": "  Assignment s_assign;", "is_target": false}]}, "689": {"lines": [{"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "  /** destructor", "is_target": false}, {"number": 49, "content": "   */", "is_target": false}, {"number": 50, "content": "  virtual ~CopyWiring();", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  virtual void reset();", "is_target": true}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "  static Assignment motorFromSensorAssignment(const Assignment& sensor_assignment);", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "protected:", "is_target": false}, {"number": 57, "content": "", "is_target": false}]}, "690": {"lines": [{"number": 183, "content": "}", "is_target": false}, {"number": 184, "content": "", "is_target": false}, {"number": 185, "content": "/// f'(x) = (f(x+1) - f(x-1)) / 2", "is_target": false}, {"number": 186, "content": "//  since we do not have f(x+1) we go one timestep in the past", "is_target": false}, {"number": 187, "content": "void DerivativeWiring::calcFirstDerivative(){", "is_target": false}, {"number": 188, "content": "  sensor* t   = sensorbuffer[time%buffersize];", "is_target": true}, {"number": 189, "content": "  sensor* tmdelay = sensorbuffer[(time-1)%buffersize];", "is_target": false}, {"number": 190, "content": "  for (int i=0; i < rsensornumber; ++i) {", "is_target": false}, {"number": 191, "content": "    first[i] = conf.derivativeScale*(t[i] - tmdelay[i]);", "is_target": false}, {"number": 192, "content": "  }", "is_target": false}, {"number": 193, "content": "}", "is_target": false}]}, "691": {"lines": [{"number": 184, "content": "", "is_target": false}, {"number": 185, "content": "/// f'(x) = (f(x+1) - f(x-1)) / 2", "is_target": false}, {"number": 186, "content": "//  since we do not have f(x+1) we go one timestep in the past", "is_target": false}, {"number": 187, "content": "void DerivativeWiring::calcFirstDerivative(){", "is_target": false}, {"number": 188, "content": "  sensor* t   = sensorbuffer[time%buffersize];", "is_target": false}, {"number": 189, "content": "  sensor* tmdelay = sensorbuffer[(time-1)%buffersize];", "is_target": true}, {"number": 190, "content": "  for (int i=0; i < rsensornumber; ++i) {", "is_target": false}, {"number": 191, "content": "    first[i] = conf.derivativeScale*(t[i] - tmdelay[i]);", "is_target": false}, {"number": 192, "content": "  }", "is_target": false}, {"number": 193, "content": "}", "is_target": false}, {"number": 194, "content": "", "is_target": false}]}, "692": {"lines": [{"number": 192, "content": "  }", "is_target": false}, {"number": 193, "content": "}", "is_target": false}, {"number": 194, "content": "", "is_target": false}, {"number": 195, "content": "/// f'(x) = f(x) - 2f(x-1) + f(x-2)", "is_target": false}, {"number": 196, "content": "void DerivativeWiring::calcSecondDerivative(){", "is_target": false}, {"number": 197, "content": "  sensor* t   = sensorbuffer[time%buffersize];", "is_target": true}, {"number": 198, "content": "  sensor* tmdelay = sensorbuffer[(time-1)%buffersize];", "is_target": false}, {"number": 199, "content": "  sensor* tm2delay = sensorbuffer[(time-2)%buffersize];", "is_target": false}, {"number": 200, "content": "  for (int i=0; i < rsensornumber; ++i) {", "is_target": false}, {"number": 201, "content": "    second[i] = (t[i] - 2*tmdelay[i] + tm2delay[i])*conf.derivativeScale*conf.derivativeScale;", "is_target": false}, {"number": 202, "content": "  }", "is_target": false}]}, "693": {"lines": [{"number": 193, "content": "}", "is_target": false}, {"number": 194, "content": "", "is_target": false}, {"number": 195, "content": "/// f'(x) = f(x) - 2f(x-1) + f(x-2)", "is_target": false}, {"number": 196, "content": "void DerivativeWiring::calcSecondDerivative(){", "is_target": false}, {"number": 197, "content": "  sensor* t   = sensorbuffer[time%buffersize];", "is_target": false}, {"number": 198, "content": "  sensor* tmdelay = sensorbuffer[(time-1)%buffersize];", "is_target": true}, {"number": 199, "content": "  sensor* tm2delay = sensorbuffer[(time-2)%buffersize];", "is_target": false}, {"number": 200, "content": "  for (int i=0; i < rsensornumber; ++i) {", "is_target": false}, {"number": 201, "content": "    second[i] = (t[i] - 2*tmdelay[i] + tm2delay[i])*conf.derivativeScale*conf.derivativeScale;", "is_target": false}, {"number": 202, "content": "  }", "is_target": false}, {"number": 203, "content": "}", "is_target": false}]}, "694": {"lines": [{"number": 194, "content": "", "is_target": false}, {"number": 195, "content": "/// f'(x) = f(x) - 2f(x-1) + f(x-2)", "is_target": false}, {"number": 196, "content": "void DerivativeWiring::calcSecondDerivative(){", "is_target": false}, {"number": 197, "content": "  sensor* t   = sensorbuffer[time%buffersize];", "is_target": false}, {"number": 198, "content": "  sensor* tmdelay = sensorbuffer[(time-1)%buffersize];", "is_target": false}, {"number": 199, "content": "  sensor* tm2delay = sensorbuffer[(time-2)%buffersize];", "is_target": true}, {"number": 200, "content": "  for (int i=0; i < rsensornumber; ++i) {", "is_target": false}, {"number": 201, "content": "    second[i] = (t[i] - 2*tmdelay[i] + tm2delay[i])*conf.derivativeScale*conf.derivativeScale;", "is_target": false}, {"number": 202, "content": "  }", "is_target": false}, {"number": 203, "content": "}", "is_target": false}, {"number": 204, "content": "", "is_target": false}]}, "695": {"lines": [{"number": 953, "content": "", "is_target": false}, {"number": 954, "content": "    returnCode = pthread_mutex_destroy(&mPlatform->mutexVectorMutex);", "is_target": false}, {"number": 955, "content": "    QMP_ASSERT(0 == returnCode);", "is_target": false}, {"number": 956, "content": "", "is_target": false}, {"number": 957, "content": "    while (!mPlatform->userMutexes.empty()) {", "is_target": false}, {"number": 958, "content": "      int returnCode = pthread_mutex_destroy(mPlatform->userMutexes.back());", "is_target": true}, {"number": 959, "content": "      QMP_ASSERT(0 == returnCode);", "is_target": false}, {"number": 960, "content": "      delete mPlatform->userMutexes.back();", "is_target": false}, {"number": 961, "content": "      mPlatform->userMutexes.pop_back();", "is_target": false}, {"number": 962, "content": "    }", "is_target": false}, {"number": 963, "content": "#endif", "is_target": false}]}, "696": {"lines": [{"number": 53, "content": "    double lasttime = 0;  // last update time (to calc stepsize)", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    //*********************methods******************", "is_target": false}, {"number": 56, "content": "  public :", "is_target": false}, {"number": 57, "content": "    /// KP is used as a general koefficient. KI and KD can be tuned without dependence of KP", "is_target": false}, {"number": 58, "content": "    PID ( double KP = 100 , double KI = 2.0 , double KD = 0.3 );", "is_target": true}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "    void setKP(double KP);", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    void setTargetPosition ( double newpos );", "is_target": false}, {"number": 63, "content": "", "is_target": false}]}, "697": {"lines": [{"number": 37, "content": "  public:", "is_target": false}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "    AbstractGround(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 40, "content": "                   bool createGround, double groundLength, double groundWidth, double wallThickness);", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "    virtual ~AbstractGround();", "is_target": true}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "    virtual void setPose(const osg::Matrix& pose) override;", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    virtual void createGround(bool create);", "is_target": false}]}, "698": {"lines": [{"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "    virtual void setPose(const osg::Matrix& pose) override;", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    virtual void createGround(bool create);", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "    virtual Primitive* getMainPrimitive()  const;", "is_target": true}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "    virtual void changeGeometry(double length, double width, double height, double factorxy);", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "    /// prints the contour of the boxes into the file", "is_target": false}, {"number": 54, "content": "    virtual void printContours(FILE* f);", "is_target": false}]}, "699": {"lines": [{"number": 32, "content": "   * DummyGround which holds a DummyPrimitive (so getMainPrimitive() works).", "is_target": false}, {"number": 33, "content": "   */", "is_target": false}, {"number": 34, "content": "  class DummyGround : public AbstractGround {", "is_target": false}, {"number": 35, "content": "    public:", "is_target": false}, {"number": 36, "content": "      DummyGround(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": false}, {"number": 37, "content": "      virtual ~DummyGround();", "is_target": true}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "      /// overload this function to create the obstacle. All primitives should go into the list __PLACEHOLDER_1__", "is_target": false}, {"number": 40, "content": "      virtual void create();", "is_target": false}, {"number": 41, "content": "  };", "is_target": false}, {"number": 42, "content": "", "is_target": false}]}, "700": {"lines": [{"number": 32, "content": "   * DummyObstacle which holds a DummyPrimitive (so getMainPrimitive() works).", "is_target": false}, {"number": 33, "content": "   */", "is_target": false}, {"number": 34, "content": "  class DummyObstacle : public AbstractObstacle {", "is_target": false}, {"number": 35, "content": "    public:", "is_target": false}, {"number": 36, "content": "      DummyObstacle(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": false}, {"number": 37, "content": "      virtual ~DummyObstacle();", "is_target": true}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "      /**", "is_target": false}, {"number": 40, "content": "       * sets position of the obstacle and creates/recreates obstacle if necessary", "is_target": false}, {"number": 41, "content": "       */", "is_target": false}, {"number": 42, "content": "      virtual void setPose(const osg::Matrix& pose) override;", "is_target": false}]}, "701": {"lines": [{"number": 35, "content": "    public:", "is_target": false}, {"number": 36, "content": "      DummyGround(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": false}, {"number": 37, "content": "      virtual ~DummyGround();", "is_target": false}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "      /// overload this function to create the obstacle. All primitives should go into the list __PLACEHOLDER_1__", "is_target": false}, {"number": 40, "content": "      virtual void create();", "is_target": true}, {"number": 41, "content": "  };", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "}", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "#endif /* __DUMMYGROUND_H_ */", "is_target": false}]}, "702": {"lines": [{"number": 40, "content": "       * sets position of the obstacle and creates/recreates obstacle if necessary", "is_target": false}, {"number": 41, "content": "       */", "is_target": false}, {"number": 42, "content": "      virtual void setPose(const osg::Matrix& pose) override;", "is_target": false}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "      /// return the __PLACEHOLDER_1__ primitive of the obtactle. The meaning of __PLACEHOLDER_2__ is arbitrary", "is_target": false}, {"number": 45, "content": "      virtual const Primitive* getMainPrimitive()  const;", "is_target": true}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    protected:", "is_target": false}, {"number": 48, "content": "      /// overload this function to create the obstactle. All primitives should go into the list __PLACEHOLDER_3__", "is_target": false}, {"number": 49, "content": "      virtual void create();", "is_target": false}, {"number": 50, "content": "  };", "is_target": false}]}, "703": {"lines": [{"number": 44, "content": "      /// return the __PLACEHOLDER_1__ primitive of the obtactle. The meaning of __PLACEHOLDER_2__ is arbitrary", "is_target": false}, {"number": 45, "content": "      virtual const Primitive* getMainPrimitive()  const;", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    protected:", "is_target": false}, {"number": 48, "content": "      /// overload this function to create the obstactle. All primitives should go into the list __PLACEHOLDER_3__", "is_target": false}, {"number": 49, "content": "      virtual void create();", "is_target": true}, {"number": 50, "content": "  };", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "}", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "#endif /* __DUMMYOBSTACLE_H_ */", "is_target": false}]}, "704": {"lines": [{"number": 103, "content": "      @return number of actually written sensors", "is_target": false}, {"number": 104, "content": "  */", "is_target": false}, {"number": 105, "content": "  virtual int getSensors(sensor* sensors, int sensornumber) override {", "is_target": false}, {"number": 106, "content": "    assert(sensornumber >= this->sensornumber);", "is_target": false}, {"number": 107, "content": "    int d = max(1,int(delay));", "is_target": false}, {"number": 108, "content": "    double* x_cur = x_buffer[(t-d + buffersize)%buffersize];", "is_target": true}, {"number": 109, "content": "    memcpy(sensors, x_cur, sizeof(sensor) * this->sensornumber);", "is_target": false}, {"number": 110, "content": "    return this->sensornumber;", "is_target": false}, {"number": 111, "content": "  }", "is_target": false}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "  /** sets actual motorcommands", "is_target": false}]}, "705": {"lines": [{"number": 37, "content": "  public:", "is_target": false}, {"number": 38, "content": "    /// creates a AMotor attached to the same bodies as the given joint.", "is_target": false}, {"number": 39, "content": "    AngularMotor(const OdeHandle& odeHandle, Joint* joint);", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "    // destroys the AMotor", "is_target": false}, {"number": 42, "content": "    virtual ~AngularMotor();", "is_target": true}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "    /// returns the number of Axis of this Motor", "is_target": false}, {"number": 45, "content": "    virtual int getNumberOfAxes() const = 0;", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    // --- Sensor interface ---", "is_target": false}]}, "706": {"lines": [{"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "    /// returns the number of Axis of this Motor", "is_target": false}, {"number": 45, "content": "    virtual int getNumberOfAxes() const = 0;", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    // --- Sensor interface ---", "is_target": false}, {"number": 48, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    virtual bool sense(const GlobalData& globaldata) { return true;}", "is_target": false}, {"number": 51, "content": "    virtual int getSensorNumber() const {", "is_target": false}, {"number": 52, "content": "      return getNumberOfAxes();", "is_target": false}, {"number": 53, "content": "    }", "is_target": false}]}, "707": {"lines": [{"number": 53, "content": "    }", "is_target": false}, {"number": 54, "content": "    virtual std::list<sensor> getList() const { return getListOfArray();};", "is_target": false}, {"number": 55, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "    // --- Motor interface ---", "is_target": false}, {"number": 58, "content": "    virtual int getMotorNumber() const { return getNumberOfAxes();};", "is_target": true}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "    virtual bool act(const GlobalData& globaldata) {", "is_target": false}, {"number": 61, "content": "      return true;", "is_target": false}, {"number": 62, "content": "    }", "is_target": false}, {"number": 63, "content": "", "is_target": false}]}, "708": {"lines": [{"number": 55, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "    // --- Motor interface ---", "is_target": false}, {"number": 58, "content": "    virtual int getMotorNumber() const { return getNumberOfAxes();};", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "    virtual bool act(const GlobalData& globaldata) {", "is_target": true}, {"number": 61, "content": "      return true;", "is_target": false}, {"number": 62, "content": "    }", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "    /** sends the action commands to the motor.", "is_target": false}, {"number": 65, "content": "        It returns the number of used values. (should be equal to", "is_target": false}]}, "709": {"lines": [{"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "    /** sends the action commands to the motor.", "is_target": false}, {"number": 65, "content": "        It returns the number of used values. (should be equal to", "is_target": false}, {"number": 66, "content": "        getMotorNumber)", "is_target": false}, {"number": 67, "content": "     */", "is_target": false}, {"number": 68, "content": "    virtual int set(const motor* values, int length);", "is_target": true}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "    // --- old interface", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}, {"number": 73, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}]}, "710": {"lines": [{"number": 114, "content": "        @param power The maximum force or torque that the motor will use to achieve the desired velocity.", "is_target": false}, {"number": 115, "content": "        This must always be greater than or equal to zero.", "is_target": false}, {"number": 116, "content": "        Setting this to zero (the default value) turns off the motor.", "is_target": false}, {"number": 117, "content": "    */", "is_target": false}, {"number": 118, "content": "    AngularMotor1Axis(const OdeHandle& odeHandle, OneAxisJoint* joint, double power);", "is_target": false}, {"number": 119, "content": "    virtual ~AngularMotor1Axis() {}", "is_target": true}, {"number": 120, "content": "", "is_target": false}, {"number": 121, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "    virtual int getNumberOfAxes() const { return 1; };", "is_target": false}, {"number": 124, "content": "", "is_target": false}]}, "711": {"lines": [{"number": 116, "content": "        Setting this to zero (the default value) turns off the motor.", "is_target": false}, {"number": 117, "content": "    */", "is_target": false}, {"number": 118, "content": "    AngularMotor1Axis(const OdeHandle& odeHandle, OneAxisJoint* joint, double power);", "is_target": false}, {"number": 119, "content": "    virtual ~AngularMotor1Axis() {}", "is_target": false}, {"number": 120, "content": "", "is_target": false}, {"number": 121, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "    virtual int getNumberOfAxes() const { return 1; };", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}, {"number": 126, "content": "        @param axisNumber is ignored because have only one axis", "is_target": false}]}, "712": {"lines": [{"number": 118, "content": "    AngularMotor1Axis(const OdeHandle& odeHandle, OneAxisJoint* joint, double power);", "is_target": false}, {"number": 119, "content": "    virtual ~AngularMotor1Axis() {}", "is_target": false}, {"number": 120, "content": "", "is_target": false}, {"number": 121, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "    virtual int getNumberOfAxes() const { return 1; };", "is_target": true}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}, {"number": 126, "content": "        @param axisNumber is ignored because have only one axis", "is_target": false}, {"number": 127, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}, {"number": 128, "content": "    */", "is_target": false}]}, "713": {"lines": [{"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}, {"number": 126, "content": "        @param axisNumber is ignored because have only one axis", "is_target": false}, {"number": 127, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}, {"number": 128, "content": "    */", "is_target": false}, {"number": 129, "content": "    virtual void set(int axisNumber, double velocity);", "is_target": true}, {"number": 130, "content": "    /** returns the speed static_cast<PositionRate>(at) the given axis, or zero if the axis is out of range", "is_target": false}, {"number": 131, "content": "        @param axisNumber is ignored because have only one axis", "is_target": false}, {"number": 132, "content": "     */", "is_target": false}, {"number": 133, "content": "    virtual double get(int axisNumber) const;", "is_target": false}, {"number": 134, "content": "", "is_target": false}]}, "714": {"lines": [{"number": 128, "content": "    */", "is_target": false}, {"number": 129, "content": "    virtual void set(int axisNumber, double velocity);", "is_target": false}, {"number": 130, "content": "    /** returns the speed static_cast<PositionRate>(at) the given axis, or zero if the axis is out of range", "is_target": false}, {"number": 131, "content": "        @param axisNumber is ignored because have only one axis", "is_target": false}, {"number": 132, "content": "     */", "is_target": false}, {"number": 133, "content": "    virtual double get(int axisNumber) const;", "is_target": true}, {"number": 134, "content": "", "is_target": false}, {"number": 135, "content": "    virtual void setPower(double power);", "is_target": false}, {"number": 136, "content": "  protected:", "is_target": false}, {"number": 137, "content": "    double initialPower = 0;", "is_target": false}, {"number": 138, "content": "  };", "is_target": false}]}, "715": {"lines": [{"number": 130, "content": "    /** returns the speed static_cast<PositionRate>(at) the given axis, or zero if the axis is out of range", "is_target": false}, {"number": 131, "content": "        @param axisNumber is ignored because have only one axis", "is_target": false}, {"number": 132, "content": "     */", "is_target": false}, {"number": 133, "content": "    virtual double get(int axisNumber) const;", "is_target": false}, {"number": 134, "content": "", "is_target": false}, {"number": 135, "content": "    virtual void setPower(double power);", "is_target": true}, {"number": 136, "content": "  protected:", "is_target": false}, {"number": 137, "content": "    double initialPower = 0;", "is_target": false}, {"number": 138, "content": "  };", "is_target": false}, {"number": 139, "content": "", "is_target": false}, {"number": 140, "content": "  /// Angular motor for TwoAxisJoints", "is_target": false}]}, "716": {"lines": [{"number": 144, "content": "        @param power The maximum force or torque that the motor will use to achieve the desired velocity.", "is_target": false}, {"number": 145, "content": "        This must always be greater than or equal to zero.", "is_target": false}, {"number": 146, "content": "        Setting this to zero (the default value) turns off the motor.", "is_target": false}, {"number": 147, "content": "    */", "is_target": false}, {"number": 148, "content": "    AngularMotor2Axis(const OdeHandle& odeHandle, TwoAxisJoint* joint, double power1, double power2);", "is_target": false}, {"number": 149, "content": "    virtual ~AngularMotor2Axis() {}", "is_target": true}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "    /// returns the number of Axis of this Motor", "is_target": false}, {"number": 154, "content": "    virtual int getNumberOfAxes() const { return 2; };", "is_target": false}]}, "717": {"lines": [{"number": 146, "content": "        Setting this to zero (the default value) turns off the motor.", "is_target": false}, {"number": 147, "content": "    */", "is_target": false}, {"number": 148, "content": "    AngularMotor2Axis(const OdeHandle& odeHandle, TwoAxisJoint* joint, double power1, double power2);", "is_target": false}, {"number": 149, "content": "    virtual ~AngularMotor2Axis() {}", "is_target": false}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "    /// returns the number of Axis of this Motor", "is_target": false}, {"number": 154, "content": "    virtual int getNumberOfAxes() const { return 2; };", "is_target": false}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}]}, "718": {"lines": [{"number": 149, "content": "    virtual ~AngularMotor2Axis() {}", "is_target": false}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "    /// returns the number of Axis of this Motor", "is_target": false}, {"number": 154, "content": "    virtual int getNumberOfAxes() const { return 2; };", "is_target": true}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}, {"number": 157, "content": "        @param axisNumber either 0 or 1", "is_target": false}, {"number": 158, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}, {"number": 159, "content": "    */", "is_target": false}]}, "719": {"lines": [{"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}, {"number": 157, "content": "        @param axisNumber either 0 or 1", "is_target": false}, {"number": 158, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}, {"number": 159, "content": "    */", "is_target": false}, {"number": 160, "content": "    virtual void set(int axisNumber, double velocity);", "is_target": true}, {"number": 161, "content": "    virtual double get(int axisNumber) const;", "is_target": false}, {"number": 162, "content": "", "is_target": false}, {"number": 163, "content": "    virtual void setPower(double power);", "is_target": false}, {"number": 164, "content": "    virtual void setPower(double power1, double power2);", "is_target": false}, {"number": 165, "content": "", "is_target": false}]}, "720": {"lines": [{"number": 156, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}, {"number": 157, "content": "        @param axisNumber either 0 or 1", "is_target": false}, {"number": 158, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}, {"number": 159, "content": "    */", "is_target": false}, {"number": 160, "content": "    virtual void set(int axisNumber, double velocity);", "is_target": false}, {"number": 161, "content": "    virtual double get(int axisNumber) const;", "is_target": true}, {"number": 162, "content": "", "is_target": false}, {"number": 163, "content": "    virtual void setPower(double power);", "is_target": false}, {"number": 164, "content": "    virtual void setPower(double power1, double power2);", "is_target": false}, {"number": 165, "content": "", "is_target": false}, {"number": 166, "content": "    /// return the maximal force", "is_target": false}]}, "721": {"lines": [{"number": 158, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}, {"number": 159, "content": "    */", "is_target": false}, {"number": 160, "content": "    virtual void set(int axisNumber, double velocity);", "is_target": false}, {"number": 161, "content": "    virtual double get(int axisNumber) const;", "is_target": false}, {"number": 162, "content": "", "is_target": false}, {"number": 163, "content": "    virtual void setPower(double power);", "is_target": true}, {"number": 164, "content": "    virtual void setPower(double power1, double power2);", "is_target": false}, {"number": 165, "content": "", "is_target": false}, {"number": 166, "content": "    /// return the maximal force", "is_target": false}, {"number": 167, "content": "    virtual double getPower2() const;", "is_target": false}, {"number": 168, "content": "  protected:", "is_target": false}]}, "722": {"lines": [{"number": 183, "content": "        Setting this to zero (the default value) turns off the motor.", "is_target": false}, {"number": 184, "content": "    */", "is_target": false}, {"number": 185, "content": "    AngularMotor3AxisEuler(const OdeHandle& odeHandle, BallJoint* joint,", "is_target": false}, {"number": 186, "content": "                           const Axis& axis1, const Axis& axis3, double power);", "is_target": false}, {"number": 187, "content": "", "is_target": false}, {"number": 188, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "    /// returns the number of Axis of this Motor", "is_target": false}, {"number": 191, "content": "    virtual int getNumberOfAxes() const { return 3; };", "is_target": false}, {"number": 192, "content": "", "is_target": false}, {"number": 193, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}]}, "723": {"lines": [{"number": 186, "content": "                           const Axis& axis1, const Axis& axis3, double power);", "is_target": false}, {"number": 187, "content": "", "is_target": false}, {"number": 188, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "    /// returns the number of Axis of this Motor", "is_target": false}, {"number": 191, "content": "    virtual int getNumberOfAxes() const { return 3; };", "is_target": true}, {"number": 192, "content": "", "is_target": false}, {"number": 193, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}, {"number": 194, "content": "        @param axisNumber either 0 or 1", "is_target": false}, {"number": 195, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}, {"number": 196, "content": "    */", "is_target": false}]}, "724": {"lines": [{"number": 192, "content": "", "is_target": false}, {"number": 193, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}, {"number": 194, "content": "        @param axisNumber either 0 or 1", "is_target": false}, {"number": 195, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}, {"number": 196, "content": "    */", "is_target": false}, {"number": 197, "content": "    virtual void set(int axisNumber, double velocity);", "is_target": true}, {"number": 198, "content": "    /** returns the speed static_cast<PositionRate>(at) the given axis, or zero if the axis is out of range*/", "is_target": false}, {"number": 199, "content": "    virtual double get(int axisNumber) const;", "is_target": false}, {"number": 200, "content": "", "is_target": false}, {"number": 201, "content": "    /**  sets the maximal force the motor has", "is_target": false}, {"number": 202, "content": "     */", "is_target": false}]}, "725": {"lines": [{"number": 194, "content": "        @param axisNumber either 0 or 1", "is_target": false}, {"number": 195, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}, {"number": 196, "content": "    */", "is_target": false}, {"number": 197, "content": "    virtual void set(int axisNumber, double velocity);", "is_target": false}, {"number": 198, "content": "    /** returns the speed static_cast<PositionRate>(at) the given axis, or zero if the axis is out of range*/", "is_target": false}, {"number": 199, "content": "    virtual double get(int axisNumber) const;", "is_target": true}, {"number": 200, "content": "", "is_target": false}, {"number": 201, "content": "    /**  sets the maximal force the motor has", "is_target": false}, {"number": 202, "content": "     */", "is_target": false}, {"number": 203, "content": "    virtual void setPower(double power);", "is_target": false}, {"number": 204, "content": "  protected:", "is_target": false}]}, "726": {"lines": [{"number": 198, "content": "    /** returns the speed static_cast<PositionRate>(at) the given axis, or zero if the axis is out of range*/", "is_target": false}, {"number": 199, "content": "    virtual double get(int axisNumber) const;", "is_target": false}, {"number": 200, "content": "", "is_target": false}, {"number": 201, "content": "    /**  sets the maximal force the motor has", "is_target": false}, {"number": 202, "content": "     */", "is_target": false}, {"number": 203, "content": "    virtual void setPower(double power);", "is_target": true}, {"number": 204, "content": "  protected:", "is_target": false}, {"number": 205, "content": "    Axis axis1;", "is_target": false}, {"number": 206, "content": "    Axis axis3;", "is_target": false}, {"number": 207, "content": "    double power = 0;", "is_target": false}, {"number": 208, "content": "  };", "is_target": false}]}, "727": {"lines": [{"number": 218, "content": "        Setting this to zero (the default value) turns off the motor.", "is_target": false}, {"number": 219, "content": "    */", "is_target": false}, {"number": 220, "content": "    AngularMotorNAxis(const OdeHandle& odeHandle, Joint* joint,", "is_target": false}, {"number": 221, "content": "                      std::list<std::pair<double, Axis > > axis);", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "    virtual ~AngularMotorNAxis() {}", "is_target": true}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "    /// returns the number of Axis of this Motor", "is_target": false}, {"number": 228, "content": "    virtual int getNumberOfAxes()  const override;", "is_target": false}]}, "728": {"lines": [{"number": 220, "content": "    AngularMotorNAxis(const OdeHandle& odeHandle, Joint* joint,", "is_target": false}, {"number": 221, "content": "                      std::list<std::pair<double, Axis > > axis);", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "    virtual ~AngularMotorNAxis() {}", "is_target": false}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "    /// returns the number of Axis of this Motor", "is_target": false}, {"number": 228, "content": "    virtual int getNumberOfAxes()  const override;", "is_target": false}, {"number": 229, "content": "", "is_target": false}, {"number": 230, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}]}, "729": {"lines": [{"number": 228, "content": "    virtual int getNumberOfAxes()  const override;", "is_target": false}, {"number": 229, "content": "", "is_target": false}, {"number": 230, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}, {"number": 231, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}, {"number": 232, "content": "    */", "is_target": false}, {"number": 233, "content": "    virtual void set(int axisNumber, double velocity);", "is_target": true}, {"number": 234, "content": "    /** returns the speed static_cast<PositionRate>(at) the given axis, or zero if the axis is out of range", "is_target": false}, {"number": 235, "content": "        The problem is, that we don't have actual information available.", "is_target": false}, {"number": 236, "content": "        So we return the last set position!.", "is_target": false}, {"number": 237, "content": "     */", "is_target": false}, {"number": 238, "content": "    virtual double get(int axisNumber) const;", "is_target": false}]}, "730": {"lines": [{"number": 233, "content": "    virtual void set(int axisNumber, double velocity);", "is_target": false}, {"number": 234, "content": "    /** returns the speed static_cast<PositionRate>(at) the given axis, or zero if the axis is out of range", "is_target": false}, {"number": 235, "content": "        The problem is, that we don't have actual information available.", "is_target": false}, {"number": 236, "content": "        So we return the last set position!.", "is_target": false}, {"number": 237, "content": "     */", "is_target": false}, {"number": 238, "content": "    virtual double get(int axisNumber) const;", "is_target": true}, {"number": 239, "content": "", "is_target": false}, {"number": 240, "content": "    virtual void setPower(double power);", "is_target": false}, {"number": 241, "content": "  protected:", "is_target": false}, {"number": 242, "content": "    std::list<std::pair<double, Axis > > axis;", "is_target": false}, {"number": 243, "content": "  };", "is_target": false}]}, "731": {"lines": [{"number": 235, "content": "        The problem is, that we don't have actual information available.", "is_target": false}, {"number": 236, "content": "        So we return the last set position!.", "is_target": false}, {"number": 237, "content": "     */", "is_target": false}, {"number": 238, "content": "    virtual double get(int axisNumber) const;", "is_target": false}, {"number": 239, "content": "", "is_target": false}, {"number": 240, "content": "    virtual void setPower(double power);", "is_target": true}, {"number": 241, "content": "  protected:", "is_target": false}, {"number": 242, "content": "    std::list<std::pair<double, Axis > > axis;", "is_target": false}, {"number": 243, "content": "  };", "is_target": false}, {"number": 244, "content": "", "is_target": false}, {"number": 245, "content": "", "is_target": false}]}, "732": {"lines": [{"number": 130, "content": "  }", "is_target": false}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "  virtual void usage() const {", "is_target": false}, {"number": 133, "content": "    printf(\"\\t-track\\tenable tracking of the position of the robot\\n\");", "is_target": false}, {"number": 134, "content": "  }", "is_target": false}, {"number": 135, "content": "};", "is_target": true}, {"number": 136, "content": "", "is_target": false}, {"number": 137, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 138, "content": "{", "is_target": false}, {"number": 139, "content": "  ThisSim sim;", "is_target": false}, {"number": 140, "content": "  track = sim.contains(argv, argc, \"-track\"); // check whether cmd-line contains -track", "is_target": false}]}, "733": {"lines": [{"number": 34, "content": "", "is_target": false}, {"number": 35, "content": "#ifndef AVR", "is_target": false}, {"number": 36, "content": "", "is_target": false}, {"number": 37, "content": "bool", "is_target": false}, {"number": 38, "content": "Configurable::storeCfg(const char* filenamestem, const std::list<std::string>& comments) {", "is_target": false}, {"number": 39, "content": "  char name[256];", "is_target": true}, {"number": 40, "content": "  FILE* f;", "is_target": false}, {"number": 41, "content": "  setlocale(LC_NUMERIC, \"en_US\"); // set us type output", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "  snprintf(name, sizeof(name), \"%s\", filenamestem);", "is_target": false}, {"number": 44, "content": "  if (!(f = fopen(name, \"w\")))", "is_target": false}]}, "734": {"lines": [{"number": 51, "content": "  return true;", "is_target": false}, {"number": 52, "content": "}", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "bool", "is_target": false}, {"number": 55, "content": "Configurable::restoreCfg(const char* filenamestem) {", "is_target": false}, {"number": 56, "content": "  char name[256];", "is_target": true}, {"number": 57, "content": "  FILE* f;", "is_target": false}, {"number": 58, "content": "  setlocale(LC_NUMERIC, \"en_US\"); // set us type output", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  snprintf(name, sizeof(name), \"%s\", filenamestem);", "is_target": false}, {"number": 61, "content": "  if (!(f = fopen(name, \"r\")))", "is_target": false}]}, "735": {"lines": [{"number": 249, "content": "      Power is the maximum force or torque that the motor will use to achieve the desired velocity.", "is_target": false}, {"number": 250, "content": "      This must always be greater than or equal to zero.", "is_target": false}, {"number": 251, "content": "      Setting this to zero (the default value) turns off the motor.", "is_target": false}, {"number": 252, "content": "  */", "is_target": false}, {"number": 253, "content": "  AngularMotorNAxis::AngularMotorNAxis(const OdeHandle& odeHandle, Joint* joint,", "is_target": false}, {"number": 254, "content": "                                       std::list<std::pair<double, Axis > > axis)", "is_target": true}, {"number": 255, "content": "    : AngularMotor(odeHandle, joint), axis(axis){", "is_target": false}, {"number": 256, "content": "  }", "is_target": false}, {"number": 257, "content": "", "is_target": false}, {"number": 258, "content": "  void AngularMotorNAxis::init(Primitive* own, Joint* _joint){", "is_target": false}, {"number": 259, "content": "    if(initialized) return; // cannot be called twice!", "is_target": false}]}, "736": {"lines": [{"number": 302, "content": "Configurable::setParamBounds(const paramkey& key,", "is_target": false}, {"number": 303, "content": "                             paramval minBound,", "is_target": false}, {"number": 304, "content": "                             paramval maxBound,", "is_target": false}, {"number": 305, "content": "                             bool traverseChildren) {", "is_target": false}, {"number": 306, "content": "  if (mapOfValBounds.find(key) != mapOfValBounds.end())", "is_target": false}, {"number": 307, "content": "    mapOfValBounds[key] = paramvalBounds(minBound, maxBound);", "is_target": true}, {"number": 308, "content": "  if (traverseChildren) {", "is_target": false}, {"number": 309, "content": "    FOREACH(configurableList, ListOfConfigurableChildren, conf) {", "is_target": false}, {"number": 310, "content": "      if ((*conf)->hasParamvalBounds(key))", "is_target": false}, {"number": 311, "content": "        (*conf)->setParamBounds(key, minBound, maxBound);", "is_target": false}, {"number": 312, "content": "    }", "is_target": false}]}, "737": {"lines": [{"number": 317, "content": "Configurable::setParamBounds(const paramkey& key,", "is_target": false}, {"number": 318, "content": "                             paramint minBound,", "is_target": false}, {"number": 319, "content": "                             paramint maxBound,", "is_target": false}, {"number": 320, "content": "                             bool traverseChildren) {", "is_target": false}, {"number": 321, "content": "  if (mapOfIntBounds.find(key) != mapOfIntBounds.end())", "is_target": false}, {"number": 322, "content": "    mapOfIntBounds[key] = paramintBounds(minBound, maxBound);", "is_target": true}, {"number": 323, "content": "  if (traverseChildren) {", "is_target": false}, {"number": 324, "content": "    FOREACH(configurableList, ListOfConfigurableChildren, conf) {", "is_target": false}, {"number": 325, "content": "      if ((*conf)->hasParamintBounds(key))", "is_target": false}, {"number": 326, "content": "        (*conf)->setParamBounds(key, minBound, maxBound);", "is_target": false}, {"number": 327, "content": "    }", "is_target": false}]}, "738": {"lines": [{"number": 100, "content": "      return 1;", "is_target": false}, {"number": 101, "content": "    };", "is_target": false}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "    // --- Parameters ---", "is_target": false}, {"number": 105, "content": "    virtual void setMinMax(double _min, double _max) {", "is_target": true}, {"number": 106, "content": "      min=_min;", "is_target": false}, {"number": 107, "content": "      max=_max;", "is_target": false}, {"number": 108, "content": "      joint->setParam(dParamLoStop, min  - fabs(min) * (jointLimit-1));", "is_target": false}, {"number": 109, "content": "      joint->setParam(dParamHiStop, max  + fabs(max) * (jointLimit-1));", "is_target": false}, {"number": 110, "content": "    }", "is_target": false}]}, "739": {"lines": [{"number": 55, "content": "               OSGHeightField::CodingMode coding = OSGHeightField::Red);", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "    /**", "is_target": false}, {"number": 58, "content": "     * updates the position of the geoms  ( not nessary for static objects)", "is_target": false}, {"number": 59, "content": "     */", "is_target": false}, {"number": 60, "content": "    virtual void update() { };", "is_target": true}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    virtual void setPose(const osg::Matrix& pose);", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "  protected:", "is_target": false}]}, "740": {"lines": [{"number": 130, "content": "  }", "is_target": false}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "  virtual void usage() const {", "is_target": false}, {"number": 133, "content": "    printf(\"\\t-track\\tenable tracking of the position of the robot\\n\");", "is_target": false}, {"number": 134, "content": "  }", "is_target": false}, {"number": 135, "content": "};", "is_target": true}, {"number": 136, "content": "", "is_target": false}, {"number": 137, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 138, "content": "{", "is_target": false}, {"number": 139, "content": "  ThisSim sim;", "is_target": false}, {"number": 140, "content": "  track = sim.contains(argv, argc, \"-track\"); // check whether cmd-line contains -track", "is_target": false}]}, "741": {"lines": [{"number": 57, "content": "    /**", "is_target": false}, {"number": 58, "content": "     * updates the position of the geoms  ( not nessary for static objects)", "is_target": false}, {"number": 59, "content": "     */", "is_target": false}, {"number": 60, "content": "    virtual void update() { };", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    virtual void setPose(const osg::Matrix& pose);", "is_target": true}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "  protected:", "is_target": false}, {"number": 66, "content": "    virtual void create();", "is_target": false}, {"number": 67, "content": "    virtual void destroy();", "is_target": false}]}, "742": {"lines": [{"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    virtual void setPose(const osg::Matrix& pose);", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "  protected:", "is_target": false}, {"number": 66, "content": "    virtual void create();", "is_target": true}, {"number": 67, "content": "    virtual void destroy();", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "  protected:", "is_target": false}, {"number": 70, "content": "    std::string filename;", "is_target": false}, {"number": 71, "content": "    std::string texture;", "is_target": false}]}, "743": {"lines": [{"number": 55, "content": "    TerrainGround(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 56, "content": "               const std::string& filename, const std::string& texture,", "is_target": false}, {"number": 57, "content": "               double x_size, double y_size, double height,", "is_target": false}, {"number": 58, "content": "               OSGHeightField::CodingMode coding = OSGHeightField::Red);", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "    virtual ~TerrainGround() {}", "is_target": true}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    /**", "is_target": false}, {"number": 63, "content": "     * updates the position of the geoms  ( not nessary for static objects)", "is_target": false}, {"number": 64, "content": "     */", "is_target": false}, {"number": 65, "content": "    virtual void update() { };", "is_target": false}]}, "744": {"lines": [{"number": 62, "content": "    virtual void setPose(const osg::Matrix& pose);", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "  protected:", "is_target": false}, {"number": 66, "content": "    virtual void create();", "is_target": false}, {"number": 67, "content": "    virtual void destroy();", "is_target": true}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "  protected:", "is_target": false}, {"number": 70, "content": "    std::string filename;", "is_target": false}, {"number": 71, "content": "    std::string texture;", "is_target": false}, {"number": 72, "content": "    HeightField* heightfield;", "is_target": false}]}, "745": {"lines": [{"number": 60, "content": "    virtual ~TerrainGround() {}", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    /**", "is_target": false}, {"number": 63, "content": "     * updates the position of the geoms  ( not nessary for static objects)", "is_target": false}, {"number": 64, "content": "     */", "is_target": false}, {"number": 65, "content": "    virtual void update() { };", "is_target": true}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "    virtual void setPose(const osg::Matrix& pose);", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "    virtual Primitive* getMainPrimitive() const { return 0; }", "is_target": false}]}, "746": {"lines": [{"number": 62, "content": "    /**", "is_target": false}, {"number": 63, "content": "     * updates the position of the geoms  ( not nessary for static objects)", "is_target": false}, {"number": 64, "content": "     */", "is_target": false}, {"number": 65, "content": "    virtual void update() { };", "is_target": false}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "    virtual void setPose(const osg::Matrix& pose);", "is_target": true}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "    virtual Primitive* getMainPrimitive() const { return 0; }", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  protected:", "is_target": false}]}, "747": {"lines": [{"number": 65, "content": "    virtual void update() { };", "is_target": false}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "    virtual void setPose(const osg::Matrix& pose);", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "    virtual Primitive* getMainPrimitive() const { return 0; }", "is_target": true}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  protected:", "is_target": false}, {"number": 73, "content": "    virtual void create();", "is_target": false}, {"number": 74, "content": "    virtual void destroy();", "is_target": false}, {"number": 75, "content": "", "is_target": false}]}, "748": {"lines": [{"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "    virtual Primitive* getMainPrimitive() const { return 0; }", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  protected:", "is_target": false}, {"number": 73, "content": "    virtual void create();", "is_target": true}, {"number": 74, "content": "    virtual void destroy();", "is_target": false}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "  protected:", "is_target": false}, {"number": 77, "content": "    std::string filename;", "is_target": false}, {"number": 78, "content": "    std::string texture;", "is_target": false}]}, "749": {"lines": [{"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "    virtual Primitive* getMainPrimitive() const { return 0; }", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  protected:", "is_target": false}, {"number": 73, "content": "    virtual void create();", "is_target": false}, {"number": 74, "content": "    virtual void destroy();", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "  protected:", "is_target": false}, {"number": 77, "content": "    std::string filename;", "is_target": false}, {"number": 78, "content": "    std::string texture;", "is_target": false}, {"number": 79, "content": "    HeightField* heightfield;", "is_target": false}]}, "750": {"lines": [{"number": 42, "content": "    OneAxisServo(OneAxisJoint* joint, double _min, double _max,", "is_target": false}, {"number": 43, "content": "                 double power, double damp=0.2, double integration=2,", "is_target": false}, {"number": 44, "content": "                 double maxVel=10.0,", "is_target": false}, {"number": 45, "content": "                 double jointLimit = 1.3, bool minmaxCheck = true);", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    virtual ~OneAxisServo();", "is_target": true}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 50, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max", "is_target": false}, {"number": 51, "content": "    */", "is_target": false}, {"number": 52, "content": "    virtual void set(double pos);", "is_target": false}]}, "751": {"lines": [{"number": 61, "content": "      }", "is_target": false}, {"number": 62, "content": "      return pos;", "is_target": false}, {"number": 63, "content": "    }", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "    // --- Sensor interface ---", "is_target": false}, {"number": 66, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) { // and Motor interface", "is_target": true}, {"number": 67, "content": "      if(joint!= nullptr) {", "is_target": false}, {"number": 68, "content": "        this->joint=dynamic_cast<OneAxisJoint*>(joint);", "is_target": false}, {"number": 69, "content": "      }", "is_target": false}, {"number": 70, "content": "      assert(this->joint);", "is_target": false}, {"number": 71, "content": "    }", "is_target": false}]}, "752": {"lines": [{"number": 80, "content": "      sensors[0]=get();", "is_target": false}, {"number": 81, "content": "      return 1;", "is_target": false}, {"number": 82, "content": "    }", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "    // --- Motor interface ---", "is_target": false}, {"number": 85, "content": "    virtual int getMotorNumber() const { return 1;};", "is_target": true}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "    virtual bool act(const GlobalData& globaldata) {", "is_target": false}, {"number": 88, "content": "      // here we should apply the forces etc, but due to backwards compatibility this remains in set()", "is_target": false}, {"number": 89, "content": "      // which is also called each timestep.", "is_target": false}, {"number": 90, "content": "      return true;", "is_target": false}]}, "753": {"lines": [{"number": 82, "content": "    }", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "    // --- Motor interface ---", "is_target": false}, {"number": 85, "content": "    virtual int getMotorNumber() const { return 1;};", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "    virtual bool act(const GlobalData& globaldata) {", "is_target": true}, {"number": 88, "content": "      // here we should apply the forces etc, but due to backwards compatibility this remains in set()", "is_target": false}, {"number": 89, "content": "      // which is also called each timestep.", "is_target": false}, {"number": 90, "content": "      return true;", "is_target": false}, {"number": 91, "content": "    };", "is_target": false}, {"number": 92, "content": "", "is_target": false}]}, "754": {"lines": [{"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "    /** sends the action commands to the motor.", "is_target": false}, {"number": 94, "content": "        It returns the number of used values. (should be equal to", "is_target": false}, {"number": 95, "content": "        getMotorNumber)", "is_target": false}, {"number": 96, "content": "     */", "is_target": false}, {"number": 97, "content": "    virtual int set(const motor* values, int length) {", "is_target": true}, {"number": 98, "content": "      assert(length>0);", "is_target": false}, {"number": 99, "content": "      set(values[0]);", "is_target": false}, {"number": 100, "content": "      return 1;", "is_target": false}, {"number": 101, "content": "    };", "is_target": false}, {"number": 102, "content": "", "is_target": false}]}, "755": {"lines": [{"number": 167, "content": "    */", "is_target": false}, {"number": 168, "content": "    OneAxisServoCentered(OneAxisJoint* joint, double _min, double _max,", "is_target": false}, {"number": 169, "content": "                         double power, double damp=0.2, double integration=2,", "is_target": false}, {"number": 170, "content": "                         double maxVel=10.0, double jointLimit = 1.3);", "is_target": false}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "    virtual ~OneAxisServoCentered() {}", "is_target": true}, {"number": 173, "content": "", "is_target": false}, {"number": 174, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 175, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}, {"number": 176, "content": "        however 0 is just in the center of min and max", "is_target": false}, {"number": 177, "content": "    */", "is_target": false}]}, "756": {"lines": [{"number": 173, "content": "", "is_target": false}, {"number": 174, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 175, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}, {"number": 176, "content": "        however 0 is just in the center of min and max", "is_target": false}, {"number": 177, "content": "    */", "is_target": false}, {"number": 178, "content": "    virtual void set(double pos);", "is_target": true}, {"number": 179, "content": "", "is_target": false}, {"number": 180, "content": "    /** returns the position of the slider in ranges [-1, 1] (scaled by min, max, centered)*/", "is_target": false}, {"number": 181, "content": "    virtual double get() const {", "is_target": false}, {"number": 182, "content": "      double pos =  joint->getPosition1();", "is_target": false}, {"number": 183, "content": "", "is_target": false}]}, "757": {"lines": [{"number": 176, "content": "        however 0 is just in the center of min and max", "is_target": false}, {"number": 177, "content": "    */", "is_target": false}, {"number": 178, "content": "    virtual void set(double pos);", "is_target": false}, {"number": 179, "content": "", "is_target": false}, {"number": 180, "content": "    /** returns the position of the slider in ranges [-1, 1] (scaled by min, max, centered)*/", "is_target": false}, {"number": 181, "content": "    virtual double get() const {", "is_target": true}, {"number": 182, "content": "      double pos =  joint->getPosition1();", "is_target": false}, {"number": 183, "content": "", "is_target": false}, {"number": 184, "content": "      return 2*(pos-min)/(max-min) - 1;", "is_target": false}, {"number": 185, "content": "    }", "is_target": false}, {"number": 186, "content": "", "is_target": false}]}, "758": {"lines": [{"number": 207, "content": "    OneAxisServoVel(const OdeHandle& odeHandle,", "is_target": false}, {"number": 208, "content": "                    OneAxisJoint* joint, double _min, double _max,", "is_target": false}, {"number": 209, "content": "                    double power, double damp=0.05, double maxVel=20,", "is_target": false}, {"number": 210, "content": "                    double jointLimit = 1.3);", "is_target": false}, {"number": 211, "content": "", "is_target": false}, {"number": 212, "content": "    virtual ~OneAxisServoVel();", "is_target": true}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) {", "is_target": false}, {"number": 215, "content": "      if(joint) { assert(joint==this->joint); } // we cannot attach the servo to a new joint", "is_target": false}, {"number": 216, "content": "    }", "is_target": false}, {"number": 217, "content": "", "is_target": false}]}, "759": {"lines": [{"number": 209, "content": "                    double power, double damp=0.05, double maxVel=20,", "is_target": false}, {"number": 210, "content": "                    double jointLimit = 1.3);", "is_target": false}, {"number": 211, "content": "", "is_target": false}, {"number": 212, "content": "    virtual ~OneAxisServoVel();", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) {", "is_target": true}, {"number": 215, "content": "      if(joint) { assert(joint==this->joint); } // we cannot attach the servo to a new joint", "is_target": false}, {"number": 216, "content": "    }", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "    /** adjusts the power of the servo*/", "is_target": false}, {"number": 219, "content": "    virtual void setPower(double _power);", "is_target": false}]}, "760": {"lines": [{"number": 214, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) {", "is_target": false}, {"number": 215, "content": "      if(joint) { assert(joint==this->joint); } // we cannot attach the servo to a new joint", "is_target": false}, {"number": 216, "content": "    }", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "    /** adjusts the power of the servo*/", "is_target": false}, {"number": 219, "content": "    virtual void setPower(double _power);", "is_target": true}, {"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "    /** returns the power of the servo*/", "is_target": false}, {"number": 222, "content": "    virtual double getPower() {", "is_target": false}, {"number": 223, "content": "      return power;", "is_target": false}, {"number": 224, "content": "    }", "is_target": false}]}, "761": {"lines": [{"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "    /** adjusts the power of the servo*/", "is_target": false}, {"number": 219, "content": "    virtual void setPower(double _power);", "is_target": false}, {"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "    /** returns the power of the servo*/", "is_target": false}, {"number": 222, "content": "    virtual double getPower() {", "is_target": true}, {"number": 223, "content": "      return power;", "is_target": false}, {"number": 224, "content": "    }", "is_target": false}, {"number": 225, "content": "    virtual double getDamping() {", "is_target": false}, {"number": 226, "content": "      return damp;", "is_target": false}, {"number": 227, "content": "    }", "is_target": false}]}, "762": {"lines": [{"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "    /** returns the power of the servo*/", "is_target": false}, {"number": 222, "content": "    virtual double getPower() {", "is_target": false}, {"number": 223, "content": "      return power;", "is_target": false}, {"number": 224, "content": "    }", "is_target": false}, {"number": 225, "content": "    virtual double getDamping() {", "is_target": true}, {"number": 226, "content": "      return damp;", "is_target": false}, {"number": 227, "content": "    }", "is_target": false}, {"number": 228, "content": "    virtual void setDamping(double _damp) {", "is_target": false}, {"number": 229, "content": "      damp = clip(_damp,0.0,1.0);", "is_target": false}, {"number": 230, "content": "    }", "is_target": false}]}, "763": {"lines": [{"number": 223, "content": "      return power;", "is_target": false}, {"number": 224, "content": "    }", "is_target": false}, {"number": 225, "content": "    virtual double getDamping() {", "is_target": false}, {"number": 226, "content": "      return damp;", "is_target": false}, {"number": 227, "content": "    }", "is_target": false}, {"number": 228, "content": "    virtual void setDamping(double _damp) {", "is_target": true}, {"number": 229, "content": "      damp = clip(_damp,0.0,1.0);", "is_target": false}, {"number": 230, "content": "    }", "is_target": false}, {"number": 231, "content": "    /** offetCanceling does not exist for this type of servo */", "is_target": false}, {"number": 232, "content": "    virtual double& offsetCanceling() {", "is_target": false}, {"number": 233, "content": "      dummy=0;", "is_target": false}]}, "764": {"lines": [{"number": 227, "content": "    }", "is_target": false}, {"number": 228, "content": "    virtual void setDamping(double _damp) {", "is_target": false}, {"number": 229, "content": "      damp = clip(_damp,0.0,1.0);", "is_target": false}, {"number": 230, "content": "    }", "is_target": false}, {"number": 231, "content": "    /** offetCanceling does not exist for this type of servo */", "is_target": false}, {"number": 232, "content": "    virtual double& offsetCanceling() {", "is_target": true}, {"number": 233, "content": "      dummy=0;", "is_target": false}, {"number": 234, "content": "      return dummy;", "is_target": false}, {"number": 235, "content": "    }", "is_target": false}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}]}, "765": {"lines": [{"number": 233, "content": "      dummy=0;", "is_target": false}, {"number": 234, "content": "      return dummy;", "is_target": false}, {"number": 235, "content": "    }", "is_target": false}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 238, "content": "    virtual void setMaxVel(double maxVel) {", "is_target": true}, {"number": 239, "content": "      this->maxVel = maxVel;", "is_target": false}, {"number": 240, "content": "      pid.KP=maxVel/2;", "is_target": false}, {"number": 241, "content": "    }", "is_target": false}, {"number": 242, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 243, "content": "    virtual double getMaxVel() {", "is_target": false}]}, "766": {"lines": [{"number": 238, "content": "    virtual void setMaxVel(double maxVel) {", "is_target": false}, {"number": 239, "content": "      this->maxVel = maxVel;", "is_target": false}, {"number": 240, "content": "      pid.KP=maxVel/2;", "is_target": false}, {"number": 241, "content": "    }", "is_target": false}, {"number": 242, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 243, "content": "    virtual double getMaxVel() {", "is_target": true}, {"number": 244, "content": "      return maxVel;", "is_target": false}, {"number": 245, "content": "    }", "is_target": false}, {"number": 246, "content": "", "is_target": false}, {"number": 247, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 248, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}]}, "767": {"lines": [{"number": 246, "content": "", "is_target": false}, {"number": 247, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 248, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}, {"number": 249, "content": "        however 0 is just in the center of min and max", "is_target": false}, {"number": 250, "content": "    */", "is_target": false}, {"number": 251, "content": "    virtual void set(double pos);", "is_target": true}, {"number": 252, "content": "", "is_target": false}, {"number": 253, "content": "    /** returns the position of the servo in ranges [-1, 1] (scaled by min, max, centered)*/", "is_target": false}, {"number": 254, "content": "    virtual double get() const {", "is_target": false}, {"number": 255, "content": "      double pos =  joint->getPosition1();", "is_target": false}, {"number": 256, "content": "      return 2*(pos-min)/(max-min) - 1;", "is_target": false}]}, "768": {"lines": [{"number": 249, "content": "        however 0 is just in the center of min and max", "is_target": false}, {"number": 250, "content": "    */", "is_target": false}, {"number": 251, "content": "    virtual void set(double pos);", "is_target": false}, {"number": 252, "content": "", "is_target": false}, {"number": 253, "content": "    /** returns the position of the servo in ranges [-1, 1] (scaled by min, max, centered)*/", "is_target": false}, {"number": 254, "content": "    virtual double get() const {", "is_target": true}, {"number": 255, "content": "      double pos =  joint->getPosition1();", "is_target": false}, {"number": 256, "content": "      return 2*(pos-min)/(max-min) - 1;", "is_target": false}, {"number": 257, "content": "    }", "is_target": false}, {"number": 258, "content": "  protected:", "is_target": false}, {"number": 259, "content": "    AngularMotor1Axis motor;", "is_target": false}]}, "769": {"lines": [{"number": 282, "content": "    SliderServoVel(const OdeHandle& odeHandle,", "is_target": false}, {"number": 283, "content": "                   OneAxisJoint* joint, double _min, double _max,", "is_target": false}, {"number": 284, "content": "                   double power, double damp=0.05, double maxVel=20,", "is_target": false}, {"number": 285, "content": "                   double jointLimit = 1.3);", "is_target": false}, {"number": 286, "content": "", "is_target": false}, {"number": 287, "content": "    virtual ~SliderServoVel();", "is_target": true}, {"number": 288, "content": "", "is_target": false}, {"number": 289, "content": "    /** adjusts the power of the servo*/", "is_target": false}, {"number": 290, "content": "    virtual void setPower(double _power);", "is_target": false}, {"number": 291, "content": "", "is_target": false}, {"number": 292, "content": "    /** returns the power of the servo*/", "is_target": false}]}, "770": {"lines": [{"number": 285, "content": "                   double jointLimit = 1.3);", "is_target": false}, {"number": 286, "content": "", "is_target": false}, {"number": 287, "content": "    virtual ~SliderServoVel();", "is_target": false}, {"number": 288, "content": "", "is_target": false}, {"number": 289, "content": "    /** adjusts the power of the servo*/", "is_target": false}, {"number": 290, "content": "    virtual void setPower(double _power);", "is_target": true}, {"number": 291, "content": "", "is_target": false}, {"number": 292, "content": "    /** returns the power of the servo*/", "is_target": false}, {"number": 293, "content": "    virtual double getPower() {", "is_target": false}, {"number": 294, "content": "      return power;", "is_target": false}, {"number": 295, "content": "    }", "is_target": false}]}, "771": {"lines": [{"number": 288, "content": "", "is_target": false}, {"number": 289, "content": "    /** adjusts the power of the servo*/", "is_target": false}, {"number": 290, "content": "    virtual void setPower(double _power);", "is_target": false}, {"number": 291, "content": "", "is_target": false}, {"number": 292, "content": "    /** returns the power of the servo*/", "is_target": false}, {"number": 293, "content": "    virtual double getPower() {", "is_target": true}, {"number": 294, "content": "      return power;", "is_target": false}, {"number": 295, "content": "    }", "is_target": false}, {"number": 296, "content": "    virtual double getDamping() {", "is_target": false}, {"number": 297, "content": "      return damp;", "is_target": false}, {"number": 298, "content": "    }", "is_target": false}]}, "772": {"lines": [{"number": 291, "content": "", "is_target": false}, {"number": 292, "content": "    /** returns the power of the servo*/", "is_target": false}, {"number": 293, "content": "    virtual double getPower() {", "is_target": false}, {"number": 294, "content": "      return power;", "is_target": false}, {"number": 295, "content": "    }", "is_target": false}, {"number": 296, "content": "    virtual double getDamping() {", "is_target": true}, {"number": 297, "content": "      return damp;", "is_target": false}, {"number": 298, "content": "    }", "is_target": false}, {"number": 299, "content": "    virtual void setDamping(double _damp) {", "is_target": false}, {"number": 300, "content": "      damp = clip(_damp,0.0,1.0);", "is_target": false}, {"number": 301, "content": "    }", "is_target": false}]}, "773": {"lines": [{"number": 294, "content": "      return power;", "is_target": false}, {"number": 295, "content": "    }", "is_target": false}, {"number": 296, "content": "    virtual double getDamping() {", "is_target": false}, {"number": 297, "content": "      return damp;", "is_target": false}, {"number": 298, "content": "    }", "is_target": false}, {"number": 299, "content": "    virtual void setDamping(double _damp) {", "is_target": true}, {"number": 300, "content": "      damp = clip(_damp,0.0,1.0);", "is_target": false}, {"number": 301, "content": "    }", "is_target": false}, {"number": 302, "content": "    /** offetCanceling does not exist for this type of servo */", "is_target": false}, {"number": 303, "content": "    virtual double& offsetCanceling() {", "is_target": false}, {"number": 304, "content": "      dummy=0;", "is_target": false}]}, "774": {"lines": [{"number": 298, "content": "    }", "is_target": false}, {"number": 299, "content": "    virtual void setDamping(double _damp) {", "is_target": false}, {"number": 300, "content": "      damp = clip(_damp,0.0,1.0);", "is_target": false}, {"number": 301, "content": "    }", "is_target": false}, {"number": 302, "content": "    /** offetCanceling does not exist for this type of servo */", "is_target": false}, {"number": 303, "content": "    virtual double& offsetCanceling() {", "is_target": true}, {"number": 304, "content": "      dummy=0;", "is_target": false}, {"number": 305, "content": "      return dummy;", "is_target": false}, {"number": 306, "content": "    }", "is_target": false}, {"number": 307, "content": "", "is_target": false}, {"number": 308, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}]}, "775": {"lines": [{"number": 304, "content": "      dummy=0;", "is_target": false}, {"number": 305, "content": "      return dummy;", "is_target": false}, {"number": 306, "content": "    }", "is_target": false}, {"number": 307, "content": "", "is_target": false}, {"number": 308, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 309, "content": "    virtual void setMaxVel(double maxVel) {", "is_target": true}, {"number": 310, "content": "      this->maxVel = maxVel;", "is_target": false}, {"number": 311, "content": "      pid.KP=maxVel/2;", "is_target": false}, {"number": 312, "content": "    }", "is_target": false}, {"number": 313, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 314, "content": "    virtual double getMaxVel() {", "is_target": false}]}, "776": {"lines": [{"number": 309, "content": "    virtual void setMaxVel(double maxVel) {", "is_target": false}, {"number": 310, "content": "      this->maxVel = maxVel;", "is_target": false}, {"number": 311, "content": "      pid.KP=maxVel/2;", "is_target": false}, {"number": 312, "content": "    }", "is_target": false}, {"number": 313, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 314, "content": "    virtual double getMaxVel() {", "is_target": true}, {"number": 315, "content": "      return maxVel;", "is_target": false}, {"number": 316, "content": "    }", "is_target": false}, {"number": 317, "content": "", "is_target": false}, {"number": 318, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 319, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}]}, "777": {"lines": [{"number": 317, "content": "", "is_target": false}, {"number": 318, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 319, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}, {"number": 320, "content": "        however 0 is just in the center of min and max", "is_target": false}, {"number": 321, "content": "    */", "is_target": false}, {"number": 322, "content": "    virtual void set(double pos);", "is_target": true}, {"number": 323, "content": "", "is_target": false}, {"number": 324, "content": "    /** returns the position of the servo in ranges [-1, 1] (scaled by min, max, centered)*/", "is_target": false}, {"number": 325, "content": "    virtual double get() const {", "is_target": false}, {"number": 326, "content": "      double pos =  joint->getPosition1();", "is_target": false}, {"number": 327, "content": "      return 2*(pos-min)/(max-min) - 1;", "is_target": false}]}, "778": {"lines": [{"number": 320, "content": "        however 0 is just in the center of min and max", "is_target": false}, {"number": 321, "content": "    */", "is_target": false}, {"number": 322, "content": "    virtual void set(double pos);", "is_target": false}, {"number": 323, "content": "", "is_target": false}, {"number": 324, "content": "    /** returns the position of the servo in ranges [-1, 1] (scaled by min, max, centered)*/", "is_target": false}, {"number": 325, "content": "    virtual double get() const {", "is_target": true}, {"number": 326, "content": "      double pos =  joint->getPosition1();", "is_target": false}, {"number": 327, "content": "      return 2*(pos-min)/(max-min) - 1;", "is_target": false}, {"number": 328, "content": "    }", "is_target": false}, {"number": 329, "content": "", "is_target": false}, {"number": 330, "content": "  protected:", "is_target": false}]}, "779": {"lines": [{"number": 238, "content": "    virtual void setMaxVel(double maxVel) {", "is_target": false}, {"number": 239, "content": "      this->maxVel = maxVel;", "is_target": false}, {"number": 240, "content": "      pid.KP=maxVel/2;", "is_target": false}, {"number": 241, "content": "    }", "is_target": false}, {"number": 242, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 243, "content": "    virtual double getMaxVel() {", "is_target": true}, {"number": 244, "content": "      return maxVel;", "is_target": false}, {"number": 245, "content": "    }", "is_target": false}, {"number": 246, "content": "", "is_target": false}, {"number": 247, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 248, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}]}, "780": {"lines": [{"number": 309, "content": "    virtual void setMaxVel(double maxVel) {", "is_target": false}, {"number": 310, "content": "      this->maxVel = maxVel;", "is_target": false}, {"number": 311, "content": "      pid.KP=maxVel/2;", "is_target": false}, {"number": 312, "content": "    }", "is_target": false}, {"number": 313, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 314, "content": "    virtual double getMaxVel() {", "is_target": true}, {"number": 315, "content": "      return maxVel;", "is_target": false}, {"number": 316, "content": "    }", "is_target": false}, {"number": 317, "content": "", "is_target": false}, {"number": 318, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 319, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}]}, "781": {"lines": [{"number": 178, "content": "    /** returns the damping of the servo*/", "is_target": false}, {"number": 179, "content": "    virtual double& offsetCanceling() {", "is_target": false}, {"number": 180, "content": "      return pid1.KI;", "is_target": false}, {"number": 181, "content": "    };", "is_target": false}, {"number": 182, "content": "", "is_target": false}, {"number": 183, "content": "    virtual void setMinMax1(double _min, double _max) {", "is_target": true}, {"number": 184, "content": "      min1=_min;", "is_target": false}, {"number": 185, "content": "      max1=_max;", "is_target": false}, {"number": 186, "content": "      joint->setParam(dParamLoStop, _min  - fabs(_min) * (jointLimit-1));", "is_target": false}, {"number": 187, "content": "      joint->setParam(dParamHiStop, _max  + fabs(_max) * (jointLimit-1));", "is_target": false}, {"number": 188, "content": "    }", "is_target": false}]}, "782": {"lines": [{"number": 185, "content": "      max1=_max;", "is_target": false}, {"number": 186, "content": "      joint->setParam(dParamLoStop, _min  - fabs(_min) * (jointLimit-1));", "is_target": false}, {"number": 187, "content": "      joint->setParam(dParamHiStop, _max  + fabs(_max) * (jointLimit-1));", "is_target": false}, {"number": 188, "content": "    }", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "    virtual void setMinMax2(double _min, double _max) {", "is_target": true}, {"number": 191, "content": "      min2=_min;", "is_target": false}, {"number": 192, "content": "      max2=_max;", "is_target": false}, {"number": 193, "content": "      joint->setParam(dParamLoStop2, _min  - fabs(_min) * (jointLimit-1));", "is_target": false}, {"number": 194, "content": "      joint->setParam(dParamHiStop2, _max  + fabs(_max) * (jointLimit-1));", "is_target": false}, {"number": 195, "content": "    }", "is_target": false}]}, "783": {"lines": [{"number": 173, "content": "  OdeHandle odeHandle;", "is_target": false}, {"number": 174, "content": "  OsgHandle osgHandle; ", "is_target": false}, {"number": 175, "content": "  ", "is_target": false}, {"number": 176, "content": "", "is_target": false}, {"number": 177, "content": "  /// is called to destroy the object. The default implementation is to delete all primitives in __PLACEHOLDER_5__. ", "is_target": false}, {"number": 178, "content": "  virtual void destroy();", "is_target": true}, {"number": 179, "content": "", "is_target": false}, {"number": 180, "content": "  /// overload this function to create the obstactle. All primitives should go into the list __PLACEHOLDER_6__", "is_target": false}, {"number": 181, "content": "  virtual void create();", "is_target": false}, {"number": 182, "content": "", "is_target": false}, {"number": 183, "content": "};", "is_target": false}]}, "784": {"lines": [{"number": 67, "content": "    /** @deprecated obsolete provide globaldata, see the other constructors", "is_target": false}, {"number": 68, "content": "     */", "is_target": false}, {"number": 69, "content": "    explicit OdeAgent(const ::PlotOption& plotOption = ::PlotOption(::PlotMode::NoPlot), double noisefactor = 1, const std::string& name = \"OdeAgent\", const std::string& revision = \"$ID$\") __attribute__ ((deprecated));", "is_target": false}, {"number": 70, "content": "    /** @deprecated obsolete provide globaldata, see the other constructors", "is_target": false}, {"number": 71, "content": "     */", "is_target": false}, {"number": 72, "content": "    OdeAgent(const std::list<::PlotOption>& plotOptions, double noisefactor = 1, const std::string& name = \"OdeAgent\", const std::string& revision = \"$ID$\") __attribute__ ((deprecated));", "is_target": true}, {"number": 73, "content": "    /** The plotoptions are taken from globaldata", "is_target": false}, {"number": 74, "content": "        @param noisefactor factor for sensor noise for this agent", "is_target": false}, {"number": 75, "content": "     */", "is_target": false}, {"number": 76, "content": "    OdeAgent(const GlobalData& globalData, double noisefactor = 1, const std::string& name = \"OdeAgent\", const std::string& revision = \"\");", "is_target": false}, {"number": 77, "content": "    /** Provided for convinience. A single plotoption is used as given by plotOption */", "is_target": false}]}, "785": {"lines": [{"number": 71, "content": "     */", "is_target": false}, {"number": 72, "content": "    OdeAgent(const std::list<::PlotOption>& plotOptions, double noisefactor = 1, const std::string& name = \"OdeAgent\", const std::string& revision = \"$ID$\") __attribute__ ((deprecated));", "is_target": false}, {"number": 73, "content": "    /** The plotoptions are taken from globaldata", "is_target": false}, {"number": 74, "content": "        @param noisefactor factor for sensor noise for this agent", "is_target": false}, {"number": 75, "content": "     */", "is_target": false}, {"number": 76, "content": "    OdeAgent(const GlobalData& globalData, double noisefactor = 1, const std::string& name = \"OdeAgent\", const std::string& revision = \"\");", "is_target": true}, {"number": 77, "content": "    /** Provided for convinience. A single plotoption is used as given by plotOption */", "is_target": false}, {"number": 78, "content": "    OdeAgent(const GlobalData& globalData, const ::PlotOption& plotOption, double noisefactor = 1, const std::string& name = \"OdeAgent\", const std::string& revision = \"\");", "is_target": false}, {"number": 79, "content": "    /** Provided for convinience. The plotoptions are taken from the given plotOptions", "is_target": false}, {"number": 80, "content": "        (and not from globaldata, if you wish to overwrite them)", "is_target": false}, {"number": 81, "content": "    */", "is_target": false}]}, "786": {"lines": [{"number": 78, "content": "    OdeAgent(const GlobalData& globalData, const ::PlotOption& plotOption, double noisefactor = 1, const std::string& name = \"OdeAgent\", const std::string& revision = \"\");", "is_target": false}, {"number": 79, "content": "    /** Provided for convinience. The plotoptions are taken from the given plotOptions", "is_target": false}, {"number": 80, "content": "        (and not from globaldata, if you wish to overwrite them)", "is_target": false}, {"number": 81, "content": "    */", "is_target": false}, {"number": 82, "content": "    OdeAgent(const GlobalData& globalData, const PlotOptionList& plotOptions, double noisefactor = 1, const std::string& name = \"OdeAgent\", const std::string& revision = \"\");", "is_target": false}, {"number": 83, "content": "    virtual ~OdeAgent();", "is_target": true}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "    // Bring base class init methods into scope", "is_target": false}, {"number": 86, "content": "    using Agent::init;", "is_target": false}, {"number": 87, "content": "    ", "is_target": false}, {"number": 88, "content": "    /** initializes the object with the given controller, robot and wiring", "is_target": false}]}, "787": {"lines": [{"number": 91, "content": "    virtual bool init(AbstractController* controller, OdeRobot* robot, AbstractWiring* wiring,", "is_target": false}, {"number": 92, "content": "                      long int seed = 0) {", "is_target": false}, {"number": 93, "content": "      return Agent::init(controller, robot, wiring, seed);", "is_target": false}, {"number": 94, "content": "    }", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "    virtual void step(double noise, double time);", "is_target": true}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "    /**", "is_target": false}, {"number": 99, "content": "     * Returns a pointer to the robot.", "is_target": false}, {"number": 100, "content": "     */", "is_target": false}, {"number": 101, "content": "    virtual OdeRobot* getRobot() { return static_cast<OdeRobot*>(robot);}", "is_target": false}]}, "788": {"lines": [{"number": 115, "content": "    virtual void setTraceThickness(int tracethickness) { }", "is_target": false}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "    /// adds tracking for individual primitives", "is_target": false}, {"number": 118, "content": "    virtual void addTracking(unsigned int primitiveIndex,const TrackRobot& trackrobot,", "is_target": false}, {"number": 119, "content": "                             const Color& color);", "is_target": false}, {"number": 120, "content": "    virtual void setTrackOptions(const TrackRobot& trackrobot);", "is_target": true}, {"number": 121, "content": "    virtual bool stopTracking();", "is_target": false}, {"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "    /****** STOREABLE **********/", "is_target": false}, {"number": 125, "content": "    virtual bool store(FILE* f)  const override;", "is_target": false}]}, "789": {"lines": [{"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "    /// adds tracking for individual primitives", "is_target": false}, {"number": 118, "content": "    virtual void addTracking(unsigned int primitiveIndex,const TrackRobot& trackrobot,", "is_target": false}, {"number": 119, "content": "                             const Color& color);", "is_target": false}, {"number": 120, "content": "    virtual void setTrackOptions(const TrackRobot& trackrobot);", "is_target": false}, {"number": 121, "content": "    virtual bool stopTracking();", "is_target": true}, {"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "    /****** STOREABLE **********/", "is_target": false}, {"number": 125, "content": "    virtual bool store(FILE* f)  const override;", "is_target": false}, {"number": 126, "content": "    virtual bool restore(FILE* f);", "is_target": false}]}, "790": {"lines": [{"number": 121, "content": "    virtual bool stopTracking();", "is_target": false}, {"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "    /****** STOREABLE **********/", "is_target": false}, {"number": 125, "content": "    virtual bool store(FILE* f)  const override;", "is_target": false}, {"number": 126, "content": "    virtual bool restore(FILE* f);", "is_target": true}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "", "is_target": false}, {"number": 129, "content": "    /****** OPERATORS *********/", "is_target": false}, {"number": 130, "content": "    /// adds an operator to the agent (the operator is deleted on destruction of the agent!)", "is_target": false}, {"number": 131, "content": "    virtual void addOperator(Operator* o, bool addToConfigurable = true );", "is_target": false}]}, "791": {"lines": [{"number": 223, "content": "", "is_target": false}, {"number": 224, "content": "  class TrackablePrimitive : public Trackable {", "is_target": false}, {"number": 225, "content": "  public:", "is_target": false}, {"number": 226, "content": "    TrackablePrimitive(Primitive* p, const std::string& name)", "is_target": false}, {"number": 227, "content": "      : p(p), name(name) { }", "is_target": false}, {"number": 228, "content": "    virtual std::string getTrackableName() const { return name; };", "is_target": true}, {"number": 229, "content": "    virtual Position getPosition() const { return p->getPosition().toPosition(); };", "is_target": false}, {"number": 230, "content": "    virtual Position getSpeed() const { return p->getVel().toPosition(); };", "is_target": false}, {"number": 231, "content": "    virtual Position getAngularSpeed() const { return p->getAngularVel().toPosition(); };", "is_target": false}, {"number": 232, "content": "    virtual matrix::Matrix getOrientation() const {", "is_target": false}, {"number": 233, "content": "      fprintf(stderr, \"TrackablePrimitive:: getOrientation(): not implemented\\n\");", "is_target": false}]}, "792": {"lines": [{"number": 224, "content": "  class TrackablePrimitive : public Trackable {", "is_target": false}, {"number": 225, "content": "  public:", "is_target": false}, {"number": 226, "content": "    TrackablePrimitive(Primitive* p, const std::string& name)", "is_target": false}, {"number": 227, "content": "      : p(p), name(name) { }", "is_target": false}, {"number": 228, "content": "    virtual std::string getTrackableName() const { return name; };", "is_target": false}, {"number": 229, "content": "    virtual Position getPosition() const { return p->getPosition().toPosition(); };", "is_target": true}, {"number": 230, "content": "    virtual Position getSpeed() const { return p->getVel().toPosition(); };", "is_target": false}, {"number": 231, "content": "    virtual Position getAngularSpeed() const { return p->getAngularVel().toPosition(); };", "is_target": false}, {"number": 232, "content": "    virtual matrix::Matrix getOrientation() const {", "is_target": false}, {"number": 233, "content": "      fprintf(stderr, \"TrackablePrimitive:: getOrientation(): not implemented\\n\");", "is_target": false}, {"number": 234, "content": "      return matrix::Matrix(3,3);", "is_target": false}]}, "793": {"lines": [{"number": 225, "content": "  public:", "is_target": false}, {"number": 226, "content": "    TrackablePrimitive(Primitive* p, const std::string& name)", "is_target": false}, {"number": 227, "content": "      : p(p), name(name) { }", "is_target": false}, {"number": 228, "content": "    virtual std::string getTrackableName() const { return name; };", "is_target": false}, {"number": 229, "content": "    virtual Position getPosition() const { return p->getPosition().toPosition(); };", "is_target": false}, {"number": 230, "content": "    virtual Position getSpeed() const { return p->getVel().toPosition(); };", "is_target": true}, {"number": 231, "content": "    virtual Position getAngularSpeed() const { return p->getAngularVel().toPosition(); };", "is_target": false}, {"number": 232, "content": "    virtual matrix::Matrix getOrientation() const {", "is_target": false}, {"number": 233, "content": "      fprintf(stderr, \"TrackablePrimitive:: getOrientation(): not implemented\\n\");", "is_target": false}, {"number": 234, "content": "      return matrix::Matrix(3,3);", "is_target": false}, {"number": 235, "content": "    };", "is_target": false}]}, "794": {"lines": [{"number": 226, "content": "    TrackablePrimitive(Primitive* p, const std::string& name)", "is_target": false}, {"number": 227, "content": "      : p(p), name(name) { }", "is_target": false}, {"number": 228, "content": "    virtual std::string getTrackableName() const { return name; };", "is_target": false}, {"number": 229, "content": "    virtual Position getPosition() const { return p->getPosition().toPosition(); };", "is_target": false}, {"number": 230, "content": "    virtual Position getSpeed() const { return p->getVel().toPosition(); };", "is_target": false}, {"number": 231, "content": "    virtual Position getAngularSpeed() const { return p->getAngularVel().toPosition(); };", "is_target": true}, {"number": 232, "content": "    virtual matrix::Matrix getOrientation() const {", "is_target": false}, {"number": 233, "content": "      fprintf(stderr, \"TrackablePrimitive:: getOrientation(): not implemented\\n\");", "is_target": false}, {"number": 234, "content": "      return matrix::Matrix(3,3);", "is_target": false}, {"number": 235, "content": "    };", "is_target": false}, {"number": 236, "content": "", "is_target": false}]}, "795": {"lines": [{"number": 227, "content": "      : p(p), name(name) { }", "is_target": false}, {"number": 228, "content": "    virtual std::string getTrackableName() const { return name; };", "is_target": false}, {"number": 229, "content": "    virtual Position getPosition() const { return p->getPosition().toPosition(); };", "is_target": false}, {"number": 230, "content": "    virtual Position getSpeed() const { return p->getVel().toPosition(); };", "is_target": false}, {"number": 231, "content": "    virtual Position getAngularSpeed() const { return p->getAngularVel().toPosition(); };", "is_target": false}, {"number": 232, "content": "    virtual matrix::Matrix getOrientation() const {", "is_target": true}, {"number": 233, "content": "      fprintf(stderr, \"TrackablePrimitive:: getOrientation(): not implemented\\n\");", "is_target": false}, {"number": 234, "content": "      return matrix::Matrix(3,3);", "is_target": false}, {"number": 235, "content": "    };", "is_target": false}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "  protected:", "is_target": false}]}, "796": {"lines": [{"number": 42, "content": "    TwoAxisServo(TwoAxisJoint* joint, double _min1, double _max1, double power1,", "is_target": false}, {"number": 43, "content": "                 double _min2, double _max2, double power2,", "is_target": false}, {"number": 44, "content": "                 double damp=0.2, double integration=2, double maxVel=10.0,", "is_target": false}, {"number": 45, "content": "                 double jointLimit = 1.3, bool minmaxCheck=true);", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    virtual ~TwoAxisServo();", "is_target": true}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 50, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max", "is_target": false}, {"number": 51, "content": "    */", "is_target": false}, {"number": 52, "content": "    virtual void set(double pos1, double pos2);", "is_target": false}]}, "797": {"lines": [{"number": 229, "content": "    TwoAxisServoCentered(TwoAxisJoint* joint, double _min1, double _max1, double power1,", "is_target": false}, {"number": 230, "content": "                         double _min2, double _max2, double power2,", "is_target": false}, {"number": 231, "content": "                         double damp=0.2, double integration=2, double maxVel=10.0,", "is_target": false}, {"number": 232, "content": "                         double jointLimit = 1.3);", "is_target": false}, {"number": 233, "content": "", "is_target": false}, {"number": 234, "content": "    virtual ~TwoAxisServoCentered();", "is_target": true}, {"number": 235, "content": "", "is_target": false}, {"number": 236, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 237, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}, {"number": 238, "content": "        however 0 is just in the center of min and max", "is_target": false}, {"number": 239, "content": "    */", "is_target": false}]}, "798": {"lines": [{"number": 235, "content": "", "is_target": false}, {"number": 236, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 237, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}, {"number": 238, "content": "        however 0 is just in the center of min and max", "is_target": false}, {"number": 239, "content": "    */", "is_target": false}, {"number": 240, "content": "    virtual void set(double pos1, double pos2);", "is_target": true}, {"number": 241, "content": "", "is_target": false}, {"number": 242, "content": "    /** returns the position of the servo (joint) of 1. axis in ranges [-1, 1]", "is_target": false}, {"number": 243, "content": "        (scaled by min1, max1, centered)*/", "is_target": false}, {"number": 244, "content": "    virtual double get1() const {", "is_target": false}, {"number": 245, "content": "      double pos =  joint->getPosition1();", "is_target": false}]}, "799": {"lines": [{"number": 239, "content": "    */", "is_target": false}, {"number": 240, "content": "    virtual void set(double pos1, double pos2);", "is_target": false}, {"number": 241, "content": "", "is_target": false}, {"number": 242, "content": "    /** returns the position of the servo (joint) of 1. axis in ranges [-1, 1]", "is_target": false}, {"number": 243, "content": "        (scaled by min1, max1, centered)*/", "is_target": false}, {"number": 244, "content": "    virtual double get1() const {", "is_target": true}, {"number": 245, "content": "      double pos =  joint->getPosition1();", "is_target": false}, {"number": 246, "content": "      return 2*(pos-min1)/(max1-min1) - 1;", "is_target": false}, {"number": 247, "content": "    }", "is_target": false}, {"number": 248, "content": "", "is_target": false}, {"number": 249, "content": "", "is_target": false}]}, "800": {"lines": [{"number": 247, "content": "    }", "is_target": false}, {"number": 248, "content": "", "is_target": false}, {"number": 249, "content": "", "is_target": false}, {"number": 250, "content": "    /** returns the position of the servo (joint) of 2. axis in ranges [-1, 1]", "is_target": false}, {"number": 251, "content": "        (scaled by min2, max2, centered)*/", "is_target": false}, {"number": 252, "content": "    virtual double get2() const {", "is_target": true}, {"number": 253, "content": "      double pos =  joint->getPosition2();", "is_target": false}, {"number": 254, "content": "      return 2*(pos-min2)/(max2-min2) - 1;", "is_target": false}, {"number": 255, "content": "    }", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "  };", "is_target": false}]}, "801": {"lines": [{"number": 91, "content": "      virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "  };", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "} // end namespace lpzrobots", "is_target": true}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "// End of header guard", "is_target": false}, {"number": 100, "content": "#endif", "is_target": false}]}, "802": {"lines": [{"number": 277, "content": "    TwoAxisServoVel(const OdeHandle& odeHandle,", "is_target": false}, {"number": 278, "content": "                    TwoAxisJoint* joint, double _min1, double _max1, double power1,", "is_target": false}, {"number": 279, "content": "                    double _min2, double _max2, double power2,", "is_target": false}, {"number": 280, "content": "                    double damp=0.05, double maxVel=10.0, double jointLimit = 1.3);", "is_target": false}, {"number": 281, "content": "", "is_target": false}, {"number": 282, "content": "    virtual ~TwoAxisServoVel();", "is_target": true}, {"number": 283, "content": "", "is_target": false}, {"number": 284, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) {", "is_target": false}, {"number": 285, "content": "      if(joint) { assert(joint==this->joint); } // we cannot attach the servo to a new joint", "is_target": false}, {"number": 286, "content": "    }", "is_target": false}, {"number": 287, "content": "", "is_target": false}]}, "803": {"lines": [{"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "private:", "is_target": false}, {"number": 147, "content": "  // saves the actual position AND rotation of the segment", "is_target": false}, {"number": 148, "content": "  Matrix pos;", "is_target": false}, {"number": 149, "content": "  Matrix invpos;", "is_target": false}, {"number": 150, "content": "};", "is_target": true}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "#endif", "is_target": false}]}, "804": {"lines": [{"number": 279, "content": "                    double _min2, double _max2, double power2,", "is_target": false}, {"number": 280, "content": "                    double damp=0.05, double maxVel=10.0, double jointLimit = 1.3);", "is_target": false}, {"number": 281, "content": "", "is_target": false}, {"number": 282, "content": "    virtual ~TwoAxisServoVel();", "is_target": false}, {"number": 283, "content": "", "is_target": false}, {"number": 284, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) {", "is_target": true}, {"number": 285, "content": "      if(joint) { assert(joint==this->joint); } // we cannot attach the servo to a new joint", "is_target": false}, {"number": 286, "content": "    }", "is_target": false}, {"number": 287, "content": "", "is_target": false}, {"number": 288, "content": "", "is_target": false}, {"number": 289, "content": "    virtual void setPower(double _power1, double _power2);", "is_target": false}]}, "805": {"lines": [{"number": 130, "content": "  }", "is_target": false}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "  virtual void usage() const {", "is_target": false}, {"number": 133, "content": "    printf(\"\\t-track\\tenable tracking of the position of the robot\\n\");", "is_target": false}, {"number": 134, "content": "  }", "is_target": false}, {"number": 135, "content": "};", "is_target": true}, {"number": 136, "content": "", "is_target": false}, {"number": 137, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 138, "content": "{", "is_target": false}, {"number": 139, "content": "  ThisSim sim;", "is_target": false}, {"number": 140, "content": "  track = sim.contains(argv, argc, \"-track\"); // check whether cmd-line contains -track", "is_target": false}]}, "806": {"lines": [{"number": 284, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) {", "is_target": false}, {"number": 285, "content": "      if(joint) { assert(joint==this->joint); } // we cannot attach the servo to a new joint", "is_target": false}, {"number": 286, "content": "    }", "is_target": false}, {"number": 287, "content": "", "is_target": false}, {"number": 288, "content": "", "is_target": false}, {"number": 289, "content": "    virtual void setPower(double _power1, double _power2);", "is_target": true}, {"number": 290, "content": "", "is_target": false}, {"number": 291, "content": "    virtual void setPower1(double _power1);", "is_target": false}, {"number": 292, "content": "", "is_target": false}, {"number": 293, "content": "    virtual void setPower2(double _power2);", "is_target": false}, {"number": 294, "content": "", "is_target": false}]}, "808": {"lines": [{"number": 286, "content": "    }", "is_target": false}, {"number": 287, "content": "", "is_target": false}, {"number": 288, "content": "", "is_target": false}, {"number": 289, "content": "    virtual void setPower(double _power1, double _power2);", "is_target": false}, {"number": 290, "content": "", "is_target": false}, {"number": 291, "content": "    virtual void setPower1(double _power1);", "is_target": true}, {"number": 292, "content": "", "is_target": false}, {"number": 293, "content": "    virtual void setPower2(double _power2);", "is_target": false}, {"number": 294, "content": "", "is_target": false}, {"number": 295, "content": "    virtual double getPower1() {", "is_target": false}, {"number": 296, "content": "      return power1;", "is_target": false}]}, "809": {"lines": [{"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "private:", "is_target": false}, {"number": 147, "content": "  // saves the actual position AND rotation of the segment", "is_target": false}, {"number": 148, "content": "  Matrix pos;", "is_target": false}, {"number": 149, "content": "  Matrix invpos;", "is_target": false}, {"number": 150, "content": "};", "is_target": true}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "#endif", "is_target": false}]}, "810": {"lines": [{"number": 288, "content": "", "is_target": false}, {"number": 289, "content": "    virtual void setPower(double _power1, double _power2);", "is_target": false}, {"number": 290, "content": "", "is_target": false}, {"number": 291, "content": "    virtual void setPower1(double _power1);", "is_target": false}, {"number": 292, "content": "", "is_target": false}, {"number": 293, "content": "    virtual void setPower2(double _power2);", "is_target": true}, {"number": 294, "content": "", "is_target": false}, {"number": 295, "content": "    virtual double getPower1() {", "is_target": false}, {"number": 296, "content": "      return power1;", "is_target": false}, {"number": 297, "content": "    };", "is_target": false}, {"number": 298, "content": "    virtual double getPower2() {", "is_target": false}]}, "811": {"lines": [{"number": 91, "content": "      virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "  };", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "} // end namespace lpzrobots", "is_target": true}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "// End of header guard", "is_target": false}, {"number": 100, "content": "#endif", "is_target": false}]}, "812": {"lines": [{"number": 130, "content": "  }", "is_target": false}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "  virtual void usage() const {", "is_target": false}, {"number": 133, "content": "    printf(\"\\t-track\\tenable tracking of the position of the robot\\n\");", "is_target": false}, {"number": 134, "content": "  }", "is_target": false}, {"number": 135, "content": "};", "is_target": true}, {"number": 136, "content": "", "is_target": false}, {"number": 137, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 138, "content": "{", "is_target": false}, {"number": 139, "content": "  ThisSim sim;", "is_target": false}, {"number": 140, "content": "  track = sim.contains(argv, argc, \"-track\"); // check whether cmd-line contains -track", "is_target": false}]}, "813": {"lines": [{"number": 290, "content": "", "is_target": false}, {"number": 291, "content": "    virtual void setPower1(double _power1);", "is_target": false}, {"number": 292, "content": "", "is_target": false}, {"number": 293, "content": "    virtual void setPower2(double _power2);", "is_target": false}, {"number": 294, "content": "", "is_target": false}, {"number": 295, "content": "    virtual double getPower1() {", "is_target": true}, {"number": 296, "content": "      return power1;", "is_target": false}, {"number": 297, "content": "    };", "is_target": false}, {"number": 298, "content": "    virtual double getPower2() {", "is_target": false}, {"number": 299, "content": "      return power2;", "is_target": false}, {"number": 300, "content": "    };", "is_target": false}]}, "814": {"lines": [{"number": 293, "content": "    virtual void setPower2(double _power2);", "is_target": false}, {"number": 294, "content": "", "is_target": false}, {"number": 295, "content": "    virtual double getPower1() {", "is_target": false}, {"number": 296, "content": "      return power1;", "is_target": false}, {"number": 297, "content": "    };", "is_target": false}, {"number": 298, "content": "    virtual double getPower2() {", "is_target": true}, {"number": 299, "content": "      return power2;", "is_target": false}, {"number": 300, "content": "    };", "is_target": false}, {"number": 301, "content": "", "is_target": false}, {"number": 302, "content": "    virtual double getDamping1() {", "is_target": false}, {"number": 303, "content": "      return damp;", "is_target": false}]}, "815": {"lines": [{"number": 297, "content": "    };", "is_target": false}, {"number": 298, "content": "    virtual double getPower2() {", "is_target": false}, {"number": 299, "content": "      return power2;", "is_target": false}, {"number": 300, "content": "    };", "is_target": false}, {"number": 301, "content": "", "is_target": false}, {"number": 302, "content": "    virtual double getDamping1() {", "is_target": true}, {"number": 303, "content": "      return damp;", "is_target": false}, {"number": 304, "content": "    };", "is_target": false}, {"number": 305, "content": "    virtual double getDamping2() {", "is_target": false}, {"number": 306, "content": "      return damp;", "is_target": false}, {"number": 307, "content": "    };", "is_target": false}]}, "816": {"lines": [{"number": 300, "content": "    };", "is_target": false}, {"number": 301, "content": "", "is_target": false}, {"number": 302, "content": "    virtual double getDamping1() {", "is_target": false}, {"number": 303, "content": "      return damp;", "is_target": false}, {"number": 304, "content": "    };", "is_target": false}, {"number": 305, "content": "    virtual double getDamping2() {", "is_target": true}, {"number": 306, "content": "      return damp;", "is_target": false}, {"number": 307, "content": "    };", "is_target": false}, {"number": 308, "content": "    virtual void setDamping1(double _damp) {", "is_target": false}, {"number": 309, "content": "      damp = clip(_damp,0.0,1.0);", "is_target": false}, {"number": 310, "content": "    };", "is_target": false}]}, "817": {"lines": [{"number": 303, "content": "      return damp;", "is_target": false}, {"number": 304, "content": "    };", "is_target": false}, {"number": 305, "content": "    virtual double getDamping2() {", "is_target": false}, {"number": 306, "content": "      return damp;", "is_target": false}, {"number": 307, "content": "    };", "is_target": false}, {"number": 308, "content": "    virtual void setDamping1(double _damp) {", "is_target": true}, {"number": 309, "content": "      damp = clip(_damp,0.0,1.0);", "is_target": false}, {"number": 310, "content": "    };", "is_target": false}, {"number": 311, "content": "    virtual void setDamping2(double _damp) {", "is_target": false}, {"number": 312, "content": "      setDamping1(_damp);", "is_target": false}, {"number": 313, "content": "    };", "is_target": false}]}, "818": {"lines": [{"number": 306, "content": "      return damp;", "is_target": false}, {"number": 307, "content": "    };", "is_target": false}, {"number": 308, "content": "    virtual void setDamping1(double _damp) {", "is_target": false}, {"number": 309, "content": "      damp = clip(_damp,0.0,1.0);", "is_target": false}, {"number": 310, "content": "    };", "is_target": false}, {"number": 311, "content": "    virtual void setDamping2(double _damp) {", "is_target": true}, {"number": 312, "content": "      setDamping1(_damp);", "is_target": false}, {"number": 313, "content": "    };", "is_target": false}, {"number": 314, "content": "", "is_target": false}, {"number": 315, "content": "    /** offetCanceling does not exist for this type of servo */", "is_target": false}, {"number": 316, "content": "    virtual double& offsetCanceling() {", "is_target": false}]}, "819": {"lines": [{"number": 311, "content": "    virtual void setDamping2(double _damp) {", "is_target": false}, {"number": 312, "content": "      setDamping1(_damp);", "is_target": false}, {"number": 313, "content": "    };", "is_target": false}, {"number": 314, "content": "", "is_target": false}, {"number": 315, "content": "    /** offetCanceling does not exist for this type of servo */", "is_target": false}, {"number": 316, "content": "    virtual double& offsetCanceling() {", "is_target": true}, {"number": 317, "content": "      dummy=0;", "is_target": false}, {"number": 318, "content": "      return dummy;", "is_target": false}, {"number": 319, "content": "    };", "is_target": false}, {"number": 320, "content": "", "is_target": false}, {"number": 321, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}]}, "820": {"lines": [{"number": 317, "content": "      dummy=0;", "is_target": false}, {"number": 318, "content": "      return dummy;", "is_target": false}, {"number": 319, "content": "    };", "is_target": false}, {"number": 320, "content": "", "is_target": false}, {"number": 321, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 322, "content": "    virtual void setMaxVel(double maxVel) {", "is_target": true}, {"number": 323, "content": "      this->maxVel = maxVel;", "is_target": false}, {"number": 324, "content": "      pid1.KP=maxVel/2;", "is_target": false}, {"number": 325, "content": "      pid2.KP=maxVel/2;", "is_target": false}, {"number": 326, "content": "    };", "is_target": false}, {"number": 327, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}]}, "821": {"lines": [{"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "private:", "is_target": false}, {"number": 147, "content": "  // saves the actual position AND rotation of the segment", "is_target": false}, {"number": 148, "content": "  Matrix pos;", "is_target": false}, {"number": 149, "content": "  Matrix invpos;", "is_target": false}, {"number": 150, "content": "};", "is_target": true}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "#endif", "is_target": false}]}, "822": {"lines": [{"number": 323, "content": "      this->maxVel = maxVel;", "is_target": false}, {"number": 324, "content": "      pid1.KP=maxVel/2;", "is_target": false}, {"number": 325, "content": "      pid2.KP=maxVel/2;", "is_target": false}, {"number": 326, "content": "    };", "is_target": false}, {"number": 327, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 328, "content": "    virtual double getMaxVel() {", "is_target": true}, {"number": 329, "content": "      return maxVel;", "is_target": false}, {"number": 330, "content": "    };", "is_target": false}, {"number": 331, "content": "", "is_target": false}, {"number": 332, "content": "", "is_target": false}, {"number": 333, "content": "    /** sets the set point of the servo.", "is_target": false}]}, "823": {"lines": [{"number": 332, "content": "", "is_target": false}, {"number": 333, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 334, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}, {"number": 335, "content": "        however 0 is just in the center of min and max", "is_target": false}, {"number": 336, "content": "    */", "is_target": false}, {"number": 337, "content": "    virtual void set(double pos1, double pos2);", "is_target": true}, {"number": 338, "content": "", "is_target": false}, {"number": 339, "content": "  protected:", "is_target": false}, {"number": 340, "content": "    AngularMotor2Axis motor;", "is_target": false}, {"number": 341, "content": "    double dummy;", "is_target": false}, {"number": 342, "content": "    double damp;", "is_target": false}]}, "824": {"lines": [{"number": 323, "content": "      this->maxVel = maxVel;", "is_target": false}, {"number": 324, "content": "      pid1.KP=maxVel/2;", "is_target": false}, {"number": 325, "content": "      pid2.KP=maxVel/2;", "is_target": false}, {"number": 326, "content": "    };", "is_target": false}, {"number": 327, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 328, "content": "    virtual double getMaxVel() {", "is_target": true}, {"number": 329, "content": "      return maxVel;", "is_target": false}, {"number": 330, "content": "    };", "is_target": false}, {"number": 331, "content": "", "is_target": false}, {"number": 332, "content": "", "is_target": false}, {"number": 333, "content": "    /** sets the set point of the servo.", "is_target": false}]}, "825": {"lines": [{"number": 36, "content": "  public:", "is_target": false}, {"number": 37, "content": "", "is_target": false}, {"number": 38, "content": "    // creates new instance of OdeConfig with default values", "is_target": false}, {"number": 39, "content": "    OdeConfig();", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "    virtual ~OdeConfig() {}", "is_target": true}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "    virtual long int getRandomSeed() const { return randomSeed; }", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "    virtual void setRandomSeed(long int seed) {", "is_target": false}, {"number": 46, "content": "      this->randomSeed=seed;", "is_target": false}]}, "826": {"lines": [{"number": 120, "content": "", "is_target": false}, {"number": 121, "content": "      /// returns watched agent", "is_target": false}, {"number": 122, "content": "      virtual OdeAgent* getWatchedAgent() const;", "is_target": false}, {"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "      /// called if agents list changed", "is_target": false}, {"number": 125, "content": "      virtual void doOnCallBack(BackCaller* source, BackCaller::CallbackableType type", "is_target": true}, {"number": 126, "content": "                                = BackCaller::DEFAULT_CALLBACKABLE_TYPE);", "is_target": false}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "    protected:", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "      virtual ~CameraManipulator();", "is_target": false}]}, "827": {"lines": [{"number": 36, "content": "  RandomObstacles::RandomObstacles(const OdeHandle& odeHandle, const OsgHandle& osgHandle, ", "is_target": false}, {"number": 37, "content": "                                   const RandomObstaclesConf& conf)", "is_target": false}, {"number": 38, "content": "    : AbstractObstacle(odeHandle, osgHandle), conf(conf) {       ", "is_target": false}, {"number": 39, "content": "    index=0;", "is_target": false}, {"number": 40, "content": "    obstacle_exists = true;", "is_target": false}, {"number": 41, "content": "    pose = conf.pose;", "is_target": true}, {"number": 42, "content": "  };", "is_target": false}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "  void RandomObstacles::setPose(const osg::Matrix& pose){", "is_target": false}, {"number": 45, "content": "    this->pose = pose;      ", "is_target": false}, {"number": 46, "content": "  };", "is_target": false}]}, "828": {"lines": [{"number": 125, "content": "      virtual void doOnCallBack(BackCaller* source, BackCaller::CallbackableType type", "is_target": false}, {"number": 126, "content": "                                = BackCaller::DEFAULT_CALLBACKABLE_TYPE);", "is_target": false}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "    protected:", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "      virtual ~CameraManipulator();", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "      /** Reset the internal GUIEvent stack.*/", "is_target": false}, {"number": 133, "content": "      virtual void flushMouseEventStack();", "is_target": false}, {"number": 134, "content": "      /** Add the current mouse GUIEvent to internal stack.*/", "is_target": false}, {"number": 135, "content": "      virtual void addMouseEvent(const osgGA::GUIEventAdapter& ea);", "is_target": false}]}, "829": {"lines": [{"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    CameraManipulatorFollow(osg::Node* node, GlobalData& global, CameraHandle& cameraHandle);", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  protected:", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual ~CameraManipulatorFollow();", "is_target": true}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    /** This handles robot movements, so that the camera movemenent is right affected.", "is_target": false}, {"number": 57, "content": "        should be overwritten by new cameramanipulator", "is_target": false}, {"number": 58, "content": "    */", "is_target": false}, {"number": 59, "content": "    virtual void calcMovementByAgent();", "is_target": false}]}, "830": {"lines": [{"number": 54, "content": "    virtual ~CameraManipulatorFollow();", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    /** This handles robot movements, so that the camera movemenent is right affected.", "is_target": false}, {"number": 57, "content": "        should be overwritten by new cameramanipulator", "is_target": false}, {"number": 58, "content": "    */", "is_target": false}, {"number": 59, "content": "    virtual void calcMovementByAgent();", "is_target": true}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    /** Sets the right view and eye if the robot has changed.", "is_target": false}, {"number": 63, "content": "        Is called from manageRobots();", "is_target": false}, {"number": 64, "content": "        should be overwritten by new cameramanipulator if needed", "is_target": false}]}, "831": {"lines": [{"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    /** Sets the right view and eye if the robot has changed.", "is_target": false}, {"number": 63, "content": "        Is called from manageRobots();", "is_target": false}, {"number": 64, "content": "        should be overwritten by new cameramanipulator if needed", "is_target": false}, {"number": 65, "content": "    */", "is_target": false}, {"number": 66, "content": "        virtual void setHomeViewByAgent();", "is_target": true}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "  };", "is_target": false}, {"number": 71, "content": "}", "is_target": false}]}, "832": {"lines": [{"number": 93, "content": "        const char* lpzrobots_home = getenv(\"LPZROBOTS_HOME\");", "is_target": false}, {"number": 94, "content": "        if (lpzrobots_home) {", "is_target": false}, {"number": 95, "content": "          std::cerr << \"PlotOption: Using LPZROBOTS_HOME=\" << lpzrobots_home << std::endl;", "is_target": false}, {"number": 96, "content": "        }", "is_target": false}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "        if (lpzrobots_home) {", "is_target": true}, {"number": 99, "content": "          // Try pipe-friendly wrapper first", "is_target": false}, {"number": 100, "content": "          if (!parameter.empty()) {", "is_target": false}, {"number": 101, "content": "            snprintf(cmd,", "is_target": false}, {"number": 102, "content": "                     sizeof(cmd),", "is_target": false}, {"number": 103, "content": "                     \"%s/matrixviz/matrixviz-pipe -noCtrlC -novideo %s\",", "is_target": false}]}, "833": {"lines": [{"number": 48, "content": "   * Add an instance to global.obstacles to customize the creation", "is_target": false}, {"number": 49, "content": "   *  otherwise a default version is used (though dependend on the playground)", "is_target": false}, {"number": 50, "content": "   */", "is_target": false}, {"number": 51, "content": "  class RandomObstacles : public AbstractObstacle {", "is_target": false}, {"number": 52, "content": "  protected:", "is_target": false}, {"number": 53, "content": "    std::vector<Primitive*> obst;", "is_target": true}, {"number": 54, "content": "    osg::Matrix pose;", "is_target": false}, {"number": 55, "content": "    bool obstacle_exists;", "is_target": false}, {"number": 56, "content": "    int index = 0;", "is_target": false}, {"number": 57, "content": "    RandomObstaclesConf conf;", "is_target": false}, {"number": 58, "content": "  public:", "is_target": false}]}, "834": {"lines": [{"number": 49, "content": "   *  otherwise a default version is used (though dependend on the playground)", "is_target": false}, {"number": 50, "content": "   */", "is_target": false}, {"number": 51, "content": "  class RandomObstacles : public AbstractObstacle {", "is_target": false}, {"number": 52, "content": "  protected:", "is_target": false}, {"number": 53, "content": "    std::vector<Primitive*> obst;", "is_target": false}, {"number": 54, "content": "    osg::Matrix pose;", "is_target": true}, {"number": 55, "content": "    bool obstacle_exists;", "is_target": false}, {"number": 56, "content": "    int index = 0;", "is_target": false}, {"number": 57, "content": "    RandomObstaclesConf conf;", "is_target": false}, {"number": 58, "content": "  public:", "is_target": false}, {"number": 59, "content": "    enum OType {Box, Sphere, Caps, ORandom};", "is_target": false}]}, "835": {"lines": [{"number": 50, "content": "   */", "is_target": false}, {"number": 51, "content": "  class RandomObstacles : public AbstractObstacle {", "is_target": false}, {"number": 52, "content": "  protected:", "is_target": false}, {"number": 53, "content": "    std::vector<Primitive*> obst;", "is_target": false}, {"number": 54, "content": "    osg::Matrix pose;", "is_target": false}, {"number": 55, "content": "    bool obstacle_exists;", "is_target": true}, {"number": 56, "content": "    int index = 0;", "is_target": false}, {"number": 57, "content": "    RandomObstaclesConf conf;", "is_target": false}, {"number": 58, "content": "  public:", "is_target": false}, {"number": 59, "content": "    enum OType {Box, Sphere, Caps, ORandom};", "is_target": false}, {"number": 60, "content": "    enum SType {Metal, Plastic, Rubber, Foam, SRandom};", "is_target": false}]}, "836": {"lines": [{"number": 80, "content": "    }", "is_target": false}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "    RandomObstacles(const OdeHandle& odeHandle, const OsgHandle& osgHandle, ", "is_target": false}, {"number": 83, "content": "                    const RandomObstaclesConf& conf = getDefaultConf());", "is_target": false}, {"number": 84, "content": "    ", "is_target": false}, {"number": 85, "content": "    virtual ~RandomObstacles() {}", "is_target": true}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "  ", "is_target": false}, {"number": 88, "content": "    virtual void setPose(const osg::Matrix& pose);", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    virtual Primitive* getMainPrimitive() const;", "is_target": false}]}, "837": {"lines": [{"number": 83, "content": "                    const RandomObstaclesConf& conf = getDefaultConf());", "is_target": false}, {"number": 84, "content": "    ", "is_target": false}, {"number": 85, "content": "    virtual ~RandomObstacles() {}", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "  ", "is_target": false}, {"number": 88, "content": "    virtual void setPose(const osg::Matrix& pose);", "is_target": true}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    virtual Primitive* getMainPrimitive() const;", "is_target": false}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "    virtual void create() {};", "is_target": false}, {"number": 93, "content": "", "is_target": false}]}, "838": {"lines": [{"number": 85, "content": "    virtual ~RandomObstacles() {}", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "  ", "is_target": false}, {"number": 88, "content": "    virtual void setPose(const osg::Matrix& pose);", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    virtual Primitive* getMainPrimitive() const;", "is_target": true}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "    virtual void create() {};", "is_target": false}, {"number": 93, "content": "", "is_target": false}, {"number": 94, "content": "    virtual void remove(bool all = false);", "is_target": false}, {"number": 95, "content": "", "is_target": false}]}, "839": {"lines": [{"number": 87, "content": "  ", "is_target": false}, {"number": 88, "content": "    virtual void setPose(const osg::Matrix& pose);", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    virtual Primitive* getMainPrimitive() const;", "is_target": false}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "    virtual void create() {};", "is_target": true}, {"number": 93, "content": "", "is_target": false}, {"number": 94, "content": "    virtual void remove(bool all = false);", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "    virtual void spawn(OType type = ORandom , SType subtype = SRandom);", "is_target": false}, {"number": 97, "content": "", "is_target": false}]}, "840": {"lines": [{"number": 130, "content": "  }", "is_target": false}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "  virtual void usage() const {", "is_target": false}, {"number": 133, "content": "    printf(\"\\t-track\\tenable tracking of the position of the robot\\n\");", "is_target": false}, {"number": 134, "content": "  }", "is_target": false}, {"number": 135, "content": "};", "is_target": true}, {"number": 136, "content": "", "is_target": false}, {"number": 137, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 138, "content": "{", "is_target": false}, {"number": 139, "content": "  ThisSim sim;", "is_target": false}, {"number": 140, "content": "  track = sim.contains(argv, argc, \"-track\"); // check whether cmd-line contains -track", "is_target": false}]}, "841": {"lines": [{"number": 91, "content": "      virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "  };", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "} // end namespace lpzrobots", "is_target": true}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "// End of header guard", "is_target": false}, {"number": 100, "content": "#endif", "is_target": false}]}, "842": {"lines": [{"number": 41, "content": "  char cmd[255];", "is_target": false}, {"number": 42, "content": "  bool returnCode = true;", "is_target": false}, {"number": 43, "content": "  std::cout << \"open a stream \" << std::endl;", "is_target": false}, {"number": 44, "content": "  switch (mode) {", "is_target": false}, {"number": 45, "content": "    case PlotMode::File:", "is_target": false}, {"number": 46, "content": "      struct tm* t;", "is_target": true}, {"number": 47, "content": "      time_t tnow;", "is_target": false}, {"number": 48, "content": "      time(&tnow);", "is_target": false}, {"number": 49, "content": "      t = localtime(&tnow);", "is_target": false}, {"number": 50, "content": "      char logfilename[255];", "is_target": false}, {"number": 51, "content": "      if (!parameter.empty()) {", "is_target": false}]}, "843": {"lines": [{"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    /** returns the classname of the manipulator", "is_target": false}, {"number": 47, "content": "        it's NECCESSARY to define this funtion, otherwise", "is_target": false}, {"number": 48, "content": "        the new manipulator WON'T WORK! (but ask me not why)", "is_target": false}, {"number": 49, "content": "     */", "is_target": false}, {"number": 50, "content": "    virtual const char* className() const { return \"Race-Camera\"; }", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  protected:", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual ~CameraManipulatorRace();", "is_target": false}, {"number": 55, "content": "", "is_target": false}]}, "844": {"lines": [{"number": 49, "content": "     */", "is_target": false}, {"number": 50, "content": "    virtual const char* className() const { return \"Race-Camera\"; }", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  protected:", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual ~CameraManipulatorRace();", "is_target": true}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    /** This handles robot movements, so that the camera movemenent is right affected.", "is_target": false}, {"number": 57, "content": "        should be overwritten by new cameramanipulator", "is_target": false}, {"number": 58, "content": "    */", "is_target": false}, {"number": 59, "content": "       virtual void calcMovementByAgent();", "is_target": false}]}, "845": {"lines": [{"number": 54, "content": "    virtual ~CameraManipulatorRace();", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    /** This handles robot movements, so that the camera movemenent is right affected.", "is_target": false}, {"number": 57, "content": "        should be overwritten by new cameramanipulator", "is_target": false}, {"number": 58, "content": "    */", "is_target": false}, {"number": 59, "content": "       virtual void calcMovementByAgent();", "is_target": true}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "  };", "is_target": false}, {"number": 62, "content": "}", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "#endif", "is_target": false}]}, "846": {"lines": [{"number": 369, "content": "  fprintf(pipe, \"#N neural_net %s\\n\", name.c_str());", "is_target": false}, {"number": 370, "content": "  list<Inspectable::ILayer> layers = inspectable->getStructuralLayers();", "is_target": false}, {"number": 371, "content": "  list<Inspectable::IConnection> conns = inspectable->getStructuralConnections();", "is_target": false}, {"number": 372, "content": "  // print layers with neurons", "is_target": false}, {"number": 373, "content": "  for (list<Inspectable::ILayer>::iterator i = layers.begin(); i != layers.end(); ++i) {", "is_target": false}, {"number": 374, "content": "    Inspectable::ILayer& l = (*i);", "is_target": true}, {"number": 375, "content": "    fprintf(pipe, \"#N layer %s %i\\n\", l.layername.c_str(), l.rank);", "is_target": false}, {"number": 376, "content": "    for (int n = 0; n < l.dimension; ++n) {", "is_target": false}, {"number": 377, "content": "      if (l.biasname.empty()) {", "is_target": false}, {"number": 378, "content": "        fprintf(pipe, \"#N neuron %s[%i]\\n\", l.vectorname.c_str(), n);", "is_target": false}, {"number": 379, "content": "      } else {", "is_target": false}]}, "847": {"lines": [{"number": 382, "content": "    }", "is_target": false}, {"number": 383, "content": "  }", "is_target": false}, {"number": 384, "content": "", "is_target": false}, {"number": 385, "content": "  // print connections", "is_target": false}, {"number": 386, "content": "  for (list<Inspectable::IConnection>::iterator i = conns.begin(); i != conns.end(); ++i) {", "is_target": false}, {"number": 387, "content": "    Inspectable::IConnection& c = (*i);", "is_target": true}, {"number": 388, "content": "    // find the layers refered in the connection description", "is_target": false}, {"number": 389, "content": "    list<Inspectable::ILayer>::iterator l1it =", "is_target": false}, {"number": 390, "content": "      find_if(layers.begin(), layers.end(), Inspectable::matchName(c.vector1));", "is_target": false}, {"number": 391, "content": "    list<Inspectable::ILayer>::iterator l2it =", "is_target": false}, {"number": 392, "content": "      find_if(layers.begin(), layers.end(), Inspectable::matchName(c.vector2));", "is_target": false}]}, "848": {"lines": [{"number": 391, "content": "    list<Inspectable::ILayer>::iterator l2it =", "is_target": false}, {"number": 392, "content": "      find_if(layers.begin(), layers.end(), Inspectable::matchName(c.vector2));", "is_target": false}, {"number": 393, "content": "    assert(l1it != layers.end()); // we need to find them otherwise", "is_target": false}, {"number": 394, "content": "    assert(l2it != layers.end());", "is_target": false}, {"number": 395, "content": "", "is_target": false}, {"number": 396, "content": "    Inspectable::ILayer& l1 = (*l1it);", "is_target": true}, {"number": 397, "content": "    Inspectable::ILayer& l2 = (*l2it);", "is_target": false}, {"number": 398, "content": "    for (int j = 0; j < l1.dimension; ++j) {", "is_target": false}, {"number": 399, "content": "      for (int k = 0; k < l2.dimension; ++k) {", "is_target": false}, {"number": 400, "content": "        fprintf(pipe,", "is_target": false}, {"number": 401, "content": "                \"#N connection %s[%i,%i] %s[%i] %s[%i]\\n\",", "is_target": false}]}, "849": {"lines": [{"number": 392, "content": "      find_if(layers.begin(), layers.end(), Inspectable::matchName(c.vector2));", "is_target": false}, {"number": 393, "content": "    assert(l1it != layers.end()); // we need to find them otherwise", "is_target": false}, {"number": 394, "content": "    assert(l2it != layers.end());", "is_target": false}, {"number": 395, "content": "", "is_target": false}, {"number": 396, "content": "    Inspectable::ILayer& l1 = (*l1it);", "is_target": false}, {"number": 397, "content": "    Inspectable::ILayer& l2 = (*l2it);", "is_target": true}, {"number": 398, "content": "    for (int j = 0; j < l1.dimension; ++j) {", "is_target": false}, {"number": 399, "content": "      for (int k = 0; k < l2.dimension; ++k) {", "is_target": false}, {"number": 400, "content": "        fprintf(pipe,", "is_target": false}, {"number": 401, "content": "                \"#N connection %s[%i,%i] %s[%i] %s[%i]\\n\",", "is_target": false}, {"number": 402, "content": "                c.matrixname.c_str(),", "is_target": false}]}, "850": {"lines": [{"number": 130, "content": "  }", "is_target": false}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "  virtual void usage() const {", "is_target": false}, {"number": 133, "content": "    printf(\"\\t-track\\tenable tracking of the position of the robot\\n\");", "is_target": false}, {"number": 134, "content": "  }", "is_target": false}, {"number": 135, "content": "};", "is_target": true}, {"number": 136, "content": "", "is_target": false}, {"number": 137, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 138, "content": "{", "is_target": false}, {"number": 139, "content": "  ThisSim sim;", "is_target": false}, {"number": 140, "content": "  track = sim.contains(argv, argc, \"-track\"); // check whether cmd-line contains -track", "is_target": false}]}, "851": {"lines": [{"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "private:", "is_target": false}, {"number": 147, "content": "  // saves the actual position AND rotation of the segment", "is_target": false}, {"number": 148, "content": "  Matrix pos;", "is_target": false}, {"number": 149, "content": "  Matrix invpos;", "is_target": false}, {"number": 150, "content": "};", "is_target": true}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "#endif", "is_target": false}]}, "852": {"lines": [{"number": 41, "content": "  char cmd[255];", "is_target": false}, {"number": 42, "content": "  bool returnCode = true;", "is_target": false}, {"number": 43, "content": "  std::cout << \"open a stream \" << std::endl;", "is_target": false}, {"number": 44, "content": "  switch (mode) {", "is_target": false}, {"number": 45, "content": "    case PlotMode::File:", "is_target": false}, {"number": 46, "content": "      struct tm* t;", "is_target": true}, {"number": 47, "content": "      time_t tnow;", "is_target": false}, {"number": 48, "content": "      time(&tnow);", "is_target": false}, {"number": 49, "content": "      t = localtime(&tnow);", "is_target": false}, {"number": 50, "content": "      char logfilename[255];", "is_target": false}, {"number": 51, "content": "      if (!parameter.empty()) {", "is_target": false}]}, "853": {"lines": [{"number": 49, "content": "     */", "is_target": false}, {"number": 50, "content": "    virtual const char* className() const override { return \"TV-Camera\"; }", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  protected:", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual ~CameraManipulatorTV();", "is_target": true}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    /** This handles robot movements, so that the camera movemenent is right affected.", "is_target": false}, {"number": 57, "content": "        should be overwritten by new cameramanipulator", "is_target": false}, {"number": 58, "content": "    */", "is_target": false}, {"number": 59, "content": "       virtual void calcMovementByAgent();", "is_target": false}]}, "854": {"lines": [{"number": 54, "content": "    virtual ~CameraManipulatorTV();", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    /** This handles robot movements, so that the camera movemenent is right affected.", "is_target": false}, {"number": 57, "content": "        should be overwritten by new cameramanipulator", "is_target": false}, {"number": 58, "content": "    */", "is_target": false}, {"number": 59, "content": "       virtual void calcMovementByAgent();", "is_target": true}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "    /** Sets the right view and eye if the robot has changed.", "is_target": false}, {"number": 62, "content": "        Is called from manageRobots();", "is_target": false}, {"number": 63, "content": "        should be overwritten by new cameramanipulator", "is_target": false}, {"number": 64, "content": "    */", "is_target": false}]}, "855": {"lines": [{"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "    /** Sets the right view and eye if the robot has changed.", "is_target": false}, {"number": 62, "content": "        Is called from manageRobots();", "is_target": false}, {"number": 63, "content": "        should be overwritten by new cameramanipulator", "is_target": false}, {"number": 64, "content": "    */", "is_target": false}, {"number": 65, "content": "        virtual void setHomeViewByAgent();", "is_target": true}, {"number": 66, "content": "        virtual void setHomeEyeByAgent();", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  };", "is_target": false}, {"number": 69, "content": "}", "is_target": false}, {"number": 70, "content": "", "is_target": false}]}, "856": {"lines": [{"number": 61, "content": "    /** Sets the right view and eye if the robot has changed.", "is_target": false}, {"number": 62, "content": "        Is called from manageRobots();", "is_target": false}, {"number": 63, "content": "        should be overwritten by new cameramanipulator", "is_target": false}, {"number": 64, "content": "    */", "is_target": false}, {"number": 65, "content": "        virtual void setHomeViewByAgent();", "is_target": false}, {"number": 66, "content": "        virtual void setHomeEyeByAgent();", "is_target": true}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  };", "is_target": false}, {"number": 69, "content": "}", "is_target": false}, {"number": 70, "content": "", "is_target": false}, {"number": 71, "content": "#endif", "is_target": false}]}, "859": {"lines": [{"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "    // must traverse the subgraph            ", "is_target": false}, {"number": 142, "content": "    traverse(node,nv);", "is_target": false}, {"number": 143, "content": "  }", "is_target": false}, {"number": 144, "content": "        ", "is_target": false}, {"number": 145, "content": "  void _request_render_to_depth_texture(osg::const Node& node, osgUtil::const CullVisitor& cv);", "is_target": true}, {"number": 146, "content": "        ", "is_target": false}, {"number": 147, "content": "  ref_ptr<osg::Node>                     _subgraph;", "is_target": false}, {"number": 148, "content": "  ref_ptr<osg::Texture2D>                _texture;", "is_target": false}, {"number": 149, "content": "  ref_ptr<osg::StateSet>                 _local_stateset;", "is_target": false}, {"number": 150, "content": "  ref_ptr<osg::Viewport>                 _viewport;", "is_target": false}]}, "860": {"lines": [{"number": 91, "content": "      virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "  };", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "} // end namespace lpzrobots", "is_target": true}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "// End of header guard", "is_target": false}, {"number": 100, "content": "#endif", "is_target": false}]}, "861": {"lines": [{"number": 39, "content": "", "is_target": false}, {"number": 40, "content": "    LPZViewer();", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "    explicit LPZViewer(osg::ArgumentParser& arguments);", "is_target": false}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "    LPZViewer(const osgViewer::Viewer& viewer, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);", "is_target": true}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    virtual ~LPZViewer();", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "    ///overwritten to set cpu affinity back", "is_target": false}, {"number": 49, "content": "    void setUpThreading();", "is_target": false}]}, "862": {"lines": [{"number": 32, "content": "", "is_target": false}, {"number": 33, "content": "/** Event handler for adding on screen help to Viewers.*/", "is_target": false}, {"number": 34, "content": "class LpzHelpHandler : public osgGA::GUIEventHandler {", "is_target": false}, {"number": 35, "content": "    public: ", "is_target": false}, {"number": 36, "content": "", "is_target": false}, {"number": 37, "content": "        LpzHelpHandler(osg::ApplicationUsage* au=nullptr);", "is_target": true}, {"number": 38, "content": "        ", "is_target": false}, {"number": 39, "content": "        void setApplicationUsage(osg::ApplicationUsage* au) { _applicationUsage = au; }", "is_target": false}, {"number": 40, "content": "        osg::ApplicationUsage* getApplicationUsage() { return _applicationUsage.get(); }", "is_target": false}, {"number": 41, "content": "        const osg::ApplicationUsage* getApplicationUsage() const { return _applicationUsage.get(); }", "is_target": false}, {"number": 42, "content": "", "is_target": false}]}, "863": {"lines": [{"number": 181, "content": "                      double factor = 1, double heightfactor=0.02, bool createGround=true);", "is_target": false}, {"number": 182, "content": "", "is_target": false}, {"number": 183, "content": "    void createPolyline(const PolyLine&);", "is_target": false}, {"number": 184, "content": "", "is_target": false}, {"number": 185, "content": "  protected:", "is_target": false}, {"number": 186, "content": "    virtual void create();", "is_target": true}, {"number": 187, "content": "", "is_target": false}, {"number": 188, "content": "  };", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "}", "is_target": false}, {"number": 191, "content": "", "is_target": false}]}, "865": {"lines": [{"number": 33, "content": "namespace lpzrobots {", "is_target": false}, {"number": 34, "content": "", "is_target": false}, {"number": 35, "content": "  using namespace std;", "is_target": false}, {"number": 36, "content": "  using namespace matrix;", "is_target": false}, {"number": 37, "content": "", "is_target": false}, {"number": 38, "content": "  int PolyLine::parse(std::list<char*> lines){", "is_target": true}, {"number": 39, "content": "    int pen_color, fill_color;", "is_target": false}, {"number": 40, "content": "    list<char*>::iterator l = lines.begin();", "is_target": false}, {"number": 41, "content": "    if(lines.size()<2) return 1;", "is_target": false}, {"number": 42, "content": "    int r = sscanf(*l,\"%2i %2i %2i %4i %6i %6i %6i\", &object_code, &sub_type,&line_style, &thickness,", "is_target": false}, {"number": 43, "content": "                   &pen_color, &fill_color, &depth);", "is_target": false}]}, "866": {"lines": [{"number": 47, "content": "      int dat[2];", "is_target": false}, {"number": 48, "content": "      int linecnt=1;", "is_target": false}, {"number": 49, "content": "      while(l!=lines.end()){", "is_target": false}, {"number": 50, "content": "        char* line = *l;", "is_target": false}, {"number": 51, "content": "        if(line[0]=='\\t'){", "is_target": false}, {"number": 52, "content": "          char* p;", "is_target": true}, {"number": 53, "content": "          p=strtok(line+1,\" \");", "is_target": false}, {"number": 54, "content": "          if(!p) return false;", "is_target": false}, {"number": 55, "content": "          dat[i] = atoi(p);", "is_target": false}, {"number": 56, "content": "          ++i;", "is_target": false}, {"number": 57, "content": "          while((p=strtok(nullptr,\" \"))!=nullptr )  {", "is_target": false}]}, "867": {"lines": [{"number": 50, "content": "        char* line = *l;", "is_target": false}, {"number": 51, "content": "        if(line[0]=='\\t'){", "is_target": false}, {"number": 52, "content": "          char* p;", "is_target": false}, {"number": 53, "content": "          p=strtok(line+1,\" \");", "is_target": false}, {"number": 54, "content": "          if(!p) return false;", "is_target": false}, {"number": 55, "content": "          dat[i] = atoi(p);", "is_target": true}, {"number": 56, "content": "          ++i;", "is_target": false}, {"number": 57, "content": "          while((p=strtok(nullptr,\" \"))!=nullptr )  {", "is_target": false}, {"number": 58, "content": "            dat[i] = atoi(p);", "is_target": false}, {"number": 59, "content": "            ++i;", "is_target": false}, {"number": 60, "content": "            if(i==2){", "is_target": false}]}, "868": {"lines": [{"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "private:", "is_target": false}, {"number": 147, "content": "  // saves the actual position AND rotation of the segment", "is_target": false}, {"number": 148, "content": "  Matrix pos;", "is_target": false}, {"number": 149, "content": "  Matrix invpos;", "is_target": false}, {"number": 150, "content": "};", "is_target": true}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "#endif", "is_target": false}]}, "869": {"lines": [{"number": 130, "content": "  }", "is_target": false}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "  virtual void usage() const {", "is_target": false}, {"number": 133, "content": "    printf(\"\\t-track\\tenable tracking of the position of the robot\\n\");", "is_target": false}, {"number": 134, "content": "  }", "is_target": false}, {"number": 135, "content": "};", "is_target": true}, {"number": 136, "content": "", "is_target": false}, {"number": 137, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 138, "content": "{", "is_target": false}, {"number": 139, "content": "  ThisSim sim;", "is_target": false}, {"number": 140, "content": "  track = sim.contains(argv, argc, \"-track\"); // check whether cmd-line contains -track", "is_target": false}]}, "870": {"lines": [{"number": 82, "content": "      }", "is_target": false}, {"number": 83, "content": "      *dummy = value;", "is_target": false}, {"number": 84, "content": "      return *dummy;", "is_target": false}, {"number": 85, "content": "    }", "is_target": false}, {"number": 86, "content": "    inline D& operator=(const ArrayElement& el2) {", "is_target": false}, {"number": 87, "content": "      this = el2.value;", "is_target": true}, {"number": 88, "content": "    }", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    inline operator D() const {", "is_target": false}, {"number": 91, "content": "      return value;", "is_target": false}, {"number": 92, "content": "    }", "is_target": false}]}, "871": {"lines": [{"number": 82, "content": "      }", "is_target": false}, {"number": 83, "content": "      *dummy = value;", "is_target": false}, {"number": 84, "content": "      return *dummy;", "is_target": false}, {"number": 85, "content": "    }", "is_target": false}, {"number": 86, "content": "    inline D& operator=(const ArrayElement& el2) {", "is_target": false}, {"number": 87, "content": "      this = el2.value;", "is_target": true}, {"number": 88, "content": "    }", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    inline operator D() const {", "is_target": false}, {"number": 91, "content": "      return value;", "is_target": false}, {"number": 92, "content": "    }", "is_target": false}]}, "872": {"lines": [{"number": 81, "content": "        (*hashData)[index] = dummy;", "is_target": false}, {"number": 82, "content": "      }", "is_target": false}, {"number": 83, "content": "      *dummy = value;", "is_target": false}, {"number": 84, "content": "      return *dummy;", "is_target": false}, {"number": 85, "content": "    }", "is_target": false}, {"number": 86, "content": "    inline D& operator=(const ArrayElement& el2) {", "is_target": true}, {"number": 87, "content": "      this = el2.value;", "is_target": false}, {"number": 88, "content": "    }", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    inline operator D() const {", "is_target": false}, {"number": 91, "content": "      return value;", "is_target": false}]}, "873": {"lines": [{"number": 81, "content": "        (*hashData)[index] = dummy;", "is_target": false}, {"number": 82, "content": "      }", "is_target": false}, {"number": 83, "content": "      *dummy = value;", "is_target": false}, {"number": 84, "content": "      return *dummy;", "is_target": false}, {"number": 85, "content": "    }", "is_target": false}, {"number": 86, "content": "    inline D& operator=(const ArrayElement& el2) {", "is_target": true}, {"number": 87, "content": "      this = el2.value;", "is_target": false}, {"number": 88, "content": "    }", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    inline operator D() const {", "is_target": false}, {"number": 91, "content": "      return value;", "is_target": false}]}, "874": {"lines": [{"number": 81, "content": "        (*hashData)[index] = dummy;", "is_target": false}, {"number": 82, "content": "      }", "is_target": false}, {"number": 83, "content": "      *dummy = value;", "is_target": false}, {"number": 84, "content": "      return *dummy;", "is_target": false}, {"number": 85, "content": "    }", "is_target": false}, {"number": 86, "content": "    inline D& operator=(const ArrayElement& el2) {", "is_target": true}, {"number": 87, "content": "      this = el2.value;", "is_target": false}, {"number": 88, "content": "    }", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    inline operator D() const {", "is_target": false}, {"number": 91, "content": "      return value;", "is_target": false}]}, "875": {"lines": [{"number": 81, "content": "        (*hashData)[index] = dummy;", "is_target": false}, {"number": 82, "content": "      }", "is_target": false}, {"number": 83, "content": "      *dummy = value;", "is_target": false}, {"number": 84, "content": "      return *dummy;", "is_target": false}, {"number": 85, "content": "    }", "is_target": false}, {"number": 86, "content": "    inline D& operator=(const ArrayElement& el2) {", "is_target": true}, {"number": 87, "content": "      this = el2.value;", "is_target": false}, {"number": 88, "content": "    }", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    inline operator D() const {", "is_target": false}, {"number": 91, "content": "      return value;", "is_target": false}]}, "876": {"lines": [{"number": 48, "content": "    xInitPosition = 500.0f;", "is_target": false}, {"number": 49, "content": "    yInitPosition = ypos;", "is_target": false}, {"number": 50, "content": "    zInitPosition = 0.0f;", "is_target": false}, {"number": 51, "content": "    fontsize=12;", "is_target": false}, {"number": 52, "content": "    yOffset = fontsize + 4;", "is_target": false}, {"number": 53, "content": "    statTool = new StatisticTools();", "is_target": true}, {"number": 54, "content": "  }", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "  HUDStatisticsManager::~HUDStatisticsManager() {", "is_target": false}, {"number": 57, "content": "    delete(statTool);", "is_target": false}, {"number": 58, "content": "  }", "is_target": false}]}, "877": {"lines": [{"number": 48, "content": "    xInitPosition = 500.0f;", "is_target": false}, {"number": 49, "content": "    yInitPosition = ypos;", "is_target": false}, {"number": 50, "content": "    zInitPosition = 0.0f;", "is_target": false}, {"number": 51, "content": "    fontsize=12;", "is_target": false}, {"number": 52, "content": "    yOffset = fontsize + 4;", "is_target": false}, {"number": 53, "content": "    statTool = new StatisticTools();", "is_target": true}, {"number": 54, "content": "  }", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "  HUDStatisticsManager::~HUDStatisticsManager() {", "is_target": false}, {"number": 57, "content": "    delete(statTool);", "is_target": false}, {"number": 58, "content": "  }", "is_target": false}]}, "878": {"lines": [{"number": 148, "content": "  ArrayElement elementDummy;", "is_target": false}, {"number": 149, "content": "  /// set of all array values", "is_target": false}, {"number": 150, "content": "  I arraySize;", "is_target": false}, {"number": 151, "content": "  HashMap<I, D*>* hashData;", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "  virtual void inline allocate() {", "is_target": true}, {"number": 154, "content": "    if (hashData)", "is_target": false}, {"number": 155, "content": "      freeData();", "is_target": false}, {"number": 156, "content": "    hashData = new HashMap<I, D*>();", "is_target": false}, {"number": 157, "content": "    elementDummy.reallocate(hashData);", "is_target": false}, {"number": 158, "content": "  }", "is_target": false}]}, "879": {"lines": [{"number": 155, "content": "      freeData();", "is_target": false}, {"number": 156, "content": "    hashData = new HashMap<I, D*>();", "is_target": false}, {"number": 157, "content": "    elementDummy.reallocate(hashData);", "is_target": false}, {"number": 158, "content": "  }", "is_target": false}, {"number": 159, "content": "", "is_target": false}, {"number": 160, "content": "  virtual void inline freeData() {", "is_target": true}, {"number": 161, "content": "    // TODO: free all elements in hashData", "is_target": false}, {"number": 162, "content": "    //      for (HashMap<I,D*>::iterator iterator =", "is_target": false}, {"number": 163, "content": "    //      hashData->begin();iterator!=hashData->end();++iterator)", "is_target": false}, {"number": 164, "content": "    //        free((*iterator).second);", "is_target": false}, {"number": 165, "content": "    if (hashData) {", "is_target": false}]}, "880": {"lines": [{"number": 41, "content": "#include <list>", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "class StatisticTools : public Inspectable, public Callbackable {", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "public:", "is_target": false}, {"number": 46, "content": "  StatisticTools(const std::string& name = \"StatisticTools\") : Inspectable(name), beginMeasureCounter(0) { }", "is_target": true}, {"number": 47, "content": "  ", "is_target": false}, {"number": 48, "content": "  // From Callbackable interface", "is_target": false}, {"number": 49, "content": "  virtual void doOnCallBack(BackCaller* source, BackCaller::CallbackableType type = BackCaller::DEFAULT_CALLBACKABLE_TYPE);", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "        /**", "is_target": false}]}, "881": {"lines": [{"number": 96, "content": "    D value;", "is_target": false}, {"number": 97, "content": "    HashMap<I, D*>* hashData;", "is_target": false}, {"number": 98, "content": "    D* dummy;", "is_target": false}, {"number": 99, "content": "  };", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "  SparseArray(I arraySize_) : arraySize(arraySize_)", "is_target": true}, {"number": 102, "content": "    , hashData(0) {", "is_target": false}, {"number": 103, "content": "    allocate();", "is_target": false}, {"number": 104, "content": "  }", "is_target": false}, {"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "  virtual ~SparseArray() {", "is_target": false}]}, "882": {"lines": [{"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "public:", "is_target": false}, {"number": 46, "content": "  StatisticTools(const std::string& name = \"StatisticTools\") : Inspectable(name), beginMeasureCounter(0) { }", "is_target": false}, {"number": 47, "content": "  ", "is_target": false}, {"number": 48, "content": "  // From Callbackable interface", "is_target": false}, {"number": 49, "content": "  virtual void doOnCallBack(BackCaller* source, BackCaller::CallbackableType type = BackCaller::DEFAULT_CALLBACKABLE_TYPE);", "is_target": true}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "        /**", "is_target": false}, {"number": 52, "content": "         * adds a variable to observe and measure the value", "is_target": false}, {"number": 53, "content": "         * @param observedValue    the value to observe.", "is_target": false}, {"number": 54, "content": "         * @param measureName      the name of the measured value", "is_target": false}]}, "883": {"lines": [{"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "  virtual void setColor(const Color& color) { textColor = color;}", "is_target": false}, {"number": 99, "content": "  virtual void setFontsize(int size) {fontsize = size; yOffset = static_cast<float>(1.2*size);}", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "  virtual ~HUDStatisticsManager();", "is_target": true}, {"number": 102, "content": "  ", "is_target": false}, {"number": 103, "content": "  virtual StatisticMeasure* getMeasure(double& observedValue, const char* measureName, MeasureMode mode, long stepSpan, double additionalParam);", "is_target": false}, {"number": 104, "content": "  virtual double& addMeasure(double& observedValue, const char* measureName, MeasureMode mode, long stepSpan, double additionalParam);", "is_target": false}, {"number": 105, "content": "  virtual double& addMeasure(AbstractMeasure* measure);", "is_target": false}, {"number": 106, "content": "  virtual double& addMeasureList(std::list<AbstractMeasure*> measureList);", "is_target": false}]}, "884": {"lines": [{"number": 105, "content": "  virtual double& addMeasure(AbstractMeasure* measure);", "is_target": false}, {"number": 106, "content": "  virtual double& addMeasureList(std::list<AbstractMeasure*> measureList);", "is_target": false}, {"number": 107, "content": "  virtual double& addMeasureList(std::list<ComplexMeasure*> measureList);", "is_target": false}, {"number": 108, "content": "  virtual double& addMeasureList(std::list<StatisticMeasure*> measureList);", "is_target": false}, {"number": 109, "content": "  ", "is_target": false}, {"number": 110, "content": "  virtual void doOnCallBack(BackCaller* source, BackCaller::CallbackableType type = BackCaller::DEFAULT_CALLBACKABLE_TYPE);", "is_target": true}, {"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "protected:", "is_target": false}, {"number": 113, "content": "", "is_target": false}, {"number": 114, "content": "/// the struct list which holds the measures and the appropiate text", "is_target": false}, {"number": 115, "content": "  std::list<WindowStatistic*> windowStatisticList;", "is_target": false}]}, "885": {"lines": [{"number": 72, "content": "     * @param minValue minimum value the observed value can become", "is_target": false}, {"number": 73, "content": "     * @param maxValue maximum value the observed value can become", "is_target": false}, {"number": 74, "content": "     */", "is_target": false}, {"number": 75, "content": "    virtual void addObservable( double& observedValue, double minValue, double maxValue );", "is_target": false}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "    virtual ~ComplexMeasure();", "is_target": true}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "    /**", "is_target": false}, {"number": 80, "content": "     * defined by AbstractMeasure. This method is called from StatisticTools", "is_target": false}, {"number": 81, "content": "     * for updating the measure in every simStep (ODE).", "is_target": false}, {"number": 82, "content": "     */", "is_target": false}]}, "886": {"lines": [{"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "    /**", "is_target": false}, {"number": 80, "content": "     * defined by AbstractMeasure. This method is called from StatisticTools", "is_target": false}, {"number": 81, "content": "     * for updating the measure in every simStep (ODE).", "is_target": false}, {"number": 82, "content": "     */", "is_target": false}, {"number": 83, "content": "    virtual void step();", "is_target": true}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "", "is_target": false}, {"number": 86, "content": "  protected:", "is_target": false}, {"number": 87, "content": "  std::list<double*> observedValueList; // stores the adresses of the observedValues", "is_target": false}, {"number": 88, "content": "  std::list<Discretisizer*> discretisizerList; // stores the Discretisizer", "is_target": false}]}, "887": {"lines": [{"number": 78, "content": "    inline D& operator=(D value) {", "is_target": false}, {"number": 79, "content": "      if (dummy == nullptr) {", "is_target": false}, {"number": 80, "content": "        dummy = static_cast<D*>(malloc(sizeof(D)));", "is_target": false}, {"number": 81, "content": "        (*hashData)[index] = dummy;", "is_target": false}, {"number": 82, "content": "      }", "is_target": false}, {"number": 83, "content": "      *dummy = value;", "is_target": true}, {"number": 84, "content": "      return *dummy;", "is_target": false}, {"number": 85, "content": "    }", "is_target": false}, {"number": 86, "content": "    inline D& operator=(const ArrayElement& el2) {", "is_target": false}, {"number": 87, "content": "      this = el2.value;", "is_target": false}, {"number": 88, "content": "    }", "is_target": false}]}, "888": {"lines": [{"number": 79, "content": "      if (dummy == nullptr) {", "is_target": false}, {"number": 80, "content": "        dummy = static_cast<D*>(malloc(sizeof(D)));", "is_target": false}, {"number": 81, "content": "        (*hashData)[index] = dummy;", "is_target": false}, {"number": 82, "content": "      }", "is_target": false}, {"number": 83, "content": "      *dummy = value;", "is_target": false}, {"number": 84, "content": "      return *dummy;", "is_target": true}, {"number": 85, "content": "    }", "is_target": false}, {"number": 86, "content": "    inline D& operator=(const ArrayElement& el2) {", "is_target": false}, {"number": 87, "content": "      this = el2.value;", "is_target": false}, {"number": 88, "content": "    }", "is_target": false}, {"number": 89, "content": "", "is_target": false}]}, "889": {"lines": [{"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "  protected:", "is_target": false}, {"number": 174, "content": "    /// this actually sets the textures, overwritten", "is_target": false}, {"number": 175, "content": "    virtual void applyTextures();", "is_target": false}, {"number": 176, "content": "", "is_target": false}, {"number": 177, "content": "    osg::Vec3 dim;", "is_target": true}, {"number": 178, "content": "    // we use one geode for each face of the box for the texture handling", "is_target": false}, {"number": 179, "content": "    osg::ref_ptr<osg::Geode> faces[6];", "is_target": false}, {"number": 180, "content": "  };", "is_target": false}, {"number": 181, "content": "", "is_target": false}, {"number": 182, "content": "", "is_target": false}]}, "890": {"lines": [{"number": 228, "content": "  };", "is_target": false}, {"number": 229, "content": "", "is_target": false}, {"number": 230, "content": "  class OSGLine : public OSGPrimitive {", "is_target": false}, {"number": 231, "content": "  public:", "is_target": false}, {"number": 232, "content": "    // the list of points is considered pairwise, start-end points of each line segment", "is_target": false}, {"number": 233, "content": "    OSGLine(const std::list<osg::Vec3>& points);", "is_target": true}, {"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "    virtual void applyTextures() {}", "is_target": false}, {"number": 238, "content": "", "is_target": false}]}, "891": {"lines": [{"number": 258, "content": "       Constuctor", "is_target": false}, {"number": 259, "content": "       @param filename filename of the model file (search path is osg data path)", "is_target": false}, {"number": 260, "content": "       @param scale scale factor used for scaling the model", "is_target": false}, {"number": 261, "content": "       @param options for model reader", "is_target": false}, {"number": 262, "content": "     */", "is_target": false}, {"number": 263, "content": "    OSGMesh(const std::string& filename, float scale = 1, const osgDB::ReaderWriter::Options* options = nullptr);", "is_target": true}, {"number": 264, "content": "    ~OSGMesh();", "is_target": false}, {"number": 265, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 266, "content": "    /**", "is_target": false}, {"number": 267, "content": "     * Same as init, but the mesh file is not loaded and therefore not displayed.", "is_target": false}, {"number": 268, "content": "     * This method ensures that the transform is correctly initialised.", "is_target": false}]}, "892": {"lines": [{"number": 286, "content": "  /**", "is_target": false}, {"number": 287, "content": "     Text to be displayed on the hud", "is_target": false}, {"number": 288, "content": "  */", "is_target": false}, {"number": 289, "content": "  class OSGText : public OSGPrimitive {", "is_target": false}, {"number": 290, "content": "  public:", "is_target": false}, {"number": 291, "content": "    OSGText(const std::string& text, int fontsize = 12,", "is_target": true}, {"number": 292, "content": "            osgText::Text::AlignmentType align = osgText::Text::LEFT_BASE_LINE);", "is_target": false}, {"number": 293, "content": "", "is_target": false}, {"number": 294, "content": "    virtual ~OSGText();", "is_target": false}, {"number": 295, "content": "", "is_target": false}, {"number": 296, "content": "    // Delete copy constructor and assignment operator", "is_target": false}]}, "893": {"lines": [{"number": 110, "content": "  */", "is_target": false}, {"number": 111, "content": "  class OSGDummy : public OSGPrimitive {", "is_target": false}, {"number": 112, "content": "  public:", "is_target": false}, {"number": 113, "content": "    OSGDummy();", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 116, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": false}, {"number": 117, "content": "    virtual osg::Group* getGroup();", "is_target": false}, {"number": 118, "content": "    virtual void setTexture(const std::string& filename);", "is_target": false}, {"number": 119, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 120, "content": "    /// returns a osg transformation object;", "is_target": false}]}, "894": {"lines": [{"number": 111, "content": "  class OSGDummy : public OSGPrimitive {", "is_target": false}, {"number": 112, "content": "  public:", "is_target": false}, {"number": 113, "content": "    OSGDummy();", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 116, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": true}, {"number": 117, "content": "    virtual osg::Group* getGroup();", "is_target": false}, {"number": 118, "content": "    virtual void setTexture(const std::string& filename);", "is_target": false}, {"number": 119, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 120, "content": "    /// returns a osg transformation object;", "is_target": false}, {"number": 121, "content": "    virtual osg::Transform* getTransform();", "is_target": false}]}, "895": {"lines": [{"number": 112, "content": "  public:", "is_target": false}, {"number": 113, "content": "    OSGDummy();", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 116, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": false}, {"number": 117, "content": "    virtual osg::Group* getGroup();", "is_target": true}, {"number": 118, "content": "    virtual void setTexture(const std::string& filename);", "is_target": false}, {"number": 119, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 120, "content": "    /// returns a osg transformation object;", "is_target": false}, {"number": 121, "content": "    virtual osg::Transform* getTransform();", "is_target": false}, {"number": 122, "content": "  };", "is_target": false}]}, "896": {"lines": [{"number": 113, "content": "    OSGDummy();", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 116, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": false}, {"number": 117, "content": "    virtual osg::Group* getGroup();", "is_target": false}, {"number": 118, "content": "    virtual void setTexture(const std::string& filename);", "is_target": true}, {"number": 119, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 120, "content": "    /// returns a osg transformation object;", "is_target": false}, {"number": 121, "content": "    virtual osg::Transform* getTransform();", "is_target": false}, {"number": 122, "content": "  };", "is_target": false}, {"number": 123, "content": "", "is_target": false}]}, "897": {"lines": [{"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 116, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": false}, {"number": 117, "content": "    virtual osg::Group* getGroup();", "is_target": false}, {"number": 118, "content": "    virtual void setTexture(const std::string& filename);", "is_target": false}, {"number": 119, "content": "    virtual void setColor(const Color& color);", "is_target": true}, {"number": 120, "content": "    /// returns a osg transformation object;", "is_target": false}, {"number": 121, "content": "    virtual osg::Transform* getTransform();", "is_target": false}, {"number": 122, "content": "  };", "is_target": false}, {"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "", "is_target": false}]}, "898": {"lines": [{"number": 116, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": false}, {"number": 117, "content": "    virtual osg::Group* getGroup();", "is_target": false}, {"number": 118, "content": "    virtual void setTexture(const std::string& filename);", "is_target": false}, {"number": 119, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 120, "content": "    /// returns a osg transformation object;", "is_target": false}, {"number": 121, "content": "    virtual osg::Transform* getTransform();", "is_target": true}, {"number": 122, "content": "  };", "is_target": false}, {"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "  /**", "is_target": false}, {"number": 126, "content": "     Graphical plane (represented as a large thin box, because OSG does not draw planes)", "is_target": false}]}, "899": {"lines": [{"number": 127, "content": "  */", "is_target": false}, {"number": 128, "content": "  class OSGPlane : public OSGPrimitive {", "is_target": false}, {"number": 129, "content": "  public:", "is_target": false}, {"number": 130, "content": "    OSGPlane();", "is_target": false}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 133, "content": "  };", "is_target": false}, {"number": 134, "content": "", "is_target": false}, {"number": 135, "content": "", "is_target": false}, {"number": 136, "content": "  /**", "is_target": false}, {"number": 137, "content": "     Graphical box", "is_target": false}]}, "900": {"lines": [{"number": 139, "content": "  class OSGBox : public OSGPrimitive {", "is_target": false}, {"number": 140, "content": "  public:", "is_target": false}, {"number": 141, "content": "    OSGBox(float lengthX, float lengthY, float lengthZ);", "is_target": false}, {"number": 142, "content": "    explicit OSGBox(osg::Vec3 dim);", "is_target": false}, {"number": 143, "content": "", "is_target": false}, {"number": 144, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "    virtual osg::Vec3 getDim();", "is_target": false}, {"number": 147, "content": "    virtual void setDim(osg::Vec3);", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "  protected:", "is_target": false}]}, "901": {"lines": [{"number": 157, "content": "  class OSGBoxTex : public OSGBox {", "is_target": false}, {"number": 158, "content": "  public:", "is_target": false}, {"number": 159, "content": "    OSGBoxTex(float lengthX, float lengthY, float lengthZ);", "is_target": false}, {"number": 160, "content": "    explicit OSGBoxTex(osg::Vec3 dim);", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 163, "content": "", "is_target": false}, {"number": 164, "content": "    // Bring base class methods into scope", "is_target": false}, {"number": 165, "content": "    using OSGBox::getDim;", "is_target": false}, {"number": 166, "content": "    using OSGBox::setDim;", "is_target": false}, {"number": 167, "content": "    ", "is_target": false}]}, "902": {"lines": [{"number": 166, "content": "    using OSGBox::setDim;", "is_target": false}, {"number": 167, "content": "    ", "is_target": false}, {"number": 168, "content": "    virtual osg::Vec3 getDim() const { return dim;}", "is_target": false}, {"number": 169, "content": "    virtual void setDim(const osg::Vec3& _dim) { dim = _dim;}", "is_target": false}, {"number": 170, "content": "", "is_target": false}, {"number": 171, "content": "    virtual void setColor(const Color& color);", "is_target": true}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "  protected:", "is_target": false}, {"number": 174, "content": "    /// this actually sets the textures, overwritten", "is_target": false}, {"number": 175, "content": "    virtual void applyTextures();", "is_target": false}, {"number": 176, "content": "", "is_target": false}]}, "903": {"lines": [{"number": 170, "content": "", "is_target": false}, {"number": 171, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "  protected:", "is_target": false}, {"number": 174, "content": "    /// this actually sets the textures, overwritten", "is_target": false}, {"number": 175, "content": "    virtual void applyTextures();", "is_target": true}, {"number": 176, "content": "", "is_target": false}, {"number": 177, "content": "    osg::Vec3 dim;", "is_target": false}, {"number": 178, "content": "    // we use one geode for each face of the box for the texture handling", "is_target": false}, {"number": 179, "content": "    osg::ref_ptr<osg::Geode> faces[6];", "is_target": false}, {"number": 180, "content": "  };", "is_target": false}]}, "904": {"lines": [{"number": 185, "content": "  */", "is_target": false}, {"number": 186, "content": "  class OSGSphere : public OSGPrimitive {", "is_target": false}, {"number": 187, "content": "  public:", "is_target": false}, {"number": 188, "content": "    explicit OSGSphere(float radius);", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 191, "content": "", "is_target": false}, {"number": 192, "content": "    float getRadius() const { return radius; }", "is_target": false}, {"number": 193, "content": "  protected:", "is_target": false}, {"number": 194, "content": "    float radius = 0;", "is_target": false}, {"number": 195, "content": "  };", "is_target": false}]}, "905": {"lines": [{"number": 199, "content": "  */", "is_target": false}, {"number": 200, "content": "  class OSGCapsule : public OSGPrimitive {", "is_target": false}, {"number": 201, "content": "  public:", "is_target": false}, {"number": 202, "content": "    OSGCapsule(float radius, float height);", "is_target": false}, {"number": 203, "content": "", "is_target": false}, {"number": 204, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 205, "content": "", "is_target": false}, {"number": 206, "content": "    float getRadius() const { return radius; }", "is_target": false}, {"number": 207, "content": "    float getHeight() const { return height; }", "is_target": false}, {"number": 208, "content": "  protected:", "is_target": false}, {"number": 209, "content": "    float radius = 0;", "is_target": false}]}, "906": {"lines": [{"number": 216, "content": "  */", "is_target": false}, {"number": 217, "content": "  class OSGCylinder : public OSGPrimitive {", "is_target": false}, {"number": 218, "content": "  public:", "is_target": false}, {"number": 219, "content": "    OSGCylinder(float radius, float height);", "is_target": false}, {"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "    float getRadius() const { return radius; }", "is_target": false}, {"number": 224, "content": "    float getHeight() const { return height; }", "is_target": false}, {"number": 225, "content": "  protected:", "is_target": false}, {"number": 226, "content": "    float radius = 0;", "is_target": false}]}, "907": {"lines": [{"number": 230, "content": "  class OSGLine : public OSGPrimitive {", "is_target": false}, {"number": 231, "content": "  public:", "is_target": false}, {"number": 232, "content": "    // the list of points is considered pairwise, start-end points of each line segment", "is_target": false}, {"number": 233, "content": "    OSGLine(const std::list<osg::Vec3>& points);", "is_target": false}, {"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "    virtual void applyTextures() {}", "is_target": false}, {"number": 238, "content": "", "is_target": false}, {"number": 239, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 240, "content": "", "is_target": false}]}, "908": {"lines": [{"number": 232, "content": "    // the list of points is considered pairwise, start-end points of each line segment", "is_target": false}, {"number": 233, "content": "    OSGLine(const std::list<osg::Vec3>& points);", "is_target": false}, {"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "    virtual void applyTextures() {}", "is_target": true}, {"number": 238, "content": "", "is_target": false}, {"number": 239, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 240, "content": "", "is_target": false}, {"number": 241, "content": "    // use the new points", "is_target": false}, {"number": 242, "content": "    virtual void setPoints(const std::list<osg::Vec3>& points);", "is_target": false}]}, "909": {"lines": [{"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "    virtual void applyTextures() {}", "is_target": false}, {"number": 238, "content": "", "is_target": false}, {"number": 239, "content": "    virtual void setColor(const Color& color);", "is_target": true}, {"number": 240, "content": "", "is_target": false}, {"number": 241, "content": "    // use the new points", "is_target": false}, {"number": 242, "content": "    virtual void setPoints(const std::list<osg::Vec3>& points);", "is_target": false}, {"number": 243, "content": "", "is_target": false}, {"number": 244, "content": "  protected:", "is_target": false}]}, "910": {"lines": [{"number": 259, "content": "       @param filename filename of the model file (search path is osg data path)", "is_target": false}, {"number": 260, "content": "       @param scale scale factor used for scaling the model", "is_target": false}, {"number": 261, "content": "       @param options for model reader", "is_target": false}, {"number": 262, "content": "     */", "is_target": false}, {"number": 263, "content": "    OSGMesh(const std::string& filename, float scale = 1, const osgDB::ReaderWriter::Options* options = nullptr);", "is_target": false}, {"number": 264, "content": "    ~OSGMesh();", "is_target": true}, {"number": 265, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 266, "content": "    /**", "is_target": false}, {"number": 267, "content": "     * Same as init, but the mesh file is not loaded and therefore not displayed.", "is_target": false}, {"number": 268, "content": "     * This method ensures that the transform is correctly initialised.", "is_target": false}, {"number": 269, "content": "     * @param osgHandle", "is_target": false}]}, "911": {"lines": [{"number": 260, "content": "       @param scale scale factor used for scaling the model", "is_target": false}, {"number": 261, "content": "       @param options for model reader", "is_target": false}, {"number": 262, "content": "     */", "is_target": false}, {"number": 263, "content": "    OSGMesh(const std::string& filename, float scale = 1, const osgDB::ReaderWriter::Options* options = nullptr);", "is_target": false}, {"number": 264, "content": "    ~OSGMesh();", "is_target": false}, {"number": 265, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 266, "content": "    /**", "is_target": false}, {"number": 267, "content": "     * Same as init, but the mesh file is not loaded and therefore not displayed.", "is_target": false}, {"number": 268, "content": "     * This method ensures that the transform is correctly initialised.", "is_target": false}, {"number": 269, "content": "     * @param osgHandle", "is_target": false}, {"number": 270, "content": "     */", "is_target": false}]}, "912": {"lines": [{"number": 289, "content": "  class OSGText : public OSGPrimitive {", "is_target": false}, {"number": 290, "content": "  public:", "is_target": false}, {"number": 291, "content": "    OSGText(const std::string& text, int fontsize = 12,", "is_target": false}, {"number": 292, "content": "            osgText::Text::AlignmentType align = osgText::Text::LEFT_BASE_LINE);", "is_target": false}, {"number": 293, "content": "", "is_target": false}, {"number": 294, "content": "    virtual ~OSGText();", "is_target": true}, {"number": 295, "content": "", "is_target": false}, {"number": 296, "content": "    // Delete copy constructor and assignment operator", "is_target": false}, {"number": 297, "content": "    OSGText(const OSGText&) = delete;", "is_target": false}, {"number": 298, "content": "    OSGText& operator=(const OSGText&) = delete;", "is_target": false}, {"number": 299, "content": "", "is_target": false}]}, "913": {"lines": [{"number": 295, "content": "", "is_target": false}, {"number": 296, "content": "    // Delete copy constructor and assignment operator", "is_target": false}, {"number": 297, "content": "    OSGText(const OSGText&) = delete;", "is_target": false}, {"number": 298, "content": "    OSGText& operator=(const OSGText&) = delete;", "is_target": false}, {"number": 299, "content": "", "is_target": false}, {"number": 300, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 301, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": false}, {"number": 302, "content": "    virtual osg::Group* getGroup();", "is_target": false}, {"number": 303, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 304, "content": "    /// returns a osg transformation object;", "is_target": false}, {"number": 305, "content": "    virtual osg::Transform* getTransform();", "is_target": false}]}, "914": {"lines": [{"number": 296, "content": "    // Delete copy constructor and assignment operator", "is_target": false}, {"number": 297, "content": "    OSGText(const OSGText&) = delete;", "is_target": false}, {"number": 298, "content": "    OSGText& operator=(const OSGText&) = delete;", "is_target": false}, {"number": 299, "content": "", "is_target": false}, {"number": 300, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 301, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": true}, {"number": 302, "content": "    virtual osg::Group* getGroup();", "is_target": false}, {"number": 303, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 304, "content": "    /// returns a osg transformation object;", "is_target": false}, {"number": 305, "content": "    virtual osg::Transform* getTransform();", "is_target": false}, {"number": 306, "content": "  private:", "is_target": false}]}, "915": {"lines": [{"number": 297, "content": "    OSGText(const OSGText&) = delete;", "is_target": false}, {"number": 298, "content": "    OSGText& operator=(const OSGText&) = delete;", "is_target": false}, {"number": 299, "content": "", "is_target": false}, {"number": 300, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 301, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": false}, {"number": 302, "content": "    virtual osg::Group* getGroup();", "is_target": true}, {"number": 303, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 304, "content": "    /// returns a osg transformation object;", "is_target": false}, {"number": 305, "content": "    virtual osg::Transform* getTransform();", "is_target": false}, {"number": 306, "content": "  private:", "is_target": false}, {"number": 307, "content": "    osgText::Text* osgText;", "is_target": false}]}, "916": {"lines": [{"number": 298, "content": "    OSGText& operator=(const OSGText&) = delete;", "is_target": false}, {"number": 299, "content": "", "is_target": false}, {"number": 300, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 301, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": false}, {"number": 302, "content": "    virtual osg::Group* getGroup();", "is_target": false}, {"number": 303, "content": "    virtual void setColor(const Color& color);", "is_target": true}, {"number": 304, "content": "    /// returns a osg transformation object;", "is_target": false}, {"number": 305, "content": "    virtual osg::Transform* getTransform();", "is_target": false}, {"number": 306, "content": "  private:", "is_target": false}, {"number": 307, "content": "    osgText::Text* osgText;", "is_target": false}, {"number": 308, "content": "  };", "is_target": false}]}, "917": {"lines": [{"number": 300, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 301, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": false}, {"number": 302, "content": "    virtual osg::Group* getGroup();", "is_target": false}, {"number": 303, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 304, "content": "    /// returns a osg transformation object;", "is_target": false}, {"number": 305, "content": "    virtual osg::Transform* getTransform();", "is_target": true}, {"number": 306, "content": "  private:", "is_target": false}, {"number": 307, "content": "    osgText::Text* osgText;", "is_target": false}, {"number": 308, "content": "  };", "is_target": false}, {"number": 309, "content": "", "is_target": false}, {"number": 310, "content": "", "is_target": false}]}, "918": {"lines": [{"number": 91, "content": "      virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "  };", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "} // end namespace lpzrobots", "is_target": true}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "// End of header guard", "is_target": false}, {"number": 100, "content": "#endif", "is_target": false}]}, "919": {"lines": [{"number": 648, "content": "          force *= 0.3*factor/globalData.odeConfig.simStepSize;", "is_target": false}, {"number": 649, "content": "          dBodyAddTorque(const_cast<Primitive*>(body)->getBody(),force.x(),force.y(),force.z());", "is_target": false}, {"number": 650, "content": "        }", "is_target": false}, {"number": 651, "content": "", "is_target": false}, {"number": 652, "content": "        FOREACHC(vector<Primitive*>, camHandle.watchingAgent->getRobot()->getAllPrimitives(), pi){", "is_target": false}, {"number": 653, "content": "          Primitive* p = *pi;", "is_target": true}, {"number": 654, "content": "          // limit both, rotation and velocity", "is_target": false}, {"number": 655, "content": "          bool limit=false;", "is_target": false}, {"number": 656, "content": "          limit |= p->limitLinearVel(50);", "is_target": false}, {"number": 657, "content": "          limit |= p->limitAngularVel(50);", "is_target": false}, {"number": 658, "content": "          if (limit) camHandle.manipulationForce/=2;", "is_target": false}]}, "920": {"lines": [{"number": 58, "content": "    osgheightfield = new OSGHeightField(filename, x_size, y_size, height);", "is_target": false}, {"number": 59, "content": "    data=0;", "is_target": false}, {"number": 60, "content": "  }", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  HeightField::HeightField(osg::HeightField* heightfield, float x_size, float y_size){", "is_target": false}, {"number": 63, "content": "    osgheightfield = new OSGHeightField(heightfield, x_size, y_size);", "is_target": true}, {"number": 64, "content": "    data=0;", "is_target": false}, {"number": 65, "content": "  }", "is_target": false}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "  HeightField::~HeightField(){", "is_target": false}, {"number": 68, "content": "    if(data) dGeomTriMeshDataDestroy (data);", "is_target": false}]}, "921": {"lines": [{"number": 58, "content": "    osgheightfield = new OSGHeightField(filename, x_size, y_size, height);", "is_target": false}, {"number": 59, "content": "    data=0;", "is_target": false}, {"number": 60, "content": "  }", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  HeightField::HeightField(osg::HeightField* heightfield, float x_size, float y_size){", "is_target": false}, {"number": 63, "content": "    osgheightfield = new OSGHeightField(heightfield, x_size, y_size);", "is_target": true}, {"number": 64, "content": "    data=0;", "is_target": false}, {"number": 65, "content": "  }", "is_target": false}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "  HeightField::~HeightField(){", "is_target": false}, {"number": 68, "content": "    if(data) dGeomTriMeshDataDestroy (data);", "is_target": false}]}, "922": {"lines": [{"number": 130, "content": "  }", "is_target": false}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "  virtual void usage() const {", "is_target": false}, {"number": 133, "content": "    printf(\"\\t-track\\tenable tracking of the position of the robot\\n\");", "is_target": false}, {"number": 134, "content": "  }", "is_target": false}, {"number": 135, "content": "};", "is_target": true}, {"number": 136, "content": "", "is_target": false}, {"number": 137, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 138, "content": "{", "is_target": false}, {"number": 139, "content": "  ThisSim sim;", "is_target": false}, {"number": 140, "content": "  track = sim.contains(argv, argc, \"-track\"); // check whether cmd-line contains -track", "is_target": false}]}, "923": {"lines": [{"number": 34, "content": "  // class for 3D axis", "is_target": false}, {"number": 35, "content": "  class Axis : public osg::Vec4 {", "is_target": false}, {"number": 36, "content": "  public:", "is_target": false}, {"number": 37, "content": "    Axis () : osg::Vec4() {}", "is_target": false}, {"number": 38, "content": "    Axis (float x, float y, float z) : osg::Vec4(x, y, z, 0) {}", "is_target": false}, {"number": 39, "content": "    Axis (const osg::Vec4& v) : osg::Vec4(v) { w() =0; }", "is_target": true}, {"number": 40, "content": "    explicit Axis (const osg::Vec3& v) : osg::Vec4(v,0) {}", "is_target": false}, {"number": 41, "content": "    explicit Axis (const dReal v[3]) : osg::Vec4(static_cast<float>(v[0]), static_cast<float>(v[1]), static_cast<float>(v[2]), 0) {}", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "    osg::Vec3 vec3() const { return osg::Vec3( x(), y(), z()); }", "is_target": false}, {"number": 44, "content": "", "is_target": false}]}, "924": {"lines": [{"number": 35, "content": "namespace lpzrobots {", "is_target": false}, {"number": 36, "content": "", "is_target": false}, {"number": 37, "content": "  struct Indices {", "is_target": false}, {"number": 38, "content": "    Indices(){}", "is_target": false}, {"number": 39, "content": "    Indices(dTriIndex a, dTriIndex b, dTriIndex c) { i[0] = a; i[1] = b; i[2] = c; }", "is_target": false}, {"number": 40, "content": "    Indices(dTriIndex d[3]) { i[0] = d[0]; i[1] = d[1]; i[2] = d[2]; }", "is_target": true}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "    dTriIndex i[3];", "is_target": false}, {"number": 43, "content": "  };", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "", "is_target": false}]}, "925": {"lines": [{"number": 43, "content": "  };", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "  struct Vertex {", "is_target": false}, {"number": 47, "content": "    Vertex(){}", "is_target": false}, {"number": 48, "content": "    Vertex(const osg::Vec3& vec) { v[0] = vec.x(); v[1] = vec.y(); v[2] = vec.z();}", "is_target": true}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    dVector3 v;  // 4th component can be left out, reducing memory usage", "is_target": false}, {"number": 51, "content": "  };", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "", "is_target": false}]}, "926": {"lines": [{"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "/** Plane primitive */", "is_target": false}, {"number": 223, "content": "class Plane : public Primitive {", "is_target": false}, {"number": 224, "content": "public:", "is_target": false}, {"number": 225, "content": "  Plane();", "is_target": false}, {"number": 226, "content": "  virtual ~Plane();", "is_target": true}, {"number": 227, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 228, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 229, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "  virtual void update();", "is_target": false}]}, "927": {"lines": [{"number": 222, "content": "/** Plane primitive */", "is_target": false}, {"number": 223, "content": "class Plane : public Primitive {", "is_target": false}, {"number": 224, "content": "public:", "is_target": false}, {"number": 225, "content": "  Plane();", "is_target": false}, {"number": 226, "content": "  virtual ~Plane();", "is_target": false}, {"number": 227, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": true}, {"number": 228, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 229, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "  virtual void update();", "is_target": false}, {"number": 232, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}]}, "928": {"lines": [{"number": 226, "content": "  virtual ~Plane();", "is_target": false}, {"number": 227, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 228, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 229, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "  virtual void update();", "is_target": true}, {"number": 232, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 233, "content": "", "is_target": false}, {"number": 234, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 235, "content": "", "is_target": false}, {"number": 236, "content": "protected:", "is_target": false}]}, "929": {"lines": [{"number": 227, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 228, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 229, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "  virtual void update();", "is_target": false}, {"number": 232, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": true}, {"number": 233, "content": "", "is_target": false}, {"number": 234, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 235, "content": "", "is_target": false}, {"number": 236, "content": "protected:", "is_target": false}, {"number": 237, "content": "  OSGPlane* osgplane = nullptr;", "is_target": false}]}, "930": {"lines": [{"number": 229, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "  virtual void update();", "is_target": false}, {"number": 232, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 233, "content": "", "is_target": false}, {"number": 234, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": true}, {"number": 235, "content": "", "is_target": false}, {"number": 236, "content": "protected:", "is_target": false}, {"number": 237, "content": "  OSGPlane* osgplane = nullptr;", "is_target": false}, {"number": 238, "content": "};", "is_target": false}, {"number": 239, "content": "", "is_target": false}]}, "931": {"lines": [{"number": 243, "content": "public:", "is_target": false}, {"number": 244, "content": "", "is_target": false}, {"number": 245, "content": "  Box(float lengthX, float lengthY, float lengthZ);", "is_target": false}, {"number": 246, "content": "  explicit Box(const osg::Vec3& dim);", "is_target": false}, {"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "  virtual ~Box();", "is_target": true}, {"number": 249, "content": "", "is_target": false}, {"number": 250, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 251, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 252, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 253, "content": "", "is_target": false}]}, "932": {"lines": [{"number": 245, "content": "  Box(float lengthX, float lengthY, float lengthZ);", "is_target": false}, {"number": 246, "content": "  explicit Box(const osg::Vec3& dim);", "is_target": false}, {"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "  virtual ~Box();", "is_target": false}, {"number": 249, "content": "", "is_target": false}, {"number": 250, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": true}, {"number": 251, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 252, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 253, "content": "", "is_target": false}, {"number": 254, "content": "  virtual void update();", "is_target": false}, {"number": 255, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}]}, "933": {"lines": [{"number": 249, "content": "", "is_target": false}, {"number": 250, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 251, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 252, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 253, "content": "", "is_target": false}, {"number": 254, "content": "  virtual void update();", "is_target": true}, {"number": 255, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 258, "content": "protected:", "is_target": false}, {"number": 259, "content": "  OSGBoxTex* osgbox = nullptr;", "is_target": false}]}, "934": {"lines": [{"number": 250, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 251, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 252, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 253, "content": "", "is_target": false}, {"number": 254, "content": "  virtual void update();", "is_target": false}, {"number": 255, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": true}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 258, "content": "protected:", "is_target": false}, {"number": 259, "content": "  OSGBoxTex* osgbox = nullptr;", "is_target": false}, {"number": 260, "content": "};", "is_target": false}]}, "935": {"lines": [{"number": 252, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 253, "content": "", "is_target": false}, {"number": 254, "content": "  virtual void update();", "is_target": false}, {"number": 255, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": true}, {"number": 258, "content": "protected:", "is_target": false}, {"number": 259, "content": "  OSGBoxTex* osgbox = nullptr;", "is_target": false}, {"number": 260, "content": "};", "is_target": false}, {"number": 261, "content": "", "is_target": false}, {"number": 262, "content": "", "is_target": false}]}, "936": {"lines": [{"number": 262, "content": "", "is_target": false}, {"number": 263, "content": "/** Sphere primitive */", "is_target": false}, {"number": 264, "content": "class Sphere : public Primitive {", "is_target": false}, {"number": 265, "content": "public:", "is_target": false}, {"number": 266, "content": "  explicit Sphere(float radius);", "is_target": false}, {"number": 267, "content": "  virtual ~Sphere();", "is_target": true}, {"number": 268, "content": "", "is_target": false}, {"number": 269, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 270, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 271, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 272, "content": "", "is_target": false}]}, "937": {"lines": [{"number": 264, "content": "class Sphere : public Primitive {", "is_target": false}, {"number": 265, "content": "public:", "is_target": false}, {"number": 266, "content": "  explicit Sphere(float radius);", "is_target": false}, {"number": 267, "content": "  virtual ~Sphere();", "is_target": false}, {"number": 268, "content": "", "is_target": false}, {"number": 269, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": true}, {"number": 270, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 271, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 272, "content": "", "is_target": false}, {"number": 273, "content": "  virtual void update();", "is_target": false}, {"number": 274, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}]}, "938": {"lines": [{"number": 268, "content": "", "is_target": false}, {"number": 269, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 270, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 271, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 272, "content": "", "is_target": false}, {"number": 273, "content": "  virtual void update();", "is_target": true}, {"number": 274, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 275, "content": "", "is_target": false}, {"number": 276, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 277, "content": "", "is_target": false}, {"number": 278, "content": "protected:", "is_target": false}]}, "939": {"lines": [{"number": 269, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 270, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 271, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 272, "content": "", "is_target": false}, {"number": 273, "content": "  virtual void update();", "is_target": false}, {"number": 274, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": true}, {"number": 275, "content": "", "is_target": false}, {"number": 276, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 277, "content": "", "is_target": false}, {"number": 278, "content": "protected:", "is_target": false}, {"number": 279, "content": "  OSGSphere* osgsphere = nullptr;", "is_target": false}]}, "940": {"lines": [{"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "private:", "is_target": false}, {"number": 147, "content": "  // saves the actual position AND rotation of the segment", "is_target": false}, {"number": 148, "content": "  Matrix pos;", "is_target": false}, {"number": 149, "content": "  Matrix invpos;", "is_target": false}, {"number": 150, "content": "};", "is_target": true}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "#endif", "is_target": false}]}, "941": {"lines": [{"number": 271, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 272, "content": "", "is_target": false}, {"number": 273, "content": "  virtual void update();", "is_target": false}, {"number": 274, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 275, "content": "", "is_target": false}, {"number": 276, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": true}, {"number": 277, "content": "", "is_target": false}, {"number": 278, "content": "protected:", "is_target": false}, {"number": 279, "content": "  OSGSphere* osgsphere = nullptr;", "is_target": false}, {"number": 280, "content": "};", "is_target": false}, {"number": 281, "content": "", "is_target": false}]}, "942": {"lines": [{"number": 281, "content": "", "is_target": false}, {"number": 282, "content": "/** Capsule primitive */", "is_target": false}, {"number": 283, "content": "class Capsule : public Primitive {", "is_target": false}, {"number": 284, "content": "public:", "is_target": false}, {"number": 285, "content": "  Capsule(float radius, float height);", "is_target": false}, {"number": 286, "content": "  virtual ~Capsule();", "is_target": true}, {"number": 287, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 288, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 289, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 290, "content": "", "is_target": false}, {"number": 291, "content": "  virtual void update();", "is_target": false}]}, "943": {"lines": [{"number": 282, "content": "/** Capsule primitive */", "is_target": false}, {"number": 283, "content": "class Capsule : public Primitive {", "is_target": false}, {"number": 284, "content": "public:", "is_target": false}, {"number": 285, "content": "  Capsule(float radius, float height);", "is_target": false}, {"number": 286, "content": "  virtual ~Capsule();", "is_target": false}, {"number": 287, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": true}, {"number": 288, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 289, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 290, "content": "", "is_target": false}, {"number": 291, "content": "  virtual void update();", "is_target": false}, {"number": 292, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}]}, "944": {"lines": [{"number": 286, "content": "  virtual ~Capsule();", "is_target": false}, {"number": 287, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 288, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 289, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 290, "content": "", "is_target": false}, {"number": 291, "content": "  virtual void update();", "is_target": true}, {"number": 292, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 293, "content": "", "is_target": false}, {"number": 294, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 295, "content": "", "is_target": false}, {"number": 296, "content": "protected:", "is_target": false}]}, "945": {"lines": [{"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    OSGHeightField(osg::HeightField* heightfield,float x_size, float y_size);", "is_target": false}, {"number": 48, "content": "    OSGHeightField(const std::string& filename, float x_size, float y_size, float height);", "is_target": false}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    virtual void setMatrix(const osg::Matrix& matrix);", "is_target": true}, {"number": 51, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "    virtual const osg::HeightField* getHeightField() const { return field; }", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    /** loads an ppm image and returns the height field using the given coding and the height", "is_target": false}]}, "946": {"lines": [{"number": 287, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 288, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 289, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 290, "content": "", "is_target": false}, {"number": 291, "content": "  virtual void update();", "is_target": false}, {"number": 292, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": true}, {"number": 293, "content": "", "is_target": false}, {"number": 294, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 295, "content": "", "is_target": false}, {"number": 296, "content": "protected:", "is_target": false}, {"number": 297, "content": "  OSGCapsule* osgcapsule = nullptr;", "is_target": false}]}, "947": {"lines": [{"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    OSGHeightField(osg::HeightField* heightfield,float x_size, float y_size);", "is_target": false}, {"number": 48, "content": "    OSGHeightField(const std::string& filename, float x_size, float y_size, float height);", "is_target": false}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    virtual void setMatrix(const osg::Matrix& matrix);", "is_target": false}, {"number": 51, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "    virtual const osg::HeightField* getHeightField() const { return field; }", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    /** loads an ppm image and returns the height field using the given coding and the height", "is_target": false}, {"number": 56, "content": "        (maximal height of the heightfield)", "is_target": false}]}, "948": {"lines": [{"number": 289, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 290, "content": "", "is_target": false}, {"number": 291, "content": "  virtual void update();", "is_target": false}, {"number": 292, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 293, "content": "", "is_target": false}, {"number": 294, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": true}, {"number": 295, "content": "", "is_target": false}, {"number": 296, "content": "protected:", "is_target": false}, {"number": 297, "content": "  OSGCapsule* osgcapsule = nullptr;", "is_target": false}, {"number": 298, "content": "};", "is_target": false}, {"number": 299, "content": "", "is_target": false}]}, "949": {"lines": [{"number": 299, "content": "", "is_target": false}, {"number": 300, "content": "/** Cylinder primitive */", "is_target": false}, {"number": 301, "content": "class Cylinder : public Primitive {", "is_target": false}, {"number": 302, "content": "public:", "is_target": false}, {"number": 303, "content": "  Cylinder(float radius, float height);", "is_target": false}, {"number": 304, "content": "  virtual ~Cylinder();", "is_target": true}, {"number": 305, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 306, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 307, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 308, "content": "", "is_target": false}, {"number": 309, "content": "  virtual void update();", "is_target": false}]}, "950": {"lines": [{"number": 300, "content": "/** Cylinder primitive */", "is_target": false}, {"number": 301, "content": "class Cylinder : public Primitive {", "is_target": false}, {"number": 302, "content": "public:", "is_target": false}, {"number": 303, "content": "  Cylinder(float radius, float height);", "is_target": false}, {"number": 304, "content": "  virtual ~Cylinder();", "is_target": false}, {"number": 305, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": true}, {"number": 306, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 307, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 308, "content": "", "is_target": false}, {"number": 309, "content": "  virtual void update();", "is_target": false}, {"number": 310, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}]}, "951": {"lines": [{"number": 304, "content": "  virtual ~Cylinder();", "is_target": false}, {"number": 305, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 306, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 307, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 308, "content": "", "is_target": false}, {"number": 309, "content": "  virtual void update();", "is_target": true}, {"number": 310, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 311, "content": "", "is_target": false}, {"number": 312, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 313, "content": "protected:", "is_target": false}, {"number": 314, "content": "  OSGCylinder* osgcylinder = nullptr;", "is_target": false}]}, "952": {"lines": [{"number": 305, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 306, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 307, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 308, "content": "", "is_target": false}, {"number": 309, "content": "  virtual void update();", "is_target": false}, {"number": 310, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": true}, {"number": 311, "content": "", "is_target": false}, {"number": 312, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 313, "content": "protected:", "is_target": false}, {"number": 314, "content": "  OSGCylinder* osgcylinder = nullptr;", "is_target": false}, {"number": 315, "content": "};", "is_target": false}]}, "953": {"lines": [{"number": 307, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 308, "content": "", "is_target": false}, {"number": 309, "content": "  virtual void update();", "is_target": false}, {"number": 310, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 311, "content": "", "is_target": false}, {"number": 312, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": true}, {"number": 313, "content": "protected:", "is_target": false}, {"number": 314, "content": "  OSGCylinder* osgcylinder = nullptr;", "is_target": false}, {"number": 315, "content": "};", "is_target": false}, {"number": 316, "content": "", "is_target": false}, {"number": 317, "content": "/** Ray primitive", "is_target": false}]}, "954": {"lines": [{"number": 323, "content": "public:", "is_target": false}, {"number": 324, "content": "  /**", "is_target": false}, {"number": 325, "content": "     @param thickness if thickness == 0 then a line is used and not a box", "is_target": false}, {"number": 326, "content": "   */", "is_target": false}, {"number": 327, "content": "  Ray(double range, float thickness, float length);", "is_target": false}, {"number": 328, "content": "  virtual ~Ray();", "is_target": true}, {"number": 329, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 330, "content": "      const OsgHandle& osgHandle,", "is_target": false}, {"number": 331, "content": "      char mode = Geom | Draw);", "is_target": false}, {"number": 332, "content": "", "is_target": false}, {"number": 333, "content": "  void setLength(float len);", "is_target": false}]}, "955": {"lines": [{"number": 324, "content": "  /**", "is_target": false}, {"number": 325, "content": "     @param thickness if thickness == 0 then a line is used and not a box", "is_target": false}, {"number": 326, "content": "   */", "is_target": false}, {"number": 327, "content": "  Ray(double range, float thickness, float length);", "is_target": false}, {"number": 328, "content": "  virtual ~Ray();", "is_target": false}, {"number": 329, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": true}, {"number": 330, "content": "      const OsgHandle& osgHandle,", "is_target": false}, {"number": 331, "content": "      char mode = Geom | Draw);", "is_target": false}, {"number": 332, "content": "", "is_target": false}, {"number": 333, "content": "  void setLength(float len);", "is_target": false}, {"number": 334, "content": "  virtual void update();", "is_target": false}]}, "956": {"lines": [{"number": 329, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 330, "content": "      const OsgHandle& osgHandle,", "is_target": false}, {"number": 331, "content": "      char mode = Geom | Draw);", "is_target": false}, {"number": 332, "content": "", "is_target": false}, {"number": 333, "content": "  void setLength(float len);", "is_target": false}, {"number": 334, "content": "  virtual void update();", "is_target": true}, {"number": 335, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 336, "content": "", "is_target": false}, {"number": 337, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 338, "content": "protected:", "is_target": false}, {"number": 339, "content": "  double range = 0;", "is_target": false}]}, "957": {"lines": [{"number": 330, "content": "      const OsgHandle& osgHandle,", "is_target": false}, {"number": 331, "content": "      char mode = Geom | Draw);", "is_target": false}, {"number": 332, "content": "", "is_target": false}, {"number": 333, "content": "  void setLength(float len);", "is_target": false}, {"number": 334, "content": "  virtual void update();", "is_target": false}, {"number": 335, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": true}, {"number": 336, "content": "", "is_target": false}, {"number": 337, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 338, "content": "protected:", "is_target": false}, {"number": 339, "content": "  double range = 0;", "is_target": false}, {"number": 340, "content": "  float thickness = 0;", "is_target": false}]}, "958": {"lines": [{"number": 332, "content": "", "is_target": false}, {"number": 333, "content": "  void setLength(float len);", "is_target": false}, {"number": 334, "content": "  virtual void update();", "is_target": false}, {"number": 335, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 336, "content": "", "is_target": false}, {"number": 337, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": true}, {"number": 338, "content": "protected:", "is_target": false}, {"number": 339, "content": "  double range = 0;", "is_target": false}, {"number": 340, "content": "  float thickness = 0;", "is_target": false}, {"number": 341, "content": "  float length = 0;", "is_target": false}, {"number": 342, "content": "  OSGPrimitive* osgprimitive = nullptr;", "is_target": false}]}, "959": {"lines": [{"number": 347, "content": "", "is_target": false}, {"number": 348, "content": "/** Mesh primitive */", "is_target": false}, {"number": 349, "content": "class Mesh : public Primitive {", "is_target": false}, {"number": 350, "content": "public:", "is_target": false}, {"number": 351, "content": "  Mesh(const std::string& filename,float scale);", "is_target": false}, {"number": 352, "content": "  virtual ~Mesh();", "is_target": true}, {"number": 353, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 354, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 355, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 356, "content": "  virtual void update();", "is_target": false}, {"number": 357, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}]}, "960": {"lines": [{"number": 348, "content": "/** Mesh primitive */", "is_target": false}, {"number": 349, "content": "class Mesh : public Primitive {", "is_target": false}, {"number": 350, "content": "public:", "is_target": false}, {"number": 351, "content": "  Mesh(const std::string& filename,float scale);", "is_target": false}, {"number": 352, "content": "  virtual ~Mesh();", "is_target": false}, {"number": 353, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": true}, {"number": 354, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 355, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 356, "content": "  virtual void update();", "is_target": false}, {"number": 357, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 358, "content": "  virtual float getRadius() const;", "is_target": false}]}, "961": {"lines": [{"number": 351, "content": "  Mesh(const std::string& filename,float scale);", "is_target": false}, {"number": 352, "content": "  virtual ~Mesh();", "is_target": false}, {"number": 353, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 354, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 355, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 356, "content": "  virtual void update();", "is_target": true}, {"number": 357, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 358, "content": "  virtual float getRadius() const;", "is_target": false}, {"number": 359, "content": "", "is_target": false}, {"number": 360, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 361, "content": "", "is_target": false}]}, "962": {"lines": [{"number": 352, "content": "  virtual ~Mesh();", "is_target": false}, {"number": 353, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 354, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 355, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 356, "content": "  virtual void update();", "is_target": false}, {"number": 357, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": true}, {"number": 358, "content": "  virtual float getRadius() const;", "is_target": false}, {"number": 359, "content": "", "is_target": false}, {"number": 360, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 361, "content": "", "is_target": false}, {"number": 362, "content": "  /**", "is_target": false}]}, "963": {"lines": [{"number": 355, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 356, "content": "  virtual void update();", "is_target": false}, {"number": 357, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 358, "content": "  virtual float getRadius() const;", "is_target": false}, {"number": 359, "content": "", "is_target": false}, {"number": 360, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": true}, {"number": 361, "content": "", "is_target": false}, {"number": 362, "content": "  /**", "is_target": false}, {"number": 363, "content": "   * Sets the BoundingShape externally (e.g. XMLBoundingShape).", "is_target": false}, {"number": 364, "content": "   * Any existing BoundingShape will be deleted.", "is_target": false}, {"number": 365, "content": "   */", "is_target": false}]}, "964": {"lines": [{"number": 363, "content": "   * Sets the BoundingShape externally (e.g. XMLBoundingShape).", "is_target": false}, {"number": 364, "content": "   * Any existing BoundingShape will be deleted.", "is_target": false}, {"number": 365, "content": "   */", "is_target": false}, {"number": 366, "content": "  virtual void setBoundingShape(BoundingShape* boundingShape);", "is_target": false}, {"number": 367, "content": "", "is_target": false}, {"number": 368, "content": "  virtual void setPose(const Pose& pose);", "is_target": true}, {"number": 369, "content": "", "is_target": false}, {"number": 370, "content": "protected:", "is_target": false}, {"number": 371, "content": "  OSGMesh* osgmesh = nullptr;", "is_target": false}, {"number": 372, "content": "  const std::string filename;", "is_target": false}, {"number": 373, "content": "  float scale = 0;", "is_target": false}]}, "965": {"lines": [{"number": 390, "content": "      This Primitive must NOT have a body and should not be initialised", "is_target": false}, {"number": 391, "content": "  */", "is_target": false}, {"number": 392, "content": "  Transform(Primitive* parent, Primitive* child, const Pose& pose, bool deleteChild = true);", "is_target": false}, {"number": 393, "content": "", "is_target": false}, {"number": 394, "content": "  /// destructor deletes child object // it should be virtual by yuichi", "is_target": false}, {"number": 395, "content": "  virtual ~Transform();", "is_target": true}, {"number": 396, "content": "", "is_target": false}, {"number": 397, "content": "  /** initialised the transform object. This automatically", "is_target": false}, {"number": 398, "content": "      initialises the child geom.", "is_target": false}, {"number": 399, "content": "      @param mass mass of the child", "is_target": false}, {"number": 400, "content": "      @param mode is the mode for the child, except that Body bit is ignored (child can't have a body)", "is_target": false}]}, "966": {"lines": [{"number": 397, "content": "  /** initialised the transform object. This automatically", "is_target": false}, {"number": 398, "content": "      initialises the child geom.", "is_target": false}, {"number": 399, "content": "      @param mass mass of the child", "is_target": false}, {"number": 400, "content": "      @param mode is the mode for the child, except that Body bit is ignored (child can't have a body)", "is_target": false}, {"number": 401, "content": "   */", "is_target": false}, {"number": 402, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": true}, {"number": 403, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 404, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 405, "content": "", "is_target": false}, {"number": 406, "content": "  virtual void update();", "is_target": false}, {"number": 407, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}]}, "967": {"lines": [{"number": 401, "content": "   */", "is_target": false}, {"number": 402, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 403, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 404, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 405, "content": "", "is_target": false}, {"number": 406, "content": "  virtual void update();", "is_target": true}, {"number": 407, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 408, "content": "", "is_target": false}, {"number": 409, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 410, "content": "", "is_target": false}, {"number": 411, "content": "  // setting the pose is not supported", "is_target": false}]}, "968": {"lines": [{"number": 402, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 403, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 404, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 405, "content": "", "is_target": false}, {"number": 406, "content": "  virtual void update();", "is_target": false}, {"number": 407, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": true}, {"number": 408, "content": "", "is_target": false}, {"number": 409, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 410, "content": "", "is_target": false}, {"number": 411, "content": "  // setting the pose is not supported", "is_target": false}, {"number": 412, "content": "  virtual void setPose(const Pose& p) override {}", "is_target": false}]}, "969": {"lines": [{"number": 404, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 405, "content": "", "is_target": false}, {"number": 406, "content": "  virtual void update();", "is_target": false}, {"number": 407, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 408, "content": "", "is_target": false}, {"number": 409, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": true}, {"number": 410, "content": "", "is_target": false}, {"number": 411, "content": "  // setting the pose is not supported", "is_target": false}, {"number": 412, "content": "  virtual void setPose(const Pose& p) override {}", "is_target": false}, {"number": 413, "content": "", "is_target": false}, {"number": 414, "content": "protected:", "is_target": false}]}, "970": {"lines": [{"number": 35, "content": "  class HeightField : public Primitive {", "is_target": false}, {"number": 36, "content": "  public:", "is_target": false}, {"number": 37, "content": "    HeightField(const std::string& filename, float x_size, float y_size, float height);", "is_target": false}, {"number": 38, "content": "    HeightField(osg::HeightField* heightfield, float x_size, float y_size);", "is_target": false}, {"number": 39, "content": "", "is_target": false}, {"number": 40, "content": "    virtual ~HeightField();", "is_target": true}, {"number": 41, "content": "    virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 42, "content": "                      const OsgHandle& osgHandle,", "is_target": false}, {"number": 43, "content": "                      char mode = Primitive::Body | Primitive::Geom | Primitive::Draw);", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "", "is_target": false}]}, "971": {"lines": [{"number": 36, "content": "  public:", "is_target": false}, {"number": 37, "content": "    HeightField(const std::string& filename, float x_size, float y_size, float height);", "is_target": false}, {"number": 38, "content": "    HeightField(osg::HeightField* heightfield, float x_size, float y_size);", "is_target": false}, {"number": 39, "content": "", "is_target": false}, {"number": 40, "content": "    virtual ~HeightField();", "is_target": false}, {"number": 41, "content": "    virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": true}, {"number": 42, "content": "                      const OsgHandle& osgHandle,", "is_target": false}, {"number": 43, "content": "                      char mode = Primitive::Body | Primitive::Geom | Primitive::Draw);", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    virtual void setPose(const osg::Matrix& pose);", "is_target": false}]}, "972": {"lines": [{"number": 43, "content": "                      char mode = Primitive::Body | Primitive::Geom | Primitive::Draw);", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    virtual void setPose(const osg::Matrix& pose);", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "    virtual void update();", "is_target": true}, {"number": 49, "content": "    virtual OSGPrimitive* getOSGPrimitive() const { return osgheightfield; }", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "    virtual void setMass(double mass, bool density = false) override {}", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "  protected:", "is_target": false}]}, "973": {"lines": [{"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    virtual void setPose(const osg::Matrix& pose);", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "    virtual void update();", "is_target": false}, {"number": 49, "content": "    virtual OSGPrimitive* getOSGPrimitive() const { return osgheightfield; }", "is_target": true}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "    virtual void setMass(double mass, bool density = false) override {}", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "  protected:", "is_target": false}, {"number": 54, "content": "    OSGHeightField* osgheightfield;", "is_target": false}]}, "974": {"lines": [{"number": 102, "content": "      }", "is_target": false}, {"number": 103, "content": "      assert(k==(cols-1)*(rows-1)*2);", "is_target": false}, {"number": 104, "content": "      data = dGeomTriMeshDataCreate();", "is_target": false}, {"number": 105, "content": "      //      dGeomTriMeshDataBuildDouble1 (data, vertices, sizeof(osg::Vec3f) , rows*cols,", "is_target": false}, {"number": 106, "content": "      //                                    indices, k, sizeof(Indices), normales);", "is_target": false}, {"number": 107, "content": "      dGeomTriMeshDataBuildSimple (data, (dReal*)vertices[0].v, rows*cols, (dTriIndex*)indices[0].i, k*3);", "is_target": true}, {"number": 108, "content": "      geom = dCreateTriMesh (odeHandle.space, data, 0, 0, 0);", "is_target": false}, {"number": 109, "content": "      dGeomSetData(geom, static_cast<void*>(this)); // set primitive as geom data", "is_target": false}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "// #define VertexCount 5", "is_target": false}]}, "975": {"lines": [{"number": 91, "content": "      virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "  };", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "} // end namespace lpzrobots", "is_target": true}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "// End of header guard", "is_target": false}, {"number": 100, "content": "#endif", "is_target": false}]}, "976": {"lines": [{"number": 130, "content": "  }", "is_target": false}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "  virtual void usage() const {", "is_target": false}, {"number": 133, "content": "    printf(\"\\t-track\\tenable tracking of the position of the robot\\n\");", "is_target": false}, {"number": 134, "content": "  }", "is_target": false}, {"number": 135, "content": "};", "is_target": true}, {"number": 136, "content": "", "is_target": false}, {"number": 137, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 138, "content": "{", "is_target": false}, {"number": 139, "content": "  ThisSim sim;", "is_target": false}, {"number": 140, "content": "  track = sim.contains(argv, argc, \"-track\"); // check whether cmd-line contains -track", "is_target": false}]}, "978": {"lines": [{"number": 59, "content": "#error You can only #define dSINGLE or dDOUBLE, not both.", "is_target": false}, {"number": 60, "content": "#endif /* dDOUBLE */", "is_target": false}, {"number": 61, "content": "#elif defined(dDOUBLE)", "is_target": false}, {"number": 62, "content": "typedef double dReal;", "is_target": false}, {"number": 63, "content": "#else", "is_target": false}, {"number": 64, "content": "#error You must #define dSINGLE or dDOUBLE", "is_target": true}, {"number": 65, "content": "#endif", "is_target": false}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "/* Detect if we've got both trimesh engines enabled. */", "is_target": false}, {"number": 68, "content": "#if dTRIMESH_ENABLED", "is_target": false}, {"number": 69, "content": "#if dTRIMESH_OPCODE && dTRIMESH_GIMPACT", "is_target": false}]}, "979": {"lines": [{"number": 69, "content": "    /// Sets the transformation matrix of this object (position and orientation)", "is_target": false}, {"number": 70, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": false}, {"number": 71, "content": "    /// returns the group object which is the root of all subcomponents of this primitive", "is_target": false}, {"number": 72, "content": "    virtual osg::Group* getGroup();", "is_target": false}, {"number": 73, "content": "    /// assigns a texture to the primitive", "is_target": false}, {"number": 74, "content": "    virtual void setTexture(const std::string& filename);", "is_target": true}, {"number": 75, "content": "    /// assigns a texture to the primitive, you can choose how often to repeat", "is_target": false}, {"number": 76, "content": "    virtual void setTexture(const TextureDescr& texture);", "is_target": false}, {"number": 77, "content": "    /// assigns a texture to the x-th surface of the primitive, you can choose how often to repeat", "is_target": false}, {"number": 78, "content": "    virtual void setTexture(int surface, const TextureDescr& texture);", "is_target": false}, {"number": 79, "content": "    /// assign a set of texture to the surfaces of the primitive", "is_target": false}]}, "980": {"lines": [{"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "private:", "is_target": false}, {"number": 147, "content": "  // saves the actual position AND rotation of the segment", "is_target": false}, {"number": 148, "content": "  Matrix pos;", "is_target": false}, {"number": 149, "content": "  Matrix invpos;", "is_target": false}, {"number": 150, "content": "};", "is_target": true}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "#endif", "is_target": false}]}, "981": {"lines": [{"number": 485, "content": "    }", "is_target": false}, {"number": 486, "content": "    geometry->setVertexArray( v);", "is_target": false}, {"number": 487, "content": "    osg::DrawArrays *da = geometry->getNumPrimitiveSets()>0 ?", "is_target": false}, {"number": 488, "content": "      dynamic_cast<DrawArrays*>(geometry->getPrimitiveSet(0)) : 0;", "is_target": false}, {"number": 489, "content": "    if(!da){", "is_target": false}, {"number": 490, "content": "      osg::DrawArrays *da = new osg::DrawArrays(osg::PrimitiveSet::LINES,0,v->size());", "is_target": true}, {"number": 491, "content": "      geometry->addPrimitiveSet( da);", "is_target": false}, {"number": 492, "content": "    }else{", "is_target": false}, {"number": 493, "content": "      da->setCount(v->size());", "is_target": false}, {"number": 494, "content": "    }", "is_target": false}, {"number": 495, "content": "    geometry->dirtyDisplayList();", "is_target": false}]}, "982": {"lines": [{"number": 197, "content": "    s.toNoContact();", "is_target": false}, {"number": 198, "content": "    return s;", "is_target": false}, {"number": 199, "content": "  }", "is_target": false}, {"number": 200, "content": "", "is_target": false}, {"number": 201, "content": "  // collision function that does nothing and prohibits further treatment of collision event.", "is_target": false}, {"number": 202, "content": "  int dummyCallBack(dSurfaceParameters& params, GlobalData& globaldata, void *userdata,", "is_target": true}, {"number": 203, "content": "                    dContact* contacts, int numContacts,", "is_target": false}, {"number": 204, "content": "                    dGeomID o1, dGeomID o2, const Substance& s1, const Substance& s2){", "is_target": false}, {"number": 205, "content": "    return 0;", "is_target": false}, {"number": 206, "content": "  }", "is_target": false}, {"number": 207, "content": "", "is_target": false}]}, "983": {"lines": [{"number": 197, "content": "    s.toNoContact();", "is_target": false}, {"number": 198, "content": "    return s;", "is_target": false}, {"number": 199, "content": "  }", "is_target": false}, {"number": 200, "content": "", "is_target": false}, {"number": 201, "content": "  // collision function that does nothing and prohibits further treatment of collision event.", "is_target": false}, {"number": 202, "content": "  int dummyCallBack(dSurfaceParameters& params, GlobalData& globaldata, void *userdata,", "is_target": true}, {"number": 203, "content": "                    dContact* contacts, int numContacts,", "is_target": false}, {"number": 204, "content": "                    dGeomID o1, dGeomID o2, const Substance& s1, const Substance& s2){", "is_target": false}, {"number": 205, "content": "    return 0;", "is_target": false}, {"number": 206, "content": "  }", "is_target": false}, {"number": 207, "content": "", "is_target": false}]}, "984": {"lines": [{"number": 217, "content": "  struct AnisotropFrictionData {", "is_target": false}, {"number": 218, "content": "    Axis axis;", "is_target": false}, {"number": 219, "content": "    double ratio;", "is_target": false}, {"number": 220, "content": "  };", "is_target": false}, {"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "  static int anisocallback(dSurfaceParameters& params, GlobalData& globaldata, void *userdata,", "is_target": true}, {"number": 223, "content": "                           dContact* contacts, int numContacts,", "is_target": false}, {"number": 224, "content": "                           dGeomID o1, dGeomID o2, const Substance& s1, const Substance& s2){", "is_target": false}, {"number": 225, "content": "    // The other substance should not have a callback itself,", "is_target": false}, {"number": 226, "content": "    //   because then we don't know. It could be a IR sensor for example,", "is_target": false}, {"number": 227, "content": "    //   so we just behave as we would be a normal substance", "is_target": false}]}, "985": {"lines": [{"number": 277, "content": "    Substance(roughness, slip, hardness, elasticity) {", "is_target": false}, {"number": 278, "content": "    setCollisionCallback(dbg_output, 0 );", "is_target": false}, {"number": 279, "content": "", "is_target": false}, {"number": 280, "content": "  }", "is_target": false}, {"number": 281, "content": "", "is_target": false}, {"number": 282, "content": "  int DebugSubstance::dbg_output(dSurfaceParameters& params, GlobalData& globaldata,", "is_target": true}, {"number": 283, "content": "                             void *userdata, dContact* contacts, int numContacts,", "is_target": false}, {"number": 284, "content": "                             dGeomID o1, dGeomID o2,", "is_target": false}, {"number": 285, "content": "                             const Substance& s1, const Substance& s2){", "is_target": false}, {"number": 286, "content": "    dSurfaceParameters sp;", "is_target": false}, {"number": 287, "content": "    getSurfaceParams(sp, s1, s2, globaldata.odeConfig.simStepSize);", "is_target": false}]}, "986": {"lines": [{"number": 277, "content": "    Substance(roughness, slip, hardness, elasticity) {", "is_target": false}, {"number": 278, "content": "    setCollisionCallback(dbg_output, 0 );", "is_target": false}, {"number": 279, "content": "", "is_target": false}, {"number": 280, "content": "  }", "is_target": false}, {"number": 281, "content": "", "is_target": false}, {"number": 282, "content": "  int DebugSubstance::dbg_output(dSurfaceParameters& params, GlobalData& globaldata,", "is_target": true}, {"number": 283, "content": "                             void *userdata, dContact* contacts, int numContacts,", "is_target": false}, {"number": 284, "content": "                             dGeomID o1, dGeomID o2,", "is_target": false}, {"number": 285, "content": "                             const Substance& s1, const Substance& s2){", "is_target": false}, {"number": 286, "content": "    dSurfaceParameters sp;", "is_target": false}, {"number": 287, "content": "    getSurfaceParams(sp, s1, s2, globaldata.odeConfig.simStepSize);", "is_target": false}]}, "987": {"lines": [{"number": 197, "content": "    s.toNoContact();", "is_target": false}, {"number": 198, "content": "    return s;", "is_target": false}, {"number": 199, "content": "  }", "is_target": false}, {"number": 200, "content": "", "is_target": false}, {"number": 201, "content": "  // collision function that does nothing and prohibits further treatment of collision event.", "is_target": false}, {"number": 202, "content": "  int dummyCallBack(dSurfaceParameters& params, GlobalData& globaldata, void *userdata,", "is_target": true}, {"number": 203, "content": "                    dContact* contacts, int numContacts,", "is_target": false}, {"number": 204, "content": "                    dGeomID o1, dGeomID o2, const Substance& s1, const Substance& s2){", "is_target": false}, {"number": 205, "content": "    return 0;", "is_target": false}, {"number": 206, "content": "  }", "is_target": false}, {"number": 207, "content": "", "is_target": false}]}, "988": {"lines": [{"number": 198, "content": "    return s;", "is_target": false}, {"number": 199, "content": "  }", "is_target": false}, {"number": 200, "content": "", "is_target": false}, {"number": 201, "content": "  // collision function that does nothing and prohibits further treatment of collision event.", "is_target": false}, {"number": 202, "content": "  int dummyCallBack(dSurfaceParameters& params, GlobalData& globaldata, void *userdata,", "is_target": false}, {"number": 203, "content": "                    dContact* contacts, int numContacts,", "is_target": true}, {"number": 204, "content": "                    dGeomID o1, dGeomID o2, const Substance& s1, const Substance& s2){", "is_target": false}, {"number": 205, "content": "    return 0;", "is_target": false}, {"number": 206, "content": "  }", "is_target": false}, {"number": 207, "content": "", "is_target": false}, {"number": 208, "content": "  // no contact points are generated", "is_target": false}]}, "989": {"lines": [{"number": 278, "content": "    setCollisionCallback(dbg_output, 0 );", "is_target": false}, {"number": 279, "content": "", "is_target": false}, {"number": 280, "content": "  }", "is_target": false}, {"number": 281, "content": "", "is_target": false}, {"number": 282, "content": "  int DebugSubstance::dbg_output(dSurfaceParameters& params, GlobalData& globaldata,", "is_target": false}, {"number": 283, "content": "                             void *userdata, dContact* contacts, int numContacts,", "is_target": true}, {"number": 284, "content": "                             dGeomID o1, dGeomID o2,", "is_target": false}, {"number": 285, "content": "                             const Substance& s1, const Substance& s2){", "is_target": false}, {"number": 286, "content": "    dSurfaceParameters sp;", "is_target": false}, {"number": 287, "content": "    getSurfaceParams(sp, s1, s2, globaldata.odeConfig.simStepSize);", "is_target": false}, {"number": 288, "content": "    printSurfaceParams(sp);", "is_target": false}]}, "990": {"lines": [{"number": 278, "content": "    setCollisionCallback(dbg_output, 0 );", "is_target": false}, {"number": 279, "content": "", "is_target": false}, {"number": 280, "content": "  }", "is_target": false}, {"number": 281, "content": "", "is_target": false}, {"number": 282, "content": "  int DebugSubstance::dbg_output(dSurfaceParameters& params, GlobalData& globaldata,", "is_target": false}, {"number": 283, "content": "                             void *userdata, dContact* contacts, int numContacts,", "is_target": true}, {"number": 284, "content": "                             dGeomID o1, dGeomID o2,", "is_target": false}, {"number": 285, "content": "                             const Substance& s1, const Substance& s2){", "is_target": false}, {"number": 286, "content": "    dSurfaceParameters sp;", "is_target": false}, {"number": 287, "content": "    getSurfaceParams(sp, s1, s2, globaldata.odeConfig.simStepSize);", "is_target": false}, {"number": 288, "content": "    printSurfaceParams(sp);", "is_target": false}]}, "991": {"lines": [{"number": 85, "content": "        returns the number of written entries", "is_target": false}, {"number": 86, "content": "     */", "is_target": false}, {"number": 87, "content": "    virtual int getPositionRates(double* sensorarray) const { return 0; }", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "    /// enable or disable the feedback mode", "is_target": false}, {"number": 90, "content": "    virtual void setFeedBackMode(bool mode);", "is_target": true}, {"number": 91, "content": "    /// torque applied to body 1 and body 2", "is_target": false}, {"number": 92, "content": "    virtual bool getTorqueFeedback(Pos& t1, Pos& t2) const;", "is_target": false}, {"number": 93, "content": "    /// force applied to body 1 and body 2", "is_target": false}, {"number": 94, "content": "    virtual bool getForceFeedback(Pos& f1, Pos& f2) const;", "is_target": false}, {"number": 95, "content": "", "is_target": false}]}, "992": {"lines": [{"number": 115, "content": "    virtual double getPosition1() const  = 0;", "is_target": false}, {"number": 116, "content": "    virtual double getPosition1Rate() const  = 0;", "is_target": false}, {"number": 117, "content": "    virtual void addForce1(double force)  = 0;", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "    virtual int getNumberAxes() const override { return 1;};", "is_target": false}, {"number": 120, "content": "    virtual std::list<double> getPositions()  const;", "is_target": true}, {"number": 121, "content": "    virtual std::list<double> getPositionRates()  const;", "is_target": false}, {"number": 122, "content": "    virtual int getPositions(double* sensorarray)  const override;", "is_target": false}, {"number": 123, "content": "    virtual int getPositionRates(double* sensorarray)  const override;", "is_target": false}, {"number": 124, "content": "  protected:", "is_target": false}, {"number": 125, "content": "    Axis axis1;", "is_target": false}]}, "993": {"lines": [{"number": 116, "content": "    virtual double getPosition1Rate() const  = 0;", "is_target": false}, {"number": 117, "content": "    virtual void addForce1(double force)  = 0;", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "    virtual int getNumberAxes() const override { return 1;};", "is_target": false}, {"number": 120, "content": "    virtual std::list<double> getPositions()  const;", "is_target": false}, {"number": 121, "content": "    virtual std::list<double> getPositionRates()  const;", "is_target": true}, {"number": 122, "content": "    virtual int getPositions(double* sensorarray)  const override;", "is_target": false}, {"number": 123, "content": "    virtual int getPositionRates(double* sensorarray)  const override;", "is_target": false}, {"number": 124, "content": "  protected:", "is_target": false}, {"number": 125, "content": "    Axis axis1;", "is_target": false}, {"number": 126, "content": "  };", "is_target": false}]}, "994": {"lines": [{"number": 139, "content": "    void addForces(double force1,double force2){", "is_target": false}, {"number": 140, "content": "      addForce1(force1); addForce2(force2);", "is_target": false}, {"number": 141, "content": "    }", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "    virtual int getNumberAxes() const override { return 2;};", "is_target": false}, {"number": 144, "content": "    virtual std::list<double> getPositions()  const;", "is_target": true}, {"number": 145, "content": "    virtual std::list<double> getPositionRates()  const;", "is_target": false}, {"number": 146, "content": "    virtual int getPositions(double* sensorarray)  const override;", "is_target": false}, {"number": 147, "content": "    virtual int getPositionRates(double* sensorarray)  const override;", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "  protected:", "is_target": false}]}, "995": {"lines": [{"number": 140, "content": "      addForce1(force1); addForce2(force2);", "is_target": false}, {"number": 141, "content": "    }", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "    virtual int getNumberAxes() const override { return 2;};", "is_target": false}, {"number": 144, "content": "    virtual std::list<double> getPositions()  const;", "is_target": false}, {"number": 145, "content": "    virtual std::list<double> getPositionRates()  const;", "is_target": true}, {"number": 146, "content": "    virtual int getPositions(double* sensorarray)  const override;", "is_target": false}, {"number": 147, "content": "    virtual int getPositionRates(double* sensorarray)  const override;", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "  protected:", "is_target": false}, {"number": 150, "content": "    Axis  axis2;", "is_target": false}]}, "996": {"lines": [{"number": 158, "content": "        If not provided than part1 position is used", "is_target": false}, {"number": 159, "content": "    */", "is_target": false}, {"number": 160, "content": "    FixedJoint(Primitive* part1, Primitive* part2,", "is_target": false}, {"number": 161, "content": "               const osg::Vec3& anchor = osg::Vec3(0,0,0));", "is_target": false}, {"number": 162, "content": "", "is_target": false}, {"number": 163, "content": "    virtual ~FixedJoint();", "is_target": true}, {"number": 164, "content": "", "is_target": false}, {"number": 165, "content": "    /** initialises (and creates) the joint.", "is_target": false}, {"number": 166, "content": "    */", "is_target": false}, {"number": 167, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 168, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}]}, "997": {"lines": [{"number": 162, "content": "", "is_target": false}, {"number": 163, "content": "    virtual ~FixedJoint();", "is_target": false}, {"number": 164, "content": "", "is_target": false}, {"number": 165, "content": "    /** initialises (and creates) the joint.", "is_target": false}, {"number": 166, "content": "    */", "is_target": false}, {"number": 167, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 168, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 169, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 170, "content": "", "is_target": false}, {"number": 171, "content": "    virtual void update();", "is_target": false}, {"number": 172, "content": "    virtual void setParam(int parameter, double value);", "is_target": false}]}, "998": {"lines": [{"number": 166, "content": "    */", "is_target": false}, {"number": 167, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 168, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 169, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 170, "content": "", "is_target": false}, {"number": 171, "content": "    virtual void update();", "is_target": true}, {"number": 172, "content": "    virtual void setParam(int parameter, double value);", "is_target": false}, {"number": 173, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}, {"number": 174, "content": "", "is_target": false}, {"number": 175, "content": "    virtual int getNumberAxes() const override { return 0; }", "is_target": false}, {"number": 176, "content": "  protected:", "is_target": false}]}, "999": {"lines": [{"number": 167, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 168, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 169, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 170, "content": "", "is_target": false}, {"number": 171, "content": "    virtual void update();", "is_target": false}, {"number": 172, "content": "    virtual void setParam(int parameter, double value);", "is_target": true}, {"number": 173, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}, {"number": 174, "content": "", "is_target": false}, {"number": 175, "content": "    virtual int getNumberAxes() const override { return 0; }", "is_target": false}, {"number": 176, "content": "  protected:", "is_target": false}, {"number": 177, "content": "    OSGPrimitive* visual;", "is_target": false}]}, "1000": {"lines": [{"number": 183, "content": "  class HingeJoint : public OneAxisJoint {", "is_target": false}, {"number": 184, "content": "  public:", "is_target": false}, {"number": 185, "content": "    HingeJoint(Primitive* part1, Primitive* part2, const osg::Vec3& anchor,", "is_target": false}, {"number": 186, "content": "                const Axis& axis1);", "is_target": false}, {"number": 187, "content": "", "is_target": false}, {"number": 188, "content": "    virtual ~HingeJoint();", "is_target": true}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "    /** initialises (and creates) the joint. If visual is true then the axis of the joints is", "is_target": false}, {"number": 191, "content": "        also drawn as a slim cylinder. visualSize is the length of the cylinder.", "is_target": false}, {"number": 192, "content": "    */", "is_target": false}, {"number": 193, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}]}, "1001": {"lines": [{"number": 188, "content": "    virtual ~HingeJoint();", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "    /** initialises (and creates) the joint. If visual is true then the axis of the joints is", "is_target": false}, {"number": 191, "content": "        also drawn as a slim cylinder. visualSize is the length of the cylinder.", "is_target": false}, {"number": 192, "content": "    */", "is_target": false}, {"number": 193, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 194, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 195, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 196, "content": "", "is_target": false}, {"number": 197, "content": "    virtual void update();", "is_target": false}, {"number": 198, "content": "", "is_target": false}]}, "1002": {"lines": [{"number": 192, "content": "    */", "is_target": false}, {"number": 193, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 194, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 195, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 196, "content": "", "is_target": false}, {"number": 197, "content": "    virtual void update();", "is_target": true}, {"number": 198, "content": "", "is_target": false}, {"number": 199, "content": "    virtual void addForce1(double t);", "is_target": false}, {"number": 200, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 201, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 202, "content": "    virtual void setParam(int parameter, double value);", "is_target": false}]}, "1003": {"lines": [{"number": 194, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 195, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 196, "content": "", "is_target": false}, {"number": 197, "content": "    virtual void update();", "is_target": false}, {"number": 198, "content": "", "is_target": false}, {"number": 199, "content": "    virtual void addForce1(double t);", "is_target": true}, {"number": 200, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 201, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 202, "content": "    virtual void setParam(int parameter, double value);", "is_target": false}, {"number": 203, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}, {"number": 204, "content": "", "is_target": false}]}, "1004": {"lines": [{"number": 197, "content": "    virtual void update();", "is_target": false}, {"number": 198, "content": "", "is_target": false}, {"number": 199, "content": "    virtual void addForce1(double t);", "is_target": false}, {"number": 200, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 201, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 202, "content": "    virtual void setParam(int parameter, double value);", "is_target": true}, {"number": 203, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}, {"number": 204, "content": "", "is_target": false}, {"number": 205, "content": "  protected:", "is_target": false}, {"number": 206, "content": "    OSGPrimitive* visual = nullptr;", "is_target": false}, {"number": 207, "content": "  };", "is_target": false}]}, "1005": {"lines": [{"number": 211, "content": "  class Hinge2Joint : public TwoAxisJoint {", "is_target": false}, {"number": 212, "content": "  public:", "is_target": false}, {"number": 213, "content": "    Hinge2Joint(Primitive* part1, Primitive* part2, const osg::Vec3& anchor,", "is_target": false}, {"number": 214, "content": "                const Axis& axis1, const Axis& axis2);", "is_target": false}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "    virtual ~Hinge2Joint();", "is_target": true}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "    /** initialises (and creates) the joint. If visual is true then axis2 of the joints is", "is_target": false}, {"number": 219, "content": "        also drawn as a slim cylinder. visualSize is the length of the cylinder.", "is_target": false}, {"number": 220, "content": "    */", "is_target": false}, {"number": 221, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}]}, "1006": {"lines": [{"number": 216, "content": "    virtual ~Hinge2Joint();", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "    /** initialises (and creates) the joint. If visual is true then axis2 of the joints is", "is_target": false}, {"number": 219, "content": "        also drawn as a slim cylinder. visualSize is the length of the cylinder.", "is_target": false}, {"number": 220, "content": "    */", "is_target": false}, {"number": 221, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 222, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 223, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "    virtual void update();", "is_target": false}, {"number": 226, "content": "", "is_target": false}]}, "1007": {"lines": [{"number": 220, "content": "    */", "is_target": false}, {"number": 221, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 222, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 223, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "    virtual void update();", "is_target": true}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "    /// adds torques to axis 1 and 2", "is_target": false}, {"number": 228, "content": "    virtual void addForce1(double t1);", "is_target": false}, {"number": 229, "content": "    virtual void addForce2(double t2);", "is_target": false}, {"number": 230, "content": "    virtual double getPosition1()  const override;", "is_target": false}]}, "1008": {"lines": [{"number": 223, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "    virtual void update();", "is_target": false}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "    /// adds torques to axis 1 and 2", "is_target": false}, {"number": 228, "content": "    virtual void addForce1(double t1);", "is_target": true}, {"number": 229, "content": "    virtual void addForce2(double t2);", "is_target": false}, {"number": 230, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 231, "content": "    virtual double getPosition2()  const; /// This is not supported by the joint!", "is_target": false}, {"number": 232, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 233, "content": "    virtual double getPosition2Rate()  const override;", "is_target": false}]}, "1009": {"lines": [{"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "    virtual void update();", "is_target": false}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "    /// adds torques to axis 1 and 2", "is_target": false}, {"number": 228, "content": "    virtual void addForce1(double t1);", "is_target": false}, {"number": 229, "content": "    virtual void addForce2(double t2);", "is_target": true}, {"number": 230, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 231, "content": "    virtual double getPosition2()  const; /// This is not supported by the joint!", "is_target": false}, {"number": 232, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 233, "content": "    virtual double getPosition2Rate()  const override;", "is_target": false}, {"number": 234, "content": "    virtual void setParam(int parameter, double value);", "is_target": false}]}, "1010": {"lines": [{"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "    /// adds torques to axis 1 and 2", "is_target": false}, {"number": 228, "content": "    virtual void addForce1(double t1);", "is_target": false}, {"number": 229, "content": "    virtual void addForce2(double t2);", "is_target": false}, {"number": 230, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 231, "content": "    virtual double getPosition2()  const; /// This is not supported by the joint!", "is_target": true}, {"number": 232, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 233, "content": "    virtual double getPosition2Rate()  const override;", "is_target": false}, {"number": 234, "content": "    virtual void setParam(int parameter, double value);", "is_target": false}, {"number": 235, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}, {"number": 236, "content": "", "is_target": false}]}, "1011": {"lines": [{"number": 229, "content": "    virtual void addForce2(double t2);", "is_target": false}, {"number": 230, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 231, "content": "    virtual double getPosition2()  const; /// This is not supported by the joint!", "is_target": false}, {"number": 232, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 233, "content": "    virtual double getPosition2Rate()  const override;", "is_target": false}, {"number": 234, "content": "    virtual void setParam(int parameter, double value);", "is_target": true}, {"number": 235, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "  protected:", "is_target": false}, {"number": 238, "content": "    OSGPrimitive* visual = nullptr;", "is_target": false}, {"number": 239, "content": "  };", "is_target": false}]}, "1012": {"lines": [{"number": 243, "content": "  class UniversalJoint : public TwoAxisJoint {", "is_target": false}, {"number": 244, "content": "  public:", "is_target": false}, {"number": 245, "content": "    UniversalJoint(Primitive* part1, Primitive* part2, const osg::Vec3& anchor,", "is_target": false}, {"number": 246, "content": "                const Axis& axis1, const Axis& axis2);", "is_target": false}, {"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "    virtual ~UniversalJoint();", "is_target": true}, {"number": 249, "content": "", "is_target": false}, {"number": 250, "content": "    /** initialises (and creates) the joint. If visual is true then axix1 and axis2 of the joints is", "is_target": false}, {"number": 251, "content": "        also drawn as a slim cylinder. visualSize is the length of the cylinder.", "is_target": false}, {"number": 252, "content": "    */", "is_target": false}, {"number": 253, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}]}, "1013": {"lines": [{"number": 248, "content": "    virtual ~UniversalJoint();", "is_target": false}, {"number": 249, "content": "", "is_target": false}, {"number": 250, "content": "    /** initialises (and creates) the joint. If visual is true then axix1 and axis2 of the joints is", "is_target": false}, {"number": 251, "content": "        also drawn as a slim cylinder. visualSize is the length of the cylinder.", "is_target": false}, {"number": 252, "content": "    */", "is_target": false}, {"number": 253, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 254, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 255, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "    virtual void update();", "is_target": false}, {"number": 258, "content": "", "is_target": false}]}, "1014": {"lines": [{"number": 252, "content": "    */", "is_target": false}, {"number": 253, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 254, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 255, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "    virtual void update();", "is_target": true}, {"number": 258, "content": "", "is_target": false}, {"number": 259, "content": "    /// adds torques to axis 1 and 2", "is_target": false}, {"number": 260, "content": "    virtual void addForce1(double t1);", "is_target": false}, {"number": 261, "content": "    virtual void addForce2(double t2);", "is_target": false}, {"number": 262, "content": "    virtual double getPosition1()  const override;", "is_target": false}]}, "1015": {"lines": [{"number": 255, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "    virtual void update();", "is_target": false}, {"number": 258, "content": "", "is_target": false}, {"number": 259, "content": "    /// adds torques to axis 1 and 2", "is_target": false}, {"number": 260, "content": "    virtual void addForce1(double t1);", "is_target": true}, {"number": 261, "content": "    virtual void addForce2(double t2);", "is_target": false}, {"number": 262, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 263, "content": "    virtual double getPosition2()  const override;", "is_target": false}, {"number": 264, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 265, "content": "    virtual double getPosition2Rate()  const override;", "is_target": false}]}, "1016": {"lines": [{"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "    virtual void update();", "is_target": false}, {"number": 258, "content": "", "is_target": false}, {"number": 259, "content": "    /// adds torques to axis 1 and 2", "is_target": false}, {"number": 260, "content": "    virtual void addForce1(double t1);", "is_target": false}, {"number": 261, "content": "    virtual void addForce2(double t2);", "is_target": true}, {"number": 262, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 263, "content": "    virtual double getPosition2()  const override;", "is_target": false}, {"number": 264, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 265, "content": "    virtual double getPosition2Rate()  const override;", "is_target": false}, {"number": 266, "content": "", "is_target": false}]}, "1017": {"lines": [{"number": 262, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 263, "content": "    virtual double getPosition2()  const override;", "is_target": false}, {"number": 264, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 265, "content": "    virtual double getPosition2Rate()  const override;", "is_target": false}, {"number": 266, "content": "", "is_target": false}, {"number": 267, "content": "    virtual void setParam(int parameter, double value);", "is_target": true}, {"number": 268, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}, {"number": 269, "content": "", "is_target": false}, {"number": 270, "content": "  protected:", "is_target": false}, {"number": 271, "content": "    OSGPrimitive* visual1 = nullptr;", "is_target": false}, {"number": 272, "content": "    OSGPrimitive* visual2 = nullptr;", "is_target": false}]}, "1018": {"lines": [{"number": 276, "content": "", "is_target": false}, {"number": 277, "content": "  class BallJoint : public Joint {", "is_target": false}, {"number": 278, "content": "  public:", "is_target": false}, {"number": 279, "content": "    BallJoint(Primitive* part1, Primitive* part2, const osg::Vec3& anchor);", "is_target": false}, {"number": 280, "content": "", "is_target": false}, {"number": 281, "content": "    virtual ~BallJoint();", "is_target": true}, {"number": 282, "content": "", "is_target": false}, {"number": 283, "content": "    /** initialises (and creates) the joint.", "is_target": false}, {"number": 284, "content": "        If visual is true then ball is drawn as a sphere with radius of visualSize.", "is_target": false}, {"number": 285, "content": "    */", "is_target": false}, {"number": 286, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}]}, "1019": {"lines": [{"number": 281, "content": "    virtual ~BallJoint();", "is_target": false}, {"number": 282, "content": "", "is_target": false}, {"number": 283, "content": "    /** initialises (and creates) the joint.", "is_target": false}, {"number": 284, "content": "        If visual is true then ball is drawn as a sphere with radius of visualSize.", "is_target": false}, {"number": 285, "content": "    */", "is_target": false}, {"number": 286, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 287, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 288, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 289, "content": "", "is_target": false}, {"number": 290, "content": "    virtual void update();", "is_target": false}, {"number": 291, "content": "", "is_target": false}]}, "1020": {"lines": [{"number": 285, "content": "    */", "is_target": false}, {"number": 286, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 287, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 288, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 289, "content": "", "is_target": false}, {"number": 290, "content": "    virtual void update();", "is_target": true}, {"number": 291, "content": "", "is_target": false}, {"number": 292, "content": "    virtual int getNumberAxes() const override { return 0; }", "is_target": false}, {"number": 293, "content": "    // Ball and Socket has no parameter", "is_target": false}, {"number": 294, "content": "    virtual void setParam(int parameter, double value);", "is_target": false}, {"number": 295, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}]}, "1021": {"lines": [{"number": 289, "content": "", "is_target": false}, {"number": 290, "content": "    virtual void update();", "is_target": false}, {"number": 291, "content": "", "is_target": false}, {"number": 292, "content": "    virtual int getNumberAxes() const override { return 0; }", "is_target": false}, {"number": 293, "content": "    // Ball and Socket has no parameter", "is_target": false}, {"number": 294, "content": "    virtual void setParam(int parameter, double value);", "is_target": true}, {"number": 295, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}, {"number": 296, "content": "", "is_target": false}, {"number": 297, "content": "  protected:", "is_target": false}, {"number": 298, "content": "    OSGPrimitive* visual;", "is_target": false}, {"number": 299, "content": "  };", "is_target": false}]}, "1022": {"lines": [{"number": 304, "content": "  class SliderJoint : public OneAxisJoint {", "is_target": false}, {"number": 305, "content": "  public:", "is_target": false}, {"number": 306, "content": "    SliderJoint(Primitive* part1, Primitive* part2, const osg::Vec3& anchor,", "is_target": false}, {"number": 307, "content": "                const Axis& axis1);", "is_target": false}, {"number": 308, "content": "", "is_target": false}, {"number": 309, "content": "    virtual ~SliderJoint();", "is_target": true}, {"number": 310, "content": "", "is_target": false}, {"number": 311, "content": "    /** initialises (and creates) the joint. If visual is true then the axis of the joints is", "is_target": false}, {"number": 312, "content": "        also drawn as a slim cylinder. VisualSize is added to the lenght of the slider and is used", "is_target": false}, {"number": 313, "content": "        for the length of the cylinder. The radius is visualSize/10", "is_target": false}, {"number": 314, "content": "    */", "is_target": false}]}, "1023": {"lines": [{"number": 310, "content": "", "is_target": false}, {"number": 311, "content": "    /** initialises (and creates) the joint. If visual is true then the axis of the joints is", "is_target": false}, {"number": 312, "content": "        also drawn as a slim cylinder. VisualSize is added to the lenght of the slider and is used", "is_target": false}, {"number": 313, "content": "        for the length of the cylinder. The radius is visualSize/10", "is_target": false}, {"number": 314, "content": "    */", "is_target": false}, {"number": 315, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 316, "content": "                      bool withVisual = true, double visualSize = 0.1,", "is_target": false}, {"number": 317, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 318, "content": "", "is_target": false}, {"number": 319, "content": "    virtual void update();", "is_target": false}, {"number": 320, "content": "", "is_target": false}]}, "1024": {"lines": [{"number": 314, "content": "    */", "is_target": false}, {"number": 315, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 316, "content": "                      bool withVisual = true, double visualSize = 0.1,", "is_target": false}, {"number": 317, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 318, "content": "", "is_target": false}, {"number": 319, "content": "    virtual void update();", "is_target": true}, {"number": 320, "content": "", "is_target": false}, {"number": 321, "content": "    virtual void addForce1(double t);", "is_target": false}, {"number": 322, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 323, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 324, "content": "    virtual void setParam(int parameter, double value);", "is_target": false}]}, "1025": {"lines": [{"number": 316, "content": "                      bool withVisual = true, double visualSize = 0.1,", "is_target": false}, {"number": 317, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 318, "content": "", "is_target": false}, {"number": 319, "content": "    virtual void update();", "is_target": false}, {"number": 320, "content": "", "is_target": false}, {"number": 321, "content": "    virtual void addForce1(double t);", "is_target": true}, {"number": 322, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 323, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 324, "content": "    virtual void setParam(int parameter, double value);", "is_target": false}, {"number": 325, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}, {"number": 326, "content": "", "is_target": false}]}, "1026": {"lines": [{"number": 319, "content": "    virtual void update();", "is_target": false}, {"number": 320, "content": "", "is_target": false}, {"number": 321, "content": "    virtual void addForce1(double t);", "is_target": false}, {"number": 322, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 323, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 324, "content": "    virtual void setParam(int parameter, double value);", "is_target": true}, {"number": 325, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}, {"number": 326, "content": "", "is_target": false}, {"number": 327, "content": "  protected:", "is_target": false}, {"number": 328, "content": "    OSGPrimitive* visual = nullptr;", "is_target": false}, {"number": 329, "content": "    double visualSize = 0;", "is_target": false}]}, "1027": {"lines": [{"number": 91, "content": "      virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "  };", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "} // end namespace lpzrobots", "is_target": true}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "// End of header guard", "is_target": false}, {"number": 100, "content": "#endif", "is_target": false}]}, "1028": {"lines": [{"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "private:", "is_target": false}, {"number": 147, "content": "  // saves the actual position AND rotation of the segment", "is_target": false}, {"number": 148, "content": "  Matrix pos;", "is_target": false}, {"number": 149, "content": "  Matrix invpos;", "is_target": false}, {"number": 150, "content": "};", "is_target": true}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "#endif", "is_target": false}]}, "1029": {"lines": [{"number": 60, "content": "    std::string fontColor;", "is_target": false}, {"number": 61, "content": "  };", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "  class Base : public ::Configurable {", "is_target": false}, {"number": 64, "content": "  public:", "is_target": false}, {"number": 65, "content": "    Base(const std::string& caption=\"LpzRobots Simulator (Martius et al)\");", "is_target": true}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "    static const int PHYSICS_CALLBACKABLE = 1; //!< called each ode/physics step", "is_target": false}, {"number": 68, "content": "    static const int GRAPHICS_CALLBACKABLE = 2; //!< called each osg/draw step", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "    /// create the ground plane", "is_target": false}]}, "1030": {"lines": [{"number": 115, "content": "     * But do not display if the system is initialised with -nographics.", "is_target": false}, {"number": 116, "content": "     * @return the actual HUDStatisticsManager", "is_target": false}, {"number": 117, "content": "     */", "is_target": false}, {"number": 118, "content": "    virtual HUDStatisticsManager* getHUDSM() const;", "is_target": false}, {"number": 119, "content": "", "is_target": false}, {"number": 120, "content": "    virtual ~Base();", "is_target": true}, {"number": 121, "content": "", "is_target": false}, {"number": 122, "content": "  protected:", "is_target": false}, {"number": 123, "content": "    virtual void setTimeStats(double time, double realtimefactor,", "is_target": false}, {"number": 124, "content": "                              double truerealtimefactor,bool pause);", "is_target": false}, {"number": 125, "content": "", "is_target": false}]}, "1031": {"lines": [{"number": 204, "content": "        //        std::cout << pssm->getAmbientBias().x  << __PLACEHOLDER_26__ << pssm->getAmbientBias().y << std::endl", "is_target": false}, {"number": 205, "content": "        pssm->setAmbientBias(Vec2(0,.3));", "is_target": false}, {"number": 206, "content": "", "is_target": false}, {"number": 207, "content": "        pssm->setTextureResolution(shadowTexSize);", "is_target": false}, {"number": 208, "content": "", "is_target": false}, {"number": 209, "content": "        if (debugColor)", "is_target": true}, {"number": 210, "content": "          pssm->setDebugColorOn();", "is_target": false}, {"number": 211, "content": "", "is_target": false}, {"number": 212, "content": "              pssm->setMinNearDistanceForSplits(minNearSplit);", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "        pssm->setMaxFarDistance(maxFarDist);", "is_target": false}]}, "1032": {"lines": [{"number": 373, "content": "      geom->setColorArray(colors);", "is_target": false}, {"number": 374, "content": "      geom->setColorBinding(osg::Geometry::BIND_OVERALL);", "is_target": false}, {"number": 375, "content": "", "is_target": false}, {"number": 376, "content": "      geom->addPrimitiveSet(new osg::DrawArrays(GL_QUADS,0,4));", "is_target": false}, {"number": 377, "content": "", "is_target": false}, {"number": 378, "content": "      osg::StateSet* stateset = geom->getOrCreateStateSet();", "is_target": true}, {"number": 379, "content": "      stateset->setMode(GL_BLEND,osg::StateAttribute::ON);", "is_target": false}, {"number": 380, "content": "      //stateset->setAttribute(new osg::PolygonOffset(1.0f,1.0f),osg::StateAttribute::ON);", "is_target": false}, {"number": 381, "content": "      stateset->setRenderingHint(osg::StateSet::TRANSPARENT_BIN);", "is_target": false}, {"number": 382, "content": "", "is_target": false}, {"number": 383, "content": "      geode->addDrawable(geom);", "is_target": false}]}, "1033": {"lines": [{"number": 91, "content": "      virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "  };", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "} // end namespace lpzrobots", "is_target": true}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "// End of header guard", "is_target": false}, {"number": 100, "content": "#endif", "is_target": false}]}, "1034": {"lines": [{"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "private:", "is_target": false}, {"number": 147, "content": "  // saves the actual position AND rotation of the segment", "is_target": false}, {"number": 148, "content": "  Matrix pos;", "is_target": false}, {"number": 149, "content": "  Matrix invpos;", "is_target": false}, {"number": 150, "content": "};", "is_target": true}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "#endif", "is_target": false}]}, "1035": {"lines": [{"number": 34, "content": "#include \"stl_adds.h\"", "is_target": false}, {"number": 35, "content": "", "is_target": false}, {"number": 36, "content": "template<typename T>", "is_target": false}, {"number": 37, "content": "inline T", "is_target": false}, {"number": 38, "content": "sign(T v) {", "is_target": false}, {"number": 39, "content": "  return v < (T)0 ? (T)-1 : (T)1;", "is_target": true}, {"number": 40, "content": "}", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "template<typename T>", "is_target": false}, {"number": 43, "content": "inline T", "is_target": false}, {"number": 44, "content": "sqr(T v) {", "is_target": false}]}, "1036": {"lines": [{"number": 91, "content": "      virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "  };", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "} // end namespace lpzrobots", "is_target": true}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "// End of header guard", "is_target": false}, {"number": 100, "content": "#endif", "is_target": false}]}, "1038": {"lines": [{"number": 134, "content": "", "is_target": false}, {"number": 135, "content": "  /** creates vehicle at desired pose", "is_target": false}, {"number": 136, "content": "      @param pose 4x4 pose matrix", "is_target": false}, {"number": 137, "content": "  */", "is_target": false}, {"number": 138, "content": "  virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 139, "content": "  virtual void destroy();", "is_target": true}, {"number": 140, "content": "};", "is_target": false}, {"number": 141, "content": "", "is_target": false}, {"number": 142, "content": "}", "is_target": false}, {"number": 143, "content": "", "is_target": false}, {"number": 144, "content": "#endif", "is_target": false}]}, "1039": {"lines": [{"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "  class Primitive; // Forward declaration", "is_target": false}, {"number": 45, "content": "  class Joint;     // Forward declaration", "is_target": false}, {"number": 46, "content": "  ", "is_target": false}, {"number": 47, "content": "  struct Attachment {", "is_target": false}, {"number": 48, "content": "    Attachment(int pI = -1, int jI = -1) : primitiveIndex(pI), jointIndex(jI) {}", "is_target": true}, {"number": 49, "content": "    int primitiveIndex = -1;", "is_target": false}, {"number": 50, "content": "    int jointIndex = -1;", "is_target": false}, {"number": 51, "content": "  };", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "  using Primitives = std::vector<Primitive*>;", "is_target": false}]}, "1040": {"lines": [{"number": 69, "content": "     */", "is_target": false}, {"number": 70, "content": "    OdeRobot(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 71, "content": "             const std::string& name, const std::string& revision);", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "    /// calls cleanup()", "is_target": false}, {"number": 74, "content": "    virtual ~OdeRobot();", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "    // Rule of 5 - delete copy operations, allow move", "is_target": false}, {"number": 77, "content": "    OdeRobot(const OdeRobot&) = delete;", "is_target": false}, {"number": 78, "content": "    OdeRobot& operator=(const OdeRobot&) = delete;", "is_target": false}, {"number": 79, "content": "    OdeRobot(OdeRobot&&) = delete;", "is_target": false}]}, "1041": {"lines": [{"number": 219, "content": "    virtual Joints& getAllJoints() { return joints; }", "is_target": false}, {"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "    /* ********** STORABLE INTERFACE **************** */", "is_target": false}, {"number": 222, "content": "    virtual bool store(FILE* f)  const override;", "is_target": false}, {"number": 223, "content": "", "is_target": false}, {"number": 224, "content": "    virtual bool restore(FILE* f);", "is_target": true}, {"number": 225, "content": "    /* ********** END STORABLE INTERFACE ************ */", "is_target": false}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "    /** relocates robot such its primitive with the given ID", "is_target": false}, {"number": 228, "content": "        is at the new postion (keep current pose).", "is_target": false}, {"number": 229, "content": "        If primitiveID is -1 then the main primitive is used.", "is_target": false}]}, "1042": {"lines": [{"number": 75, "content": "    conf.jointLimit =  M_PI/8;", "is_target": false}, {"number": 76, "content": "    conf.firstJoint=1;", "is_target": false}, {"number": 77, "content": "    return conf;", "is_target": false}, {"number": 78, "content": "  }", "is_target": false}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "  virtual ~DefaultCaterPillar();", "is_target": true}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  /** sets the pose of the vehicle", "is_target": false}, {"number": 84, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 85, "content": "  */", "is_target": false}]}, "1043": {"lines": [{"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  /** sets the pose of the vehicle", "is_target": false}, {"number": 84, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 85, "content": "  */", "is_target": false}, {"number": 86, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  /// update all primitives and joints", "is_target": false}, {"number": 89, "content": "  virtual void update();", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "  /**", "is_target": false}]}, "1044": {"lines": [{"number": 84, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 85, "content": "  */", "is_target": false}, {"number": 86, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  /// update all primitives and joints", "is_target": false}, {"number": 89, "content": "  virtual void update();", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "  /**", "is_target": false}, {"number": 92, "content": "   *Reads the actual motor commands from an array,", "is_target": false}, {"number": 93, "content": "   *an sets all motors of the snake to this values.", "is_target": false}, {"number": 94, "content": "   *It is an linear allocation.", "is_target": false}]}, "1045": {"lines": [{"number": 118, "content": "      @return length of the list", "is_target": false}, {"number": 119, "content": "  */", "is_target": false}, {"number": 120, "content": "  virtual int getSegmentsPosition(std::vector<Position> &poslist);", "is_target": false}, {"number": 121, "content": "", "is_target": false}, {"number": 122, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 123, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "  /** the main object of the robot, which is used for position and speed tracking */", "is_target": false}, {"number": 126, "content": "  virtual const Primitive* getMainPrimitive() const override {", "is_target": false}, {"number": 127, "content": "    if(!objects.empty()){", "is_target": false}, {"number": 128, "content": "      //      int half = objects.size()/2;", "is_target": false}]}, "1046": {"lines": [{"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "  public:", "is_target": false}, {"number": 50, "content": "      CaterPillar ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 51, "content": "                      const CaterPillarConf& conf, const std::string& name);", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "      virtual ~CaterPillar();", "is_target": true}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    /**", "is_target": false}, {"number": 56, "content": "     *Reads the actual motor commands from an array,", "is_target": false}, {"number": 57, "content": "     *an sets all motors of the snake to this values.", "is_target": false}, {"number": 58, "content": "     *It is an linear allocation.", "is_target": false}]}, "1047": {"lines": [{"number": 57, "content": "     *an sets all motors of the snake to this values.", "is_target": false}, {"number": 58, "content": "     *It is an linear allocation.", "is_target": false}, {"number": 59, "content": "     *@param motors pointer to the array, motor values are scaled to [-1,1]", "is_target": false}, {"number": 60, "content": "     *@param motornumber length of the motor array", "is_target": false}, {"number": 61, "content": "     **/", "is_target": false}, {"number": 62, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": true}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "    /**", "is_target": false}, {"number": 65, "content": "     *Writes the sensor values to an array in the memory.", "is_target": false}, {"number": 66, "content": "     *@param sensors pointer to the array", "is_target": false}, {"number": 67, "content": "     *@param sensornumber length of the sensor array", "is_target": false}]}, "1048": {"lines": [{"number": 65, "content": "     *Writes the sensor values to an array in the memory.", "is_target": false}, {"number": 66, "content": "     *@param sensors pointer to the array", "is_target": false}, {"number": 67, "content": "     *@param sensornumber length of the sensor array", "is_target": false}, {"number": 68, "content": "     *@return number of actually written sensors", "is_target": false}, {"number": 69, "content": "     **/", "is_target": false}, {"number": 70, "content": "    virtual int getSensorsIntern( double* sensors, int sensornumber );", "is_target": true}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    /** returns number of sensors", "is_target": false}, {"number": 73, "content": "     */", "is_target": false}, {"number": 74, "content": "    virtual int getSensorNumberIntern() const override { assert(created); return static_cast<int>(2*universalServos.size()+sliderServos.size()); }", "is_target": false}, {"number": 75, "content": "", "is_target": false}]}, "1049": {"lines": [{"number": 76, "content": "    /** returns number of motors", "is_target": false}, {"number": 77, "content": "     */", "is_target": false}, {"number": 78, "content": "    virtual int getMotorNumberIntern() const override { assert(created); return static_cast<int>(2*universalServos.size()+sliderServos.size()); }", "is_target": false}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 81, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  private:", "is_target": false}, {"number": 84, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 85, "content": "    virtual void destroy();", "is_target": false}, {"number": 86, "content": "  };", "is_target": false}]}, "1050": {"lines": [{"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 81, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  private:", "is_target": false}, {"number": 84, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": true}, {"number": 85, "content": "    virtual void destroy();", "is_target": false}, {"number": 86, "content": "  };", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "}", "is_target": false}, {"number": 89, "content": "", "is_target": false}]}, "1051": {"lines": [{"number": 80, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 81, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  private:", "is_target": false}, {"number": 84, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 85, "content": "    virtual void destroy();", "is_target": true}, {"number": 86, "content": "  };", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "}", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "#endif", "is_target": false}]}, "1052": {"lines": [{"number": 55, "content": "  class Arm2Segm : public OdeRobot {", "is_target": false}, {"number": 56, "content": "  public:", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "    Arm2Segm(const OdeHandle& odeHandle, const OsgHandle& osgHandle, const Arm2SegmConf& conf, const std::string& name);", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "    virtual ~Arm2Segm() {};", "is_target": true}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    static Arm2SegmConf getDefaultConf() {", "is_target": false}, {"number": 63, "content": "      return Arm2SegmConf();", "is_target": false}, {"number": 64, "content": "    }", "is_target": false}, {"number": 65, "content": "", "is_target": false}]}, "1053": {"lines": [{"number": 62, "content": "    static Arm2SegmConf getDefaultConf() {", "is_target": false}, {"number": 63, "content": "      return Arm2SegmConf();", "is_target": false}, {"number": 64, "content": "    }", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "    /// update the subcomponents", "is_target": false}, {"number": 67, "content": "    virtual void update();", "is_target": true}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 70, "content": "        @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 71, "content": "    */", "is_target": false}, {"number": 72, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}]}, "1054": {"lines": [{"number": 67, "content": "    virtual void update();", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 70, "content": "        @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 71, "content": "    */", "is_target": false}, {"number": 72, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 75, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 76, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 77, "content": "        @return number of actually written sensors", "is_target": false}]}, "1055": {"lines": [{"number": 74, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 75, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 76, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 77, "content": "        @return number of actually written sensors", "is_target": false}, {"number": 78, "content": "    */", "is_target": false}, {"number": 79, "content": "    virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": true}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 82, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 83, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 84, "content": "    */", "is_target": false}]}, "1056": {"lines": [{"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 82, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 83, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 84, "content": "    */", "is_target": false}, {"number": 85, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "    /** returns number of sensors", "is_target": false}, {"number": 88, "content": "     */", "is_target": false}, {"number": 89, "content": "    virtual int getSensorNumberIntern() const override {", "is_target": false}, {"number": 90, "content": "      return sensorno;", "is_target": false}]}, "1057": {"lines": [{"number": 101, "content": "        @return length of the list", "is_target": false}, {"number": 102, "content": "    */", "is_target": false}, {"number": 103, "content": "    virtual int getSegmentsPosition(std::vector<Position> &poslist);", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "    /** the main object of the robot, which is used for position and speed tracking */", "is_target": false}, {"number": 106, "content": "    virtual const Primitive* getMainPrimitive()  const;", "is_target": true}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "  protected:", "is_target": false}, {"number": 109, "content": "", "is_target": false}, {"number": 110, "content": "    /** creates vehicle at desired pose", "is_target": false}, {"number": 111, "content": "        @param pose 4x4 pose matrix", "is_target": false}]}, "1058": {"lines": [{"number": 106, "content": "    virtual Primitive* getMainPrimitive() const { return object[0]; }", "is_target": false}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "  protected:", "is_target": false}, {"number": 109, "content": "", "is_target": false}, {"number": 110, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 111, "content": "    virtual void destroy();", "is_target": true}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "", "is_target": false}, {"number": 114, "content": "  };", "is_target": false}, {"number": 115, "content": "", "is_target": false}, {"number": 116, "content": "}", "is_target": false}]}, "1059": {"lines": [{"number": 77, "content": "     *  to personal needs.", "is_target": false}, {"number": 78, "content": "     **/", "is_target": false}, {"number": 79, "content": "    ForcedSphere ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 80, "content": "                   const ForcedSphereConf& ForcedSphereConf, const std::string& name);", "is_target": false}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "    virtual ~ForcedSphere();", "is_target": true}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "    static ForcedSphereConf getDefaultConf() {", "is_target": false}, {"number": 85, "content": "      ForcedSphereConf c;", "is_target": false}, {"number": 86, "content": "      c.radius = 1;", "is_target": false}, {"number": 87, "content": "      c.maxForce = 1;", "is_target": false}]}, "1060": {"lines": [{"number": 90, "content": "      c.speedDriven=false;", "is_target": false}, {"number": 91, "content": "      c.maxSpeed = 5;", "is_target": false}, {"number": 92, "content": "      return c;", "is_target": false}, {"number": 93, "content": "    }", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "    virtual void update();", "is_target": true}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "    virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 100, "content": "", "is_target": false}]}, "1061": {"lines": [{"number": 92, "content": "      return c;", "is_target": false}, {"number": 93, "content": "    }", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "    virtual void update();", "is_target": false}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "    virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "    virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 102, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}]}, "1062": {"lines": [{"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "    virtual void update();", "is_target": false}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "    virtual void doInternalStuff(const GlobalData& globalData);", "is_target": true}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "    virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 102, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 103, "content": "    virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 104, "content": "    virtual int getSensorNumberIntern() const;", "is_target": false}]}, "1063": {"lines": [{"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "    virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "    virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": true}, {"number": 102, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 103, "content": "    virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 104, "content": "    virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "    virtual Primitive* getMainPrimitive() const { return object[0]; }", "is_target": false}]}, "1064": {"lines": [{"number": 97, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "    virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "    virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 102, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": true}, {"number": 103, "content": "    virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 104, "content": "    virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "    virtual Primitive* getMainPrimitive() const { return object[0]; }", "is_target": false}, {"number": 107, "content": "", "is_target": false}]}, "1065": {"lines": [{"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "    virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "    virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 102, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 103, "content": "    virtual int getMotorNumberIntern() const;", "is_target": true}, {"number": 104, "content": "    virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "    virtual Primitive* getMainPrimitive() const { return object[0]; }", "is_target": false}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "  protected:", "is_target": false}]}, "1066": {"lines": [{"number": 99, "content": "    virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "    virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 102, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 103, "content": "    virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 104, "content": "    virtual int getSensorNumberIntern() const;", "is_target": true}, {"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "    virtual Primitive* getMainPrimitive() const { return object[0]; }", "is_target": false}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "  protected:", "is_target": false}, {"number": 109, "content": "", "is_target": false}]}, "1067": {"lines": [{"number": 101, "content": "    virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 102, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 103, "content": "    virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 104, "content": "    virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "    virtual Primitive* getMainPrimitive() const { return object[0]; }", "is_target": true}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "  protected:", "is_target": false}, {"number": 109, "content": "", "is_target": false}, {"number": 110, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 111, "content": "    virtual void destroy();", "is_target": false}]}, "1068": {"lines": [{"number": 90, "content": "    */", "is_target": false}, {"number": 91, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "    /** destroys vehicle and space", "is_target": false}, {"number": 94, "content": "     */", "is_target": false}, {"number": 95, "content": "    virtual void destroy();", "is_target": true}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "    /** additional things for collision handling can be done here", "is_target": false}, {"number": 98, "content": "     */", "is_target": false}, {"number": 99, "content": "    static void mycallback(void *data, dGeomID o1, dGeomID o2);", "is_target": false}, {"number": 100, "content": "", "is_target": false}]}, "1069": {"lines": [{"number": 98, "content": "    */", "is_target": false}, {"number": 99, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "    /** destroys vehicle and space", "is_target": false}, {"number": 102, "content": "     */", "is_target": false}, {"number": 103, "content": "    virtual void destroy();", "is_target": true}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "    FourWheeledConf conf;", "is_target": false}, {"number": 106, "content": "    Primitive* bumpertrans;", "is_target": false}, {"number": 107, "content": "    Primitive* bumper;", "is_target": false}, {"number": 108, "content": "  };", "is_target": false}]}, "1070": {"lines": [{"number": 41, "content": "     * @param sphereWheels switches between spheres and  'normal' wheels", "is_target": false}, {"number": 42, "content": "     */", "is_target": false}, {"number": 43, "content": "    Nimm4(const OdeHandle& odeHandle, const OsgHandle& osgHandle, const std::string& name,", "is_target": false}, {"number": 44, "content": "          double size=1, double force=3, double speed=15, bool sphereWheels=true);", "is_target": false}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    virtual ~Nimm4() {", "is_target": true}, {"number": 47, "content": "      destroy();", "is_target": false}, {"number": 48, "content": "    };", "is_target": false}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    /**", "is_target": false}, {"number": 51, "content": "     * updates the OSG nodes of the vehicle", "is_target": false}]}, "1071": {"lines": [{"number": 48, "content": "    };", "is_target": false}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    /**", "is_target": false}, {"number": 51, "content": "     * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 52, "content": "     */", "is_target": false}, {"number": 53, "content": "    virtual void update();", "is_target": true}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 57, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 58, "content": "    */", "is_target": false}]}, "1072": {"lines": [{"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 57, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 58, "content": "    */", "is_target": false}, {"number": 59, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 62, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 63, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 64, "content": "        @return number of actually written sensors", "is_target": false}]}, "1073": {"lines": [{"number": 61, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 62, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 63, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 64, "content": "        @return number of actually written sensors", "is_target": false}, {"number": 65, "content": "    */", "is_target": false}, {"number": 66, "content": "    virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": true}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 69, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 70, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 71, "content": "    */", "is_target": false}]}, "1074": {"lines": [{"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 69, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 70, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 71, "content": "    */", "is_target": false}, {"number": 72, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "    /** returns number of sensors", "is_target": false}, {"number": 75, "content": "     */", "is_target": false}, {"number": 76, "content": "    virtual int getSensorNumberIntern() const override {", "is_target": false}, {"number": 77, "content": "      return sensorno;", "is_target": false}]}, "1075": {"lines": [{"number": 78, "content": "      conf.irRangeBack  = 2;", "is_target": false}, {"number": 79, "content": "      conf.wheelSubstance.toRubber(40);", "is_target": false}, {"number": 80, "content": "      return conf;", "is_target": false}, {"number": 81, "content": "    }", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "    virtual ~FourWheeled();", "is_target": true}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "    virtual int getSensorNumberIntern()  const override;", "is_target": false}, {"number": 86, "content": "    virtual int getMotorNumberIntern()  const override;", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "    virtual int getSensorsIntern(sensor* sensors, int sensornumber);", "is_target": false}]}, "1076": {"lines": [{"number": 83, "content": "    virtual ~FourWheeled();", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "    virtual int getSensorNumberIntern()  const override;", "is_target": false}, {"number": 86, "content": "    virtual int getMotorNumberIntern()  const override;", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "    virtual int getSensorsIntern(sensor* sensors, int sensornumber);", "is_target": true}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": false}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "    // returns the joint with index i", "is_target": false}, {"number": 93, "content": "    virtual Joint* getJoint(int i);", "is_target": false}]}, "1077": {"lines": [{"number": 85, "content": "    virtual int getSensorNumberIntern()  const override;", "is_target": false}, {"number": 86, "content": "    virtual int getMotorNumberIntern()  const override;", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "    virtual int getSensorsIntern(sensor* sensors, int sensornumber);", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "    // returns the joint with index i", "is_target": false}, {"number": 93, "content": "    virtual Joint* getJoint(int i);", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  protected:", "is_target": false}]}, "1078": {"lines": [{"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  protected:", "is_target": false}, {"number": 96, "content": "    /** creates vehicle at desired pose", "is_target": false}, {"number": 97, "content": "        @param pose 4x4 pose matrix", "is_target": false}, {"number": 98, "content": "    */", "is_target": false}, {"number": 99, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": true}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "    /** destroys vehicle and space", "is_target": false}, {"number": 102, "content": "     */", "is_target": false}, {"number": 103, "content": "    virtual void destroy();", "is_target": false}, {"number": 104, "content": "", "is_target": false}]}, "1079": {"lines": [{"number": 98, "content": "    */", "is_target": false}, {"number": 99, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "    /** destroys vehicle and space", "is_target": false}, {"number": 102, "content": "     */", "is_target": false}, {"number": 103, "content": "    virtual void destroy();", "is_target": true}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "    FourWheeledConf conf;", "is_target": false}, {"number": 106, "content": "    Primitive* bumpertrans;", "is_target": false}, {"number": 107, "content": "    Primitive* bumper;", "is_target": false}, {"number": 108, "content": "  };", "is_target": false}]}, "1080": {"lines": [{"number": 98, "content": "    */", "is_target": false}, {"number": 99, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "    /** destroys vehicle and space", "is_target": false}, {"number": 102, "content": "     */", "is_target": false}, {"number": 103, "content": "    virtual void destroy();", "is_target": true}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "    FourWheeledConf conf;", "is_target": false}, {"number": 106, "content": "    Primitive* bumpertrans;", "is_target": false}, {"number": 107, "content": "    Primitive* bumper;", "is_target": false}, {"number": 108, "content": "  };", "is_target": false}]}, "1081": {"lines": [{"number": 33, "content": "  public:", "is_target": false}, {"number": 34, "content": "", "is_target": false}, {"number": 35, "content": "    Formel1(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 36, "content": "          double size=1, double force=3, double speed=15, bool sphereWheels=true);", "is_target": false}, {"number": 37, "content": "", "is_target": false}, {"number": 38, "content": "    virtual ~Formel1() {};", "is_target": true}, {"number": 39, "content": "", "is_target": false}, {"number": 40, "content": "    /**", "is_target": false}, {"number": 41, "content": "     * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 42, "content": "     */", "is_target": false}, {"number": 43, "content": "    virtual void update();", "is_target": false}]}, "1082": {"lines": [{"number": 38, "content": "    virtual ~Formel1() {};", "is_target": false}, {"number": 39, "content": "", "is_target": false}, {"number": 40, "content": "    /**", "is_target": false}, {"number": 41, "content": "     * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 42, "content": "     */", "is_target": false}, {"number": 43, "content": "    virtual void update();", "is_target": true}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 47, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 48, "content": "    */", "is_target": false}]}, "1083": {"lines": [{"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 47, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 48, "content": "    */", "is_target": false}, {"number": 49, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 52, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 53, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 54, "content": "        @return number of actually written sensors", "is_target": false}]}, "1084": {"lines": [{"number": 51, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 52, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 53, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 54, "content": "        @return number of actually written sensors", "is_target": false}, {"number": 55, "content": "    */", "is_target": false}, {"number": 56, "content": "    virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": true}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 59, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 60, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 61, "content": "    */", "is_target": false}]}, "1085": {"lines": [{"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 59, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 60, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 61, "content": "    */", "is_target": false}, {"number": 62, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "    /** returns number of sensors", "is_target": false}, {"number": 65, "content": "     */", "is_target": false}, {"number": 66, "content": "    virtual int getSensorNumberIntern() const override {", "is_target": false}, {"number": 67, "content": "      return sensorno;", "is_target": false}]}, "1086": {"lines": [{"number": 74, "content": "    }", "is_target": false}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "  protected:", "is_target": false}, {"number": 78, "content": "    /** the main object of the robot, which is used for position and speed tracking */", "is_target": false}, {"number": 79, "content": "    virtual Primitive* getMainPrimitive() const { return object[0]; }", "is_target": true}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "    /** creates vehicle at desired pose", "is_target": false}, {"number": 82, "content": "        @param pose 4x4 pose matrix", "is_target": false}, {"number": 83, "content": "    */", "is_target": false}, {"number": 84, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}]}, "1087": {"lines": [{"number": 160, "content": "", "is_target": false}, {"number": 161, "content": "  };", "is_target": false}, {"number": 162, "content": "", "is_target": false}, {"number": 163, "content": "  /** things for collision handling inside the space of the robot can be done here", "is_target": false}, {"number": 164, "content": "   */", "is_target": false}, {"number": 165, "content": "  void Formel1::mycallback(void *data, dGeomID o1, dGeomID o2){", "is_target": true}, {"number": 166, "content": "    // do collisions handling for collisions between parts inside the space of the robot here", "is_target": false}, {"number": 167, "content": "    // this has no meaning for this robot, because collsions between wheels and body are ignored", "is_target": false}, {"number": 168, "content": "    // but if parts of the robot can move against each other this is important", "is_target": false}, {"number": 169, "content": "", "is_target": false}, {"number": 170, "content": "    // the follwing (not active) code part can be used to check if objects which had collisions", "is_target": false}]}, "1088": {"lines": [{"number": 125, "content": "    c.irSide=false;", "is_target": false}, {"number": 126, "content": "    c.drawIRs=RaySensor::drawAll;", "is_target": false}, {"number": 127, "content": "    c.irsensorscale=1.5;", "is_target": false}, {"number": 128, "content": "    c.irCharacter=1;", "is_target": false}, {"number": 129, "content": "    c.irSensorTempl=0;", "is_target": false}, {"number": 130, "content": "    c.motor_ir_before_sensors=false;", "is_target": true}, {"number": 131, "content": "    c.axesShift=0;", "is_target": false}, {"number": 132, "content": "    c.brake=0;", "is_target": false}, {"number": 133, "content": "    c.axesShift=0;", "is_target": false}, {"number": 134, "content": "   return c;", "is_target": false}, {"number": 135, "content": "  }", "is_target": false}]}, "1089": {"lines": [{"number": 93, "content": "    c.irAxis3=false;", "is_target": false}, {"number": 94, "content": "    c.drawIRs=RaySensor::drawAll;", "is_target": false}, {"number": 95, "content": "    c.irsensorscale=1.5;", "is_target": false}, {"number": 96, "content": "    c.irCharacter=1;", "is_target": false}, {"number": 97, "content": "    c.irSensorTempl=0;", "is_target": false}, {"number": 98, "content": "    c.motor_ir_before_sensors=false;", "is_target": true}, {"number": 99, "content": "    c.brake=0;", "is_target": false}, {"number": 100, "content": "    c.axesShift=0;", "is_target": false}, {"number": 101, "content": "    return c;", "is_target": false}, {"number": 102, "content": "  }", "is_target": false}, {"number": 103, "content": "", "is_target": false}]}, "1090": {"lines": [{"number": 103, "content": "                       const Sphererobot3MassesConf& conf,", "is_target": false}, {"number": 104, "content": "                       const std::string& name, const std::string& revision, double transparency);", "is_target": false}, {"number": 105, "content": "  /// initialises some internal variables", "is_target": false}, {"number": 106, "content": "  void init();", "is_target": false}, {"number": 107, "content": "public:", "is_target": false}, {"number": 108, "content": "  virtual ~Sphererobot3Masses();", "is_target": true}, {"number": 109, "content": "", "is_target": false}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "  /// default configuration", "is_target": false}, {"number": 112, "content": "  static Sphererobot3MassesConf getDefaultConf() {", "is_target": false}, {"number": 113, "content": "    Sphererobot3MassesConf c;", "is_target": false}]}, "1091": {"lines": [{"number": 132, "content": "    c.brake=0;", "is_target": false}, {"number": 133, "content": "    c.axesShift=0;", "is_target": false}, {"number": 134, "content": "   return c;", "is_target": false}, {"number": 135, "content": "  }", "is_target": false}, {"number": 136, "content": "", "is_target": false}, {"number": 137, "content": "  virtual void update();", "is_target": true}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 142, "content": "", "is_target": false}]}, "1092": {"lines": [{"number": 134, "content": "   return c;", "is_target": false}, {"number": 135, "content": "  }", "is_target": false}, {"number": 136, "content": "", "is_target": false}, {"number": 137, "content": "  virtual void update();", "is_target": false}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "  virtual void sense(const GlobalData& globalData);", "is_target": false}, {"number": 144, "content": "", "is_target": false}]}, "1093": {"lines": [{"number": 136, "content": "", "is_target": false}, {"number": 137, "content": "  virtual void update();", "is_target": false}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": true}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "  virtual void sense(const GlobalData& globalData);", "is_target": false}, {"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "  virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 146, "content": "", "is_target": false}]}, "1094": {"lines": [{"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "  virtual void sense(const GlobalData& globalData);", "is_target": true}, {"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "  virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 148, "content": "", "is_target": false}]}, "1095": {"lines": [{"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "  virtual void sense(const GlobalData& globalData);", "is_target": false}, {"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "  virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": true}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "  virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "1096": {"lines": [{"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "  virtual void sense(const GlobalData& globalData);", "is_target": false}, {"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "  virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": true}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "  virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "  virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 152, "content": "", "is_target": false}]}, "1097": {"lines": [{"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "  virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "  virtual int getMotorNumberIntern() const;", "is_target": true}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "  virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "  /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 154, "content": "  virtual void notifyOnChange(const paramkey& key);", "is_target": false}]}, "1098": {"lines": [{"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "  virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "  virtual int getSensorNumberIntern() const;", "is_target": true}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "  /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 154, "content": "  virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "", "is_target": false}]}, "1099": {"lines": [{"number": 149, "content": "  virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "  virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "  /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 154, "content": "  virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "", "is_target": false}, {"number": 157, "content": "protected:", "is_target": false}, {"number": 158, "content": "", "is_target": false}, {"number": 159, "content": "  virtual void create(const osg::Matrix& pose);", "is_target": false}]}, "1100": {"lines": [{"number": 72, "content": "   Just two of the 3 axis are used. The worldZaxissensor  and irAxis3 has no meaning here.", "is_target": false}, {"number": 73, "content": "   **/", "is_target": false}, {"number": 74, "content": "  Barrel2Masses ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 75, "content": "                       const Sphererobot3MassesConf& conf, const std::string& name, double transparency=0.5 );", "is_target": false}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "  virtual ~Barrel2Masses();", "is_target": true}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /** default configuration for Barrel2Masses. It has no sensors.", "is_target": false}, {"number": 80, "content": "      Use addSensor(std::make_shared<Sensor>(AxisOrientationSensor(ZProjectionXY)) for example.*/", "is_target": false}, {"number": 81, "content": "  static Sphererobot3MassesConf getDefaultConfBarrel() {", "is_target": false}, {"number": 82, "content": "    Sphererobot3MassesConf c = Sphererobot3Masses::getDefaultConf();", "is_target": false}]}, "1101": {"lines": [{"number": 99, "content": "    c.brake=0;", "is_target": false}, {"number": 100, "content": "    c.axesShift=0;", "is_target": false}, {"number": 101, "content": "    return c;", "is_target": false}, {"number": 102, "content": "  }", "is_target": false}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "  virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": true}, {"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "protected:", "is_target": false}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "  /// The cylinder (main body) lies on the ground, that it is rotating about the z-axis", "is_target": false}, {"number": 109, "content": "  virtual void create(const osg::Matrix& pose);", "is_target": false}]}, "1102": {"lines": [{"number": 104, "content": "  virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "protected:", "is_target": false}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "  /// The cylinder (main body) lies on the ground, that it is rotating about the z-axis", "is_target": false}, {"number": 109, "content": "  virtual void create(const osg::Matrix& pose);", "is_target": true}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "};", "is_target": false}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "}", "is_target": false}, {"number": 114, "content": "", "is_target": false}]}, "1103": {"lines": [{"number": 99, "content": "    */", "is_target": false}, {"number": 100, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 101, "content": "", "is_target": false}, {"number": 102, "content": "    /** destroys robot and space", "is_target": false}, {"number": 103, "content": "     */", "is_target": false}, {"number": 104, "content": "    virtual void destroy();", "is_target": true}, {"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "    bool created = false;      // true if robot was created", "is_target": false}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "    Position initial_pos;    // initial position of robot", "is_target": false}]}, "1104": {"lines": [{"number": 40, "content": "    /**", "is_target": false}, {"number": 41, "content": "     * Constructor", "is_target": false}, {"number": 42, "content": "     */", "is_target": false}, {"number": 43, "content": "    HurlingSnake(const OdeHandle& odeHandle, const OsgHandle& osgHandle, const std::string& name);", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "    ~HurlingSnake();", "is_target": true}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 48, "content": "        @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 49, "content": "    */", "is_target": false}, {"number": 50, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}]}, "1105": {"lines": [{"number": 45, "content": "    ~HurlingSnake();", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 48, "content": "        @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 49, "content": "    */", "is_target": false}, {"number": 50, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    /** this function is called in each timestep. It should perform robot-internal checks,", "is_target": false}, {"number": 53, "content": "        like sensor resets/update etc.", "is_target": false}, {"number": 54, "content": "        @param globalData structure that contains global data from the simulation environment", "is_target": false}, {"number": 55, "content": "    */", "is_target": false}]}, "1106": {"lines": [{"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    /** this function is called in each timestep. It should perform robot-internal checks,", "is_target": false}, {"number": 53, "content": "        like sensor resets/update etc.", "is_target": false}, {"number": 54, "content": "        @param globalData structure that contains global data from the simulation environment", "is_target": false}, {"number": 55, "content": "    */", "is_target": false}, {"number": 56, "content": "    virtual void doInternalStuff(const GlobalData& globalData);", "is_target": true}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 60, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 61, "content": "        @param sensornumber length of the sensor array", "is_target": false}]}, "1107": {"lines": [{"number": 59, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 60, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 61, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 62, "content": "        @return number of actually written sensors", "is_target": false}, {"number": 63, "content": "    */", "is_target": false}, {"number": 64, "content": "    virtual int getSensorsIntern(sensor* sensors, int sensornumber);", "is_target": true}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 67, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 68, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 69, "content": "    */", "is_target": false}]}, "1108": {"lines": [{"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 67, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 68, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 69, "content": "    */", "is_target": false}, {"number": 70, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    /** returns number of sensors", "is_target": false}, {"number": 73, "content": "     */", "is_target": false}, {"number": 74, "content": "    virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 75, "content": "", "is_target": false}]}, "1109": {"lines": [{"number": 69, "content": "    */", "is_target": false}, {"number": 70, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    /** returns number of sensors", "is_target": false}, {"number": 73, "content": "     */", "is_target": false}, {"number": 74, "content": "    virtual int getSensorNumberIntern() const;", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "    /** returns number of motors", "is_target": false}, {"number": 77, "content": "     */", "is_target": false}, {"number": 78, "content": "    virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 79, "content": "", "is_target": false}]}, "1110": {"lines": [{"number": 73, "content": "     */", "is_target": false}, {"number": 74, "content": "    virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "    /** returns number of motors", "is_target": false}, {"number": 77, "content": "     */", "is_target": false}, {"number": 78, "content": "    virtual int getMotorNumberIntern() const;", "is_target": true}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "    /** returns a vector with the positions of all segments of the robot", "is_target": false}, {"number": 81, "content": "        @param poslist vector of positions (of all robot segments)", "is_target": false}, {"number": 82, "content": "        @return length of the list", "is_target": false}, {"number": 83, "content": "    */", "is_target": false}]}, "1111": {"lines": [{"number": 82, "content": "        @return length of the list", "is_target": false}, {"number": 83, "content": "    */", "is_target": false}, {"number": 84, "content": "    virtual int getSegmentsPosition(std::vector<Position> &poslist);", "is_target": false}, {"number": 85, "content": "", "is_target": false}, {"number": 86, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 87, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "  protected:", "is_target": false}, {"number": 90, "content": "    /** the main object of the robot, which is used for position and speed tracking */", "is_target": false}, {"number": 91, "content": "    virtual Primitive* getMainPrimitive() const { return objects[(NUM-1)/2] /*(center)*/; }", "is_target": false}, {"number": 92, "content": "    //virtual Primitive* getMainPrimitive() const { return object[NUM-1] /*(head element)*/; }", "is_target": false}]}, "1112": {"lines": [{"number": 86, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 87, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "  protected:", "is_target": false}, {"number": 90, "content": "    /** the main object of the robot, which is used for position and speed tracking */", "is_target": false}, {"number": 91, "content": "    virtual Primitive* getMainPrimitive() const { return objects[(NUM-1)/2] /*(center)*/; }", "is_target": true}, {"number": 92, "content": "    //virtual Primitive* getMainPrimitive() const { return object[NUM-1] /*(head element)*/; }", "is_target": false}, {"number": 93, "content": "", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  private:", "is_target": false}, {"number": 96, "content": "", "is_target": false}]}, "1121": {"lines": [{"number": 192, "content": "          const std::string& name = \"ScrewDriveSnake\");", "is_target": false}, {"number": 193, "content": "", "is_target": false}, {"number": 194, "content": "      /**", "is_target": false}, {"number": 195, "content": "       * Destructor", "is_target": false}, {"number": 196, "content": "       */", "is_target": false}, {"number": 197, "content": "      virtual ~Nejihebi();", "is_target": true}, {"number": 198, "content": "", "is_target": false}, {"number": 199, "content": "      /**", "is_target": false}, {"number": 200, "content": "       * Returns the current configuration of the robot", "is_target": false}, {"number": 201, "content": "       * @return current configuration", "is_target": false}, {"number": 202, "content": "       */", "is_target": false}]}, "1122": {"lines": [{"number": 224, "content": "       * tracking and camera following. For the Nejihebi robot that is the", "is_target": false}, {"number": 225, "content": "       * robot head object", "is_target": false}, {"number": 226, "content": "       *", "is_target": false}, {"number": 227, "content": "       * @return pointer to the robot head primitive", "is_target": false}, {"number": 228, "content": "       */", "is_target": false}, {"number": 229, "content": "      virtual Primitive* getMainPrimitive()  const;", "is_target": true}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "      /**", "is_target": false}, {"number": 232, "content": "       * Returns number of motors.", "is_target": false}, {"number": 233, "content": "       *", "is_target": false}, {"number": 234, "content": "       * @return number of motors", "is_target": false}]}, "1123": {"lines": [{"number": 231, "content": "      /**", "is_target": false}, {"number": 232, "content": "       * Returns number of motors.", "is_target": false}, {"number": 233, "content": "       *", "is_target": false}, {"number": 234, "content": "       * @return number of motors", "is_target": false}, {"number": 235, "content": "       */", "is_target": false}, {"number": 236, "content": "      virtual int getMotorNumberIntern() const;", "is_target": true}, {"number": 237, "content": "", "is_target": false}, {"number": 238, "content": "      /**", "is_target": false}, {"number": 239, "content": "       * Returns number of sensors.", "is_target": false}, {"number": 240, "content": "       *", "is_target": false}, {"number": 241, "content": "       * @return number of sensors", "is_target": false}]}, "1124": {"lines": [{"number": 238, "content": "      /**", "is_target": false}, {"number": 239, "content": "       * Returns number of sensors.", "is_target": false}, {"number": 240, "content": "       *", "is_target": false}, {"number": 241, "content": "       * @return number of sensors", "is_target": false}, {"number": 242, "content": "       */", "is_target": false}, {"number": 243, "content": "      virtual int getSensorNumberIntern() const;", "is_target": true}, {"number": 244, "content": "", "is_target": false}, {"number": 245, "content": "      /**", "is_target": false}, {"number": 246, "content": "       * Returns current sensor values", "is_target": false}, {"number": 247, "content": "       *", "is_target": false}, {"number": 248, "content": "       * This method returns all the sensor values of the robot. They are scaled", "is_target": false}]}, "1125": {"lines": [{"number": 263, "content": "       * @param sensors sensor array to which the sensors scaled to [-1,1] will", "is_target": false}, {"number": 264, "content": "       *                be written", "is_target": false}, {"number": 265, "content": "       * @param sensornumber length of the sensor array", "is_target": false}, {"number": 266, "content": "       * @return number of actually written sensors", "is_target": false}, {"number": 267, "content": "       */", "is_target": false}, {"number": 268, "content": "      virtual int getSensorsIntern(sensor* sensors, int sensornumber);", "is_target": true}, {"number": 269, "content": "", "is_target": false}, {"number": 270, "content": "      /**", "is_target": false}, {"number": 271, "content": "       * Assigns a name to a motor.", "is_target": false}, {"number": 272, "content": "       *", "is_target": false}, {"number": 273, "content": "       * This method assigns a human readable name to a motor. This name is used", "is_target": false}]}, "1126": {"lines": [{"number": 294, "content": "      /**", "is_target": false}, {"number": 295, "content": "       * Sets the pose of the vehicle", "is_target": false}, {"number": 296, "content": "       *", "is_target": false}, {"number": 297, "content": "       * @param pose desired pose matrix", "is_target": false}, {"number": 298, "content": "       */", "is_target": false}, {"number": 299, "content": "      virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 300, "content": "", "is_target": false}, {"number": 301, "content": "      /**", "is_target": false}, {"number": 302, "content": "       * Sets current motorcommands", "is_target": false}, {"number": 303, "content": "       *", "is_target": false}, {"number": 304, "content": "       * This method is used to deliver motor commands to the robots. If N is", "is_target": false}]}, "1127": {"lines": [{"number": 319, "content": "       *  5N-5 : torque limit for last pitch joint           [0:1]", "is_target": false}, {"number": 320, "content": "       *", "is_target": false}, {"number": 321, "content": "       * @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 322, "content": "       * @param motornumber length of the motor array", "is_target": false}, {"number": 323, "content": "       */", "is_target": false}, {"number": 324, "content": "      virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 325, "content": "", "is_target": false}, {"number": 326, "content": "    private:", "is_target": false}, {"number": 327, "content": "", "is_target": false}, {"number": 328, "content": "      /** Struct to hold all relevant parts of a screw element */", "is_target": false}, {"number": 329, "content": "      struct Screw {", "is_target": false}]}, "1128": {"lines": [{"number": 168, "content": "", "is_target": false}, {"number": 169, "content": "", "is_target": false}, {"number": 170, "content": "", "is_target": false}, {"number": 171, "content": "  /** destroys vehicle and space", "is_target": false}, {"number": 172, "content": "   */", "is_target": false}, {"number": 173, "content": "  virtual void destroy();", "is_target": true}, {"number": 174, "content": "  static void mycallback(void *data, dGeomID o1, dGeomID o2);", "is_target": false}, {"number": 175, "content": "", "is_target": false}, {"number": 176, "content": "        /**", "is_target": false}, {"number": 177, "content": "         * Inspectable interface", "is_target": false}, {"number": 178, "content": "         */", "is_target": false}]}, "1129": {"lines": [{"number": 100, "content": "    conf.boxWidth=1.0;", "is_target": false}, {"number": 101, "content": "    conf.wheelTexture=\"Images/tire.rgb\";", "is_target": false}, {"number": 102, "content": "    return conf;", "is_target": false}, {"number": 103, "content": "  }", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "  virtual ~Nimm2();", "is_target": true}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "  /**", "is_target": false}, {"number": 108, "content": "   * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 109, "content": "   */", "is_target": false}, {"number": 110, "content": "  virtual void update();", "is_target": false}]}, "1130": {"lines": [{"number": 105, "content": "  virtual ~Nimm2();", "is_target": false}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "  /**", "is_target": false}, {"number": 108, "content": "   * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 109, "content": "   */", "is_target": false}, {"number": 110, "content": "  virtual void update();", "is_target": true}, {"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "  /** sets the pose of the vehicle", "is_target": false}, {"number": 113, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 114, "content": "  */", "is_target": false}, {"number": 115, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}]}, "1131": {"lines": [{"number": 110, "content": "  virtual void update();", "is_target": false}, {"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "  /** sets the pose of the vehicle", "is_target": false}, {"number": 113, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 114, "content": "  */", "is_target": false}, {"number": 115, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "  /** returns actual sensorvalues", "is_target": false}, {"number": 118, "content": "      @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 119, "content": "      @param sensornumber length of the sensor array", "is_target": false}, {"number": 120, "content": "      @return number of actually written sensors", "is_target": false}]}, "1132": {"lines": [{"number": 117, "content": "  /** returns actual sensorvalues", "is_target": false}, {"number": 118, "content": "      @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 119, "content": "      @param sensornumber length of the sensor array", "is_target": false}, {"number": 120, "content": "      @return number of actually written sensors", "is_target": false}, {"number": 121, "content": "  */", "is_target": false}, {"number": 122, "content": "  virtual int getSensorsIntern(sensor* sensors, int sensornumber);", "is_target": true}, {"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "  /** sets actual motorcommands", "is_target": false}, {"number": 125, "content": "      @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 126, "content": "      @param motornumber length of the motor array", "is_target": false}, {"number": 127, "content": "  */", "is_target": false}]}, "1133": {"lines": [{"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "  /** sets actual motorcommands", "is_target": false}, {"number": 125, "content": "      @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 126, "content": "      @param motornumber length of the motor array", "is_target": false}, {"number": 127, "content": "  */", "is_target": false}, {"number": 128, "content": "  virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "  /** returns number of sensors", "is_target": false}, {"number": 131, "content": "   */", "is_target": false}, {"number": 132, "content": "  virtual int getSensorNumberIntern() const override {", "is_target": false}, {"number": 133, "content": "    return sensorno;", "is_target": false}]}, "1134": {"lines": [{"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "    /** this function is called in each timestep. It should perform robot-internal checks,", "is_target": false}, {"number": 150, "content": "      like space-internal collision detection, sensor resets/update etc.", "is_target": false}, {"number": 151, "content": "      @param globalData structure that contains global data from the simulation environment", "is_target": false}, {"number": 152, "content": "   */", "is_target": false}, {"number": 153, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": true}, {"number": 154, "content": "", "is_target": false}, {"number": 155, "content": "        virtual double& getSumForce() { return sumForce; }", "is_target": false}, {"number": 156, "content": "", "is_target": false}, {"number": 157, "content": "        virtual double& getContactPoints() { return contactPoints; }", "is_target": false}, {"number": 158, "content": "", "is_target": false}]}, "1135": {"lines": [{"number": 42, "content": "    : AbstractRobot(name, revision),", "is_target": false}, {"number": 43, "content": "      initialPose(osg::Matrix::identity()),", "is_target": false}, {"number": 44, "content": "      initialRelativePose(osg::Matrix::identity()),", "is_target": false}, {"number": 45, "content": "      odeHandle(odeHandle), osgHandle(osgHandle),", "is_target": false}, {"number": 46, "content": "      initialized(false), askedfornumber(false) {", "is_target": false}, {"number": 47, "content": "    parentspace = odeHandle.space;", "is_target": true}, {"number": 48, "content": "    fixationTmpJoint = 0;", "is_target": false}, {"number": 49, "content": "  };", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "  OdeRobot::~OdeRobot(){", "is_target": false}, {"number": 52, "content": "    cleanup();", "is_target": false}]}, "1136": {"lines": [{"number": 264, "content": "", "is_target": false}, {"number": 265, "content": "    void attachSensor(const SensorAttachment& sa);", "is_target": false}, {"number": 266, "content": "    void attachMotor(const MotorAttachment& ma);", "is_target": false}, {"number": 267, "content": "", "is_target": false}, {"number": 268, "content": "    /// deletes all objects (primitives) and joints (is called automatically in destructor)", "is_target": false}, {"number": 269, "content": "    virtual void cleanup();", "is_target": true}, {"number": 270, "content": "", "is_target": false}, {"number": 271, "content": "  protected:", "is_target": false}, {"number": 272, "content": "    /// list of objects (should be populated by subclasses)", "is_target": false}, {"number": 273, "content": "    Primitives objects;", "is_target": false}, {"number": 274, "content": "    /// list of joints (should be populated by subclasses)", "is_target": false}]}, "1137": {"lines": [{"number": 234, "content": "    // - set texture for cylinder", "is_target": false}, {"number": 235, "content": "    // - put it into objects[0]", "is_target": false}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "    if (conf.boxMode) {", "is_target": false}, {"number": 238, "content": "      double dheight = 0.0;", "is_target": false}, {"number": 239, "content": "      double height = width/4*3 + dheight;", "is_target": true}, {"number": 240, "content": "      // height, width and length", "is_target": false}, {"number": 241, "content": "      Box* box = new Box(height,conf.boxWidth*width/3, length/4*3);", "is_target": false}, {"number": 242, "content": "      box->setTexture(\"Images/wood.rgb\");", "is_target": false}, {"number": 243, "content": "      box->init(odeHandle, cmass*5, osgHandle);", "is_target": false}, {"number": 244, "content": "      box->setPose(Matrix::rotate(M_PI/2, 0, 1, 0) * pose * Matrix::translate(0, 0, dheight/2));", "is_target": false}]}, "1138": {"lines": [{"number": 212, "content": "    place(osg::Matrix::translate(pos));", "is_target": false}, {"number": 213, "content": "  }", "is_target": false}, {"number": 214, "content": "", "is_target": false}, {"number": 215, "content": "  void OdeRobot::place(const osg::Matrix& pose) {", "is_target": false}, {"number": 216, "content": "    placeIntern(pose);", "is_target": false}, {"number": 217, "content": "    for( auto &i: sensors){", "is_target": true}, {"number": 218, "content": "      attachSensor(i);", "is_target": false}, {"number": 219, "content": "    }", "is_target": false}, {"number": 220, "content": "    for( auto &i: motors){", "is_target": false}, {"number": 221, "content": "      attachMotor(i);", "is_target": false}, {"number": 222, "content": "    }", "is_target": false}]}, "1139": {"lines": [{"number": 215, "content": "  void OdeRobot::place(const osg::Matrix& pose) {", "is_target": false}, {"number": 216, "content": "    placeIntern(pose);", "is_target": false}, {"number": 217, "content": "    for( auto &i: sensors){", "is_target": false}, {"number": 218, "content": "      attachSensor(i);", "is_target": false}, {"number": 219, "content": "    }", "is_target": false}, {"number": 220, "content": "    for( auto &i: motors){", "is_target": true}, {"number": 221, "content": "      attachMotor(i);", "is_target": false}, {"number": 222, "content": "    }", "is_target": false}, {"number": 223, "content": "    assert(getMainPrimitive());", "is_target": false}, {"number": 224, "content": "    initialPose=getMainPrimitive()->getPose();", "is_target": false}, {"number": 225, "content": "    Pose inv;", "is_target": false}]}, "1140": {"lines": [{"number": 260, "content": "    return false;", "is_target": false}, {"number": 261, "content": "  }", "is_target": false}, {"number": 262, "content": "", "is_target": false}, {"number": 263, "content": "  bool OdeRobot::isGeomInPrimitiveList(std::list<Primitive*> ps, dGeomID geom){", "is_target": false}, {"number": 264, "content": "    for( auto& i : ps){", "is_target": false}, {"number": 265, "content": "      if(geom == i->getGeom()) return true;", "is_target": true}, {"number": 266, "content": "    }", "is_target": false}, {"number": 267, "content": "    return false;", "is_target": false}, {"number": 268, "content": "  }", "is_target": false}, {"number": 269, "content": "", "is_target": false}, {"number": 270, "content": "  void OdeRobot::moveToPosition(Pos pos, int primitiveID){", "is_target": false}]}, "1141": {"lines": [{"number": 395, "content": "", "is_target": false}, {"number": 396, "content": "    // temporary array for servo commands", "is_target": false}, {"number": 397, "content": "    std::vector<double> commands(4*noServos, 0);", "is_target": false}, {"number": 398, "content": "    len = std::min(unsigned(motornumber), noScrews+4*noServos);", "is_target": false}, {"number": 399, "content": "    for(unsigned int i=noScrews; i<len; ++i)", "is_target": false}, {"number": 400, "content": "      commands[i-noScrews] = motors[i];", "is_target": true}, {"number": 401, "content": "", "is_target": false}, {"number": 402, "content": "    // use array to set motors", "is_target": false}, {"number": 403, "content": "    for (unsigned int i=0; i<noServos; ++i)  {", "is_target": false}, {"number": 404, "content": "      servos[i]->setPower(", "is_target": false}, {"number": 405, "content": "          conf.jointUnit.yaw.power   * clip(motors[noScrews+2*noServos+2*i],-1.0,1.0),", "is_target": false}]}, "1142": {"lines": [{"number": 277, "content": "        double min=10e8;", "is_target": false}, {"number": 278, "content": "        // find lowest body part and its position", "is_target": false}, {"number": 279, "content": "        FOREACHC(vector<Primitive*>, ps, p){", "is_target": false}, {"number": 280, "content": "          double z = (*p)->getPosition().z();", "is_target": false}, {"number": 281, "content": "          if(z<min){", "is_target": false}, {"number": 282, "content": "            z=min;", "is_target": true}, {"number": 283, "content": "            robpos=(*p)->getPosition();", "is_target": false}, {"number": 284, "content": "          }", "is_target": false}, {"number": 285, "content": "        }", "is_target": false}, {"number": 286, "content": "    }else if(primitiveID>=0 && primitiveID < static_cast<int>(ps.size())){", "is_target": false}, {"number": 287, "content": "        if(!ps[primitiveID]) return;", "is_target": false}]}, "1143": {"lines": [{"number": 44, "content": " * by a joint", "is_target": false}, {"number": 45, "content": " **/", "is_target": false}, {"number": 46, "content": "class Schlange : public DefaultCaterPillar {", "is_target": false}, {"number": 47, "content": "protected:", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "  bool created = false;", "is_target": true}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "  std::vector <AngularMotor*> frictionmotors;", "is_target": false}, {"number": 52, "content": "  SchlangeConf conf;", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "public:", "is_target": false}]}, "1144": {"lines": [{"number": 46, "content": "class Schlange : public DefaultCaterPillar {", "is_target": false}, {"number": 47, "content": "protected:", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "  bool created = false;", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "  std::vector <AngularMotor*> frictionmotors;", "is_target": true}, {"number": 52, "content": "  SchlangeConf conf;", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "public:", "is_target": false}, {"number": 55, "content": "  Schlange ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 56, "content": "             const SchlangeConf& conf, const std::string& name, const std::string& revision);", "is_target": false}]}, "1145": {"lines": [{"number": 47, "content": "protected:", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "  bool created = false;", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "  std::vector <AngularMotor*> frictionmotors;", "is_target": false}, {"number": 52, "content": "  SchlangeConf conf;", "is_target": true}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "public:", "is_target": false}, {"number": 55, "content": "  Schlange ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 56, "content": "             const SchlangeConf& conf, const std::string& name, const std::string& revision);", "is_target": false}, {"number": 57, "content": "", "is_target": false}]}, "1146": {"lines": [{"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "public:", "is_target": false}, {"number": 55, "content": "  Schlange ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 56, "content": "             const SchlangeConf& conf, const std::string& name, const std::string& revision);", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  static SchlangeConf getDefaultConf() {", "is_target": true}, {"number": 59, "content": "    SchlangeConf conf;", "is_target": false}, {"number": 60, "content": "    conf.segmNumber = 10;    //  number of snake elements", "is_target": false}, {"number": 61, "content": "    conf.segmLength = 0.8;   // length of one snake element", "is_target": false}, {"number": 62, "content": "    conf.segmDia    = 0.2;   //  diameter of a snake element", "is_target": false}, {"number": 63, "content": "    conf.segmMass   = 0.1;//0.4   //  mass of one snake element", "is_target": false}]}, "1147": {"lines": [{"number": 71, "content": "    conf.headColor   = \"robot2\";", "is_target": false}, {"number": 72, "content": "    conf.bodyColor   = \"robot1\";", "is_target": false}, {"number": 73, "content": "    return conf;", "is_target": false}, {"number": 74, "content": "  }", "is_target": false}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "  virtual ~Schlange();", "is_target": true}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /** sets the pose of the vehicle", "is_target": false}, {"number": 80, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 81, "content": "  */", "is_target": false}]}, "1148": {"lines": [{"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /** sets the pose of the vehicle", "is_target": false}, {"number": 80, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 81, "content": "  */", "is_target": false}, {"number": 82, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  /// update all primitives and joints", "is_target": false}, {"number": 85, "content": "  virtual void update();", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "  /**", "is_target": false}]}, "1149": {"lines": [{"number": 80, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 81, "content": "  */", "is_target": false}, {"number": 82, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  /// update all primitives and joints", "is_target": false}, {"number": 85, "content": "  virtual void update();", "is_target": true}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "  /**", "is_target": false}, {"number": 88, "content": "   *Reads the actual motor commands from an array,", "is_target": false}, {"number": 89, "content": "   *an sets all motors of the snake to this values.", "is_target": false}, {"number": 90, "content": "   *It is an linear allocation.", "is_target": false}]}, "1150": {"lines": [{"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "  /** returns a vector with the positions of all segments of the robot", "is_target": false}, {"number": 113, "content": "      @param poslist vector of positions (of all robot segments)", "is_target": false}, {"number": 114, "content": "      @return length of the list", "is_target": false}, {"number": 115, "content": "  */", "is_target": false}, {"number": 116, "content": "  virtual int getSegmentsPosition(std::vector<Position> &poslist);", "is_target": true}, {"number": 117, "content": "", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "  /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 120, "content": "  virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 121, "content": "", "is_target": false}]}, "1151": {"lines": [{"number": 115, "content": "  */", "is_target": false}, {"number": 116, "content": "  virtual int getSegmentsPosition(std::vector<Position> &poslist);", "is_target": false}, {"number": 117, "content": "", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "  /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 120, "content": "  virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 121, "content": "", "is_target": false}, {"number": 122, "content": "  /** the main object of the robot, which is used for position and speed tracking */", "is_target": false}, {"number": 123, "content": "  virtual const Primitive* getMainPrimitive() const override {", "is_target": false}, {"number": 124, "content": "    if(!objects.empty()){", "is_target": false}, {"number": 125, "content": "      //      int half = objects.size()/2;", "is_target": false}]}, "1152": {"lines": [{"number": 150, "content": "  std::vector<OdeHandle> spaces;", "is_target": false}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "  /** creates vehicle at desired pose", "is_target": false}, {"number": 153, "content": "      @param pose 4x4 pose matrix", "is_target": false}, {"number": 154, "content": "  */", "is_target": false}, {"number": 155, "content": "  virtual void create(const osg::Matrix& pose);", "is_target": true}, {"number": 156, "content": "  /**", "is_target": false}, {"number": 157, "content": "     creates and initialised the segment with the given index", "is_target": false}, {"number": 158, "content": "   */", "is_target": false}, {"number": 159, "content": "  virtual Primitive* createSegment(int index, const OdeHandle& odeHandle);", "is_target": false}, {"number": 160, "content": "  virtual void destroy();", "is_target": false}]}, "1153": {"lines": [{"number": 155, "content": "  virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 156, "content": "  /**", "is_target": false}, {"number": 157, "content": "     creates and initialised the segment with the given index", "is_target": false}, {"number": 158, "content": "   */", "is_target": false}, {"number": 159, "content": "  virtual Primitive* createSegment(int index, const OdeHandle& odeHandle);", "is_target": false}, {"number": 160, "content": "  virtual void destroy();", "is_target": true}, {"number": 161, "content": "};", "is_target": false}, {"number": 162, "content": "", "is_target": false}, {"number": 163, "content": "}", "is_target": false}, {"number": 164, "content": "", "is_target": false}, {"number": 165, "content": "#endif", "is_target": false}]}, "1154": {"lines": [{"number": 49, "content": "    SchlangeServo2 ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 50, "content": "                     const SchlangeConf& conf,", "is_target": false}, {"number": 51, "content": "                     const std::string& name,", "is_target": false}, {"number": 52, "content": "                     const std::string& revision = \"\" );", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual ~SchlangeServo2();", "is_target": true}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    /**", "is_target": false}, {"number": 57, "content": "     *Reads the actual motor commands from an array,", "is_target": false}, {"number": 58, "content": "     *an sets all motors of the snake to this values.", "is_target": false}, {"number": 59, "content": "     *It is an linear allocation.", "is_target": false}]}, "1155": {"lines": [{"number": 58, "content": "     *an sets all motors of the snake to this values.", "is_target": false}, {"number": 59, "content": "     *It is an linear allocation.", "is_target": false}, {"number": 60, "content": "     *@param motors pointer to the array, motor values are scaled to [-1,1]", "is_target": false}, {"number": 61, "content": "     *@param motornumber length of the motor array", "is_target": false}, {"number": 62, "content": "     **/", "is_target": false}, {"number": 63, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": true}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "    /**", "is_target": false}, {"number": 66, "content": "     *Writes the sensor values to an array in the memory.", "is_target": false}, {"number": 67, "content": "     *@param sensors pointer to the array", "is_target": false}, {"number": 68, "content": "     *@param sensornumber length of the sensor array", "is_target": false}]}, "1156": {"lines": [{"number": 66, "content": "     *Writes the sensor values to an array in the memory.", "is_target": false}, {"number": 67, "content": "     *@param sensors pointer to the array", "is_target": false}, {"number": 68, "content": "     *@param sensornumber length of the sensor array", "is_target": false}, {"number": 69, "content": "     *@return number of actually written sensors", "is_target": false}, {"number": 70, "content": "     **/", "is_target": false}, {"number": 71, "content": "    virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": true}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "    /** returns number of sensors", "is_target": false}, {"number": 74, "content": "     */", "is_target": false}, {"number": 75, "content": "    virtual int getSensorNumberIntern() const override { assert(created); return 2*servos.size(); }", "is_target": false}, {"number": 76, "content": "", "is_target": false}]}, "1157": {"lines": [{"number": 77, "content": "    /** returns number of motors", "is_target": false}, {"number": 78, "content": "     */", "is_target": false}, {"number": 79, "content": "    virtual int getMotorNumberIntern() const override { assert(created); return 2*servos.size(); }", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 82, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  private:", "is_target": false}, {"number": 85, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 86, "content": "    virtual void destroy();", "is_target": false}, {"number": 87, "content": "  };", "is_target": false}]}, "1158": {"lines": [{"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 82, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  private:", "is_target": false}, {"number": 85, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": true}, {"number": 86, "content": "    virtual void destroy();", "is_target": false}, {"number": 87, "content": "  };", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "}", "is_target": false}, {"number": 90, "content": "", "is_target": false}]}, "1159": {"lines": [{"number": 81, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 82, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  private:", "is_target": false}, {"number": 85, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 86, "content": "    virtual void destroy();", "is_target": true}, {"number": 87, "content": "  };", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "}", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "#endif", "is_target": false}]}, "1160": {"lines": [{"number": 39, "content": "  public:", "is_target": false}, {"number": 40, "content": "    PlattfussSchlange ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 41, "content": "                        const SchlangeConf& conf,", "is_target": false}, {"number": 42, "content": "                        const std::string& name);", "is_target": false}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "    virtual ~PlattfussSchlange();", "is_target": true}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "  private:", "is_target": false}, {"number": 47, "content": "    virtual Primitive* createSegment(int index, const OdeHandle& odeHandle);", "is_target": false}, {"number": 48, "content": "  };", "is_target": false}, {"number": 49, "content": "", "is_target": false}]}, "1161": {"lines": [{"number": 42, "content": "                        const std::string& name);", "is_target": false}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "    virtual ~PlattfussSchlange();", "is_target": false}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "  private:", "is_target": false}, {"number": 47, "content": "    virtual Primitive* createSegment(int index, const OdeHandle& odeHandle);", "is_target": true}, {"number": 48, "content": "  };", "is_target": false}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "}", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "#endif", "is_target": false}]}, "1162": {"lines": [{"number": 112, "content": "      conf.muscleLengthSensors=false;", "is_target": false}, {"number": 113, "content": "      conf.jointActuator=false;", "is_target": false}, {"number": 114, "content": "      return conf;", "is_target": false}, {"number": 115, "content": "    }", "is_target": false}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "    virtual ~MuscledArm() {};", "is_target": true}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "", "is_target": false}, {"number": 120, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 121, "content": "        @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 122, "content": "    */", "is_target": false}]}, "1163": {"lines": [{"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "", "is_target": false}, {"number": 120, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 121, "content": "        @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 122, "content": "    */", "is_target": false}, {"number": 123, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "", "is_target": false}, {"number": 126, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 127, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 128, "content": "        @param sensornumber length of the sensor array", "is_target": false}]}, "1164": {"lines": [{"number": 126, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 127, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 128, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 129, "content": "        @return number of actually written sensors", "is_target": false}, {"number": 130, "content": "    */", "is_target": false}, {"number": 131, "content": "    virtual int getSensorsIntern(sensor* sensors, int sensornumber);", "is_target": true}, {"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 134, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 135, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 136, "content": "    */", "is_target": false}]}, "1165": {"lines": [{"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 134, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 135, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 136, "content": "    */", "is_target": false}, {"number": 137, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "    /** returns number of sensors", "is_target": false}, {"number": 140, "content": "     */", "is_target": false}, {"number": 141, "content": "    virtual int getSensorNumberIntern() const override {", "is_target": false}, {"number": 142, "content": "      return sensorno;", "is_target": false}]}, "1166": {"lines": [{"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "    /** this function is called in each timestep. It should perform robot-internal checks,", "is_target": false}, {"number": 163, "content": "        like space-internal collision detection, sensor resets/update etc.", "is_target": false}, {"number": 164, "content": "        @param globalData structure that contains global data from the simulation environment", "is_target": false}, {"number": 165, "content": "    */", "is_target": false}, {"number": 166, "content": "    virtual void doInternalStuff(const GlobalData& globalData);", "is_target": true}, {"number": 167, "content": "", "is_target": false}, {"number": 168, "content": "", "is_target": false}, {"number": 169, "content": "    virtual Primitive* getMainObject() const;", "is_target": false}, {"number": 170, "content": "", "is_target": false}, {"number": 171, "content": "  protected:", "is_target": false}]}, "1167": {"lines": [{"number": 239, "content": "    // add a spring force to keep the bodies together, otherwise they will", "is_target": false}, {"number": 240, "content": "    // fly apart along the slider axis.", "is_target": false}, {"number": 241, "content": "", "is_target": false}, {"number": 242, "content": "    //         //mainMuscle11  =  3", "is_target": false}, {"number": 243, "content": "    //         //smallMuscle42 = 15", "is_target": false}, {"number": 244, "content": "    const dReal *p1;", "is_target": true}, {"number": 245, "content": "    const dReal *p2;", "is_target": false}, {"number": 246, "content": "    for (int i=mainMuscle11; i<smallMuscle42; i+=2) {", "is_target": false}, {"number": 247, "content": "      p1 = dBodyGetPosition (object[i]->getBody());", "is_target": false}, {"number": 248, "content": "      p2 = dBodyGetPosition (object[i+1]->getBody());", "is_target": false}, {"number": 249, "content": "", "is_target": false}]}, "1170": {"lines": [{"number": 155, "content": "  virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 156, "content": "  /**", "is_target": false}, {"number": 157, "content": "     creates and initialised the segment with the given index", "is_target": false}, {"number": 158, "content": "   */", "is_target": false}, {"number": 159, "content": "  virtual Primitive* createSegment(int index, const OdeHandle& odeHandle);", "is_target": false}, {"number": 160, "content": "  virtual void destroy();", "is_target": true}, {"number": 161, "content": "};", "is_target": false}, {"number": 162, "content": "", "is_target": false}, {"number": 163, "content": "}", "is_target": false}, {"number": 164, "content": "", "is_target": false}, {"number": 165, "content": "#endif", "is_target": false}]}, "1172": {"lines": [{"number": 43, "content": "      SchlangeForce ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 44, "content": "                      const SchlangeConf& conf,", "is_target": false}, {"number": 45, "content": "                      const std::string& name, const std::string& revision);", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "      virtual ~SchlangeForce();", "is_target": true}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "      /**", "is_target": false}, {"number": 51, "content": "       *Reads the actual motor commands from an array,", "is_target": false}, {"number": 52, "content": "       *an sets all motors of the snake to this values.", "is_target": false}, {"number": 53, "content": "       *It is an linear allocation.", "is_target": false}]}, "1173": {"lines": [{"number": 52, "content": "       *an sets all motors of the snake to this values.", "is_target": false}, {"number": 53, "content": "       *It is an linear allocation.", "is_target": false}, {"number": 54, "content": "       *@param motors pointer to the array, motor values are scaled to [-1,1]", "is_target": false}, {"number": 55, "content": "       *@param motornumber length of the motor array", "is_target": false}, {"number": 56, "content": "       **/", "is_target": false}, {"number": 57, "content": "      virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": true}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "      /**", "is_target": false}, {"number": 60, "content": "       *Writes the sensor values to an array in the memory.", "is_target": false}, {"number": 61, "content": "       *@param sensors pointer to the array", "is_target": false}, {"number": 62, "content": "       *@param sensornumber length of the sensor array", "is_target": false}]}, "1174": {"lines": [{"number": 60, "content": "       *Writes the sensor values to an array in the memory.", "is_target": false}, {"number": 61, "content": "       *@param sensors pointer to the array", "is_target": false}, {"number": 62, "content": "       *@param sensornumber length of the sensor array", "is_target": false}, {"number": 63, "content": "       *@return number of actually written sensors", "is_target": false}, {"number": 64, "content": "       **/", "is_target": false}, {"number": 65, "content": "      virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": true}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "      /** returns number of sensors", "is_target": false}, {"number": 68, "content": "       */", "is_target": false}, {"number": 69, "content": "      virtual int getSensorNumberIntern() const override { assert(created); return joints.size() * 2; }", "is_target": false}, {"number": 70, "content": "", "is_target": false}]}, "1175": {"lines": [{"number": 71, "content": "      /** returns number of motors", "is_target": false}, {"number": 72, "content": "       */", "is_target": false}, {"number": 73, "content": "      virtual int getMotorNumberIntern() const override { assert(created); return joints.size() * 2; }", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "    private:", "is_target": false}, {"number": 76, "content": "      virtual void create(const osg::Matrix& pose);", "is_target": true}, {"number": 77, "content": "      virtual void destroy();", "is_target": false}, {"number": 78, "content": "    };", "is_target": false}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "}", "is_target": false}, {"number": 81, "content": "", "is_target": false}]}, "1176": {"lines": [{"number": 72, "content": "       */", "is_target": false}, {"number": 73, "content": "      virtual int getMotorNumberIntern() const override { assert(created); return joints.size() * 2; }", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "    private:", "is_target": false}, {"number": 76, "content": "      virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 77, "content": "      virtual void destroy();", "is_target": true}, {"number": 78, "content": "    };", "is_target": false}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "}", "is_target": false}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "#endif", "is_target": false}]}, "1178": {"lines": [{"number": 253, "content": "    */", "is_target": false}, {"number": 254, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 255, "content": "", "is_target": false}, {"number": 256, "content": "    /** destroys vehicle and space", "is_target": false}, {"number": 257, "content": "     */", "is_target": false}, {"number": 258, "content": "    virtual void destroy();", "is_target": true}, {"number": 259, "content": "", "is_target": false}, {"number": 260, "content": "", "is_target": false}, {"number": 261, "content": "    /** returns the maximal power of a motor", "is_target": false}, {"number": 262, "content": "    */", "is_target": false}, {"number": 263, "content": "    int getPower( int i);", "is_target": false}]}, "1179": {"lines": [{"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "  protected:", "is_target": false}, {"number": 174, "content": "    /// this actually sets the textures, overwritten", "is_target": false}, {"number": 175, "content": "    virtual void applyTextures();", "is_target": false}, {"number": 176, "content": "", "is_target": false}, {"number": 177, "content": "    osg::Vec3 dim;", "is_target": true}, {"number": 178, "content": "    // we use one geode for each face of the box for the texture handling", "is_target": false}, {"number": 179, "content": "    osg::ref_ptr<osg::Geode> faces[6];", "is_target": false}, {"number": 180, "content": "  };", "is_target": false}, {"number": 181, "content": "", "is_target": false}, {"number": 182, "content": "", "is_target": false}]}, "1180": {"lines": [{"number": 294, "content": "", "is_target": false}, {"number": 295, "content": "    bool manualControl;    \t//used to block the motorcommands sent by the controller and enable the manual", "is_target": false}, {"number": 296, "content": "                \t\t// control mode", "is_target": false}, {"number": 297, "content": "    std::vector< double > manualCommands;    //used to store the manually entered motorcommands. the joint destinations have to be given in radians", "is_target": false}, {"number": 298, "content": "", "is_target": false}, {"number": 299, "content": "\t std::vector< OneAxisJoint * > joints;   //list of all joints , specified as OneAxis to ease use of servos", "is_target": true}, {"number": 300, "content": "   \t std::vector<double> speed;      \t\t// factor for adjusting speed of robot for each joint individually", "is_target": false}, {"number": 301, "content": "         std::vector<double> max_force;  \t// maximal force for motors", "is_target": false}, {"number": 302, "content": "    \t std::vector <OneAxisServo*> hingeServos;    //Servos for the joints", "is_target": false}, {"number": 303, "content": "\t std::vector<Primitive*> objectsOfInterest;\t\t// list of all objects the arm can/must keep track of/ interact/sense distance", "is_target": false}, {"number": 304, "content": "", "is_target": false}]}, "1181": {"lines": [{"number": 30, "content": "namespace lpzrobots{", "is_target": false}, {"number": 31, "content": "", "is_target": false}, {"number": 32, "content": "class Color : public osg::Vec4 {", "is_target": false}, {"number": 33, "content": "public:", "is_target": false}, {"number": 34, "content": "  Color() : osg::Vec4() {}", "is_target": false}, {"number": 35, "content": "  Color(const osg::Vec4& color) ", "is_target": true}, {"number": 36, "content": "    : osg::Vec4(color)  {};", "is_target": false}, {"number": 37, "content": "  Color(float r, float g, float b)", "is_target": false}, {"number": 38, "content": "    : osg::Vec4(r, g, b, 1.0){} ", "is_target": false}, {"number": 39, "content": "  Color(float r, float g, float b, float a)", "is_target": false}, {"number": 40, "content": "    : osg::Vec4(r, g, b, a){} ", "is_target": false}]}, "1182": {"lines": [{"number": 228, "content": "  };", "is_target": false}, {"number": 229, "content": "", "is_target": false}, {"number": 230, "content": "  class OSGLine : public OSGPrimitive {", "is_target": false}, {"number": 231, "content": "  public:", "is_target": false}, {"number": 232, "content": "    // the list of points is considered pairwise, start-end points of each line segment", "is_target": false}, {"number": 233, "content": "    OSGLine(const std::list<osg::Vec3>& points);", "is_target": true}, {"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "    virtual void applyTextures() {}", "is_target": false}, {"number": 238, "content": "", "is_target": false}]}, "1183": {"lines": [{"number": 258, "content": "       Constuctor", "is_target": false}, {"number": 259, "content": "       @param filename filename of the model file (search path is osg data path)", "is_target": false}, {"number": 260, "content": "       @param scale scale factor used for scaling the model", "is_target": false}, {"number": 261, "content": "       @param options for model reader", "is_target": false}, {"number": 262, "content": "     */", "is_target": false}, {"number": 263, "content": "    OSGMesh(const std::string& filename, float scale = 1, const osgDB::ReaderWriter::Options* options = nullptr);", "is_target": true}, {"number": 264, "content": "    ~OSGMesh();", "is_target": false}, {"number": 265, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 266, "content": "    /**", "is_target": false}, {"number": 267, "content": "     * Same as init, but the mesh file is not loaded and therefore not displayed.", "is_target": false}, {"number": 268, "content": "     * This method ensures that the transform is correctly initialised.", "is_target": false}]}, "1184": {"lines": [{"number": 286, "content": "  /**", "is_target": false}, {"number": 287, "content": "     Text to be displayed on the hud", "is_target": false}, {"number": 288, "content": "  */", "is_target": false}, {"number": 289, "content": "  class OSGText : public OSGPrimitive {", "is_target": false}, {"number": 290, "content": "  public:", "is_target": false}, {"number": 291, "content": "    OSGText(const std::string& text, int fontsize = 12,", "is_target": true}, {"number": 292, "content": "            osgText::Text::AlignmentType align = osgText::Text::LEFT_BASE_LINE);", "is_target": false}, {"number": 293, "content": "", "is_target": false}, {"number": 294, "content": "    virtual ~OSGText();", "is_target": false}, {"number": 295, "content": "", "is_target": false}, {"number": 296, "content": "    // Delete copy constructor and assignment operator", "is_target": false}]}, "1185": {"lines": [{"number": 53, "content": "    double lasttime = 0;  // last update time (to calc stepsize)", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    //*********************methods******************", "is_target": false}, {"number": 56, "content": "  public :", "is_target": false}, {"number": 57, "content": "    /// KP is used as a general koefficient. KI and KD can be tuned without dependence of KP", "is_target": false}, {"number": 58, "content": "    PID ( double KP = 100 , double KI = 2.0 , double KD = 0.3 );", "is_target": true}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "    void setKP(double KP);", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    void setTargetPosition ( double newpos );", "is_target": false}, {"number": 63, "content": "", "is_target": false}]}, "1186": {"lines": [{"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "  class Primitive; // Forward declaration", "is_target": false}, {"number": 45, "content": "  class Joint;     // Forward declaration", "is_target": false}, {"number": 46, "content": "  ", "is_target": false}, {"number": 47, "content": "  struct Attachment {", "is_target": false}, {"number": 48, "content": "    Attachment(int pI = -1, int jI = -1) : primitiveIndex(pI), jointIndex(jI) {}", "is_target": true}, {"number": 49, "content": "    int primitiveIndex = -1;", "is_target": false}, {"number": 50, "content": "    int jointIndex = -1;", "is_target": false}, {"number": 51, "content": "  };", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "  using Primitives = std::vector<Primitive*>;", "is_target": false}]}, "1187": {"lines": [{"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "/** Plane primitive */", "is_target": false}, {"number": 223, "content": "class Plane : public Primitive {", "is_target": false}, {"number": 224, "content": "public:", "is_target": false}, {"number": 225, "content": "  Plane();", "is_target": false}, {"number": 226, "content": "  virtual ~Plane();", "is_target": true}, {"number": 227, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 228, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 229, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "  virtual void update();", "is_target": false}]}, "1188": {"lines": [{"number": 222, "content": "/** Plane primitive */", "is_target": false}, {"number": 223, "content": "class Plane : public Primitive {", "is_target": false}, {"number": 224, "content": "public:", "is_target": false}, {"number": 225, "content": "  Plane();", "is_target": false}, {"number": 226, "content": "  virtual ~Plane();", "is_target": false}, {"number": 227, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": true}, {"number": 228, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 229, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "  virtual void update();", "is_target": false}, {"number": 232, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}]}, "1189": {"lines": [{"number": 226, "content": "  virtual ~Plane();", "is_target": false}, {"number": 227, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 228, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 229, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "  virtual void update();", "is_target": true}, {"number": 232, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 233, "content": "", "is_target": false}, {"number": 234, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 235, "content": "", "is_target": false}, {"number": 236, "content": "protected:", "is_target": false}]}, "1190": {"lines": [{"number": 227, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 228, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 229, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "  virtual void update();", "is_target": false}, {"number": 232, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": true}, {"number": 233, "content": "", "is_target": false}, {"number": 234, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 235, "content": "", "is_target": false}, {"number": 236, "content": "protected:", "is_target": false}, {"number": 237, "content": "  OSGPlane* osgplane = nullptr;", "is_target": false}]}, "1191": {"lines": [{"number": 229, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "  virtual void update();", "is_target": false}, {"number": 232, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 233, "content": "", "is_target": false}, {"number": 234, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": true}, {"number": 235, "content": "", "is_target": false}, {"number": 236, "content": "protected:", "is_target": false}, {"number": 237, "content": "  OSGPlane* osgplane = nullptr;", "is_target": false}, {"number": 238, "content": "};", "is_target": false}, {"number": 239, "content": "", "is_target": false}]}, "1192": {"lines": [{"number": 243, "content": "public:", "is_target": false}, {"number": 244, "content": "", "is_target": false}, {"number": 245, "content": "  Box(float lengthX, float lengthY, float lengthZ);", "is_target": false}, {"number": 246, "content": "  explicit Box(const osg::Vec3& dim);", "is_target": false}, {"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "  virtual ~Box();", "is_target": true}, {"number": 249, "content": "", "is_target": false}, {"number": 250, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 251, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 252, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 253, "content": "", "is_target": false}]}, "1193": {"lines": [{"number": 245, "content": "  Box(float lengthX, float lengthY, float lengthZ);", "is_target": false}, {"number": 246, "content": "  explicit Box(const osg::Vec3& dim);", "is_target": false}, {"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "  virtual ~Box();", "is_target": false}, {"number": 249, "content": "", "is_target": false}, {"number": 250, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": true}, {"number": 251, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 252, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 253, "content": "", "is_target": false}, {"number": 254, "content": "  virtual void update();", "is_target": false}, {"number": 255, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}]}, "1194": {"lines": [{"number": 249, "content": "", "is_target": false}, {"number": 250, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 251, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 252, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 253, "content": "", "is_target": false}, {"number": 254, "content": "  virtual void update();", "is_target": true}, {"number": 255, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 258, "content": "protected:", "is_target": false}, {"number": 259, "content": "  OSGBoxTex* osgbox = nullptr;", "is_target": false}]}, "1195": {"lines": [{"number": 250, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 251, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 252, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 253, "content": "", "is_target": false}, {"number": 254, "content": "  virtual void update();", "is_target": false}, {"number": 255, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": true}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 258, "content": "protected:", "is_target": false}, {"number": 259, "content": "  OSGBoxTex* osgbox = nullptr;", "is_target": false}, {"number": 260, "content": "};", "is_target": false}]}, "1196": {"lines": [{"number": 252, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 253, "content": "", "is_target": false}, {"number": 254, "content": "  virtual void update();", "is_target": false}, {"number": 255, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": true}, {"number": 258, "content": "protected:", "is_target": false}, {"number": 259, "content": "  OSGBoxTex* osgbox = nullptr;", "is_target": false}, {"number": 260, "content": "};", "is_target": false}, {"number": 261, "content": "", "is_target": false}, {"number": 262, "content": "", "is_target": false}]}, "1197": {"lines": [{"number": 262, "content": "", "is_target": false}, {"number": 263, "content": "/** Sphere primitive */", "is_target": false}, {"number": 264, "content": "class Sphere : public Primitive {", "is_target": false}, {"number": 265, "content": "public:", "is_target": false}, {"number": 266, "content": "  explicit Sphere(float radius);", "is_target": false}, {"number": 267, "content": "  virtual ~Sphere();", "is_target": true}, {"number": 268, "content": "", "is_target": false}, {"number": 269, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 270, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 271, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 272, "content": "", "is_target": false}]}, "1198": {"lines": [{"number": 264, "content": "class Sphere : public Primitive {", "is_target": false}, {"number": 265, "content": "public:", "is_target": false}, {"number": 266, "content": "  explicit Sphere(float radius);", "is_target": false}, {"number": 267, "content": "  virtual ~Sphere();", "is_target": false}, {"number": 268, "content": "", "is_target": false}, {"number": 269, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": true}, {"number": 270, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 271, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 272, "content": "", "is_target": false}, {"number": 273, "content": "  virtual void update();", "is_target": false}, {"number": 274, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}]}, "1199": {"lines": [{"number": 268, "content": "", "is_target": false}, {"number": 269, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 270, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 271, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 272, "content": "", "is_target": false}, {"number": 273, "content": "  virtual void update();", "is_target": true}, {"number": 274, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 275, "content": "", "is_target": false}, {"number": 276, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 277, "content": "", "is_target": false}, {"number": 278, "content": "protected:", "is_target": false}]}, "1200": {"lines": [{"number": 269, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 270, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 271, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 272, "content": "", "is_target": false}, {"number": 273, "content": "  virtual void update();", "is_target": false}, {"number": 274, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": true}, {"number": 275, "content": "", "is_target": false}, {"number": 276, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 277, "content": "", "is_target": false}, {"number": 278, "content": "protected:", "is_target": false}, {"number": 279, "content": "  OSGSphere* osgsphere = nullptr;", "is_target": false}]}, "1201": {"lines": [{"number": 271, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 272, "content": "", "is_target": false}, {"number": 273, "content": "  virtual void update();", "is_target": false}, {"number": 274, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 275, "content": "", "is_target": false}, {"number": 276, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": true}, {"number": 277, "content": "", "is_target": false}, {"number": 278, "content": "protected:", "is_target": false}, {"number": 279, "content": "  OSGSphere* osgsphere = nullptr;", "is_target": false}, {"number": 280, "content": "};", "is_target": false}, {"number": 281, "content": "", "is_target": false}]}, "1202": {"lines": [{"number": 281, "content": "", "is_target": false}, {"number": 282, "content": "/** Capsule primitive */", "is_target": false}, {"number": 283, "content": "class Capsule : public Primitive {", "is_target": false}, {"number": 284, "content": "public:", "is_target": false}, {"number": 285, "content": "  Capsule(float radius, float height);", "is_target": false}, {"number": 286, "content": "  virtual ~Capsule();", "is_target": true}, {"number": 287, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 288, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 289, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 290, "content": "", "is_target": false}, {"number": 291, "content": "  virtual void update();", "is_target": false}]}, "1203": {"lines": [{"number": 282, "content": "/** Capsule primitive */", "is_target": false}, {"number": 283, "content": "class Capsule : public Primitive {", "is_target": false}, {"number": 284, "content": "public:", "is_target": false}, {"number": 285, "content": "  Capsule(float radius, float height);", "is_target": false}, {"number": 286, "content": "  virtual ~Capsule();", "is_target": false}, {"number": 287, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": true}, {"number": 288, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 289, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 290, "content": "", "is_target": false}, {"number": 291, "content": "  virtual void update();", "is_target": false}, {"number": 292, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}]}, "1204": {"lines": [{"number": 286, "content": "  virtual ~Capsule();", "is_target": false}, {"number": 287, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 288, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 289, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 290, "content": "", "is_target": false}, {"number": 291, "content": "  virtual void update();", "is_target": true}, {"number": 292, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 293, "content": "", "is_target": false}, {"number": 294, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 295, "content": "", "is_target": false}, {"number": 296, "content": "protected:", "is_target": false}]}, "1205": {"lines": [{"number": 287, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 288, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 289, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 290, "content": "", "is_target": false}, {"number": 291, "content": "  virtual void update();", "is_target": false}, {"number": 292, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": true}, {"number": 293, "content": "", "is_target": false}, {"number": 294, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 295, "content": "", "is_target": false}, {"number": 296, "content": "protected:", "is_target": false}, {"number": 297, "content": "  OSGCapsule* osgcapsule = nullptr;", "is_target": false}]}, "1206": {"lines": [{"number": 289, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 290, "content": "", "is_target": false}, {"number": 291, "content": "  virtual void update();", "is_target": false}, {"number": 292, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 293, "content": "", "is_target": false}, {"number": 294, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": true}, {"number": 295, "content": "", "is_target": false}, {"number": 296, "content": "protected:", "is_target": false}, {"number": 297, "content": "  OSGCapsule* osgcapsule = nullptr;", "is_target": false}, {"number": 298, "content": "};", "is_target": false}, {"number": 299, "content": "", "is_target": false}]}, "1207": {"lines": [{"number": 299, "content": "", "is_target": false}, {"number": 300, "content": "/** Cylinder primitive */", "is_target": false}, {"number": 301, "content": "class Cylinder : public Primitive {", "is_target": false}, {"number": 302, "content": "public:", "is_target": false}, {"number": 303, "content": "  Cylinder(float radius, float height);", "is_target": false}, {"number": 304, "content": "  virtual ~Cylinder();", "is_target": true}, {"number": 305, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 306, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 307, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 308, "content": "", "is_target": false}, {"number": 309, "content": "  virtual void update();", "is_target": false}]}, "1208": {"lines": [{"number": 300, "content": "/** Cylinder primitive */", "is_target": false}, {"number": 301, "content": "class Cylinder : public Primitive {", "is_target": false}, {"number": 302, "content": "public:", "is_target": false}, {"number": 303, "content": "  Cylinder(float radius, float height);", "is_target": false}, {"number": 304, "content": "  virtual ~Cylinder();", "is_target": false}, {"number": 305, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": true}, {"number": 306, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 307, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 308, "content": "", "is_target": false}, {"number": 309, "content": "  virtual void update();", "is_target": false}, {"number": 310, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}]}, "1209": {"lines": [{"number": 304, "content": "  virtual ~Cylinder();", "is_target": false}, {"number": 305, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 306, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 307, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 308, "content": "", "is_target": false}, {"number": 309, "content": "  virtual void update();", "is_target": true}, {"number": 310, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 311, "content": "", "is_target": false}, {"number": 312, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 313, "content": "protected:", "is_target": false}, {"number": 314, "content": "  OSGCylinder* osgcylinder = nullptr;", "is_target": false}]}, "1210": {"lines": [{"number": 305, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 306, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 307, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 308, "content": "", "is_target": false}, {"number": 309, "content": "  virtual void update();", "is_target": false}, {"number": 310, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": true}, {"number": 311, "content": "", "is_target": false}, {"number": 312, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 313, "content": "protected:", "is_target": false}, {"number": 314, "content": "  OSGCylinder* osgcylinder = nullptr;", "is_target": false}, {"number": 315, "content": "};", "is_target": false}]}, "1211": {"lines": [{"number": 307, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 308, "content": "", "is_target": false}, {"number": 309, "content": "  virtual void update();", "is_target": false}, {"number": 310, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 311, "content": "", "is_target": false}, {"number": 312, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": true}, {"number": 313, "content": "protected:", "is_target": false}, {"number": 314, "content": "  OSGCylinder* osgcylinder = nullptr;", "is_target": false}, {"number": 315, "content": "};", "is_target": false}, {"number": 316, "content": "", "is_target": false}, {"number": 317, "content": "/** Ray primitive", "is_target": false}]}, "1212": {"lines": [{"number": 323, "content": "public:", "is_target": false}, {"number": 324, "content": "  /**", "is_target": false}, {"number": 325, "content": "     @param thickness if thickness == 0 then a line is used and not a box", "is_target": false}, {"number": 326, "content": "   */", "is_target": false}, {"number": 327, "content": "  Ray(double range, float thickness, float length);", "is_target": false}, {"number": 328, "content": "  virtual ~Ray();", "is_target": true}, {"number": 329, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 330, "content": "      const OsgHandle& osgHandle,", "is_target": false}, {"number": 331, "content": "      char mode = Geom | Draw);", "is_target": false}, {"number": 332, "content": "", "is_target": false}, {"number": 333, "content": "  void setLength(float len);", "is_target": false}]}, "1213": {"lines": [{"number": 324, "content": "  /**", "is_target": false}, {"number": 325, "content": "     @param thickness if thickness == 0 then a line is used and not a box", "is_target": false}, {"number": 326, "content": "   */", "is_target": false}, {"number": 327, "content": "  Ray(double range, float thickness, float length);", "is_target": false}, {"number": 328, "content": "  virtual ~Ray();", "is_target": false}, {"number": 329, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": true}, {"number": 330, "content": "      const OsgHandle& osgHandle,", "is_target": false}, {"number": 331, "content": "      char mode = Geom | Draw);", "is_target": false}, {"number": 332, "content": "", "is_target": false}, {"number": 333, "content": "  void setLength(float len);", "is_target": false}, {"number": 334, "content": "  virtual void update();", "is_target": false}]}, "1214": {"lines": [{"number": 329, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 330, "content": "      const OsgHandle& osgHandle,", "is_target": false}, {"number": 331, "content": "      char mode = Geom | Draw);", "is_target": false}, {"number": 332, "content": "", "is_target": false}, {"number": 333, "content": "  void setLength(float len);", "is_target": false}, {"number": 334, "content": "  virtual void update();", "is_target": true}, {"number": 335, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 336, "content": "", "is_target": false}, {"number": 337, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 338, "content": "protected:", "is_target": false}, {"number": 339, "content": "  double range = 0;", "is_target": false}]}, "1215": {"lines": [{"number": 330, "content": "      const OsgHandle& osgHandle,", "is_target": false}, {"number": 331, "content": "      char mode = Geom | Draw);", "is_target": false}, {"number": 332, "content": "", "is_target": false}, {"number": 333, "content": "  void setLength(float len);", "is_target": false}, {"number": 334, "content": "  virtual void update();", "is_target": false}, {"number": 335, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": true}, {"number": 336, "content": "", "is_target": false}, {"number": 337, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 338, "content": "protected:", "is_target": false}, {"number": 339, "content": "  double range = 0;", "is_target": false}, {"number": 340, "content": "  float thickness = 0;", "is_target": false}]}, "1216": {"lines": [{"number": 332, "content": "", "is_target": false}, {"number": 333, "content": "  void setLength(float len);", "is_target": false}, {"number": 334, "content": "  virtual void update();", "is_target": false}, {"number": 335, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 336, "content": "", "is_target": false}, {"number": 337, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": true}, {"number": 338, "content": "protected:", "is_target": false}, {"number": 339, "content": "  double range = 0;", "is_target": false}, {"number": 340, "content": "  float thickness = 0;", "is_target": false}, {"number": 341, "content": "  float length = 0;", "is_target": false}, {"number": 342, "content": "  OSGPrimitive* osgprimitive = nullptr;", "is_target": false}]}, "1217": {"lines": [{"number": 347, "content": "", "is_target": false}, {"number": 348, "content": "/** Mesh primitive */", "is_target": false}, {"number": 349, "content": "class Mesh : public Primitive {", "is_target": false}, {"number": 350, "content": "public:", "is_target": false}, {"number": 351, "content": "  Mesh(const std::string& filename,float scale);", "is_target": false}, {"number": 352, "content": "  virtual ~Mesh();", "is_target": true}, {"number": 353, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 354, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 355, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 356, "content": "  virtual void update();", "is_target": false}, {"number": 357, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}]}, "1218": {"lines": [{"number": 348, "content": "/** Mesh primitive */", "is_target": false}, {"number": 349, "content": "class Mesh : public Primitive {", "is_target": false}, {"number": 350, "content": "public:", "is_target": false}, {"number": 351, "content": "  Mesh(const std::string& filename,float scale);", "is_target": false}, {"number": 352, "content": "  virtual ~Mesh();", "is_target": false}, {"number": 353, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": true}, {"number": 354, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 355, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 356, "content": "  virtual void update();", "is_target": false}, {"number": 357, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 358, "content": "  virtual float getRadius() const;", "is_target": false}]}, "1219": {"lines": [{"number": 351, "content": "  Mesh(const std::string& filename,float scale);", "is_target": false}, {"number": 352, "content": "  virtual ~Mesh();", "is_target": false}, {"number": 353, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 354, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 355, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 356, "content": "  virtual void update();", "is_target": true}, {"number": 357, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 358, "content": "  virtual float getRadius() const;", "is_target": false}, {"number": 359, "content": "", "is_target": false}, {"number": 360, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 361, "content": "", "is_target": false}]}, "1220": {"lines": [{"number": 352, "content": "  virtual ~Mesh();", "is_target": false}, {"number": 353, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 354, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 355, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 356, "content": "  virtual void update();", "is_target": false}, {"number": 357, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": true}, {"number": 358, "content": "  virtual float getRadius() const;", "is_target": false}, {"number": 359, "content": "", "is_target": false}, {"number": 360, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 361, "content": "", "is_target": false}, {"number": 362, "content": "  /**", "is_target": false}]}, "1221": {"lines": [{"number": 355, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 356, "content": "  virtual void update();", "is_target": false}, {"number": 357, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 358, "content": "  virtual float getRadius() const;", "is_target": false}, {"number": 359, "content": "", "is_target": false}, {"number": 360, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": true}, {"number": 361, "content": "", "is_target": false}, {"number": 362, "content": "  /**", "is_target": false}, {"number": 363, "content": "   * Sets the BoundingShape externally (e.g. XMLBoundingShape).", "is_target": false}, {"number": 364, "content": "   * Any existing BoundingShape will be deleted.", "is_target": false}, {"number": 365, "content": "   */", "is_target": false}]}, "1222": {"lines": [{"number": 363, "content": "   * Sets the BoundingShape externally (e.g. XMLBoundingShape).", "is_target": false}, {"number": 364, "content": "   * Any existing BoundingShape will be deleted.", "is_target": false}, {"number": 365, "content": "   */", "is_target": false}, {"number": 366, "content": "  virtual void setBoundingShape(BoundingShape* boundingShape);", "is_target": false}, {"number": 367, "content": "", "is_target": false}, {"number": 368, "content": "  virtual void setPose(const Pose& pose);", "is_target": true}, {"number": 369, "content": "", "is_target": false}, {"number": 370, "content": "protected:", "is_target": false}, {"number": 371, "content": "  OSGMesh* osgmesh = nullptr;", "is_target": false}, {"number": 372, "content": "  const std::string filename;", "is_target": false}, {"number": 373, "content": "  float scale = 0;", "is_target": false}]}, "1223": {"lines": [{"number": 390, "content": "      This Primitive must NOT have a body and should not be initialised", "is_target": false}, {"number": 391, "content": "  */", "is_target": false}, {"number": 392, "content": "  Transform(Primitive* parent, Primitive* child, const Pose& pose, bool deleteChild = true);", "is_target": false}, {"number": 393, "content": "", "is_target": false}, {"number": 394, "content": "  /// destructor deletes child object // it should be virtual by yuichi", "is_target": false}, {"number": 395, "content": "  virtual ~Transform();", "is_target": true}, {"number": 396, "content": "", "is_target": false}, {"number": 397, "content": "  /** initialised the transform object. This automatically", "is_target": false}, {"number": 398, "content": "      initialises the child geom.", "is_target": false}, {"number": 399, "content": "      @param mass mass of the child", "is_target": false}, {"number": 400, "content": "      @param mode is the mode for the child, except that Body bit is ignored (child can't have a body)", "is_target": false}]}, "1224": {"lines": [{"number": 397, "content": "  /** initialised the transform object. This automatically", "is_target": false}, {"number": 398, "content": "      initialises the child geom.", "is_target": false}, {"number": 399, "content": "      @param mass mass of the child", "is_target": false}, {"number": 400, "content": "      @param mode is the mode for the child, except that Body bit is ignored (child can't have a body)", "is_target": false}, {"number": 401, "content": "   */", "is_target": false}, {"number": 402, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": true}, {"number": 403, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 404, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 405, "content": "", "is_target": false}, {"number": 406, "content": "  virtual void update();", "is_target": false}, {"number": 407, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}]}, "1225": {"lines": [{"number": 401, "content": "   */", "is_target": false}, {"number": 402, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 403, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 404, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 405, "content": "", "is_target": false}, {"number": 406, "content": "  virtual void update();", "is_target": true}, {"number": 407, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 408, "content": "", "is_target": false}, {"number": 409, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 410, "content": "", "is_target": false}, {"number": 411, "content": "  // setting the pose is not supported", "is_target": false}]}, "1226": {"lines": [{"number": 402, "content": "  virtual void init(const OdeHandle& odeHandle, double mass,", "is_target": false}, {"number": 403, "content": "                    const OsgHandle& osgHandle,", "is_target": false}, {"number": 404, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 405, "content": "", "is_target": false}, {"number": 406, "content": "  virtual void update();", "is_target": false}, {"number": 407, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": true}, {"number": 408, "content": "", "is_target": false}, {"number": 409, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": false}, {"number": 410, "content": "", "is_target": false}, {"number": 411, "content": "  // setting the pose is not supported", "is_target": false}, {"number": 412, "content": "  virtual void setPose(const Pose& p) override {}", "is_target": false}]}, "1227": {"lines": [{"number": 404, "content": "                    char mode = Body | Geom | Draw);", "is_target": false}, {"number": 405, "content": "", "is_target": false}, {"number": 406, "content": "  virtual void update();", "is_target": false}, {"number": 407, "content": "  virtual const OSGPrimitive* getOSGPrimitive()  const;", "is_target": false}, {"number": 408, "content": "", "is_target": false}, {"number": 409, "content": "  virtual void setMass(double mass, bool density = false);", "is_target": true}, {"number": 410, "content": "", "is_target": false}, {"number": 411, "content": "  // setting the pose is not supported", "is_target": false}, {"number": 412, "content": "  virtual void setPose(const Pose& p) override {}", "is_target": false}, {"number": 413, "content": "", "is_target": false}, {"number": 414, "content": "protected:", "is_target": false}]}, "1228": {"lines": [{"number": 110, "content": "  */", "is_target": false}, {"number": 111, "content": "  class OSGDummy : public OSGPrimitive {", "is_target": false}, {"number": 112, "content": "  public:", "is_target": false}, {"number": 113, "content": "    OSGDummy();", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 116, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": false}, {"number": 117, "content": "    virtual osg::Group* getGroup();", "is_target": false}, {"number": 118, "content": "    virtual void setTexture(const std::string& filename);", "is_target": false}, {"number": 119, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 120, "content": "    /// returns a osg transformation object;", "is_target": false}]}, "1229": {"lines": [{"number": 111, "content": "  class OSGDummy : public OSGPrimitive {", "is_target": false}, {"number": 112, "content": "  public:", "is_target": false}, {"number": 113, "content": "    OSGDummy();", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 116, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": true}, {"number": 117, "content": "    virtual osg::Group* getGroup();", "is_target": false}, {"number": 118, "content": "    virtual void setTexture(const std::string& filename);", "is_target": false}, {"number": 119, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 120, "content": "    /// returns a osg transformation object;", "is_target": false}, {"number": 121, "content": "    virtual osg::Transform* getTransform();", "is_target": false}]}, "1230": {"lines": [{"number": 112, "content": "  public:", "is_target": false}, {"number": 113, "content": "    OSGDummy();", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 116, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": false}, {"number": 117, "content": "    virtual osg::Group* getGroup();", "is_target": true}, {"number": 118, "content": "    virtual void setTexture(const std::string& filename);", "is_target": false}, {"number": 119, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 120, "content": "    /// returns a osg transformation object;", "is_target": false}, {"number": 121, "content": "    virtual osg::Transform* getTransform();", "is_target": false}, {"number": 122, "content": "  };", "is_target": false}]}, "1231": {"lines": [{"number": 113, "content": "    OSGDummy();", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 116, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": false}, {"number": 117, "content": "    virtual osg::Group* getGroup();", "is_target": false}, {"number": 118, "content": "    virtual void setTexture(const std::string& filename);", "is_target": true}, {"number": 119, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 120, "content": "    /// returns a osg transformation object;", "is_target": false}, {"number": 121, "content": "    virtual osg::Transform* getTransform();", "is_target": false}, {"number": 122, "content": "  };", "is_target": false}, {"number": 123, "content": "", "is_target": false}]}, "1232": {"lines": [{"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 116, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": false}, {"number": 117, "content": "    virtual osg::Group* getGroup();", "is_target": false}, {"number": 118, "content": "    virtual void setTexture(const std::string& filename);", "is_target": false}, {"number": 119, "content": "    virtual void setColor(const Color& color);", "is_target": true}, {"number": 120, "content": "    /// returns a osg transformation object;", "is_target": false}, {"number": 121, "content": "    virtual osg::Transform* getTransform();", "is_target": false}, {"number": 122, "content": "  };", "is_target": false}, {"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "", "is_target": false}]}, "1233": {"lines": [{"number": 116, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": false}, {"number": 117, "content": "    virtual osg::Group* getGroup();", "is_target": false}, {"number": 118, "content": "    virtual void setTexture(const std::string& filename);", "is_target": false}, {"number": 119, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 120, "content": "    /// returns a osg transformation object;", "is_target": false}, {"number": 121, "content": "    virtual osg::Transform* getTransform();", "is_target": true}, {"number": 122, "content": "  };", "is_target": false}, {"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "  /**", "is_target": false}, {"number": 126, "content": "     Graphical plane (represented as a large thin box, because OSG does not draw planes)", "is_target": false}]}, "1234": {"lines": [{"number": 127, "content": "  */", "is_target": false}, {"number": 128, "content": "  class OSGPlane : public OSGPrimitive {", "is_target": false}, {"number": 129, "content": "  public:", "is_target": false}, {"number": 130, "content": "    OSGPlane();", "is_target": false}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 133, "content": "  };", "is_target": false}, {"number": 134, "content": "", "is_target": false}, {"number": 135, "content": "", "is_target": false}, {"number": 136, "content": "  /**", "is_target": false}, {"number": 137, "content": "     Graphical box", "is_target": false}]}, "1235": {"lines": [{"number": 139, "content": "  class OSGBox : public OSGPrimitive {", "is_target": false}, {"number": 140, "content": "  public:", "is_target": false}, {"number": 141, "content": "    OSGBox(float lengthX, float lengthY, float lengthZ);", "is_target": false}, {"number": 142, "content": "    explicit OSGBox(osg::Vec3 dim);", "is_target": false}, {"number": 143, "content": "", "is_target": false}, {"number": 144, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "    virtual osg::Vec3 getDim();", "is_target": false}, {"number": 147, "content": "    virtual void setDim(osg::Vec3);", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "  protected:", "is_target": false}]}, "1236": {"lines": [{"number": 157, "content": "  class OSGBoxTex : public OSGBox {", "is_target": false}, {"number": 158, "content": "  public:", "is_target": false}, {"number": 159, "content": "    OSGBoxTex(float lengthX, float lengthY, float lengthZ);", "is_target": false}, {"number": 160, "content": "    explicit OSGBoxTex(osg::Vec3 dim);", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 163, "content": "", "is_target": false}, {"number": 164, "content": "    // Bring base class methods into scope", "is_target": false}, {"number": 165, "content": "    using OSGBox::getDim;", "is_target": false}, {"number": 166, "content": "    using OSGBox::setDim;", "is_target": false}, {"number": 167, "content": "    ", "is_target": false}]}, "1237": {"lines": [{"number": 166, "content": "    using OSGBox::setDim;", "is_target": false}, {"number": 167, "content": "    ", "is_target": false}, {"number": 168, "content": "    virtual osg::Vec3 getDim() const { return dim;}", "is_target": false}, {"number": 169, "content": "    virtual void setDim(const osg::Vec3& _dim) { dim = _dim;}", "is_target": false}, {"number": 170, "content": "", "is_target": false}, {"number": 171, "content": "    virtual void setColor(const Color& color);", "is_target": true}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "  protected:", "is_target": false}, {"number": 174, "content": "    /// this actually sets the textures, overwritten", "is_target": false}, {"number": 175, "content": "    virtual void applyTextures();", "is_target": false}, {"number": 176, "content": "", "is_target": false}]}, "1238": {"lines": [{"number": 170, "content": "", "is_target": false}, {"number": 171, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "  protected:", "is_target": false}, {"number": 174, "content": "    /// this actually sets the textures, overwritten", "is_target": false}, {"number": 175, "content": "    virtual void applyTextures();", "is_target": true}, {"number": 176, "content": "", "is_target": false}, {"number": 177, "content": "    osg::Vec3 dim;", "is_target": false}, {"number": 178, "content": "    // we use one geode for each face of the box for the texture handling", "is_target": false}, {"number": 179, "content": "    osg::ref_ptr<osg::Geode> faces[6];", "is_target": false}, {"number": 180, "content": "  };", "is_target": false}]}, "1239": {"lines": [{"number": 185, "content": "  */", "is_target": false}, {"number": 186, "content": "  class OSGSphere : public OSGPrimitive {", "is_target": false}, {"number": 187, "content": "  public:", "is_target": false}, {"number": 188, "content": "    explicit OSGSphere(float radius);", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 191, "content": "", "is_target": false}, {"number": 192, "content": "    float getRadius() const { return radius; }", "is_target": false}, {"number": 193, "content": "  protected:", "is_target": false}, {"number": 194, "content": "    float radius = 0;", "is_target": false}, {"number": 195, "content": "  };", "is_target": false}]}, "1240": {"lines": [{"number": 199, "content": "  */", "is_target": false}, {"number": 200, "content": "  class OSGCapsule : public OSGPrimitive {", "is_target": false}, {"number": 201, "content": "  public:", "is_target": false}, {"number": 202, "content": "    OSGCapsule(float radius, float height);", "is_target": false}, {"number": 203, "content": "", "is_target": false}, {"number": 204, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 205, "content": "", "is_target": false}, {"number": 206, "content": "    float getRadius() const { return radius; }", "is_target": false}, {"number": 207, "content": "    float getHeight() const { return height; }", "is_target": false}, {"number": 208, "content": "  protected:", "is_target": false}, {"number": 209, "content": "    float radius = 0;", "is_target": false}]}, "1241": {"lines": [{"number": 216, "content": "  */", "is_target": false}, {"number": 217, "content": "  class OSGCylinder : public OSGPrimitive {", "is_target": false}, {"number": 218, "content": "  public:", "is_target": false}, {"number": 219, "content": "    OSGCylinder(float radius, float height);", "is_target": false}, {"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "    float getRadius() const { return radius; }", "is_target": false}, {"number": 224, "content": "    float getHeight() const { return height; }", "is_target": false}, {"number": 225, "content": "  protected:", "is_target": false}, {"number": 226, "content": "    float radius = 0;", "is_target": false}]}, "1242": {"lines": [{"number": 230, "content": "  class OSGLine : public OSGPrimitive {", "is_target": false}, {"number": 231, "content": "  public:", "is_target": false}, {"number": 232, "content": "    // the list of points is considered pairwise, start-end points of each line segment", "is_target": false}, {"number": 233, "content": "    OSGLine(const std::list<osg::Vec3>& points);", "is_target": false}, {"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "    virtual void applyTextures() {}", "is_target": false}, {"number": 238, "content": "", "is_target": false}, {"number": 239, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 240, "content": "", "is_target": false}]}, "1243": {"lines": [{"number": 232, "content": "    // the list of points is considered pairwise, start-end points of each line segment", "is_target": false}, {"number": 233, "content": "    OSGLine(const std::list<osg::Vec3>& points);", "is_target": false}, {"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "    virtual void applyTextures() {}", "is_target": true}, {"number": 238, "content": "", "is_target": false}, {"number": 239, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 240, "content": "", "is_target": false}, {"number": 241, "content": "    // use the new points", "is_target": false}, {"number": 242, "content": "    virtual void setPoints(const std::list<osg::Vec3>& points);", "is_target": false}]}, "1244": {"lines": [{"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "    virtual void applyTextures() {}", "is_target": false}, {"number": 238, "content": "", "is_target": false}, {"number": 239, "content": "    virtual void setColor(const Color& color);", "is_target": true}, {"number": 240, "content": "", "is_target": false}, {"number": 241, "content": "    // use the new points", "is_target": false}, {"number": 242, "content": "    virtual void setPoints(const std::list<osg::Vec3>& points);", "is_target": false}, {"number": 243, "content": "", "is_target": false}, {"number": 244, "content": "  protected:", "is_target": false}]}, "1245": {"lines": [{"number": 259, "content": "       @param filename filename of the model file (search path is osg data path)", "is_target": false}, {"number": 260, "content": "       @param scale scale factor used for scaling the model", "is_target": false}, {"number": 261, "content": "       @param options for model reader", "is_target": false}, {"number": 262, "content": "     */", "is_target": false}, {"number": 263, "content": "    OSGMesh(const std::string& filename, float scale = 1, const osgDB::ReaderWriter::Options* options = nullptr);", "is_target": false}, {"number": 264, "content": "    ~OSGMesh();", "is_target": true}, {"number": 265, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 266, "content": "    /**", "is_target": false}, {"number": 267, "content": "     * Same as init, but the mesh file is not loaded and therefore not displayed.", "is_target": false}, {"number": 268, "content": "     * This method ensures that the transform is correctly initialised.", "is_target": false}, {"number": 269, "content": "     * @param osgHandle", "is_target": false}]}, "1246": {"lines": [{"number": 260, "content": "       @param scale scale factor used for scaling the model", "is_target": false}, {"number": 261, "content": "       @param options for model reader", "is_target": false}, {"number": 262, "content": "     */", "is_target": false}, {"number": 263, "content": "    OSGMesh(const std::string& filename, float scale = 1, const osgDB::ReaderWriter::Options* options = nullptr);", "is_target": false}, {"number": 264, "content": "    ~OSGMesh();", "is_target": false}, {"number": 265, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 266, "content": "    /**", "is_target": false}, {"number": 267, "content": "     * Same as init, but the mesh file is not loaded and therefore not displayed.", "is_target": false}, {"number": 268, "content": "     * This method ensures that the transform is correctly initialised.", "is_target": false}, {"number": 269, "content": "     * @param osgHandle", "is_target": false}, {"number": 270, "content": "     */", "is_target": false}]}, "1247": {"lines": [{"number": 289, "content": "  class OSGText : public OSGPrimitive {", "is_target": false}, {"number": 290, "content": "  public:", "is_target": false}, {"number": 291, "content": "    OSGText(const std::string& text, int fontsize = 12,", "is_target": false}, {"number": 292, "content": "            osgText::Text::AlignmentType align = osgText::Text::LEFT_BASE_LINE);", "is_target": false}, {"number": 293, "content": "", "is_target": false}, {"number": 294, "content": "    virtual ~OSGText();", "is_target": true}, {"number": 295, "content": "", "is_target": false}, {"number": 296, "content": "    // Delete copy constructor and assignment operator", "is_target": false}, {"number": 297, "content": "    OSGText(const OSGText&) = delete;", "is_target": false}, {"number": 298, "content": "    OSGText& operator=(const OSGText&) = delete;", "is_target": false}, {"number": 299, "content": "", "is_target": false}]}, "1248": {"lines": [{"number": 295, "content": "", "is_target": false}, {"number": 296, "content": "    // Delete copy constructor and assignment operator", "is_target": false}, {"number": 297, "content": "    OSGText(const OSGText&) = delete;", "is_target": false}, {"number": 298, "content": "    OSGText& operator=(const OSGText&) = delete;", "is_target": false}, {"number": 299, "content": "", "is_target": false}, {"number": 300, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": true}, {"number": 301, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": false}, {"number": 302, "content": "    virtual osg::Group* getGroup();", "is_target": false}, {"number": 303, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 304, "content": "    /// returns a osg transformation object;", "is_target": false}, {"number": 305, "content": "    virtual osg::Transform* getTransform();", "is_target": false}]}, "1249": {"lines": [{"number": 296, "content": "    // Delete copy constructor and assignment operator", "is_target": false}, {"number": 297, "content": "    OSGText(const OSGText&) = delete;", "is_target": false}, {"number": 298, "content": "    OSGText& operator=(const OSGText&) = delete;", "is_target": false}, {"number": 299, "content": "", "is_target": false}, {"number": 300, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 301, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": true}, {"number": 302, "content": "    virtual osg::Group* getGroup();", "is_target": false}, {"number": 303, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 304, "content": "    /// returns a osg transformation object;", "is_target": false}, {"number": 305, "content": "    virtual osg::Transform* getTransform();", "is_target": false}, {"number": 306, "content": "  private:", "is_target": false}]}, "1250": {"lines": [{"number": 297, "content": "    OSGText(const OSGText&) = delete;", "is_target": false}, {"number": 298, "content": "    OSGText& operator=(const OSGText&) = delete;", "is_target": false}, {"number": 299, "content": "", "is_target": false}, {"number": 300, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 301, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": false}, {"number": 302, "content": "    virtual osg::Group* getGroup();", "is_target": true}, {"number": 303, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 304, "content": "    /// returns a osg transformation object;", "is_target": false}, {"number": 305, "content": "    virtual osg::Transform* getTransform();", "is_target": false}, {"number": 306, "content": "  private:", "is_target": false}, {"number": 307, "content": "    osgText::Text* osgText;", "is_target": false}]}, "1251": {"lines": [{"number": 298, "content": "    OSGText& operator=(const OSGText&) = delete;", "is_target": false}, {"number": 299, "content": "", "is_target": false}, {"number": 300, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 301, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": false}, {"number": 302, "content": "    virtual osg::Group* getGroup();", "is_target": false}, {"number": 303, "content": "    virtual void setColor(const Color& color);", "is_target": true}, {"number": 304, "content": "    /// returns a osg transformation object;", "is_target": false}, {"number": 305, "content": "    virtual osg::Transform* getTransform();", "is_target": false}, {"number": 306, "content": "  private:", "is_target": false}, {"number": 307, "content": "    osgText::Text* osgText;", "is_target": false}, {"number": 308, "content": "  };", "is_target": false}]}, "1252": {"lines": [{"number": 300, "content": "    virtual void init(const OsgHandle& osgHandle, Quality quality = Middle);", "is_target": false}, {"number": 301, "content": "    virtual void setMatrix( const osg::Matrix& m4x4 );", "is_target": false}, {"number": 302, "content": "    virtual osg::Group* getGroup();", "is_target": false}, {"number": 303, "content": "    virtual void setColor(const Color& color);", "is_target": false}, {"number": 304, "content": "    /// returns a osg transformation object;", "is_target": false}, {"number": 305, "content": "    virtual osg::Transform* getTransform();", "is_target": true}, {"number": 306, "content": "  private:", "is_target": false}, {"number": 307, "content": "    osgText::Text* osgText;", "is_target": false}, {"number": 308, "content": "  };", "is_target": false}, {"number": 309, "content": "", "is_target": false}, {"number": 310, "content": "", "is_target": false}]}, "1253": {"lines": [{"number": 115, "content": "    virtual double getPosition1() const  = 0;", "is_target": false}, {"number": 116, "content": "    virtual double getPosition1Rate() const  = 0;", "is_target": false}, {"number": 117, "content": "    virtual void addForce1(double force)  = 0;", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "    virtual int getNumberAxes() const override { return 1;};", "is_target": false}, {"number": 120, "content": "    virtual std::list<double> getPositions()  const;", "is_target": true}, {"number": 121, "content": "    virtual std::list<double> getPositionRates()  const;", "is_target": false}, {"number": 122, "content": "    virtual int getPositions(double* sensorarray)  const override;", "is_target": false}, {"number": 123, "content": "    virtual int getPositionRates(double* sensorarray)  const override;", "is_target": false}, {"number": 124, "content": "  protected:", "is_target": false}, {"number": 125, "content": "    Axis axis1;", "is_target": false}]}, "1254": {"lines": [{"number": 116, "content": "    virtual double getPosition1Rate() const  = 0;", "is_target": false}, {"number": 117, "content": "    virtual void addForce1(double force)  = 0;", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "    virtual int getNumberAxes() const override { return 1;};", "is_target": false}, {"number": 120, "content": "    virtual std::list<double> getPositions()  const;", "is_target": false}, {"number": 121, "content": "    virtual std::list<double> getPositionRates()  const;", "is_target": true}, {"number": 122, "content": "    virtual int getPositions(double* sensorarray)  const override;", "is_target": false}, {"number": 123, "content": "    virtual int getPositionRates(double* sensorarray)  const override;", "is_target": false}, {"number": 124, "content": "  protected:", "is_target": false}, {"number": 125, "content": "    Axis axis1;", "is_target": false}, {"number": 126, "content": "  };", "is_target": false}]}, "1255": {"lines": [{"number": 139, "content": "    void addForces(double force1,double force2){", "is_target": false}, {"number": 140, "content": "      addForce1(force1); addForce2(force2);", "is_target": false}, {"number": 141, "content": "    }", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "    virtual int getNumberAxes() const override { return 2;};", "is_target": false}, {"number": 144, "content": "    virtual std::list<double> getPositions()  const;", "is_target": true}, {"number": 145, "content": "    virtual std::list<double> getPositionRates()  const;", "is_target": false}, {"number": 146, "content": "    virtual int getPositions(double* sensorarray)  const override;", "is_target": false}, {"number": 147, "content": "    virtual int getPositionRates(double* sensorarray)  const override;", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "  protected:", "is_target": false}]}, "1256": {"lines": [{"number": 140, "content": "      addForce1(force1); addForce2(force2);", "is_target": false}, {"number": 141, "content": "    }", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "    virtual int getNumberAxes() const override { return 2;};", "is_target": false}, {"number": 144, "content": "    virtual std::list<double> getPositions()  const;", "is_target": false}, {"number": 145, "content": "    virtual std::list<double> getPositionRates()  const;", "is_target": true}, {"number": 146, "content": "    virtual int getPositions(double* sensorarray)  const override;", "is_target": false}, {"number": 147, "content": "    virtual int getPositionRates(double* sensorarray)  const override;", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "  protected:", "is_target": false}, {"number": 150, "content": "    Axis  axis2;", "is_target": false}]}, "1257": {"lines": [{"number": 158, "content": "        If not provided than part1 position is used", "is_target": false}, {"number": 159, "content": "    */", "is_target": false}, {"number": 160, "content": "    FixedJoint(Primitive* part1, Primitive* part2,", "is_target": false}, {"number": 161, "content": "               const osg::Vec3& anchor = osg::Vec3(0,0,0));", "is_target": false}, {"number": 162, "content": "", "is_target": false}, {"number": 163, "content": "    virtual ~FixedJoint();", "is_target": true}, {"number": 164, "content": "", "is_target": false}, {"number": 165, "content": "    /** initialises (and creates) the joint.", "is_target": false}, {"number": 166, "content": "    */", "is_target": false}, {"number": 167, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 168, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}]}, "1258": {"lines": [{"number": 162, "content": "", "is_target": false}, {"number": 163, "content": "    virtual ~FixedJoint();", "is_target": false}, {"number": 164, "content": "", "is_target": false}, {"number": 165, "content": "    /** initialises (and creates) the joint.", "is_target": false}, {"number": 166, "content": "    */", "is_target": false}, {"number": 167, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 168, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 169, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 170, "content": "", "is_target": false}, {"number": 171, "content": "    virtual void update();", "is_target": false}, {"number": 172, "content": "    virtual void setParam(int parameter, double value);", "is_target": false}]}, "1259": {"lines": [{"number": 166, "content": "    */", "is_target": false}, {"number": 167, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 168, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 169, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 170, "content": "", "is_target": false}, {"number": 171, "content": "    virtual void update();", "is_target": true}, {"number": 172, "content": "    virtual void setParam(int parameter, double value);", "is_target": false}, {"number": 173, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}, {"number": 174, "content": "", "is_target": false}, {"number": 175, "content": "    virtual int getNumberAxes() const override { return 0; }", "is_target": false}, {"number": 176, "content": "  protected:", "is_target": false}]}, "1260": {"lines": [{"number": 167, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 168, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 169, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 170, "content": "", "is_target": false}, {"number": 171, "content": "    virtual void update();", "is_target": false}, {"number": 172, "content": "    virtual void setParam(int parameter, double value);", "is_target": true}, {"number": 173, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}, {"number": 174, "content": "", "is_target": false}, {"number": 175, "content": "    virtual int getNumberAxes() const override { return 0; }", "is_target": false}, {"number": 176, "content": "  protected:", "is_target": false}, {"number": 177, "content": "    OSGPrimitive* visual;", "is_target": false}]}, "1261": {"lines": [{"number": 183, "content": "  class HingeJoint : public OneAxisJoint {", "is_target": false}, {"number": 184, "content": "  public:", "is_target": false}, {"number": 185, "content": "    HingeJoint(Primitive* part1, Primitive* part2, const osg::Vec3& anchor,", "is_target": false}, {"number": 186, "content": "                const Axis& axis1);", "is_target": false}, {"number": 187, "content": "", "is_target": false}, {"number": 188, "content": "    virtual ~HingeJoint();", "is_target": true}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "    /** initialises (and creates) the joint. If visual is true then the axis of the joints is", "is_target": false}, {"number": 191, "content": "        also drawn as a slim cylinder. visualSize is the length of the cylinder.", "is_target": false}, {"number": 192, "content": "    */", "is_target": false}, {"number": 193, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}]}, "1262": {"lines": [{"number": 188, "content": "    virtual ~HingeJoint();", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "    /** initialises (and creates) the joint. If visual is true then the axis of the joints is", "is_target": false}, {"number": 191, "content": "        also drawn as a slim cylinder. visualSize is the length of the cylinder.", "is_target": false}, {"number": 192, "content": "    */", "is_target": false}, {"number": 193, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 194, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 195, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 196, "content": "", "is_target": false}, {"number": 197, "content": "    virtual void update();", "is_target": false}, {"number": 198, "content": "", "is_target": false}]}, "1263": {"lines": [{"number": 192, "content": "    */", "is_target": false}, {"number": 193, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 194, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 195, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 196, "content": "", "is_target": false}, {"number": 197, "content": "    virtual void update();", "is_target": true}, {"number": 198, "content": "", "is_target": false}, {"number": 199, "content": "    virtual void addForce1(double t);", "is_target": false}, {"number": 200, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 201, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 202, "content": "    virtual void setParam(int parameter, double value);", "is_target": false}]}, "1264": {"lines": [{"number": 194, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 195, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 196, "content": "", "is_target": false}, {"number": 197, "content": "    virtual void update();", "is_target": false}, {"number": 198, "content": "", "is_target": false}, {"number": 199, "content": "    virtual void addForce1(double t);", "is_target": true}, {"number": 200, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 201, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 202, "content": "    virtual void setParam(int parameter, double value);", "is_target": false}, {"number": 203, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}, {"number": 204, "content": "", "is_target": false}]}, "1265": {"lines": [{"number": 197, "content": "    virtual void update();", "is_target": false}, {"number": 198, "content": "", "is_target": false}, {"number": 199, "content": "    virtual void addForce1(double t);", "is_target": false}, {"number": 200, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 201, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 202, "content": "    virtual void setParam(int parameter, double value);", "is_target": true}, {"number": 203, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}, {"number": 204, "content": "", "is_target": false}, {"number": 205, "content": "  protected:", "is_target": false}, {"number": 206, "content": "    OSGPrimitive* visual = nullptr;", "is_target": false}, {"number": 207, "content": "  };", "is_target": false}]}, "1266": {"lines": [{"number": 211, "content": "  class Hinge2Joint : public TwoAxisJoint {", "is_target": false}, {"number": 212, "content": "  public:", "is_target": false}, {"number": 213, "content": "    Hinge2Joint(Primitive* part1, Primitive* part2, const osg::Vec3& anchor,", "is_target": false}, {"number": 214, "content": "                const Axis& axis1, const Axis& axis2);", "is_target": false}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "    virtual ~Hinge2Joint();", "is_target": true}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "    /** initialises (and creates) the joint. If visual is true then axis2 of the joints is", "is_target": false}, {"number": 219, "content": "        also drawn as a slim cylinder. visualSize is the length of the cylinder.", "is_target": false}, {"number": 220, "content": "    */", "is_target": false}, {"number": 221, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}]}, "1267": {"lines": [{"number": 216, "content": "    virtual ~Hinge2Joint();", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "    /** initialises (and creates) the joint. If visual is true then axis2 of the joints is", "is_target": false}, {"number": 219, "content": "        also drawn as a slim cylinder. visualSize is the length of the cylinder.", "is_target": false}, {"number": 220, "content": "    */", "is_target": false}, {"number": 221, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 222, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 223, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "    virtual void update();", "is_target": false}, {"number": 226, "content": "", "is_target": false}]}, "1268": {"lines": [{"number": 220, "content": "    */", "is_target": false}, {"number": 221, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 222, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 223, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "    virtual void update();", "is_target": true}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "    /// adds torques to axis 1 and 2", "is_target": false}, {"number": 228, "content": "    virtual void addForce1(double t1);", "is_target": false}, {"number": 229, "content": "    virtual void addForce2(double t2);", "is_target": false}, {"number": 230, "content": "    virtual double getPosition1()  const override;", "is_target": false}]}, "1269": {"lines": [{"number": 223, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "    virtual void update();", "is_target": false}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "    /// adds torques to axis 1 and 2", "is_target": false}, {"number": 228, "content": "    virtual void addForce1(double t1);", "is_target": true}, {"number": 229, "content": "    virtual void addForce2(double t2);", "is_target": false}, {"number": 230, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 231, "content": "    virtual double getPosition2()  const; /// This is not supported by the joint!", "is_target": false}, {"number": 232, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 233, "content": "    virtual double getPosition2Rate()  const override;", "is_target": false}]}, "1270": {"lines": [{"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "    virtual void update();", "is_target": false}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "    /// adds torques to axis 1 and 2", "is_target": false}, {"number": 228, "content": "    virtual void addForce1(double t1);", "is_target": false}, {"number": 229, "content": "    virtual void addForce2(double t2);", "is_target": true}, {"number": 230, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 231, "content": "    virtual double getPosition2()  const; /// This is not supported by the joint!", "is_target": false}, {"number": 232, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 233, "content": "    virtual double getPosition2Rate()  const override;", "is_target": false}, {"number": 234, "content": "    virtual void setParam(int parameter, double value);", "is_target": false}]}, "1271": {"lines": [{"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "    /// adds torques to axis 1 and 2", "is_target": false}, {"number": 228, "content": "    virtual void addForce1(double t1);", "is_target": false}, {"number": 229, "content": "    virtual void addForce2(double t2);", "is_target": false}, {"number": 230, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 231, "content": "    virtual double getPosition2()  const; /// This is not supported by the joint!", "is_target": true}, {"number": 232, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 233, "content": "    virtual double getPosition2Rate()  const override;", "is_target": false}, {"number": 234, "content": "    virtual void setParam(int parameter, double value);", "is_target": false}, {"number": 235, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}, {"number": 236, "content": "", "is_target": false}]}, "1272": {"lines": [{"number": 229, "content": "    virtual void addForce2(double t2);", "is_target": false}, {"number": 230, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 231, "content": "    virtual double getPosition2()  const; /// This is not supported by the joint!", "is_target": false}, {"number": 232, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 233, "content": "    virtual double getPosition2Rate()  const override;", "is_target": false}, {"number": 234, "content": "    virtual void setParam(int parameter, double value);", "is_target": true}, {"number": 235, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "  protected:", "is_target": false}, {"number": 238, "content": "    OSGPrimitive* visual = nullptr;", "is_target": false}, {"number": 239, "content": "  };", "is_target": false}]}, "1273": {"lines": [{"number": 243, "content": "  class UniversalJoint : public TwoAxisJoint {", "is_target": false}, {"number": 244, "content": "  public:", "is_target": false}, {"number": 245, "content": "    UniversalJoint(Primitive* part1, Primitive* part2, const osg::Vec3& anchor,", "is_target": false}, {"number": 246, "content": "                const Axis& axis1, const Axis& axis2);", "is_target": false}, {"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "    virtual ~UniversalJoint();", "is_target": true}, {"number": 249, "content": "", "is_target": false}, {"number": 250, "content": "    /** initialises (and creates) the joint. If visual is true then axix1 and axis2 of the joints is", "is_target": false}, {"number": 251, "content": "        also drawn as a slim cylinder. visualSize is the length of the cylinder.", "is_target": false}, {"number": 252, "content": "    */", "is_target": false}, {"number": 253, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}]}, "1274": {"lines": [{"number": 248, "content": "    virtual ~UniversalJoint();", "is_target": false}, {"number": 249, "content": "", "is_target": false}, {"number": 250, "content": "    /** initialises (and creates) the joint. If visual is true then axix1 and axis2 of the joints is", "is_target": false}, {"number": 251, "content": "        also drawn as a slim cylinder. visualSize is the length of the cylinder.", "is_target": false}, {"number": 252, "content": "    */", "is_target": false}, {"number": 253, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 254, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 255, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "    virtual void update();", "is_target": false}, {"number": 258, "content": "", "is_target": false}]}, "1275": {"lines": [{"number": 252, "content": "    */", "is_target": false}, {"number": 253, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 254, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 255, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "    virtual void update();", "is_target": true}, {"number": 258, "content": "", "is_target": false}, {"number": 259, "content": "    /// adds torques to axis 1 and 2", "is_target": false}, {"number": 260, "content": "    virtual void addForce1(double t1);", "is_target": false}, {"number": 261, "content": "    virtual void addForce2(double t2);", "is_target": false}, {"number": 262, "content": "    virtual double getPosition1()  const override;", "is_target": false}]}, "1276": {"lines": [{"number": 255, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "    virtual void update();", "is_target": false}, {"number": 258, "content": "", "is_target": false}, {"number": 259, "content": "    /// adds torques to axis 1 and 2", "is_target": false}, {"number": 260, "content": "    virtual void addForce1(double t1);", "is_target": true}, {"number": 261, "content": "    virtual void addForce2(double t2);", "is_target": false}, {"number": 262, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 263, "content": "    virtual double getPosition2()  const override;", "is_target": false}, {"number": 264, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 265, "content": "    virtual double getPosition2Rate()  const override;", "is_target": false}]}, "1277": {"lines": [{"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "    virtual void update();", "is_target": false}, {"number": 258, "content": "", "is_target": false}, {"number": 259, "content": "    /// adds torques to axis 1 and 2", "is_target": false}, {"number": 260, "content": "    virtual void addForce1(double t1);", "is_target": false}, {"number": 261, "content": "    virtual void addForce2(double t2);", "is_target": true}, {"number": 262, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 263, "content": "    virtual double getPosition2()  const override;", "is_target": false}, {"number": 264, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 265, "content": "    virtual double getPosition2Rate()  const override;", "is_target": false}, {"number": 266, "content": "", "is_target": false}]}, "1278": {"lines": [{"number": 262, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 263, "content": "    virtual double getPosition2()  const override;", "is_target": false}, {"number": 264, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 265, "content": "    virtual double getPosition2Rate()  const override;", "is_target": false}, {"number": 266, "content": "", "is_target": false}, {"number": 267, "content": "    virtual void setParam(int parameter, double value);", "is_target": true}, {"number": 268, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}, {"number": 269, "content": "", "is_target": false}, {"number": 270, "content": "  protected:", "is_target": false}, {"number": 271, "content": "    OSGPrimitive* visual1 = nullptr;", "is_target": false}, {"number": 272, "content": "    OSGPrimitive* visual2 = nullptr;", "is_target": false}]}, "1279": {"lines": [{"number": 276, "content": "", "is_target": false}, {"number": 277, "content": "  class BallJoint : public Joint {", "is_target": false}, {"number": 278, "content": "  public:", "is_target": false}, {"number": 279, "content": "    BallJoint(Primitive* part1, Primitive* part2, const osg::Vec3& anchor);", "is_target": false}, {"number": 280, "content": "", "is_target": false}, {"number": 281, "content": "    virtual ~BallJoint();", "is_target": true}, {"number": 282, "content": "", "is_target": false}, {"number": 283, "content": "    /** initialises (and creates) the joint.", "is_target": false}, {"number": 284, "content": "        If visual is true then ball is drawn as a sphere with radius of visualSize.", "is_target": false}, {"number": 285, "content": "    */", "is_target": false}, {"number": 286, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}]}, "1280": {"lines": [{"number": 281, "content": "    virtual ~BallJoint();", "is_target": false}, {"number": 282, "content": "", "is_target": false}, {"number": 283, "content": "    /** initialises (and creates) the joint.", "is_target": false}, {"number": 284, "content": "        If visual is true then ball is drawn as a sphere with radius of visualSize.", "is_target": false}, {"number": 285, "content": "    */", "is_target": false}, {"number": 286, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 287, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 288, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 289, "content": "", "is_target": false}, {"number": 290, "content": "    virtual void update();", "is_target": false}, {"number": 291, "content": "", "is_target": false}]}, "1281": {"lines": [{"number": 285, "content": "    */", "is_target": false}, {"number": 286, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 287, "content": "                      bool withVisual = true, double visualSize = 0.2,", "is_target": false}, {"number": 288, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 289, "content": "", "is_target": false}, {"number": 290, "content": "    virtual void update();", "is_target": true}, {"number": 291, "content": "", "is_target": false}, {"number": 292, "content": "    virtual int getNumberAxes() const override { return 0; }", "is_target": false}, {"number": 293, "content": "    // Ball and Socket has no parameter", "is_target": false}, {"number": 294, "content": "    virtual void setParam(int parameter, double value);", "is_target": false}, {"number": 295, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}]}, "1282": {"lines": [{"number": 289, "content": "", "is_target": false}, {"number": 290, "content": "    virtual void update();", "is_target": false}, {"number": 291, "content": "", "is_target": false}, {"number": 292, "content": "    virtual int getNumberAxes() const override { return 0; }", "is_target": false}, {"number": 293, "content": "    // Ball and Socket has no parameter", "is_target": false}, {"number": 294, "content": "    virtual void setParam(int parameter, double value);", "is_target": true}, {"number": 295, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}, {"number": 296, "content": "", "is_target": false}, {"number": 297, "content": "  protected:", "is_target": false}, {"number": 298, "content": "    OSGPrimitive* visual;", "is_target": false}, {"number": 299, "content": "  };", "is_target": false}]}, "1283": {"lines": [{"number": 304, "content": "  class SliderJoint : public OneAxisJoint {", "is_target": false}, {"number": 305, "content": "  public:", "is_target": false}, {"number": 306, "content": "    SliderJoint(Primitive* part1, Primitive* part2, const osg::Vec3& anchor,", "is_target": false}, {"number": 307, "content": "                const Axis& axis1);", "is_target": false}, {"number": 308, "content": "", "is_target": false}, {"number": 309, "content": "    virtual ~SliderJoint();", "is_target": true}, {"number": 310, "content": "", "is_target": false}, {"number": 311, "content": "    /** initialises (and creates) the joint. If visual is true then the axis of the joints is", "is_target": false}, {"number": 312, "content": "        also drawn as a slim cylinder. VisualSize is added to the lenght of the slider and is used", "is_target": false}, {"number": 313, "content": "        for the length of the cylinder. The radius is visualSize/10", "is_target": false}, {"number": 314, "content": "    */", "is_target": false}]}, "1284": {"lines": [{"number": 310, "content": "", "is_target": false}, {"number": 311, "content": "    /** initialises (and creates) the joint. If visual is true then the axis of the joints is", "is_target": false}, {"number": 312, "content": "        also drawn as a slim cylinder. VisualSize is added to the lenght of the slider and is used", "is_target": false}, {"number": 313, "content": "        for the length of the cylinder. The radius is visualSize/10", "is_target": false}, {"number": 314, "content": "    */", "is_target": false}, {"number": 315, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 316, "content": "                      bool withVisual = true, double visualSize = 0.1,", "is_target": false}, {"number": 317, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 318, "content": "", "is_target": false}, {"number": 319, "content": "    virtual void update();", "is_target": false}, {"number": 320, "content": "", "is_target": false}]}, "1285": {"lines": [{"number": 314, "content": "    */", "is_target": false}, {"number": 315, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 316, "content": "                      bool withVisual = true, double visualSize = 0.1,", "is_target": false}, {"number": 317, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 318, "content": "", "is_target": false}, {"number": 319, "content": "    virtual void update();", "is_target": true}, {"number": 320, "content": "", "is_target": false}, {"number": 321, "content": "    virtual void addForce1(double t);", "is_target": false}, {"number": 322, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 323, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 324, "content": "    virtual void setParam(int parameter, double value);", "is_target": false}]}, "1286": {"lines": [{"number": 316, "content": "                      bool withVisual = true, double visualSize = 0.1,", "is_target": false}, {"number": 317, "content": "                      bool ignoreColl = true);", "is_target": false}, {"number": 318, "content": "", "is_target": false}, {"number": 319, "content": "    virtual void update();", "is_target": false}, {"number": 320, "content": "", "is_target": false}, {"number": 321, "content": "    virtual void addForce1(double t);", "is_target": true}, {"number": 322, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 323, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 324, "content": "    virtual void setParam(int parameter, double value);", "is_target": false}, {"number": 325, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}, {"number": 326, "content": "", "is_target": false}]}, "1287": {"lines": [{"number": 319, "content": "    virtual void update();", "is_target": false}, {"number": 320, "content": "", "is_target": false}, {"number": 321, "content": "    virtual void addForce1(double t);", "is_target": false}, {"number": 322, "content": "    virtual double getPosition1()  const override;", "is_target": false}, {"number": 323, "content": "    virtual double getPosition1Rate()  const override;", "is_target": false}, {"number": 324, "content": "    virtual void setParam(int parameter, double value);", "is_target": true}, {"number": 325, "content": "    virtual double getParam(int parameter)  const override;", "is_target": false}, {"number": 326, "content": "", "is_target": false}, {"number": 327, "content": "  protected:", "is_target": false}, {"number": 328, "content": "    OSGPrimitive* visual = nullptr;", "is_target": false}, {"number": 329, "content": "    double visualSize = 0;", "is_target": false}]}, "1288": {"lines": [{"number": 36, "content": "  public:", "is_target": false}, {"number": 37, "content": "", "is_target": false}, {"number": 38, "content": "    // creates new instance of OdeConfig with default values", "is_target": false}, {"number": 39, "content": "    OdeConfig();", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "    virtual ~OdeConfig() {}", "is_target": true}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "    virtual long int getRandomSeed() const { return randomSeed; }", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "    virtual void setRandomSeed(long int seed) {", "is_target": false}, {"number": 46, "content": "      this->randomSeed=seed;", "is_target": false}]}, "1289": {"lines": [{"number": 37, "content": " * You can use iterators with the limitation to not delete or insert.", "is_target": false}, {"number": 38, "content": " */", "is_target": false}, {"number": 39, "content": "class ConfigurableList : public std::vector<Configurable*>, public BackCaller {", "is_target": false}, {"number": 40, "content": "public:", "is_target": false}, {"number": 41, "content": "  ConfigurableList();", "is_target": false}, {"number": 42, "content": "  virtual ~ConfigurableList();", "is_target": true}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "  /**", "is_target": false}, {"number": 45, "content": "   * Indicates that the list has been modified, a Configurable instance was either added or removed.", "is_target": false}, {"number": 46, "content": "   */", "is_target": false}, {"number": 47, "content": "  static const BackCaller::CallbackableType CALLBACK_CONFIGURABLE_LIST_MODIFIED = 3;", "is_target": false}]}, "1290": {"lines": [{"number": 57, "content": "  class GlobalData : public GlobalDataBase {", "is_target": false}, {"number": 58, "content": "    public:", "is_target": false}, {"number": 59, "content": "      GlobalData() : environment(0), time(0), sim_step(0) {", "is_target": false}, {"number": 60, "content": "      }", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "      virtual ~GlobalData() {}", "is_target": true}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "      OdeConfig odeConfig;", "is_target": false}, {"number": 65, "content": "      ObstacleList obstacles;", "is_target": false}, {"number": 66, "content": "      OdeAgentList agents;", "is_target": false}, {"number": 67, "content": "      Primitive* environment; /// < this is used to be able to attach objects to the static environment", "is_target": false}]}, "1291": {"lines": [{"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "      double time = 0;", "is_target": false}, {"number": 76, "content": "      long int sim_step; ///< time steps since start", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "      /// returns the list of all agents", "is_target": false}, {"number": 79, "content": "      virtual AgentList& getAgents();", "is_target": true}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "      /// adds a temporary display item with given life duration in sec", "is_target": false}, {"number": 83, "content": "      virtual void addTmpObject(TmpObject* i, double duration);", "is_target": false}, {"number": 84, "content": "", "is_target": false}]}, "1292": {"lines": [{"number": 37, "content": "  public:", "is_target": false}, {"number": 38, "content": "    /// creates a AMotor attached to the same bodies as the given joint.", "is_target": false}, {"number": 39, "content": "    AngularMotor(const OdeHandle& odeHandle, Joint* joint);", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "    // destroys the AMotor", "is_target": false}, {"number": 42, "content": "    virtual ~AngularMotor();", "is_target": true}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "    /// returns the number of Axis of this Motor", "is_target": false}, {"number": 45, "content": "    virtual int getNumberOfAxes() const = 0;", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    // --- Sensor interface ---", "is_target": false}]}, "1293": {"lines": [{"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "    /// returns the number of Axis of this Motor", "is_target": false}, {"number": 45, "content": "    virtual int getNumberOfAxes() const = 0;", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    // --- Sensor interface ---", "is_target": false}, {"number": 48, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    virtual bool sense(const GlobalData& globaldata) { return true;}", "is_target": false}, {"number": 51, "content": "    virtual int getSensorNumber() const {", "is_target": false}, {"number": 52, "content": "      return getNumberOfAxes();", "is_target": false}, {"number": 53, "content": "    }", "is_target": false}]}, "1294": {"lines": [{"number": 45, "content": "    virtual int getNumberOfAxes() const = 0;", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    // --- Sensor interface ---", "is_target": false}, {"number": 48, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    virtual bool sense(const GlobalData& globaldata) { return true;}", "is_target": true}, {"number": 51, "content": "    virtual int getSensorNumber() const {", "is_target": false}, {"number": 52, "content": "      return getNumberOfAxes();", "is_target": false}, {"number": 53, "content": "    }", "is_target": false}, {"number": 54, "content": "    virtual std::list<sensor> getList() const { return getListOfArray();};", "is_target": false}, {"number": 55, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}]}, "1295": {"lines": [{"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    // --- Sensor interface ---", "is_target": false}, {"number": 48, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    virtual bool sense(const GlobalData& globaldata) { return true;}", "is_target": false}, {"number": 51, "content": "    virtual int getSensorNumber() const {", "is_target": true}, {"number": 52, "content": "      return getNumberOfAxes();", "is_target": false}, {"number": 53, "content": "    }", "is_target": false}, {"number": 54, "content": "    virtual std::list<sensor> getList() const { return getListOfArray();};", "is_target": false}, {"number": 55, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 56, "content": "", "is_target": false}]}, "1296": {"lines": [{"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    virtual bool sense(const GlobalData& globaldata) { return true;}", "is_target": false}, {"number": 51, "content": "    virtual int getSensorNumber() const {", "is_target": false}, {"number": 52, "content": "      return getNumberOfAxes();", "is_target": false}, {"number": 53, "content": "    }", "is_target": false}, {"number": 54, "content": "    virtual std::list<sensor> getList() const { return getListOfArray();};", "is_target": true}, {"number": 55, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "    // --- Motor interface ---", "is_target": false}, {"number": 58, "content": "    virtual int getMotorNumber() const { return getNumberOfAxes();};", "is_target": false}, {"number": 59, "content": "", "is_target": false}]}, "1297": {"lines": [{"number": 53, "content": "    }", "is_target": false}, {"number": 54, "content": "    virtual std::list<sensor> getList() const { return getListOfArray();};", "is_target": false}, {"number": 55, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "    // --- Motor interface ---", "is_target": false}, {"number": 58, "content": "    virtual int getMotorNumber() const { return getNumberOfAxes();};", "is_target": true}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "    virtual bool act(const GlobalData& globaldata) {", "is_target": false}, {"number": 61, "content": "      return true;", "is_target": false}, {"number": 62, "content": "    }", "is_target": false}, {"number": 63, "content": "", "is_target": false}]}, "1298": {"lines": [{"number": 55, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "    // --- Motor interface ---", "is_target": false}, {"number": 58, "content": "    virtual int getMotorNumber() const { return getNumberOfAxes();};", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "    virtual bool act(const GlobalData& globaldata) {", "is_target": true}, {"number": 61, "content": "      return true;", "is_target": false}, {"number": 62, "content": "    }", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "    /** sends the action commands to the motor.", "is_target": false}, {"number": 65, "content": "        It returns the number of used values. (should be equal to", "is_target": false}]}, "1299": {"lines": [{"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "    /** sends the action commands to the motor.", "is_target": false}, {"number": 65, "content": "        It returns the number of used values. (should be equal to", "is_target": false}, {"number": 66, "content": "        getMotorNumber)", "is_target": false}, {"number": 67, "content": "     */", "is_target": false}, {"number": 68, "content": "    virtual int set(const motor* values, int length);", "is_target": true}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "    // --- old interface", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}, {"number": 73, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}]}, "1300": {"lines": [{"number": 114, "content": "        @param power The maximum force or torque that the motor will use to achieve the desired velocity.", "is_target": false}, {"number": 115, "content": "        This must always be greater than or equal to zero.", "is_target": false}, {"number": 116, "content": "        Setting this to zero (the default value) turns off the motor.", "is_target": false}, {"number": 117, "content": "    */", "is_target": false}, {"number": 118, "content": "    AngularMotor1Axis(const OdeHandle& odeHandle, OneAxisJoint* joint, double power);", "is_target": false}, {"number": 119, "content": "    virtual ~AngularMotor1Axis() {}", "is_target": true}, {"number": 120, "content": "", "is_target": false}, {"number": 121, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "    virtual int getNumberOfAxes() const { return 1; };", "is_target": false}, {"number": 124, "content": "", "is_target": false}]}, "1301": {"lines": [{"number": 116, "content": "        Setting this to zero (the default value) turns off the motor.", "is_target": false}, {"number": 117, "content": "    */", "is_target": false}, {"number": 118, "content": "    AngularMotor1Axis(const OdeHandle& odeHandle, OneAxisJoint* joint, double power);", "is_target": false}, {"number": 119, "content": "    virtual ~AngularMotor1Axis() {}", "is_target": false}, {"number": 120, "content": "", "is_target": false}, {"number": 121, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "    virtual int getNumberOfAxes() const { return 1; };", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}, {"number": 126, "content": "        @param axisNumber is ignored because have only one axis", "is_target": false}]}, "1302": {"lines": [{"number": 118, "content": "    AngularMotor1Axis(const OdeHandle& odeHandle, OneAxisJoint* joint, double power);", "is_target": false}, {"number": 119, "content": "    virtual ~AngularMotor1Axis() {}", "is_target": false}, {"number": 120, "content": "", "is_target": false}, {"number": 121, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "    virtual int getNumberOfAxes() const { return 1; };", "is_target": true}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}, {"number": 126, "content": "        @param axisNumber is ignored because have only one axis", "is_target": false}, {"number": 127, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}, {"number": 128, "content": "    */", "is_target": false}]}, "1303": {"lines": [{"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}, {"number": 126, "content": "        @param axisNumber is ignored because have only one axis", "is_target": false}, {"number": 127, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}, {"number": 128, "content": "    */", "is_target": false}, {"number": 129, "content": "    virtual void set(int axisNumber, double velocity);", "is_target": true}, {"number": 130, "content": "    /** returns the speed static_cast<PositionRate>(at) the given axis, or zero if the axis is out of range", "is_target": false}, {"number": 131, "content": "        @param axisNumber is ignored because have only one axis", "is_target": false}, {"number": 132, "content": "     */", "is_target": false}, {"number": 133, "content": "    virtual double get(int axisNumber) const;", "is_target": false}, {"number": 134, "content": "", "is_target": false}]}, "1304": {"lines": [{"number": 128, "content": "    */", "is_target": false}, {"number": 129, "content": "    virtual void set(int axisNumber, double velocity);", "is_target": false}, {"number": 130, "content": "    /** returns the speed static_cast<PositionRate>(at) the given axis, or zero if the axis is out of range", "is_target": false}, {"number": 131, "content": "        @param axisNumber is ignored because have only one axis", "is_target": false}, {"number": 132, "content": "     */", "is_target": false}, {"number": 133, "content": "    virtual double get(int axisNumber) const;", "is_target": true}, {"number": 134, "content": "", "is_target": false}, {"number": 135, "content": "    virtual void setPower(double power);", "is_target": false}, {"number": 136, "content": "  protected:", "is_target": false}, {"number": 137, "content": "    double initialPower = 0;", "is_target": false}, {"number": 138, "content": "  };", "is_target": false}]}, "1305": {"lines": [{"number": 130, "content": "    /** returns the speed static_cast<PositionRate>(at) the given axis, or zero if the axis is out of range", "is_target": false}, {"number": 131, "content": "        @param axisNumber is ignored because have only one axis", "is_target": false}, {"number": 132, "content": "     */", "is_target": false}, {"number": 133, "content": "    virtual double get(int axisNumber) const;", "is_target": false}, {"number": 134, "content": "", "is_target": false}, {"number": 135, "content": "    virtual void setPower(double power);", "is_target": true}, {"number": 136, "content": "  protected:", "is_target": false}, {"number": 137, "content": "    double initialPower = 0;", "is_target": false}, {"number": 138, "content": "  };", "is_target": false}, {"number": 139, "content": "", "is_target": false}, {"number": 140, "content": "  /// Angular motor for TwoAxisJoints", "is_target": false}]}, "1306": {"lines": [{"number": 144, "content": "        @param power The maximum force or torque that the motor will use to achieve the desired velocity.", "is_target": false}, {"number": 145, "content": "        This must always be greater than or equal to zero.", "is_target": false}, {"number": 146, "content": "        Setting this to zero (the default value) turns off the motor.", "is_target": false}, {"number": 147, "content": "    */", "is_target": false}, {"number": 148, "content": "    AngularMotor2Axis(const OdeHandle& odeHandle, TwoAxisJoint* joint, double power1, double power2);", "is_target": false}, {"number": 149, "content": "    virtual ~AngularMotor2Axis() {}", "is_target": true}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "    /// returns the number of Axis of this Motor", "is_target": false}, {"number": 154, "content": "    virtual int getNumberOfAxes() const { return 2; };", "is_target": false}]}, "1307": {"lines": [{"number": 146, "content": "        Setting this to zero (the default value) turns off the motor.", "is_target": false}, {"number": 147, "content": "    */", "is_target": false}, {"number": 148, "content": "    AngularMotor2Axis(const OdeHandle& odeHandle, TwoAxisJoint* joint, double power1, double power2);", "is_target": false}, {"number": 149, "content": "    virtual ~AngularMotor2Axis() {}", "is_target": false}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "    /// returns the number of Axis of this Motor", "is_target": false}, {"number": 154, "content": "    virtual int getNumberOfAxes() const { return 2; };", "is_target": false}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}]}, "1308": {"lines": [{"number": 149, "content": "    virtual ~AngularMotor2Axis() {}", "is_target": false}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "    /// returns the number of Axis of this Motor", "is_target": false}, {"number": 154, "content": "    virtual int getNumberOfAxes() const { return 2; };", "is_target": true}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}, {"number": 157, "content": "        @param axisNumber either 0 or 1", "is_target": false}, {"number": 158, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}, {"number": 159, "content": "    */", "is_target": false}]}, "1309": {"lines": [{"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}, {"number": 157, "content": "        @param axisNumber either 0 or 1", "is_target": false}, {"number": 158, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}, {"number": 159, "content": "    */", "is_target": false}, {"number": 160, "content": "    virtual void set(int axisNumber, double velocity);", "is_target": true}, {"number": 161, "content": "    virtual double get(int axisNumber) const;", "is_target": false}, {"number": 162, "content": "", "is_target": false}, {"number": 163, "content": "    virtual void setPower(double power);", "is_target": false}, {"number": 164, "content": "    virtual void setPower(double power1, double power2);", "is_target": false}, {"number": 165, "content": "", "is_target": false}]}, "1310": {"lines": [{"number": 156, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}, {"number": 157, "content": "        @param axisNumber either 0 or 1", "is_target": false}, {"number": 158, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}, {"number": 159, "content": "    */", "is_target": false}, {"number": 160, "content": "    virtual void set(int axisNumber, double velocity);", "is_target": false}, {"number": 161, "content": "    virtual double get(int axisNumber) const;", "is_target": true}, {"number": 162, "content": "", "is_target": false}, {"number": 163, "content": "    virtual void setPower(double power);", "is_target": false}, {"number": 164, "content": "    virtual void setPower(double power1, double power2);", "is_target": false}, {"number": 165, "content": "", "is_target": false}, {"number": 166, "content": "    /// return the maximal force", "is_target": false}]}, "1311": {"lines": [{"number": 158, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}, {"number": 159, "content": "    */", "is_target": false}, {"number": 160, "content": "    virtual void set(int axisNumber, double velocity);", "is_target": false}, {"number": 161, "content": "    virtual double get(int axisNumber) const;", "is_target": false}, {"number": 162, "content": "", "is_target": false}, {"number": 163, "content": "    virtual void setPower(double power);", "is_target": true}, {"number": 164, "content": "    virtual void setPower(double power1, double power2);", "is_target": false}, {"number": 165, "content": "", "is_target": false}, {"number": 166, "content": "    /// return the maximal force", "is_target": false}, {"number": 167, "content": "    virtual double getPower2() const;", "is_target": false}, {"number": 168, "content": "  protected:", "is_target": false}]}, "1312": {"lines": [{"number": 183, "content": "        Setting this to zero (the default value) turns off the motor.", "is_target": false}, {"number": 184, "content": "    */", "is_target": false}, {"number": 185, "content": "    AngularMotor3AxisEuler(const OdeHandle& odeHandle, BallJoint* joint,", "is_target": false}, {"number": 186, "content": "                           const Axis& axis1, const Axis& axis3, double power);", "is_target": false}, {"number": 187, "content": "", "is_target": false}, {"number": 188, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "    /// returns the number of Axis of this Motor", "is_target": false}, {"number": 191, "content": "    virtual int getNumberOfAxes() const { return 3; };", "is_target": false}, {"number": 192, "content": "", "is_target": false}, {"number": 193, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}]}, "1313": {"lines": [{"number": 186, "content": "                           const Axis& axis1, const Axis& axis3, double power);", "is_target": false}, {"number": 187, "content": "", "is_target": false}, {"number": 188, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "    /// returns the number of Axis of this Motor", "is_target": false}, {"number": 191, "content": "    virtual int getNumberOfAxes() const { return 3; };", "is_target": true}, {"number": 192, "content": "", "is_target": false}, {"number": 193, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}, {"number": 194, "content": "        @param axisNumber either 0 or 1", "is_target": false}, {"number": 195, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}, {"number": 196, "content": "    */", "is_target": false}]}, "1314": {"lines": [{"number": 192, "content": "", "is_target": false}, {"number": 193, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}, {"number": 194, "content": "        @param axisNumber either 0 or 1", "is_target": false}, {"number": 195, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}, {"number": 196, "content": "    */", "is_target": false}, {"number": 197, "content": "    virtual void set(int axisNumber, double velocity);", "is_target": true}, {"number": 198, "content": "    /** returns the speed static_cast<PositionRate>(at) the given axis, or zero if the axis is out of range*/", "is_target": false}, {"number": 199, "content": "    virtual double get(int axisNumber) const;", "is_target": false}, {"number": 200, "content": "", "is_target": false}, {"number": 201, "content": "    /**  sets the maximal force the motor has", "is_target": false}, {"number": 202, "content": "     */", "is_target": false}]}, "1315": {"lines": [{"number": 194, "content": "        @param axisNumber either 0 or 1", "is_target": false}, {"number": 195, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}, {"number": 196, "content": "    */", "is_target": false}, {"number": 197, "content": "    virtual void set(int axisNumber, double velocity);", "is_target": false}, {"number": 198, "content": "    /** returns the speed static_cast<PositionRate>(at) the given axis, or zero if the axis is out of range*/", "is_target": false}, {"number": 199, "content": "    virtual double get(int axisNumber) const;", "is_target": true}, {"number": 200, "content": "", "is_target": false}, {"number": 201, "content": "    /**  sets the maximal force the motor has", "is_target": false}, {"number": 202, "content": "     */", "is_target": false}, {"number": 203, "content": "    virtual void setPower(double power);", "is_target": false}, {"number": 204, "content": "  protected:", "is_target": false}]}, "1316": {"lines": [{"number": 198, "content": "    /** returns the speed static_cast<PositionRate>(at) the given axis, or zero if the axis is out of range*/", "is_target": false}, {"number": 199, "content": "    virtual double get(int axisNumber) const;", "is_target": false}, {"number": 200, "content": "", "is_target": false}, {"number": 201, "content": "    /**  sets the maximal force the motor has", "is_target": false}, {"number": 202, "content": "     */", "is_target": false}, {"number": 203, "content": "    virtual void setPower(double power);", "is_target": true}, {"number": 204, "content": "  protected:", "is_target": false}, {"number": 205, "content": "    Axis axis1;", "is_target": false}, {"number": 206, "content": "    Axis axis3;", "is_target": false}, {"number": 207, "content": "    double power = 0;", "is_target": false}, {"number": 208, "content": "  };", "is_target": false}]}, "1317": {"lines": [{"number": 218, "content": "        Setting this to zero (the default value) turns off the motor.", "is_target": false}, {"number": 219, "content": "    */", "is_target": false}, {"number": 220, "content": "    AngularMotorNAxis(const OdeHandle& odeHandle, Joint* joint,", "is_target": false}, {"number": 221, "content": "                      std::list<std::pair<double, Axis > > axis);", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "    virtual ~AngularMotorNAxis() {}", "is_target": true}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "    /// returns the number of Axis of this Motor", "is_target": false}, {"number": 228, "content": "    virtual int getNumberOfAxes()  const override;", "is_target": false}]}, "1318": {"lines": [{"number": 220, "content": "    AngularMotorNAxis(const OdeHandle& odeHandle, Joint* joint,", "is_target": false}, {"number": 221, "content": "                      std::list<std::pair<double, Axis > > axis);", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "    virtual ~AngularMotorNAxis() {}", "is_target": false}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "    /// returns the number of Axis of this Motor", "is_target": false}, {"number": 228, "content": "    virtual int getNumberOfAxes()  const override;", "is_target": false}, {"number": 229, "content": "", "is_target": false}, {"number": 230, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}]}, "1319": {"lines": [{"number": 228, "content": "    virtual int getNumberOfAxes()  const override;", "is_target": false}, {"number": 229, "content": "", "is_target": false}, {"number": 230, "content": "    /** sets the desired speed of the motor at the given axis.", "is_target": false}, {"number": 231, "content": "        @param velocity Desired motor velocity (this will be an angular or linear velocity).", "is_target": false}, {"number": 232, "content": "    */", "is_target": false}, {"number": 233, "content": "    virtual void set(int axisNumber, double velocity);", "is_target": true}, {"number": 234, "content": "    /** returns the speed static_cast<PositionRate>(at) the given axis, or zero if the axis is out of range", "is_target": false}, {"number": 235, "content": "        The problem is, that we don't have actual information available.", "is_target": false}, {"number": 236, "content": "        So we return the last set position!.", "is_target": false}, {"number": 237, "content": "     */", "is_target": false}, {"number": 238, "content": "    virtual double get(int axisNumber) const;", "is_target": false}]}, "1320": {"lines": [{"number": 233, "content": "    virtual void set(int axisNumber, double velocity);", "is_target": false}, {"number": 234, "content": "    /** returns the speed static_cast<PositionRate>(at) the given axis, or zero if the axis is out of range", "is_target": false}, {"number": 235, "content": "        The problem is, that we don't have actual information available.", "is_target": false}, {"number": 236, "content": "        So we return the last set position!.", "is_target": false}, {"number": 237, "content": "     */", "is_target": false}, {"number": 238, "content": "    virtual double get(int axisNumber) const;", "is_target": true}, {"number": 239, "content": "", "is_target": false}, {"number": 240, "content": "    virtual void setPower(double power);", "is_target": false}, {"number": 241, "content": "  protected:", "is_target": false}, {"number": 242, "content": "    std::list<std::pair<double, Axis > > axis;", "is_target": false}, {"number": 243, "content": "  };", "is_target": false}]}, "1321": {"lines": [{"number": 235, "content": "        The problem is, that we don't have actual information available.", "is_target": false}, {"number": 236, "content": "        So we return the last set position!.", "is_target": false}, {"number": 237, "content": "     */", "is_target": false}, {"number": 238, "content": "    virtual double get(int axisNumber) const;", "is_target": false}, {"number": 239, "content": "", "is_target": false}, {"number": 240, "content": "    virtual void setPower(double power);", "is_target": true}, {"number": 241, "content": "  protected:", "is_target": false}, {"number": 242, "content": "    std::list<std::pair<double, Axis > > axis;", "is_target": false}, {"number": 243, "content": "  };", "is_target": false}, {"number": 244, "content": "", "is_target": false}, {"number": 245, "content": "", "is_target": false}]}, "1322": {"lines": [{"number": 42, "content": "    OneAxisServo(OneAxisJoint* joint, double _min, double _max,", "is_target": false}, {"number": 43, "content": "                 double power, double damp=0.2, double integration=2,", "is_target": false}, {"number": 44, "content": "                 double maxVel=10.0,", "is_target": false}, {"number": 45, "content": "                 double jointLimit = 1.3, bool minmaxCheck = true);", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    virtual ~OneAxisServo();", "is_target": true}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 50, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max", "is_target": false}, {"number": 51, "content": "    */", "is_target": false}, {"number": 52, "content": "    virtual void set(double pos);", "is_target": false}]}, "1323": {"lines": [{"number": 61, "content": "      }", "is_target": false}, {"number": 62, "content": "      return pos;", "is_target": false}, {"number": 63, "content": "    }", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "    // --- Sensor interface ---", "is_target": false}, {"number": 66, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) { // and Motor interface", "is_target": true}, {"number": 67, "content": "      if(joint!= nullptr) {", "is_target": false}, {"number": 68, "content": "        this->joint=dynamic_cast<OneAxisJoint*>(joint);", "is_target": false}, {"number": 69, "content": "      }", "is_target": false}, {"number": 70, "content": "      assert(this->joint);", "is_target": false}, {"number": 71, "content": "    }", "is_target": false}]}, "1324": {"lines": [{"number": 68, "content": "        this->joint=dynamic_cast<OneAxisJoint*>(joint);", "is_target": false}, {"number": 69, "content": "      }", "is_target": false}, {"number": 70, "content": "      assert(this->joint);", "is_target": false}, {"number": 71, "content": "    }", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "    virtual bool sense(const GlobalData& globaldata) { return true;};", "is_target": true}, {"number": 74, "content": "    virtual int getSensorNumber() const {", "is_target": false}, {"number": 75, "content": "      return 1;", "is_target": false}, {"number": 76, "content": "    }", "is_target": false}, {"number": 77, "content": "    virtual std::list<sensor> getList() const { return getListOfArray();};", "is_target": false}, {"number": 78, "content": "    virtual int get(sensor* sensors, int length) const {", "is_target": false}]}, "1325": {"lines": [{"number": 69, "content": "      }", "is_target": false}, {"number": 70, "content": "      assert(this->joint);", "is_target": false}, {"number": 71, "content": "    }", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "    virtual bool sense(const GlobalData& globaldata) { return true;};", "is_target": false}, {"number": 74, "content": "    virtual int getSensorNumber() const {", "is_target": true}, {"number": 75, "content": "      return 1;", "is_target": false}, {"number": 76, "content": "    }", "is_target": false}, {"number": 77, "content": "    virtual std::list<sensor> getList() const { return getListOfArray();};", "is_target": false}, {"number": 78, "content": "    virtual int get(sensor* sensors, int length) const {", "is_target": false}, {"number": 79, "content": "      assert(length>0);", "is_target": false}]}, "1326": {"lines": [{"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "    virtual bool sense(const GlobalData& globaldata) { return true;};", "is_target": false}, {"number": 74, "content": "    virtual int getSensorNumber() const {", "is_target": false}, {"number": 75, "content": "      return 1;", "is_target": false}, {"number": 76, "content": "    }", "is_target": false}, {"number": 77, "content": "    virtual std::list<sensor> getList() const { return getListOfArray();};", "is_target": true}, {"number": 78, "content": "    virtual int get(sensor* sensors, int length) const {", "is_target": false}, {"number": 79, "content": "      assert(length>0);", "is_target": false}, {"number": 80, "content": "      sensors[0]=get();", "is_target": false}, {"number": 81, "content": "      return 1;", "is_target": false}, {"number": 82, "content": "    }", "is_target": false}]}, "1327": {"lines": [{"number": 73, "content": "    virtual bool sense(const GlobalData& globaldata) { return true;};", "is_target": false}, {"number": 74, "content": "    virtual int getSensorNumber() const {", "is_target": false}, {"number": 75, "content": "      return 1;", "is_target": false}, {"number": 76, "content": "    }", "is_target": false}, {"number": 77, "content": "    virtual std::list<sensor> getList() const { return getListOfArray();};", "is_target": false}, {"number": 78, "content": "    virtual int get(sensor* sensors, int length) const {", "is_target": true}, {"number": 79, "content": "      assert(length>0);", "is_target": false}, {"number": 80, "content": "      sensors[0]=get();", "is_target": false}, {"number": 81, "content": "      return 1;", "is_target": false}, {"number": 82, "content": "    }", "is_target": false}, {"number": 83, "content": "", "is_target": false}]}, "1328": {"lines": [{"number": 80, "content": "      sensors[0]=get();", "is_target": false}, {"number": 81, "content": "      return 1;", "is_target": false}, {"number": 82, "content": "    }", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "    // --- Motor interface ---", "is_target": false}, {"number": 85, "content": "    virtual int getMotorNumber() const { return 1;};", "is_target": true}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "    virtual bool act(const GlobalData& globaldata) {", "is_target": false}, {"number": 88, "content": "      // here we should apply the forces etc, but due to backwards compatibility this remains in set()", "is_target": false}, {"number": 89, "content": "      // which is also called each timestep.", "is_target": false}, {"number": 90, "content": "      return true;", "is_target": false}]}, "1329": {"lines": [{"number": 82, "content": "    }", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "    // --- Motor interface ---", "is_target": false}, {"number": 85, "content": "    virtual int getMotorNumber() const { return 1;};", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "    virtual bool act(const GlobalData& globaldata) {", "is_target": true}, {"number": 88, "content": "      // here we should apply the forces etc, but due to backwards compatibility this remains in set()", "is_target": false}, {"number": 89, "content": "      // which is also called each timestep.", "is_target": false}, {"number": 90, "content": "      return true;", "is_target": false}, {"number": 91, "content": "    };", "is_target": false}, {"number": 92, "content": "", "is_target": false}]}, "1330": {"lines": [{"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "    /** sends the action commands to the motor.", "is_target": false}, {"number": 94, "content": "        It returns the number of used values. (should be equal to", "is_target": false}, {"number": 95, "content": "        getMotorNumber)", "is_target": false}, {"number": 96, "content": "     */", "is_target": false}, {"number": 97, "content": "    virtual int set(const motor* values, int length) {", "is_target": true}, {"number": 98, "content": "      assert(length>0);", "is_target": false}, {"number": 99, "content": "      set(values[0]);", "is_target": false}, {"number": 100, "content": "      return 1;", "is_target": false}, {"number": 101, "content": "    };", "is_target": false}, {"number": 102, "content": "", "is_target": false}]}, "1331": {"lines": [{"number": 167, "content": "    */", "is_target": false}, {"number": 168, "content": "    OneAxisServoCentered(OneAxisJoint* joint, double _min, double _max,", "is_target": false}, {"number": 169, "content": "                         double power, double damp=0.2, double integration=2,", "is_target": false}, {"number": 170, "content": "                         double maxVel=10.0, double jointLimit = 1.3);", "is_target": false}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "    virtual ~OneAxisServoCentered() {}", "is_target": true}, {"number": 173, "content": "", "is_target": false}, {"number": 174, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 175, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}, {"number": 176, "content": "        however 0 is just in the center of min and max", "is_target": false}, {"number": 177, "content": "    */", "is_target": false}]}, "1332": {"lines": [{"number": 173, "content": "", "is_target": false}, {"number": 174, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 175, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}, {"number": 176, "content": "        however 0 is just in the center of min and max", "is_target": false}, {"number": 177, "content": "    */", "is_target": false}, {"number": 178, "content": "    virtual void set(double pos);", "is_target": true}, {"number": 179, "content": "", "is_target": false}, {"number": 180, "content": "    /** returns the position of the slider in ranges [-1, 1] (scaled by min, max, centered)*/", "is_target": false}, {"number": 181, "content": "    virtual double get() const {", "is_target": false}, {"number": 182, "content": "      double pos =  joint->getPosition1();", "is_target": false}, {"number": 183, "content": "", "is_target": false}]}, "1333": {"lines": [{"number": 176, "content": "        however 0 is just in the center of min and max", "is_target": false}, {"number": 177, "content": "    */", "is_target": false}, {"number": 178, "content": "    virtual void set(double pos);", "is_target": false}, {"number": 179, "content": "", "is_target": false}, {"number": 180, "content": "    /** returns the position of the slider in ranges [-1, 1] (scaled by min, max, centered)*/", "is_target": false}, {"number": 181, "content": "    virtual double get() const {", "is_target": true}, {"number": 182, "content": "      double pos =  joint->getPosition1();", "is_target": false}, {"number": 183, "content": "", "is_target": false}, {"number": 184, "content": "      return 2*(pos-min)/(max-min) - 1;", "is_target": false}, {"number": 185, "content": "    }", "is_target": false}, {"number": 186, "content": "", "is_target": false}]}, "1334": {"lines": [{"number": 207, "content": "    OneAxisServoVel(const OdeHandle& odeHandle,", "is_target": false}, {"number": 208, "content": "                    OneAxisJoint* joint, double _min, double _max,", "is_target": false}, {"number": 209, "content": "                    double power, double damp=0.05, double maxVel=20,", "is_target": false}, {"number": 210, "content": "                    double jointLimit = 1.3);", "is_target": false}, {"number": 211, "content": "", "is_target": false}, {"number": 212, "content": "    virtual ~OneAxisServoVel();", "is_target": true}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) {", "is_target": false}, {"number": 215, "content": "      if(joint) { assert(joint==this->joint); } // we cannot attach the servo to a new joint", "is_target": false}, {"number": 216, "content": "    }", "is_target": false}, {"number": 217, "content": "", "is_target": false}]}, "1335": {"lines": [{"number": 209, "content": "                    double power, double damp=0.05, double maxVel=20,", "is_target": false}, {"number": 210, "content": "                    double jointLimit = 1.3);", "is_target": false}, {"number": 211, "content": "", "is_target": false}, {"number": 212, "content": "    virtual ~OneAxisServoVel();", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) {", "is_target": true}, {"number": 215, "content": "      if(joint) { assert(joint==this->joint); } // we cannot attach the servo to a new joint", "is_target": false}, {"number": 216, "content": "    }", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "    /** adjusts the power of the servo*/", "is_target": false}, {"number": 219, "content": "    virtual void setPower(double _power);", "is_target": false}]}, "1336": {"lines": [{"number": 214, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) {", "is_target": false}, {"number": 215, "content": "      if(joint) { assert(joint==this->joint); } // we cannot attach the servo to a new joint", "is_target": false}, {"number": 216, "content": "    }", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "    /** adjusts the power of the servo*/", "is_target": false}, {"number": 219, "content": "    virtual void setPower(double _power);", "is_target": true}, {"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "    /** returns the power of the servo*/", "is_target": false}, {"number": 222, "content": "    virtual double getPower() {", "is_target": false}, {"number": 223, "content": "      return power;", "is_target": false}, {"number": 224, "content": "    }", "is_target": false}]}, "1337": {"lines": [{"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "    /** adjusts the power of the servo*/", "is_target": false}, {"number": 219, "content": "    virtual void setPower(double _power);", "is_target": false}, {"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "    /** returns the power of the servo*/", "is_target": false}, {"number": 222, "content": "    virtual double getPower() {", "is_target": true}, {"number": 223, "content": "      return power;", "is_target": false}, {"number": 224, "content": "    }", "is_target": false}, {"number": 225, "content": "    virtual double getDamping() {", "is_target": false}, {"number": 226, "content": "      return damp;", "is_target": false}, {"number": 227, "content": "    }", "is_target": false}]}, "1338": {"lines": [{"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "    /** returns the power of the servo*/", "is_target": false}, {"number": 222, "content": "    virtual double getPower() {", "is_target": false}, {"number": 223, "content": "      return power;", "is_target": false}, {"number": 224, "content": "    }", "is_target": false}, {"number": 225, "content": "    virtual double getDamping() {", "is_target": true}, {"number": 226, "content": "      return damp;", "is_target": false}, {"number": 227, "content": "    }", "is_target": false}, {"number": 228, "content": "    virtual void setDamping(double _damp) {", "is_target": false}, {"number": 229, "content": "      damp = clip(_damp,0.0,1.0);", "is_target": false}, {"number": 230, "content": "    }", "is_target": false}]}, "1339": {"lines": [{"number": 193, "content": "    /**", "is_target": false}, {"number": 194, "content": "     * destroys robot and space", "is_target": false}, {"number": 195, "content": "     */", "is_target": false}, {"number": 196, "content": "    virtual void destroy();", "is_target": false}, {"number": 197, "content": "", "is_target": false}, {"number": 198, "content": "    static void mycallback(void *data, dGeomID o1, dGeomID o2);", "is_target": true}, {"number": 199, "content": "", "is_target": false}, {"number": 200, "content": "    /** true if robot was created */", "is_target": false}, {"number": 201, "content": "", "is_target": false}, {"number": 202, "content": "  protected:", "is_target": false}, {"number": 203, "content": "", "is_target": false}]}, "1340": {"lines": [{"number": 223, "content": "      return power;", "is_target": false}, {"number": 224, "content": "    }", "is_target": false}, {"number": 225, "content": "    virtual double getDamping() {", "is_target": false}, {"number": 226, "content": "      return damp;", "is_target": false}, {"number": 227, "content": "    }", "is_target": false}, {"number": 228, "content": "    virtual void setDamping(double _damp) {", "is_target": true}, {"number": 229, "content": "      damp = clip(_damp,0.0,1.0);", "is_target": false}, {"number": 230, "content": "    }", "is_target": false}, {"number": 231, "content": "    /** offetCanceling does not exist for this type of servo */", "is_target": false}, {"number": 232, "content": "    virtual double& offsetCanceling() {", "is_target": false}, {"number": 233, "content": "      dummy=0;", "is_target": false}]}, "1341": {"lines": [{"number": 227, "content": "    }", "is_target": false}, {"number": 228, "content": "    virtual void setDamping(double _damp) {", "is_target": false}, {"number": 229, "content": "      damp = clip(_damp,0.0,1.0);", "is_target": false}, {"number": 230, "content": "    }", "is_target": false}, {"number": 231, "content": "    /** offetCanceling does not exist for this type of servo */", "is_target": false}, {"number": 232, "content": "    virtual double& offsetCanceling() {", "is_target": true}, {"number": 233, "content": "      dummy=0;", "is_target": false}, {"number": 234, "content": "      return dummy;", "is_target": false}, {"number": 235, "content": "    }", "is_target": false}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}]}, "1342": {"lines": [{"number": 233, "content": "      dummy=0;", "is_target": false}, {"number": 234, "content": "      return dummy;", "is_target": false}, {"number": 235, "content": "    }", "is_target": false}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 238, "content": "    virtual void setMaxVel(double maxVel) {", "is_target": true}, {"number": 239, "content": "      this->maxVel = maxVel;", "is_target": false}, {"number": 240, "content": "      pid.KP=maxVel/2;", "is_target": false}, {"number": 241, "content": "    }", "is_target": false}, {"number": 242, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 243, "content": "    virtual double getMaxVel() {", "is_target": false}]}, "1343": {"lines": [{"number": 238, "content": "    virtual void setMaxVel(double maxVel) {", "is_target": false}, {"number": 239, "content": "      this->maxVel = maxVel;", "is_target": false}, {"number": 240, "content": "      pid.KP=maxVel/2;", "is_target": false}, {"number": 241, "content": "    }", "is_target": false}, {"number": 242, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 243, "content": "    virtual double getMaxVel() {", "is_target": true}, {"number": 244, "content": "      return maxVel;", "is_target": false}, {"number": 245, "content": "    }", "is_target": false}, {"number": 246, "content": "", "is_target": false}, {"number": 247, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 248, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}]}, "1344": {"lines": [{"number": 246, "content": "", "is_target": false}, {"number": 247, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 248, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}, {"number": 249, "content": "        however 0 is just in the center of min and max", "is_target": false}, {"number": 250, "content": "    */", "is_target": false}, {"number": 251, "content": "    virtual void set(double pos);", "is_target": true}, {"number": 252, "content": "", "is_target": false}, {"number": 253, "content": "    /** returns the position of the servo in ranges [-1, 1] (scaled by min, max, centered)*/", "is_target": false}, {"number": 254, "content": "    virtual double get() const {", "is_target": false}, {"number": 255, "content": "      double pos =  joint->getPosition1();", "is_target": false}, {"number": 256, "content": "      return 2*(pos-min)/(max-min) - 1;", "is_target": false}]}, "1345": {"lines": [{"number": 249, "content": "        however 0 is just in the center of min and max", "is_target": false}, {"number": 250, "content": "    */", "is_target": false}, {"number": 251, "content": "    virtual void set(double pos);", "is_target": false}, {"number": 252, "content": "", "is_target": false}, {"number": 253, "content": "    /** returns the position of the servo in ranges [-1, 1] (scaled by min, max, centered)*/", "is_target": false}, {"number": 254, "content": "    virtual double get() const {", "is_target": true}, {"number": 255, "content": "      double pos =  joint->getPosition1();", "is_target": false}, {"number": 256, "content": "      return 2*(pos-min)/(max-min) - 1;", "is_target": false}, {"number": 257, "content": "    }", "is_target": false}, {"number": 258, "content": "  protected:", "is_target": false}, {"number": 259, "content": "    AngularMotor1Axis motor;", "is_target": false}]}, "1346": {"lines": [{"number": 282, "content": "    SliderServoVel(const OdeHandle& odeHandle,", "is_target": false}, {"number": 283, "content": "                   OneAxisJoint* joint, double _min, double _max,", "is_target": false}, {"number": 284, "content": "                   double power, double damp=0.05, double maxVel=20,", "is_target": false}, {"number": 285, "content": "                   double jointLimit = 1.3);", "is_target": false}, {"number": 286, "content": "", "is_target": false}, {"number": 287, "content": "    virtual ~SliderServoVel();", "is_target": true}, {"number": 288, "content": "", "is_target": false}, {"number": 289, "content": "    /** adjusts the power of the servo*/", "is_target": false}, {"number": 290, "content": "    virtual void setPower(double _power);", "is_target": false}, {"number": 291, "content": "", "is_target": false}, {"number": 292, "content": "    /** returns the power of the servo*/", "is_target": false}]}, "1347": {"lines": [{"number": 285, "content": "                   double jointLimit = 1.3);", "is_target": false}, {"number": 286, "content": "", "is_target": false}, {"number": 287, "content": "    virtual ~SliderServoVel();", "is_target": false}, {"number": 288, "content": "", "is_target": false}, {"number": 289, "content": "    /** adjusts the power of the servo*/", "is_target": false}, {"number": 290, "content": "    virtual void setPower(double _power);", "is_target": true}, {"number": 291, "content": "", "is_target": false}, {"number": 292, "content": "    /** returns the power of the servo*/", "is_target": false}, {"number": 293, "content": "    virtual double getPower() {", "is_target": false}, {"number": 294, "content": "      return power;", "is_target": false}, {"number": 295, "content": "    }", "is_target": false}]}, "1348": {"lines": [{"number": 288, "content": "", "is_target": false}, {"number": 289, "content": "    /** adjusts the power of the servo*/", "is_target": false}, {"number": 290, "content": "    virtual void setPower(double _power);", "is_target": false}, {"number": 291, "content": "", "is_target": false}, {"number": 292, "content": "    /** returns the power of the servo*/", "is_target": false}, {"number": 293, "content": "    virtual double getPower() {", "is_target": true}, {"number": 294, "content": "      return power;", "is_target": false}, {"number": 295, "content": "    }", "is_target": false}, {"number": 296, "content": "    virtual double getDamping() {", "is_target": false}, {"number": 297, "content": "      return damp;", "is_target": false}, {"number": 298, "content": "    }", "is_target": false}]}, "1349": {"lines": [{"number": 291, "content": "", "is_target": false}, {"number": 292, "content": "    /** returns the power of the servo*/", "is_target": false}, {"number": 293, "content": "    virtual double getPower() {", "is_target": false}, {"number": 294, "content": "      return power;", "is_target": false}, {"number": 295, "content": "    }", "is_target": false}, {"number": 296, "content": "    virtual double getDamping() {", "is_target": true}, {"number": 297, "content": "      return damp;", "is_target": false}, {"number": 298, "content": "    }", "is_target": false}, {"number": 299, "content": "    virtual void setDamping(double _damp) {", "is_target": false}, {"number": 300, "content": "      damp = clip(_damp,0.0,1.0);", "is_target": false}, {"number": 301, "content": "    }", "is_target": false}]}, "1350": {"lines": [{"number": 294, "content": "      return power;", "is_target": false}, {"number": 295, "content": "    }", "is_target": false}, {"number": 296, "content": "    virtual double getDamping() {", "is_target": false}, {"number": 297, "content": "      return damp;", "is_target": false}, {"number": 298, "content": "    }", "is_target": false}, {"number": 299, "content": "    virtual void setDamping(double _damp) {", "is_target": true}, {"number": 300, "content": "      damp = clip(_damp,0.0,1.0);", "is_target": false}, {"number": 301, "content": "    }", "is_target": false}, {"number": 302, "content": "    /** offetCanceling does not exist for this type of servo */", "is_target": false}, {"number": 303, "content": "    virtual double& offsetCanceling() {", "is_target": false}, {"number": 304, "content": "      dummy=0;", "is_target": false}]}, "1351": {"lines": [{"number": 298, "content": "    }", "is_target": false}, {"number": 299, "content": "    virtual void setDamping(double _damp) {", "is_target": false}, {"number": 300, "content": "      damp = clip(_damp,0.0,1.0);", "is_target": false}, {"number": 301, "content": "    }", "is_target": false}, {"number": 302, "content": "    /** offetCanceling does not exist for this type of servo */", "is_target": false}, {"number": 303, "content": "    virtual double& offsetCanceling() {", "is_target": true}, {"number": 304, "content": "      dummy=0;", "is_target": false}, {"number": 305, "content": "      return dummy;", "is_target": false}, {"number": 306, "content": "    }", "is_target": false}, {"number": 307, "content": "", "is_target": false}, {"number": 308, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}]}, "1352": {"lines": [{"number": 304, "content": "      dummy=0;", "is_target": false}, {"number": 305, "content": "      return dummy;", "is_target": false}, {"number": 306, "content": "    }", "is_target": false}, {"number": 307, "content": "", "is_target": false}, {"number": 308, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 309, "content": "    virtual void setMaxVel(double maxVel) {", "is_target": true}, {"number": 310, "content": "      this->maxVel = maxVel;", "is_target": false}, {"number": 311, "content": "      pid.KP=maxVel/2;", "is_target": false}, {"number": 312, "content": "    }", "is_target": false}, {"number": 313, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 314, "content": "    virtual double getMaxVel() {", "is_target": false}]}, "1353": {"lines": [{"number": 309, "content": "    virtual void setMaxVel(double maxVel) {", "is_target": false}, {"number": 310, "content": "      this->maxVel = maxVel;", "is_target": false}, {"number": 311, "content": "      pid.KP=maxVel/2;", "is_target": false}, {"number": 312, "content": "    }", "is_target": false}, {"number": 313, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 314, "content": "    virtual double getMaxVel() {", "is_target": true}, {"number": 315, "content": "      return maxVel;", "is_target": false}, {"number": 316, "content": "    }", "is_target": false}, {"number": 317, "content": "", "is_target": false}, {"number": 318, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 319, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}]}, "1354": {"lines": [{"number": 317, "content": "", "is_target": false}, {"number": 318, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 319, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}, {"number": 320, "content": "        however 0 is just in the center of min and max", "is_target": false}, {"number": 321, "content": "    */", "is_target": false}, {"number": 322, "content": "    virtual void set(double pos);", "is_target": true}, {"number": 323, "content": "", "is_target": false}, {"number": 324, "content": "    /** returns the position of the servo in ranges [-1, 1] (scaled by min, max, centered)*/", "is_target": false}, {"number": 325, "content": "    virtual double get() const {", "is_target": false}, {"number": 326, "content": "      double pos =  joint->getPosition1();", "is_target": false}, {"number": 327, "content": "      return 2*(pos-min)/(max-min) - 1;", "is_target": false}]}, "1355": {"lines": [{"number": 320, "content": "        however 0 is just in the center of min and max", "is_target": false}, {"number": 321, "content": "    */", "is_target": false}, {"number": 322, "content": "    virtual void set(double pos);", "is_target": false}, {"number": 323, "content": "", "is_target": false}, {"number": 324, "content": "    /** returns the position of the servo in ranges [-1, 1] (scaled by min, max, centered)*/", "is_target": false}, {"number": 325, "content": "    virtual double get() const {", "is_target": true}, {"number": 326, "content": "      double pos =  joint->getPosition1();", "is_target": false}, {"number": 327, "content": "      return 2*(pos-min)/(max-min) - 1;", "is_target": false}, {"number": 328, "content": "    }", "is_target": false}, {"number": 329, "content": "", "is_target": false}, {"number": 330, "content": "  protected:", "is_target": false}]}, "1356": {"lines": [{"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    // Delete copy constructor and assignment operator", "is_target": false}, {"number": 51, "content": "    TmpPrimitive(const TmpPrimitive&) = delete;", "is_target": false}, {"number": 52, "content": "    TmpPrimitive& operator=(const TmpPrimitive&) = delete;", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": true}, {"number": 55, "content": "    virtual void deleteObject();", "is_target": false}, {"number": 56, "content": "    virtual void update();", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  private:", "is_target": false}, {"number": 59, "content": "    Primitive* item = nullptr;", "is_target": false}]}, "1357": {"lines": [{"number": 50, "content": "    // Delete copy constructor and assignment operator", "is_target": false}, {"number": 51, "content": "    TmpPrimitive(const TmpPrimitive&) = delete;", "is_target": false}, {"number": 52, "content": "    TmpPrimitive& operator=(const TmpPrimitive&) = delete;", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": false}, {"number": 55, "content": "    virtual void deleteObject();", "is_target": true}, {"number": 56, "content": "    virtual void update();", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  private:", "is_target": false}, {"number": 59, "content": "    Primitive* item = nullptr;", "is_target": false}, {"number": 60, "content": "    char mode = 0;", "is_target": false}]}, "1358": {"lines": [{"number": 51, "content": "    TmpPrimitive(const TmpPrimitive&) = delete;", "is_target": false}, {"number": 52, "content": "    TmpPrimitive& operator=(const TmpPrimitive&) = delete;", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": false}, {"number": 55, "content": "    virtual void deleteObject();", "is_target": false}, {"number": 56, "content": "    virtual void update();", "is_target": true}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  private:", "is_target": false}, {"number": 59, "content": "    Primitive* item = nullptr;", "is_target": false}, {"number": 60, "content": "    char mode = 0;", "is_target": false}, {"number": 61, "content": "    double mass = 0;", "is_target": false}]}, "1359": {"lines": [{"number": 85, "content": "", "is_target": false}, {"number": 86, "content": "    // Delete copy constructor and assignment operator", "is_target": false}, {"number": 87, "content": "    TmpDisplayItem(const TmpDisplayItem&) = delete;", "is_target": false}, {"number": 88, "content": "    TmpDisplayItem& operator=(const TmpDisplayItem&) = delete;", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": true}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "    virtual void deleteObject();", "is_target": false}, {"number": 93, "content": "    virtual void update() override {} // nothing to be done here, because they do not move", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  private:", "is_target": false}]}, "1360": {"lines": [{"number": 126, "content": "", "is_target": false}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "    /**", "is_target": false}, {"number": 129, "content": "     * update the subcomponents", "is_target": false}, {"number": 130, "content": "     */", "is_target": false}, {"number": 131, "content": "    virtual void update();", "is_target": true}, {"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "    /**", "is_target": false}, {"number": 134, "content": "     * sets the pose of the vehicle", "is_target": false}, {"number": 135, "content": "     * @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 136, "content": "     */", "is_target": false}]}, "1361": {"lines": [{"number": 87, "content": "    TmpDisplayItem(const TmpDisplayItem&) = delete;", "is_target": false}, {"number": 88, "content": "    TmpDisplayItem& operator=(const TmpDisplayItem&) = delete;", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": false}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "    virtual void deleteObject();", "is_target": true}, {"number": 93, "content": "    virtual void update() override {} // nothing to be done here, because they do not move", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  private:", "is_target": false}, {"number": 96, "content": "    OSGPrimitive* item;", "is_target": false}, {"number": 97, "content": "    Pose pose;", "is_target": false}]}, "1362": {"lines": [{"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "    /**", "is_target": false}, {"number": 134, "content": "     * sets the pose of the vehicle", "is_target": false}, {"number": 135, "content": "     * @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 136, "content": "     */", "is_target": false}, {"number": 137, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "    virtual void sense(const GlobalData& globalData);", "is_target": false}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 142, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}]}, "1363": {"lines": [{"number": 120, "content": "", "is_target": false}, {"number": 121, "content": "    // Delete copy constructor and assignment operator", "is_target": false}, {"number": 122, "content": "    TmpJoint(const TmpJoint&) = delete;", "is_target": false}, {"number": 123, "content": "    TmpJoint& operator=(const TmpJoint&) = delete;", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": true}, {"number": 126, "content": "", "is_target": false}, {"number": 127, "content": "    virtual void deleteObject();", "is_target": false}, {"number": 128, "content": "    virtual void update();", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "  private:", "is_target": false}]}, "1364": {"lines": [{"number": 134, "content": "     * sets the pose of the vehicle", "is_target": false}, {"number": 135, "content": "     * @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 136, "content": "     */", "is_target": false}, {"number": 137, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "    virtual void sense(const GlobalData& globalData);", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 142, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 143, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 144, "content": "        @return number of actually written sensors", "is_target": false}]}, "1365": {"lines": [{"number": 122, "content": "    TmpJoint(const TmpJoint&) = delete;", "is_target": false}, {"number": 123, "content": "    TmpJoint& operator=(const TmpJoint&) = delete;", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": false}, {"number": 126, "content": "", "is_target": false}, {"number": 127, "content": "    virtual void deleteObject();", "is_target": true}, {"number": 128, "content": "    virtual void update();", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "  private:", "is_target": false}, {"number": 131, "content": "    Joint* joint = nullptr;", "is_target": false}, {"number": 132, "content": "    Color color;", "is_target": false}]}, "1366": {"lines": [{"number": 141, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 142, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 143, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 144, "content": "        @return number of actually written sensors", "is_target": false}, {"number": 145, "content": "    */", "is_target": false}, {"number": 146, "content": "    virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": true}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 149, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 150, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 151, "content": "    */", "is_target": false}]}, "1367": {"lines": [{"number": 123, "content": "    TmpJoint& operator=(const TmpJoint&) = delete;", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": false}, {"number": 126, "content": "", "is_target": false}, {"number": 127, "content": "    virtual void deleteObject();", "is_target": false}, {"number": 128, "content": "    virtual void update();", "is_target": true}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "  private:", "is_target": false}, {"number": 131, "content": "    Joint* joint = nullptr;", "is_target": false}, {"number": 132, "content": "    Color color;", "is_target": false}, {"number": 133, "content": "    std::string colorname;", "is_target": false}]}, "1368": {"lines": [{"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 149, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 150, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 151, "content": "    */", "is_target": false}, {"number": 152, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 153, "content": "", "is_target": false}, {"number": 154, "content": "    /** returns number of sensors", "is_target": false}, {"number": 155, "content": "     */", "is_target": false}, {"number": 156, "content": "    virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 157, "content": "", "is_target": false}]}, "1369": {"lines": [{"number": 69, "content": "     */", "is_target": false}, {"number": 70, "content": "    OdeRobot(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 71, "content": "             const std::string& name, const std::string& revision);", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "    /// calls cleanup()", "is_target": false}, {"number": 74, "content": "    virtual ~OdeRobot();", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "    // Rule of 5 - delete copy operations, allow move", "is_target": false}, {"number": 77, "content": "    OdeRobot(const OdeRobot&) = delete;", "is_target": false}, {"number": 78, "content": "    OdeRobot& operator=(const OdeRobot&) = delete;", "is_target": false}, {"number": 79, "content": "    OdeRobot(OdeRobot&&) = delete;", "is_target": false}]}, "1370": {"lines": [{"number": 151, "content": "    */", "is_target": false}, {"number": 152, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": false}, {"number": 153, "content": "", "is_target": false}, {"number": 154, "content": "    /** returns number of sensors", "is_target": false}, {"number": 155, "content": "     */", "is_target": false}, {"number": 156, "content": "    virtual int getSensorNumberIntern() const;", "is_target": true}, {"number": 157, "content": "", "is_target": false}, {"number": 158, "content": "    /** returns number of motors", "is_target": false}, {"number": 159, "content": "     */", "is_target": false}, {"number": 160, "content": "    virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 161, "content": "", "is_target": false}]}, "1371": {"lines": [{"number": 219, "content": "    virtual Joints& getAllJoints() { return joints; }", "is_target": false}, {"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "    /* ********** STORABLE INTERFACE **************** */", "is_target": false}, {"number": 222, "content": "    virtual bool store(FILE* f)  const override;", "is_target": false}, {"number": 223, "content": "", "is_target": false}, {"number": 224, "content": "    virtual bool restore(FILE* f);", "is_target": true}, {"number": 225, "content": "    /* ********** END STORABLE INTERFACE ************ */", "is_target": false}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "    /** relocates robot such its primitive with the given ID", "is_target": false}, {"number": 228, "content": "        is at the new postion (keep current pose).", "is_target": false}, {"number": 229, "content": "        If primitiveID is -1 then the main primitive is used.", "is_target": false}]}, "1372": {"lines": [{"number": 155, "content": "     */", "is_target": false}, {"number": 156, "content": "    virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 157, "content": "", "is_target": false}, {"number": 158, "content": "    /** returns number of motors", "is_target": false}, {"number": 159, "content": "     */", "is_target": false}, {"number": 160, "content": "    virtual int getMotorNumberIntern() const;", "is_target": true}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "    /** returns a vector with the positions of all segments of the robot", "is_target": false}, {"number": 163, "content": "        @param poslist vector of positions (of all robot segments)", "is_target": false}, {"number": 164, "content": "        @return length of the list", "is_target": false}, {"number": 165, "content": "    */", "is_target": false}]}, "1373": {"lines": [{"number": 39, "content": "       @param dimensions bit mask for the dimensions to sense. Default: X | Y | Z (all dimensions)", "is_target": false}, {"number": 40, "content": "       @see Dimensions", "is_target": false}, {"number": 41, "content": "       If exact static_cast<relative>(positions) should be produced, use maxDistance=1 and exponent=1", "is_target": false}, {"number": 42, "content": "     */", "is_target": false}, {"number": 43, "content": "    RelativePositionSensor(double maxDistance, double exponent, short dimensions = Sensor::X | Sensor::Y | Sensor::Z , bool local_coordinates = false);", "is_target": false}, {"number": 44, "content": "    virtual ~RelativePositionSensor() {}", "is_target": true}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 47, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}]}, "1374": {"lines": [{"number": 164, "content": "        @return length of the list", "is_target": false}, {"number": 165, "content": "    */", "is_target": false}, {"number": 166, "content": "    //  virtual int getSegmentsPosition(vector<Position> &poslist);", "is_target": false}, {"number": 167, "content": "", "is_target": false}, {"number": 168, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 169, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 170, "content": "", "is_target": false}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "  protected:", "is_target": false}, {"number": 173, "content": "    /**", "is_target": false}, {"number": 174, "content": "     * Returns the palm as the main object of the robot,", "is_target": false}]}, "1375": {"lines": [{"number": 41, "content": "       If exact static_cast<relative>(positions) should be produced, use maxDistance=1 and exponent=1", "is_target": false}, {"number": 42, "content": "     */", "is_target": false}, {"number": 43, "content": "    RelativePositionSensor(double maxDistance, double exponent, short dimensions = Sensor::X | Sensor::Y | Sensor::Z , bool local_coordinates = false);", "is_target": false}, {"number": 44, "content": "    virtual ~RelativePositionSensor() {}", "is_target": false}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 47, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 50, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 51, "content": "", "is_target": false}]}, "1376": {"lines": [{"number": 172, "content": "  protected:", "is_target": false}, {"number": 173, "content": "    /**", "is_target": false}, {"number": 174, "content": "     * Returns the palm as the main object of the robot,", "is_target": false}, {"number": 175, "content": "     * which is used for position and speed tracking.", "is_target": false}, {"number": 176, "content": "     */", "is_target": false}, {"number": 177, "content": "    virtual const Primitive* getMainPrimitive() const {", "is_target": true}, {"number": 178, "content": "      if(!objects.empty()){", "is_target": false}, {"number": 179, "content": "        return (objects[0]); // returns forearm for fixation", "is_target": false}, {"number": 180, "content": "        //return (objects[1]); // returns palm", "is_target": false}, {"number": 181, "content": "      }else return 0;", "is_target": false}, {"number": 182, "content": "    }", "is_target": false}]}, "1377": {"lines": [{"number": 44, "content": "    virtual ~RelativePositionSensor() {}", "is_target": false}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 47, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": true}, {"number": 50, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    /**", "is_target": false}, {"number": 53, "content": "       Sets the reference object we use for relative position measureing.", "is_target": false}, {"number": 54, "content": "       If not set or 0 then the origin is used.", "is_target": false}]}, "1378": {"lines": [{"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 47, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 50, "content": "    virtual std::list<sensor> getList()  const;", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    /**", "is_target": false}, {"number": 53, "content": "       Sets the reference object we use for relative position measureing.", "is_target": false}, {"number": 54, "content": "       If not set or 0 then the origin is used.", "is_target": false}, {"number": 55, "content": "       This can be another robot an obstacle (light source) and such like", "is_target": false}]}, "1379": {"lines": [{"number": 60, "content": "     * @param objectsOfInterest a list of primitives (objects, obstacles) to which the robot will measure its relative position", "is_target": false}, {"number": 61, "content": "     */", "is_target": false}, {"number": 62, "content": "    Kuka(const OdeHandle& odeHandle, const OsgHandle& osgHandle, const std::string& name,", "is_target": false}, {"number": 63, "content": "      double size=1, std::vector<Primitive*> objectsOfInterest = std::vector<Primitive*>());", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "    virtual ~Kuka() {", "is_target": true}, {"number": 66, "content": "      destroy();", "is_target": false}, {"number": 67, "content": "    };", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "    /**", "is_target": false}, {"number": 70, "content": "     * updates the OSG nodes of the vehicle", "is_target": false}]}, "1380": {"lines": [{"number": 67, "content": "    };", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "    /**", "is_target": false}, {"number": 70, "content": "     * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 71, "content": "     */", "is_target": false}, {"number": 72, "content": "    virtual void update();", "is_target": true}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 76, "content": "    @param pose desired pose matrix", "is_target": false}, {"number": 77, "content": "    */", "is_target": false}]}, "1381": {"lines": [{"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 76, "content": "    @param pose desired pose matrix", "is_target": false}, {"number": 77, "content": "    */", "is_target": false}, {"number": 78, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "    /** returns actual sensorvalues see kuka.cpp to see what values are returned", "is_target": false}, {"number": 81, "content": "    @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 82, "content": "    @param sensornumber length of the sensor array", "is_target": false}, {"number": 83, "content": "    @return number of actually written sensors", "is_target": false}]}, "1382": {"lines": [{"number": 80, "content": "    /** returns actual sensorvalues see kuka.cpp to see what values are returned", "is_target": false}, {"number": 81, "content": "    @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 82, "content": "    @param sensornumber length of the sensor array", "is_target": false}, {"number": 83, "content": "    @return number of actually written sensors", "is_target": false}, {"number": 84, "content": "    */", "is_target": false}, {"number": 85, "content": "    virtual int getSensorsIntern(sensor* sensors, int sensornumber);", "is_target": true}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 88, "content": "    @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 89, "content": "    @param motornumber length of the motor array", "is_target": false}, {"number": 90, "content": "    */", "is_target": false}]}, "1383": {"lines": [{"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 88, "content": "    @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 89, "content": "    @param motornumber length of the motor array", "is_target": false}, {"number": 90, "content": "    */", "is_target": false}, {"number": 91, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "    /** blocks and reactivates joints during the simulations", "is_target": false}, {"number": 94, "content": "        the blocked joint will be set to its initial position", "is_target": false}, {"number": 95, "content": "        @param jointNo the index of the only joint that is to be blocked", "is_target": false}, {"number": 96, "content": "    */", "is_target": false}]}, "1384": {"lines": [{"number": 39, "content": "class BackCallerVector : public std::vector<_Tp, _Alloc>, public BackCaller {", "is_target": false}, {"number": 40, "content": "public:", "is_target": false}, {"number": 41, "content": "  using iterator = typename std::vector<_Tp, _Alloc>::iterator;", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "  BackCallerVector() {}", "is_target": false}, {"number": 44, "content": "  virtual ~BackCallerVector() {", "is_target": true}, {"number": 45, "content": "    callBack(BACKCALLER_VECTOR_BEING_DELETED);", "is_target": false}, {"number": 46, "content": "  }", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "  /**", "is_target": false}, {"number": 49, "content": "   * Indicates that the list/vector has been modified,", "is_target": false}]}, "1385": {"lines": [{"number": 238, "content": "    virtual void setMaxVel(double maxVel) {", "is_target": false}, {"number": 239, "content": "      this->maxVel = maxVel;", "is_target": false}, {"number": 240, "content": "      pid.KP=maxVel/2;", "is_target": false}, {"number": 241, "content": "    }", "is_target": false}, {"number": 242, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 243, "content": "    virtual double getMaxVel() {", "is_target": true}, {"number": 244, "content": "      return maxVel;", "is_target": false}, {"number": 245, "content": "    }", "is_target": false}, {"number": 246, "content": "", "is_target": false}, {"number": 247, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 248, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}]}, "1386": {"lines": [{"number": 309, "content": "    virtual void setMaxVel(double maxVel) {", "is_target": false}, {"number": 310, "content": "      this->maxVel = maxVel;", "is_target": false}, {"number": 311, "content": "      pid.KP=maxVel/2;", "is_target": false}, {"number": 312, "content": "    }", "is_target": false}, {"number": 313, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 314, "content": "    virtual double getMaxVel() {", "is_target": true}, {"number": 315, "content": "      return maxVel;", "is_target": false}, {"number": 316, "content": "    }", "is_target": false}, {"number": 317, "content": "", "is_target": false}, {"number": 318, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 319, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}]}, "1387": {"lines": [{"number": 417, "content": "", "is_target": false}, {"number": 418, "content": "    /** returns the maximal power of a motor", "is_target": false}, {"number": 419, "content": "    */", "is_target": false}, {"number": 420, "content": "    int Kuka::getPower( int i){", "is_target": false}, {"number": 421, "content": "    if (i<2) return 200;", "is_target": false}, {"number": 422, "content": "    if (i>1 and i<5) return 100;", "is_target": true}, {"number": 423, "content": "    else return 30;", "is_target": false}, {"number": 424, "content": "    };", "is_target": false}, {"number": 425, "content": "", "is_target": false}, {"number": 426, "content": "    /** returns the maximal velocity of a motor", "is_target": false}, {"number": 427, "content": "    */", "is_target": false}]}, "1388": {"lines": [{"number": 147, "content": "      int n;", "is_target": false}, {"number": 148, "content": "      const int N = 10;", "is_target": false}, {"number": 149, "content": "      dContact contact[N];", "is_target": false}, {"number": 150, "content": "      n=dCollide (o1,o2,N,&contact[0].geom,sizeof(dContact));", "is_target": false}, {"number": 151, "content": "      if(n >0){", "is_target": false}, {"number": 152, "content": "        for (int i=0; i<n; ++i)  {", "is_target": true}, {"number": 153, "content": "          contact[i].surface.mode = dContactSlip1 | dContactSlip2 |", "is_target": false}, {"number": 154, "content": "            dContactSoftERP | dContactSoftCFM | dContactApprox1;", "is_target": false}, {"number": 155, "content": "          contact[i].surface.mu = dInfinity;", "is_target": false}, {"number": 156, "content": "          contact[i].surface.slip1 = 0.1;", "is_target": false}, {"number": 157, "content": "          contact[i].surface.slip2 = 0.1;", "is_target": false}]}, "1389": {"lines": [{"number": 49, "content": "    SchlangeServo ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 50, "content": "                    const SchlangeConf& conf,", "is_target": false}, {"number": 51, "content": "                    const std::string& name, const std::string& revision=\"\");", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual ~SchlangeServo();", "is_target": true}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    /**", "is_target": false}, {"number": 57, "content": "     *Reads the actual motor commands from an array,", "is_target": false}, {"number": 58, "content": "     *an sets all motors of the snake to this values.", "is_target": false}, {"number": 59, "content": "     *It is an linear allocation.", "is_target": false}]}, "1390": {"lines": [{"number": 58, "content": "     *an sets all motors of the snake to this values.", "is_target": false}, {"number": 59, "content": "     *It is an linear allocation.", "is_target": false}, {"number": 60, "content": "     *@param motors pointer to the array, motor values are scaled to [-1,1]", "is_target": false}, {"number": 61, "content": "     *@param motornumber length of the motor array", "is_target": false}, {"number": 62, "content": "     **/", "is_target": false}, {"number": 63, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": true}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "    /**", "is_target": false}, {"number": 66, "content": "     *Writes the sensor values to an array in the memory.", "is_target": false}, {"number": 67, "content": "     *@param sensors pointer to the array", "is_target": false}, {"number": 68, "content": "     *@param sensornumber length of the sensor array", "is_target": false}]}, "1391": {"lines": [{"number": 66, "content": "     *Writes the sensor values to an array in the memory.", "is_target": false}, {"number": 67, "content": "     *@param sensors pointer to the array", "is_target": false}, {"number": 68, "content": "     *@param sensornumber length of the sensor array", "is_target": false}, {"number": 69, "content": "     *@return number of actually written sensors", "is_target": false}, {"number": 70, "content": "     **/", "is_target": false}, {"number": 71, "content": "    virtual int getSensorsIntern( double* sensors, int sensornumber );", "is_target": true}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "    /** returns number of sensors", "is_target": false}, {"number": 74, "content": "     */", "is_target": false}, {"number": 75, "content": "    virtual int getSensorNumberIntern() const override { assert(created); return servos.size(); }", "is_target": false}, {"number": 76, "content": "", "is_target": false}]}, "1392": {"lines": [{"number": 77, "content": "    /** returns number of motors", "is_target": false}, {"number": 78, "content": "     */", "is_target": false}, {"number": 79, "content": "    virtual int getMotorNumberIntern() const override { assert(created); return servos.size(); }", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 82, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  private:", "is_target": false}, {"number": 85, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 86, "content": "    virtual void destroy();", "is_target": false}, {"number": 87, "content": "  };", "is_target": false}]}, "1393": {"lines": [{"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 82, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  private:", "is_target": false}, {"number": 85, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": true}, {"number": 86, "content": "    virtual void destroy();", "is_target": false}, {"number": 87, "content": "  };", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "}", "is_target": false}, {"number": 90, "content": "", "is_target": false}]}, "1394": {"lines": [{"number": 81, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 82, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  private:", "is_target": false}, {"number": 85, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 86, "content": "    virtual void destroy();", "is_target": true}, {"number": 87, "content": "  };", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "}", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "/*", "is_target": false}]}, "1395": {"lines": [{"number": 132, "content": "    c.irSide=false;", "is_target": false}, {"number": 133, "content": "    c.drawIRs=true;", "is_target": false}, {"number": 134, "content": "    c.irsensorscale=1.5;", "is_target": false}, {"number": 135, "content": "    c.irCharacter=1;", "is_target": false}, {"number": 136, "content": "    c.irSensorTempl=0;", "is_target": false}, {"number": 137, "content": "    c.motor_ir_before_sensors=false;", "is_target": true}, {"number": 138, "content": "    c.brake=0;", "is_target": false}, {"number": 139, "content": "   return c;", "is_target": false}, {"number": 140, "content": "  }", "is_target": false}, {"number": 141, "content": "", "is_target": false}, {"number": 142, "content": "  virtual void update();", "is_target": false}]}, "1396": {"lines": [{"number": 54, "content": "  // - size of arm is adjustable", "is_target": false}, {"number": 55, "content": "  // - objectsOf Interest holds all primitives the robot to which the robot will measure its relative position", "is_target": false}, {"number": 56, "content": "  Kuka::Kuka(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 57, "content": "           const std::string& name,", "is_target": false}, {"number": 58, "content": "           double size,", "is_target": false}, {"number": 59, "content": "\tstd::vector<Primitive*> objectsOfInterest)", "is_target": true}, {"number": 60, "content": "    : // calling OdeRobots construtor with name of the actual robot", "is_target": false}, {"number": 61, "content": "      OdeRobot(odeHandle, osgHandle, name, \"$Id$\")", "is_target": false}, {"number": 62, "content": "  {", "is_target": false}, {"number": 63, "content": "    // robot is not created till now", "is_target": false}, {"number": 64, "content": "    created=false;", "is_target": false}]}, "1397": {"lines": [{"number": 122, "content": "      }", "is_target": false}, {"number": 123, "content": "      return len;", "is_target": false}, {"number": 124, "content": "    }", "is_target": false}, {"number": 125, "content": "", "is_target": false}, {"number": 126, "content": "    // parse a string with __PLACEHOLDER_3__ or __PLACEHOLDER_4__ for specifing the sensors dimension", "is_target": false}, {"number": 127, "content": "    static Dimensions parseSensorDimension(char* str){", "is_target": true}, {"number": 128, "content": "      int val=0;", "is_target": false}, {"number": 129, "content": "      for(unsigned int i=0; i<strlen(str); ++i) {", "is_target": false}, {"number": 130, "content": "        switch(str[i]){", "is_target": false}, {"number": 131, "content": "        case 'X':", "is_target": false}, {"number": 132, "content": "        case 'x': val|=X; break;", "is_target": false}]}, "1398": {"lines": [{"number": 158, "content": "  virtual Primitive* getMainPrimitive() const { return object[Base]; }", "is_target": false}, {"number": 159, "content": "", "is_target": false}, {"number": 160, "content": "protected:", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "  virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 163, "content": "  virtual void destroy();", "is_target": true}, {"number": 164, "content": "", "is_target": false}, {"number": 165, "content": "", "is_target": false}, {"number": 166, "content": "};", "is_target": false}, {"number": 167, "content": "", "is_target": false}, {"number": 168, "content": "}", "is_target": false}]}, "1399": {"lines": [{"number": 37, "content": "       @param exponent exponent of the sensor characteritic (default: 1 (linear))", "is_target": false}, {"number": 38, "content": "       @param size size of sensor in simulation", "is_target": false}, {"number": 39, "content": "       @param range maximum range of the IR sensor", "is_target": false}, {"number": 40, "content": "       @param drawMode draw mode of the sensor", "is_target": false}, {"number": 41, "content": "    */", "is_target": false}, {"number": 42, "content": "    IRSensor(double exponent = 1, double size = 0.05, double range = 2,", "is_target": true}, {"number": 43, "content": "             RaySensor::rayDrawMode drawMode = RaySensor::drawSensor);", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "    //Override sense to include characteristic", "is_target": false}, {"number": 46, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 47, "content": "", "is_target": false}]}, "1400": {"lines": [{"number": 34, "content": "   */", "is_target": false}, {"number": 35, "content": "  class PhysicalSensor : public Sensor {", "is_target": false}, {"number": 36, "content": "  public:", "is_target": false}, {"number": 37, "content": "", "is_target": false}, {"number": 38, "content": "    PhysicalSensor() : isInitDataSet(false) {}", "is_target": false}, {"number": 39, "content": "    virtual ~PhysicalSensor() {}", "is_target": true}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "    /** sets the initial data structures", "is_target": false}, {"number": 42, "content": "        @param pose position and orientation of sensor (e.g. camera) wrt.", "is_target": false}, {"number": 43, "content": "        the primitive that is given at init()", "is_target": false}, {"number": 44, "content": "     */", "is_target": false}]}, "1401": {"lines": [{"number": 52, "content": "     * @param range maximum range of the Ray sensor", "is_target": false}, {"number": 53, "content": "     * @param drawMode draw mode of the sensor", "is_target": false}, {"number": 54, "content": "     */", "is_target": false}, {"number": 55, "content": "    RaySensor(double size , double range, rayDrawMode drawMode);", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "    ~RaySensor();", "is_target": true}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "    ///Create a copy of this without initialization", "is_target": false}, {"number": 60, "content": "    virtual RaySensor* clone() const;", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    void setPose(const osg::Matrix& pose);", "is_target": false}]}, "1402": {"lines": [{"number": 57, "content": "    ~RaySensor();", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "    ///Create a copy of this without initialization", "is_target": false}, {"number": 60, "content": "    virtual RaySensor* clone() const;", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    void setPose(const osg::Matrix& pose);", "is_target": true}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "    void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "    bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 67, "content": "", "is_target": false}]}, "1403": {"lines": [{"number": 59, "content": "    ///Create a copy of this without initialization", "is_target": false}, {"number": 60, "content": "    virtual RaySensor* clone() const;", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    void setPose(const osg::Matrix& pose);", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "    void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "    bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "    int get(sensor* sensors, int length)  const;", "is_target": false}, {"number": 69, "content": "", "is_target": false}]}, "1404": {"lines": [{"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    void setPose(const osg::Matrix& pose);", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "    void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "    bool sense(const GlobalData& globaldata);", "is_target": true}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "    int get(sensor* sensors, int length)  const;", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "    std::list<sensor> getList()  const;", "is_target": false}, {"number": 71, "content": "", "is_target": false}]}, "1405": {"lines": [{"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "    void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "    bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "    int get(sensor* sensors, int length)  const;", "is_target": true}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "    std::list<sensor> getList()  const;", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 73, "content": "", "is_target": false}]}, "1406": {"lines": [{"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "    bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "    int get(sensor* sensors, int length)  const;", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "    std::list<sensor> getList()  const;", "is_target": true}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "    virtual void update();", "is_target": false}, {"number": 75, "content": "", "is_target": false}]}, "1407": {"lines": [{"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "    std::list<sensor> getList()  const;", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "    virtual void update();", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "    ///Set maximum range of ray", "is_target": false}, {"number": 77, "content": "    virtual void setRange(double range);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "    ///Set draw mode of ray", "is_target": false}]}, "1408": {"lines": [{"number": 36, "content": " */", "is_target": false}, {"number": 37, "content": "  class RaySensorBank : public PhysicalSensor {", "is_target": false}, {"number": 38, "content": "  public:", "is_target": false}, {"number": 39, "content": "    RaySensorBank();", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "    virtual ~RaySensorBank();", "is_target": true}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "    virtual void setInitData(const OdeHandle& odeHandle,", "is_target": false}, {"number": 44, "content": "                             const OsgHandle& osgHandle,", "is_target": false}, {"number": 45, "content": "                             const osg::Matrix& pose);", "is_target": false}, {"number": 46, "content": "", "is_target": false}]}, "1409": {"lines": [{"number": 38, "content": "  public:", "is_target": false}, {"number": 39, "content": "    RaySensorBank();", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "    virtual ~RaySensorBank();", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "    virtual void setInitData(const OdeHandle& odeHandle,", "is_target": true}, {"number": 44, "content": "                             const OsgHandle& osgHandle,", "is_target": false}, {"number": 45, "content": "                             const osg::Matrix& pose);", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    // ---- Sensor interface -----", "is_target": false}, {"number": 48, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}]}, "1410": {"lines": [{"number": 43, "content": "    virtual void setInitData(const OdeHandle& odeHandle,", "is_target": false}, {"number": 44, "content": "                             const OsgHandle& osgHandle,", "is_target": false}, {"number": 45, "content": "                             const osg::Matrix& pose);", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    // ---- Sensor interface -----", "is_target": false}, {"number": 48, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 53, "content": "", "is_target": false}]}, "1411": {"lines": [{"number": 47, "content": "    // ---- Sensor interface -----", "is_target": false}, {"number": 48, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": true}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 55, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "    virtual void update();", "is_target": false}]}, "1412": {"lines": [{"number": 50, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 55, "content": "    virtual std::list<sensor> getList()  const;", "is_target": true}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "    virtual void update();", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "    /** registers a new sensor at the sensor bank. The body and the pose have to be provided.", "is_target": false}, {"number": 60, "content": "        @param raysensor RaySensor to add", "is_target": false}]}, "1413": {"lines": [{"number": 52, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 55, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "    virtual void update();", "is_target": true}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "    /** registers a new sensor at the sensor bank. The body and the pose have to be provided.", "is_target": false}, {"number": 60, "content": "        @param raysensor RaySensor to add", "is_target": false}, {"number": 61, "content": "        @param body body to which the sensor should be connected", "is_target": false}, {"number": 62, "content": "        @param pose relative position/orientation", "is_target": false}]}, "1414": {"lines": [{"number": 106, "content": "                       const DiscusConf& conf,", "is_target": false}, {"number": 107, "content": "                       const std::string& name, const std::string& revision, double transparency);", "is_target": false}, {"number": 108, "content": "  /// initialises some internal variables", "is_target": false}, {"number": 109, "content": "  void init();", "is_target": false}, {"number": 110, "content": "public:", "is_target": false}, {"number": 111, "content": "  virtual ~Discus();", "is_target": true}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "", "is_target": false}, {"number": 114, "content": "  /// default configuration", "is_target": false}, {"number": 115, "content": "  static DiscusConf getDefaultConf() {", "is_target": false}, {"number": 116, "content": "    DiscusConf c;", "is_target": false}]}, "1415": {"lines": [{"number": 137, "content": "    c.motor_ir_before_sensors=false;", "is_target": false}, {"number": 138, "content": "    c.brake=0;", "is_target": false}, {"number": 139, "content": "   return c;", "is_target": false}, {"number": 140, "content": "  }", "is_target": false}, {"number": 141, "content": "", "is_target": false}, {"number": 142, "content": "  virtual void update();", "is_target": true}, {"number": 143, "content": "", "is_target": false}, {"number": 144, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 147, "content": "", "is_target": false}]}, "1416": {"lines": [{"number": 139, "content": "   return c;", "is_target": false}, {"number": 140, "content": "  }", "is_target": false}, {"number": 141, "content": "", "is_target": false}, {"number": 142, "content": "  virtual void update();", "is_target": false}, {"number": 143, "content": "", "is_target": false}, {"number": 144, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "  virtual void sense(const GlobalData& globalData);", "is_target": false}, {"number": 149, "content": "", "is_target": false}]}, "1417": {"lines": [{"number": 141, "content": "", "is_target": false}, {"number": 142, "content": "  virtual void update();", "is_target": false}, {"number": 143, "content": "", "is_target": false}, {"number": 144, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": true}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "  virtual void sense(const GlobalData& globalData);", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "  virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 151, "content": "", "is_target": false}]}, "1418": {"lines": [{"number": 143, "content": "", "is_target": false}, {"number": 144, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "  virtual void sense(const GlobalData& globalData);", "is_target": true}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "  virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "  virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 153, "content": "", "is_target": false}]}, "1419": {"lines": [{"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "  virtual void sense(const GlobalData& globalData);", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "  virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": true}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "  virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 153, "content": "", "is_target": false}, {"number": 154, "content": "  virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 155, "content": "", "is_target": false}]}, "1420": {"lines": [{"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "  virtual void sense(const GlobalData& globalData);", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "  virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "  virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": true}, {"number": 153, "content": "", "is_target": false}, {"number": 154, "content": "  virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "  virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 157, "content": "", "is_target": false}]}, "1421": {"lines": [{"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "  virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "  virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 153, "content": "", "is_target": false}, {"number": 154, "content": "  virtual int getMotorNumberIntern() const;", "is_target": true}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "  virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 157, "content": "", "is_target": false}, {"number": 158, "content": "  virtual Primitive* getMainPrimitive() const { return object[Base]; }", "is_target": false}, {"number": 159, "content": "", "is_target": false}]}, "1422": {"lines": [{"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "  virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 153, "content": "", "is_target": false}, {"number": 154, "content": "  virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "  virtual int getSensorNumberIntern() const;", "is_target": true}, {"number": 157, "content": "", "is_target": false}, {"number": 158, "content": "  virtual Primitive* getMainPrimitive() const { return object[Base]; }", "is_target": false}, {"number": 159, "content": "", "is_target": false}, {"number": 160, "content": "protected:", "is_target": false}, {"number": 161, "content": "", "is_target": false}]}, "1423": {"lines": [{"number": 153, "content": "", "is_target": false}, {"number": 154, "content": "  virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "  virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 157, "content": "", "is_target": false}, {"number": 158, "content": "  virtual Primitive* getMainPrimitive() const { return object[Base]; }", "is_target": true}, {"number": 159, "content": "", "is_target": false}, {"number": 160, "content": "protected:", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "  virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 163, "content": "  virtual void destroy();", "is_target": false}]}, "1424": {"lines": [{"number": 41, "content": "    */", "is_target": false}, {"number": 42, "content": "    IRSensor(double exponent = 1, double size = 0.05, double range = 2,", "is_target": false}, {"number": 43, "content": "             RaySensor::rayDrawMode drawMode = RaySensor::drawSensor);", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "    //Override sense to include characteristic", "is_target": false}, {"number": 46, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": true}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "    //Override to return value given by characteristic", "is_target": false}, {"number": 49, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 50, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 51, "content": "", "is_target": false}]}, "1425": {"lines": [{"number": 45, "content": "    //Override sense to include characteristic", "is_target": false}, {"number": 46, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "    //Override to return value given by characteristic", "is_target": false}, {"number": 49, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 50, "content": "    virtual std::list<sensor> getList()  const;", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    //Directly return value (needed for backward compatibility", "is_target": false}, {"number": 53, "content": "    virtual double getValue() const;", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    /// returns the exponent of the sensor characteritic (default: 1 (linear))", "is_target": false}]}, "1426": {"lines": [{"number": 270, "content": "      }", "is_target": false}, {"number": 271, "content": "    }", "is_target": false}, {"number": 272, "content": "    if (conf.irAxis3){", "is_target": false}, {"number": 273, "content": "      for(int i=-1; i<2; i+=2) {", "is_target": false}, {"number": 274, "content": "        RaySensor* sensor = conf.irSensorTempl->clone();", "is_target": false}, {"number": 275, "content": "        double stabilizerlength = (conf.stabdiameter+conf.relativewidth) * conf.diameter;", "is_target": true}, {"number": 276, "content": "        Matrix R = Matrix::rotate( i==1 ? 0 : M_PI, 1, 0, 0) *", "is_target": false}, {"number": 277, "content": "          Matrix::translate(0,0,i*(stabilizerlength/2-sensors_inside));", "is_target": false}, {"number": 278, "content": "        irSensorBank.registerSensor(sensor, object[Base], R, sensorrange, drawMode);", "is_target": false}, {"number": 279, "content": "      }", "is_target": false}, {"number": 280, "content": "    }", "is_target": false}]}, "1427": {"lines": [{"number": 30, "content": "namespace lpzrobots{", "is_target": false}, {"number": 31, "content": "", "is_target": false}, {"number": 32, "content": "class Color : public osg::Vec4 {", "is_target": false}, {"number": 33, "content": "public:", "is_target": false}, {"number": 34, "content": "  Color() : osg::Vec4() {}", "is_target": false}, {"number": 35, "content": "  Color(const osg::Vec4& color) ", "is_target": true}, {"number": 36, "content": "    : osg::Vec4(color)  {};", "is_target": false}, {"number": 37, "content": "  Color(float r, float g, float b)", "is_target": false}, {"number": 38, "content": "    : osg::Vec4(r, g, b, 1.0){} ", "is_target": false}, {"number": 39, "content": "  Color(float r, float g, float b, float a)", "is_target": false}, {"number": 40, "content": "    : osg::Vec4(r, g, b, a){} ", "is_target": false}]}, "1428": {"lines": [{"number": 57, "content": "  class GlobalData : public GlobalDataBase {", "is_target": false}, {"number": 58, "content": "    public:", "is_target": false}, {"number": 59, "content": "      GlobalData() : environment(0), time(0), sim_step(0) {", "is_target": false}, {"number": 60, "content": "      }", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "      virtual ~GlobalData() {}", "is_target": true}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "      OdeConfig odeConfig;", "is_target": false}, {"number": 65, "content": "      ObstacleList obstacles;", "is_target": false}, {"number": 66, "content": "      OdeAgentList agents;", "is_target": false}, {"number": 67, "content": "      Primitive* environment; /// < this is used to be able to attach objects to the static environment", "is_target": false}]}, "1429": {"lines": [{"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "      double time = 0;", "is_target": false}, {"number": 76, "content": "      long int sim_step; ///< time steps since start", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "      /// returns the list of all agents", "is_target": false}, {"number": 79, "content": "      virtual AgentList& getAgents();", "is_target": true}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "      /// adds a temporary display item with given life duration in sec", "is_target": false}, {"number": 83, "content": "      virtual void addTmpObject(TmpObject* i, double duration);", "is_target": false}, {"number": 84, "content": "", "is_target": false}]}, "1430": {"lines": [{"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "    enum SimulationState { none, initialised, running, closed };", "is_target": false}, {"number": 62, "content": "    enum CameraMode {Static=0, Follow, TV, Race};", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "    Simulation();", "is_target": false}, {"number": 65, "content": "    virtual ~Simulation();", "is_target": true}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "    /** starts the Simulation. Do not overload it.", "is_target": false}, {"number": 68, "content": "        This function returns of the simulation is terminated.", "is_target": false}, {"number": 69, "content": "        @return: true if closed regulary, false on error", "is_target": false}, {"number": 70, "content": "    */", "is_target": false}]}, "1431": {"lines": [{"number": 133, "content": "", "is_target": false}, {"number": 134, "content": "    virtual void odeStep();", "is_target": false}, {"number": 135, "content": "", "is_target": false}, {"number": 136, "content": "    virtual void osgStep();", "is_target": false}, {"number": 137, "content": "", "is_target": false}, {"number": 138, "content": "    virtual void doOnCallBack(BackCaller *src, BackCaller::CallbackableType type=BackCaller::DEFAULT_CALLBACKABLE_TYPE);", "is_target": true}, {"number": 139, "content": "", "is_target": false}, {"number": 140, "content": "  protected:", "is_target": false}, {"number": 141, "content": "    // GUIEventHandler", "is_target": false}, {"number": 142, "content": "    virtual bool handle(const osgGA::GUIEventAdapter& ea,osgGA::GUIActionAdapter&);", "is_target": false}, {"number": 143, "content": "    virtual void getUsage (osg::ApplicationUsage & au) const;", "is_target": false}]}, "1432": {"lines": [{"number": 26, "content": "using namespace std;", "is_target": false}, {"number": 27, "content": "", "is_target": false}, {"number": 28, "content": "", "is_target": false}, {"number": 29, "content": "namespace lpzrobots {", "is_target": false}, {"number": 30, "content": "", "is_target": false}, {"number": 31, "content": "  SchlangeVelocity::SchlangeVelocity ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 32, "content": "                                       const SchlangeConf& conf, const std::string& name)", "is_target": false}, {"number": 33, "content": "    : Schlange(odeHandle, osgHandle, conf, name, \"$Id$\")", "is_target": false}, {"number": 34, "content": "  {", "is_target": false}, {"number": 35, "content": "  }", "is_target": false}, {"number": 36, "content": "", "is_target": false}]}, "1433": {"lines": [{"number": 26, "content": "using namespace std;", "is_target": false}, {"number": 27, "content": "", "is_target": false}, {"number": 28, "content": "", "is_target": false}, {"number": 29, "content": "namespace lpzrobots {", "is_target": false}, {"number": 30, "content": "", "is_target": false}, {"number": 31, "content": "  SchlangeVelocity::SchlangeVelocity ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 32, "content": "                                       const SchlangeConf& conf, const std::string& name)", "is_target": false}, {"number": 33, "content": "    : Schlange(odeHandle, osgHandle, conf, name, \"$Id$\")", "is_target": false}, {"number": 34, "content": "  {", "is_target": false}, {"number": 35, "content": "  }", "is_target": false}, {"number": 36, "content": "", "is_target": false}]}, "1434": {"lines": [{"number": 26, "content": "using namespace std;", "is_target": false}, {"number": 27, "content": "", "is_target": false}, {"number": 28, "content": "", "is_target": false}, {"number": 29, "content": "namespace lpzrobots {", "is_target": false}, {"number": 30, "content": "", "is_target": false}, {"number": 31, "content": "  SchlangeVelocity::SchlangeVelocity ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 32, "content": "                                       const SchlangeConf& conf, const std::string& name)", "is_target": false}, {"number": 33, "content": "    : Schlange(odeHandle, osgHandle, conf, name, \"$Id$\")", "is_target": false}, {"number": 34, "content": "  {", "is_target": false}, {"number": 35, "content": "  }", "is_target": false}, {"number": 36, "content": "", "is_target": false}]}, "1435": {"lines": [{"number": 36, "content": "   */", "is_target": false}, {"number": 37, "content": "  class ReplayRobot : public OdeRobot {", "is_target": false}, {"number": 38, "content": "  public:", "is_target": false}, {"number": 39, "content": "    ReplayRobot(const OdeHandle& odeHandle, const OsgHandle& osgHandle, const char* filename);", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "    ~ReplayRobot();", "is_target": true}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 46, "content": "        @param pose desired 4x4 pose matrix", "is_target": false}]}, "1436": {"lines": [{"number": 50, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 51, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 52, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 53, "content": "        @return number of actually written sensors", "is_target": false}, {"number": 54, "content": "    */", "is_target": false}, {"number": 55, "content": "    virtual int getSensorsIntern(sensor* sensors, int sensornumber);", "is_target": true}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 58, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 59, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 60, "content": "    */", "is_target": false}]}, "1437": {"lines": [{"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 58, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 59, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 60, "content": "    */", "is_target": false}, {"number": 61, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "    /** returns number of sensors", "is_target": false}, {"number": 64, "content": "     */", "is_target": false}, {"number": 65, "content": "    virtual int getSensorNumberIntern() const override {return sensorEnd - sensorStart + 1; }", "is_target": false}, {"number": 66, "content": "", "is_target": false}]}, "1438": {"lines": [{"number": 65, "content": "        conf.headColor = \"robot2\";", "is_target": false}, {"number": 66, "content": "        conf.bodyColor = \"robot1\";", "is_target": false}, {"number": 67, "content": "        return conf;", "is_target": false}, {"number": 68, "content": "      }", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "      virtual ~SchlangeVelocity();", "is_target": true}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "      /**", "is_target": false}, {"number": 73, "content": "       *Reads the actual motor commands from an array,", "is_target": false}, {"number": 74, "content": "       *an sets all motors of the snake to this values.", "is_target": false}, {"number": 75, "content": "       *It is an linear allocation.", "is_target": false}]}, "1439": {"lines": [{"number": 74, "content": "       *an sets all motors of the snake to this values.", "is_target": false}, {"number": 75, "content": "       *It is an linear allocation.", "is_target": false}, {"number": 76, "content": "       *@param motors pointer to the array, motor values are scaled to [-1,1]", "is_target": false}, {"number": 77, "content": "       *@param motornumber length of the motor array", "is_target": false}, {"number": 78, "content": "       **/", "is_target": false}, {"number": 79, "content": "      virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": true}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "      /**", "is_target": false}, {"number": 82, "content": "       *Writes the sensor values to an array in the memory.", "is_target": false}, {"number": 83, "content": "       *@param sensors pointer to the array", "is_target": false}, {"number": 84, "content": "       *@param sensornumber length of the sensor array", "is_target": false}]}, "1440": {"lines": [{"number": 82, "content": "       *Writes the sensor values to an array in the memory.", "is_target": false}, {"number": 83, "content": "       *@param sensors pointer to the array", "is_target": false}, {"number": 84, "content": "       *@param sensornumber length of the sensor array", "is_target": false}, {"number": 85, "content": "       *@return number of actually written sensors", "is_target": false}, {"number": 86, "content": "       **/", "is_target": false}, {"number": 87, "content": "      virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": true}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "      /** returns number of sensors", "is_target": false}, {"number": 90, "content": "       */", "is_target": false}, {"number": 91, "content": "      virtual int getSensorNumberIntern() const override { assert(created); return joints.size() * 2; }", "is_target": false}, {"number": 92, "content": "", "is_target": false}]}, "1441": {"lines": [{"number": 93, "content": "      /** returns number of motors", "is_target": false}, {"number": 94, "content": "       */", "is_target": false}, {"number": 95, "content": "      virtual int getMotorNumberIntern() const override { assert(created); return joints.size() * 2; }", "is_target": false}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "    private:", "is_target": false}, {"number": 98, "content": "      virtual void create(const osg::Matrix& pose);", "is_target": true}, {"number": 99, "content": "      virtual void destroy();", "is_target": false}, {"number": 100, "content": "    };", "is_target": false}, {"number": 101, "content": "", "is_target": false}, {"number": 102, "content": "}", "is_target": false}, {"number": 103, "content": "", "is_target": false}]}, "1442": {"lines": [{"number": 94, "content": "       */", "is_target": false}, {"number": 95, "content": "      virtual int getMotorNumberIntern() const override { assert(created); return joints.size() * 2; }", "is_target": false}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "    private:", "is_target": false}, {"number": 98, "content": "      virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 99, "content": "      virtual void destroy();", "is_target": true}, {"number": 100, "content": "    };", "is_target": false}, {"number": 101, "content": "", "is_target": false}, {"number": 102, "content": "}", "is_target": false}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "#endif", "is_target": false}]}, "1443": {"lines": [{"number": 111, "content": "  protected:", "is_target": false}, {"number": 112, "content": "    virtual const Primitive* getMainPrimitive()  const;", "is_target": false}, {"number": 113, "content": "", "is_target": false}, {"number": 114, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 115, "content": "", "is_target": false}, {"number": 116, "content": "    virtual void destroy();", "is_target": true}, {"number": 117, "content": "", "is_target": false}, {"number": 118, "content": "    RobotChainConf conf;", "is_target": false}, {"number": 119, "content": "", "is_target": false}, {"number": 120, "content": "    bool created = false;", "is_target": false}, {"number": 121, "content": "", "is_target": false}]}, "1444": {"lines": [{"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "    while(fgets(buffer, 1024, f)) {", "is_target": false}, {"number": 81, "content": "      if(buffer[0]=='#' && buffer[1]=='C'){", "is_target": false}, {"number": 82, "content": "        // scan line and return", "is_target": false}, {"number": 83, "content": "        int i=0;", "is_target": false}, {"number": 84, "content": "        char* p;", "is_target": true}, {"number": 85, "content": "        p=strtok(buffer,\" \");", "is_target": false}, {"number": 86, "content": "        if(!p) return false; // frist one is #C", "is_target": false}, {"number": 87, "content": "        while((p=strtok(nullptr,\" \"))!=nullptr )  {", "is_target": false}, {"number": 88, "content": "          if(p[0]=='x' && p[1]=='['){", "is_target": false}, {"number": 89, "content": "            if(sensorstart==-1) sensorstart=i;", "is_target": false}]}, "1445": {"lines": [{"number": 128, "content": "    while(fgets(buffer, 1024, f)){", "is_target": false}, {"number": 129, "content": "      if(buffer[0]=='#' || isEmpty(buffer)){", "is_target": false}, {"number": 130, "content": "        continue;", "is_target": false}, {"number": 131, "content": "      }else{", "is_target": false}, {"number": 132, "content": "        i=0;", "is_target": false}, {"number": 133, "content": "        char* p;", "is_target": true}, {"number": 134, "content": "        p=strtok(buffer,\" \");", "is_target": false}, {"number": 135, "content": "        if(!p) return false;", "is_target": false}, {"number": 136, "content": "        dat[i] = atof(p);", "is_target": false}, {"number": 137, "content": "        ++i;", "is_target": false}, {"number": 138, "content": "        while((p=strtok(nullptr,\" \"))!=nullptr )  {", "is_target": false}]}, "1446": {"lines": [{"number": 100, "content": "    conf.boxWidth=1.0;", "is_target": false}, {"number": 101, "content": "    conf.wheelTexture=\"Images/tire.rgb\";", "is_target": false}, {"number": 102, "content": "    return conf;", "is_target": false}, {"number": 103, "content": "  }", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "  virtual ~Nimm2();", "is_target": true}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "  /**", "is_target": false}, {"number": 108, "content": "   * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 109, "content": "   */", "is_target": false}, {"number": 110, "content": "  virtual void update();", "is_target": false}]}, "1447": {"lines": [{"number": 105, "content": "  virtual ~Nimm2();", "is_target": false}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "  /**", "is_target": false}, {"number": 108, "content": "   * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 109, "content": "   */", "is_target": false}, {"number": 110, "content": "  virtual void update();", "is_target": true}, {"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "  /** sets the pose of the vehicle", "is_target": false}, {"number": 113, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 114, "content": "  */", "is_target": false}, {"number": 115, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}]}, "1448": {"lines": [{"number": 110, "content": "  virtual void update();", "is_target": false}, {"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "  /** sets the pose of the vehicle", "is_target": false}, {"number": 113, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 114, "content": "  */", "is_target": false}, {"number": 115, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "  /** returns actual sensorvalues", "is_target": false}, {"number": 118, "content": "      @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 119, "content": "      @param sensornumber length of the sensor array", "is_target": false}, {"number": 120, "content": "      @return number of actually written sensors", "is_target": false}]}, "1449": {"lines": [{"number": 117, "content": "  /** returns actual sensorvalues", "is_target": false}, {"number": 118, "content": "      @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 119, "content": "      @param sensornumber length of the sensor array", "is_target": false}, {"number": 120, "content": "      @return number of actually written sensors", "is_target": false}, {"number": 121, "content": "  */", "is_target": false}, {"number": 122, "content": "  virtual int getSensorsIntern(sensor* sensors, int sensornumber);", "is_target": true}, {"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "  /** sets actual motorcommands", "is_target": false}, {"number": 125, "content": "      @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 126, "content": "      @param motornumber length of the motor array", "is_target": false}, {"number": 127, "content": "  */", "is_target": false}]}, "1450": {"lines": [{"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "  /** sets actual motorcommands", "is_target": false}, {"number": 125, "content": "      @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 126, "content": "      @param motornumber length of the motor array", "is_target": false}, {"number": 127, "content": "  */", "is_target": false}, {"number": 128, "content": "  virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "  /** returns number of sensors", "is_target": false}, {"number": 131, "content": "   */", "is_target": false}, {"number": 132, "content": "  virtual int getSensorNumberIntern() const override {", "is_target": false}, {"number": 133, "content": "    return sensorno;", "is_target": false}]}, "1451": {"lines": [{"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "    /** this function is called in each timestep. It should perform robot-internal checks,", "is_target": false}, {"number": 150, "content": "      like space-internal collision detection, sensor resets/update etc.", "is_target": false}, {"number": 151, "content": "      @param globalData structure that contains global data from the simulation environment", "is_target": false}, {"number": 152, "content": "   */", "is_target": false}, {"number": 153, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": true}, {"number": 154, "content": "", "is_target": false}, {"number": 155, "content": "        virtual double& getSumForce() { return sumForce; }", "is_target": false}, {"number": 156, "content": "", "is_target": false}, {"number": 157, "content": "        virtual double& getContactPoints() { return contactPoints; }", "is_target": false}, {"number": 158, "content": "", "is_target": false}]}, "1452": {"lines": [{"number": 60, "content": "     * @param radialLegs switches between cartensian and radial leg joints", "is_target": false}, {"number": 61, "content": "     */", "is_target": false}, {"number": 62, "content": "    RobotChain(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 63, "content": "               const RobotChainConf& conf, const std::string& name);", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "    virtual ~RobotChain() { destroy(); };", "is_target": true}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "    static RobotChainConf getDefaultConf() {", "is_target": false}, {"number": 68, "content": "      RobotChainConf c;", "is_target": false}, {"number": 69, "content": "      c.numRobots  = 5;", "is_target": false}, {"number": 70, "content": "      c.size       = 0.6;", "is_target": false}]}, "1453": {"lines": [{"number": 82, "content": "    }", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "    /**", "is_target": false}, {"number": 85, "content": "     * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 86, "content": "     */", "is_target": false}, {"number": 87, "content": "    virtual void update();", "is_target": true}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 91, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 92, "content": "    */", "is_target": false}]}, "1454": {"lines": [{"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 91, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 92, "content": "    */", "is_target": false}, {"number": 93, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "    virtual int getSensorsIntern(sensor* sensors, int sensornumber);", "is_target": false}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": false}, {"number": 98, "content": "", "is_target": false}]}, "1455": {"lines": [{"number": 90, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 91, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 92, "content": "    */", "is_target": false}, {"number": 93, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "    virtual int getSensorsIntern(sensor* sensors, int sensornumber);", "is_target": true}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "    virtual int getSensorNumberIntern()  const override;", "is_target": false}, {"number": 100, "content": "", "is_target": false}]}, "1456": {"lines": [{"number": 92, "content": "    */", "is_target": false}, {"number": 93, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "    virtual int getSensorsIntern(sensor* sensors, int sensornumber);", "is_target": false}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "    virtual int getSensorNumberIntern()  const override;", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "    virtual int getMotorNumberIntern()  const override;", "is_target": false}, {"number": 102, "content": "", "is_target": false}]}, "1457": {"lines": [{"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "    virtual int getSensorNumberIntern()  const override;", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "    virtual int getMotorNumberIntern()  const override;", "is_target": false}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "    virtual void doInternalStuff(const GlobalData& globalData);", "is_target": true}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 106, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "", "is_target": false}]}, "1458": {"lines": [{"number": 101, "content": "    virtual int getMotorNumberIntern()  const override;", "is_target": false}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "    virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 106, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "    virtual int getIRSensorNum() const;", "is_target": false}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "  protected:", "is_target": false}]}, "1459": {"lines": [{"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "    virtual int getIRSensorNum() const;", "is_target": false}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "  protected:", "is_target": false}, {"number": 112, "content": "    virtual const Primitive* getMainPrimitive()  const;", "is_target": true}, {"number": 113, "content": "", "is_target": false}, {"number": 114, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 115, "content": "", "is_target": false}, {"number": 116, "content": "    virtual void destroy();", "is_target": false}, {"number": 117, "content": "", "is_target": false}]}, "1460": {"lines": [{"number": 101, "content": "    virtual int getMotorNumberIntern()  const override;", "is_target": false}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "    virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 106, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "    virtual int getIRSensorNum() const;", "is_target": false}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "  protected:", "is_target": false}]}, "1463": {"lines": [{"number": 35, "content": "", "is_target": false}, {"number": 36, "content": "namespace lpzrobots {", "is_target": false}, {"number": 37, "content": "", "is_target": false}, {"number": 38, "content": "  const int Sphererobot::sensorno;", "is_target": false}, {"number": 39, "content": "", "is_target": false}, {"number": 40, "content": "  Sphererobot::Sphererobot ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 41, "content": "                             const SphererobotConf& conf, const std::string& name )", "is_target": false}, {"number": 42, "content": "    : OdeRobot ( odeHandle, osgHandle, name, \"$Id$\" ), conf(conf) {", "is_target": false}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "    created = false;", "is_target": false}]}, "1464": {"lines": [{"number": 137, "content": "    std::vector<Primitive*> objects;  // for compatibility with getAllPrimitives", "is_target": false}, {"number": 138, "content": "    ", "is_target": false}, {"number": 139, "content": "    static void mycallback(void *data, dGeomID o1, dGeomID o2);", "is_target": false}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 142, "content": "    virtual void destroy();", "is_target": true}, {"number": 143, "content": "  };", "is_target": false}, {"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "}", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "#endif", "is_target": false}]}, "1465": {"lines": [{"number": 130, "content": "  protected:", "is_target": false}, {"number": 131, "content": "    /** creates vehicle at desired pose", "is_target": false}, {"number": 132, "content": "        @param pose 4x4 pose matrix", "is_target": false}, {"number": 133, "content": "    */", "is_target": false}, {"number": 134, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 135, "content": "    virtual void destroy();", "is_target": true}, {"number": 136, "content": "", "is_target": false}, {"number": 137, "content": "", "is_target": false}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "  };", "is_target": false}, {"number": 140, "content": "", "is_target": false}]}, "1466": {"lines": [{"number": 132, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 133, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 134, "content": "", "is_target": false}, {"number": 135, "content": "  private:", "is_target": false}, {"number": 136, "content": "    bool created = false;", "is_target": false}, {"number": 137, "content": "    std::vector<Primitive*> objects;  // for compatibility with getAllPrimitives", "is_target": true}, {"number": 138, "content": "    ", "is_target": false}, {"number": 139, "content": "    static void mycallback(void *data, dGeomID o1, dGeomID o2);", "is_target": false}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 142, "content": "    virtual void destroy();", "is_target": false}]}, "1467": {"lines": [{"number": 79, "content": "  public:", "is_target": false}, {"number": 80, "content": "    SliderWheelie(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 81, "content": "                  const SliderWheelieConf& conf, const std::string& name,", "is_target": false}, {"number": 82, "content": "                  const std::string& revision = \"\");", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "    virtual ~SliderWheelie();", "is_target": true}, {"number": 85, "content": "", "is_target": false}, {"number": 86, "content": "    static SliderWheelieConf getDefaultConf() {", "is_target": false}, {"number": 87, "content": "      SliderWheelieConf conf;", "is_target": false}, {"number": 88, "content": "      conf.segmNumber = 8;       //  number of snake elements", "is_target": false}, {"number": 89, "content": "      conf.segmLength = 0.4;     // length of one snake element", "is_target": false}]}, "1468": {"lines": [{"number": 67, "content": "  public:", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "    Sphererobot ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 70, "content": "                  const SphererobotConf& conf, const std::string& name );", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    virtual ~Sphererobot();", "is_target": true}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "    static SphererobotConf getDefaultConf() {", "is_target": false}, {"number": 75, "content": "      SphererobotConf c;", "is_target": false}, {"number": 76, "content": "      c.diameter     = 1;", "is_target": false}, {"number": 77, "content": "      c.spheremass   = 0.2;", "is_target": false}]}, "1469": {"lines": [{"number": 102, "content": "      conf.showCenter      = false;", "is_target": false}, {"number": 103, "content": "      conf.texture         = \"\";", "is_target": false}, {"number": 104, "content": "      return conf;", "is_target": false}, {"number": 105, "content": "    }", "is_target": false}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "    virtual void update();", "is_target": false}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "    virtual void doInternalStuff(const GlobalData& global);", "is_target": false}, {"number": 112, "content": "", "is_target": false}]}, "1470": {"lines": [{"number": 83, "content": "      c.hingeRange   = M_PI/180*30;", "is_target": false}, {"number": 84, "content": "      return c;", "is_target": false}, {"number": 85, "content": "    }", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "    /// update the subcomponents", "is_target": false}, {"number": 88, "content": "    virtual void update();", "is_target": true}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 91, "content": "        @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 92, "content": "    */", "is_target": false}, {"number": 93, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}]}, "1471": {"lines": [{"number": 104, "content": "      return conf;", "is_target": false}, {"number": 105, "content": "    }", "is_target": false}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "    virtual void update();", "is_target": true}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "    virtual void doInternalStuff(const GlobalData& global);", "is_target": false}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 114, "content": "", "is_target": false}]}, "1472": {"lines": [{"number": 88, "content": "    virtual void update();", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 91, "content": "        @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 92, "content": "    */", "is_target": false}, {"number": 93, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "    /**", "is_target": false}, {"number": 96, "content": "     *Writes the sensor values to an array in the memory.", "is_target": false}, {"number": 97, "content": "     *@param sensors pointer to the array", "is_target": false}, {"number": 98, "content": "     *@param sensornumber length of the sensor array", "is_target": false}]}, "1473": {"lines": [{"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "    virtual void update();", "is_target": false}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "    virtual void doInternalStuff(const GlobalData& global);", "is_target": true}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "    virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 116, "content": "", "is_target": false}]}, "1474": {"lines": [{"number": 96, "content": "     *Writes the sensor values to an array in the memory.", "is_target": false}, {"number": 97, "content": "     *@param sensors pointer to the array", "is_target": false}, {"number": 98, "content": "     *@param sensornumber length of the sensor array", "is_target": false}, {"number": 99, "content": "     *@return number of actually written sensors", "is_target": false}, {"number": 100, "content": "     **/", "is_target": false}, {"number": 101, "content": "    virtual int getSensorsIntern( double* sensors, int sensornumber );", "is_target": true}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "    /**", "is_target": false}, {"number": 104, "content": "     *Reads the actual motor commands from an array, an sets all motors of the snake to this values.", "is_target": false}, {"number": 105, "content": "     *It is an linear allocation.", "is_target": false}, {"number": 106, "content": "     *@param motors pointer to the array, motor values are scaled to [-1,1]", "is_target": false}]}, "1475": {"lines": [{"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "    virtual void update();", "is_target": false}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "    virtual void doInternalStuff(const GlobalData& global);", "is_target": false}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": true}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "    virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "    virtual int getSensorNumberIntern() const override { assert(created);", "is_target": false}, {"number": 118, "content": "      return hingeServos.size()+angularMotors.size()+sliderServos.size(); }", "is_target": false}]}, "1476": {"lines": [{"number": 104, "content": "     *Reads the actual motor commands from an array, an sets all motors of the snake to this values.", "is_target": false}, {"number": 105, "content": "     *It is an linear allocation.", "is_target": false}, {"number": 106, "content": "     *@param motors pointer to the array, motor values are scaled to [-1,1]", "is_target": false}, {"number": 107, "content": "     *@param motornumber length of the motor array", "is_target": false}, {"number": 108, "content": "     **/", "is_target": false}, {"number": 109, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": true}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "    /**", "is_target": false}, {"number": 112, "content": "     *Returns the number of motors used by the snake.", "is_target": false}, {"number": 113, "content": "     *@return number of motors", "is_target": false}, {"number": 114, "content": "     **/", "is_target": false}]}, "1477": {"lines": [{"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "    virtual void doInternalStuff(const GlobalData& global);", "is_target": false}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "    virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": true}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "    virtual int getSensorNumberIntern() const override { assert(created);", "is_target": false}, {"number": 118, "content": "      return hingeServos.size()+angularMotors.size()+sliderServos.size(); }", "is_target": false}, {"number": 119, "content": "", "is_target": false}, {"number": 120, "content": "    virtual int getMotorNumberIntern() const override { assert(created);", "is_target": false}]}, "1478": {"lines": [{"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "    /**", "is_target": false}, {"number": 112, "content": "     *Returns the number of motors used by the snake.", "is_target": false}, {"number": 113, "content": "     *@return number of motors", "is_target": false}, {"number": 114, "content": "     **/", "is_target": false}, {"number": 115, "content": "    virtual int getMotorNumberIntern() const;", "is_target": true}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "    /**", "is_target": false}, {"number": 118, "content": "     *Returns the number of sensors used by the robot.", "is_target": false}, {"number": 119, "content": "     *@return number of sensors", "is_target": false}, {"number": 120, "content": "     **/", "is_target": false}]}, "1479": {"lines": [{"number": 128, "content": "    }", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "    virtual std::vector<Primitive*> getAllPrimitives() const override { return objects;}", "is_target": false}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 133, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 134, "content": "", "is_target": false}, {"number": 135, "content": "  private:", "is_target": false}, {"number": 136, "content": "    bool created = false;", "is_target": false}, {"number": 137, "content": "    std::vector<Primitive*> objects;  // for compatibility with getAllPrimitives", "is_target": false}, {"number": 138, "content": "    ", "is_target": false}]}, "1480": {"lines": [{"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "    /**", "is_target": false}, {"number": 118, "content": "     *Returns the number of sensors used by the robot.", "is_target": false}, {"number": 119, "content": "     *@return number of sensors", "is_target": false}, {"number": 120, "content": "     **/", "is_target": false}, {"number": 121, "content": "    virtual int getSensorNumberIntern() const;", "is_target": true}, {"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "    /** returns a vector with the positions of all segments of the robot", "is_target": false}, {"number": 124, "content": "    */", "is_target": false}, {"number": 125, "content": "    virtual int getSegmentsPosition(std::vector<Position> &poslist);", "is_target": false}, {"number": 126, "content": "", "is_target": false}]}, "1481": {"lines": [{"number": 123, "content": "    /** returns a vector with the positions of all segments of the robot", "is_target": false}, {"number": 124, "content": "    */", "is_target": false}, {"number": 125, "content": "    virtual int getSegmentsPosition(std::vector<Position> &poslist);", "is_target": false}, {"number": 126, "content": "", "is_target": false}, {"number": 127, "content": "    /** the main object of the robot, which is used for position and speed tracking */", "is_target": false}, {"number": 128, "content": "    virtual Primitive* getMainPrimitive() const { return object[Base]; }", "is_target": true}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "  protected:", "is_target": false}, {"number": 131, "content": "    /** creates vehicle at desired pose", "is_target": false}, {"number": 132, "content": "        @param pose 4x4 pose matrix", "is_target": false}, {"number": 133, "content": "    */", "is_target": false}]}, "1482": {"lines": [{"number": 158, "content": "    object[Pendular] = new Sphere(conf.pendulardiameter/2);", "is_target": false}, {"number": 159, "content": "    object[Pendular]->init(odeHandle, conf.spheremass, osgHandle_pendular);", "is_target": false}, {"number": 160, "content": "    object[Pendular]->setPose(pose);", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "    //first and second 3 connection bodies between the pendular an the sphere", "is_target": false}, {"number": 163, "content": "    double x , y;", "is_target": true}, {"number": 164, "content": "    for ( unsigned int alpha = 0; alpha < 3; ++alpha )  {", "is_target": false}, {"number": 165, "content": "      x=sin ( (float) alpha*2*M_PI/3 )*conf.diameter/3.5; //testing values", "is_target": false}, {"number": 166, "content": "      y=cos ( (float) alpha*2*M_PI/3 )*conf.diameter/3.5;", "is_target": false}, {"number": 167, "content": "", "is_target": false}, {"number": 168, "content": "      object[Pole1Bot+alpha] = new Box(conf.diameter/50, conf.diameter/50, conf.diameter/50);", "is_target": false}]}, "1483": {"lines": [{"number": 158, "content": "    object[Pendular] = new Sphere(conf.pendulardiameter/2);", "is_target": false}, {"number": 159, "content": "    object[Pendular]->init(odeHandle, conf.spheremass, osgHandle_pendular);", "is_target": false}, {"number": 160, "content": "    object[Pendular]->setPose(pose);", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "    //first and second 3 connection bodies between the pendular an the sphere", "is_target": false}, {"number": 163, "content": "    double x , y;", "is_target": true}, {"number": 164, "content": "    for ( unsigned int alpha = 0; alpha < 3; ++alpha )  {", "is_target": false}, {"number": 165, "content": "      x=sin ( (float) alpha*2*M_PI/3 )*conf.diameter/3.5; //testing values", "is_target": false}, {"number": 166, "content": "      y=cos ( (float) alpha*2*M_PI/3 )*conf.diameter/3.5;", "is_target": false}, {"number": 167, "content": "", "is_target": false}, {"number": 168, "content": "      object[Pole1Bot+alpha] = new Box(conf.diameter/50, conf.diameter/50, conf.diameter/50);", "is_target": false}]}, "1484": {"lines": [{"number": 156, "content": "", "is_target": false}, {"number": 157, "content": "      c.calculateEnergy = false;", "is_target": false}, {"number": 158, "content": "", "is_target": false}, {"number": 159, "content": "      c.useContactSensors  = false;", "is_target": false}, {"number": 160, "content": "      c.legContacts.resize(6);", "is_target": false}, {"number": 161, "content": "      c.irSensors          = false;", "is_target": true}, {"number": 162, "content": "      c.irFront            = false;", "is_target": false}, {"number": 163, "content": "      c.irBack             = false;", "is_target": false}, {"number": 164, "content": "      c.irLeft             = false;", "is_target": false}, {"number": 165, "content": "      c.irRight            = false;", "is_target": false}, {"number": 166, "content": "      c.irRangeFront       = 3;", "is_target": false}]}, "1485": {"lines": [{"number": 98, "content": "    */", "is_target": false}, {"number": 99, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "    /** destroys vehicle and space", "is_target": false}, {"number": 102, "content": "     */", "is_target": false}, {"number": 103, "content": "    virtual void destroy();", "is_target": true}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "    UwoConf conf;", "is_target": false}, {"number": 106, "content": "    double legmass = 0;    // leg mass", "is_target": false}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "    bool created = false;      // true if robot was created", "is_target": false}]}, "1486": {"lines": [{"number": 220, "content": "    */", "is_target": false}, {"number": 221, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "    /** destroys vehicle and space", "is_target": false}, {"number": 224, "content": "     */", "is_target": false}, {"number": 225, "content": "    virtual void destroy();", "is_target": true}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "public:", "is_target": false}, {"number": 228, "content": "    HexapodConf conf;", "is_target": false}, {"number": 229, "content": "    double legmass = 0;    // leg mass", "is_target": false}, {"number": 230, "content": "    bool created = false;      // true if robot was created", "is_target": false}]}, "1487": {"lines": [{"number": 279, "content": "    */", "is_target": false}, {"number": 280, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 281, "content": "", "is_target": false}, {"number": 282, "content": "    /** destroys vehicle and space", "is_target": false}, {"number": 283, "content": "     */", "is_target": false}, {"number": 284, "content": "    virtual void destroy();", "is_target": true}, {"number": 285, "content": "", "is_target": false}, {"number": 286, "content": "    SkeletonConf conf;", "is_target": false}, {"number": 287, "content": "", "is_target": false}, {"number": 288, "content": "    bool created = false;      // true if robot was created", "is_target": false}, {"number": 289, "content": "", "is_target": false}]}, "1488": {"lines": [{"number": 40, "content": "       @param colorObject if true then the object (sphere or reference) is colored according to contact state", "is_target": false}, {"number": 41, "content": "       @param contactColor color if contact sensor values is 1. In between it is blend with original color.", "is_target": false}, {"number": 42, "content": "        If a channel is negative: use original color and invert those channels that are negative.", "is_target": false}, {"number": 43, "content": "        (default: (-1,-1,-1) : invert all channels)", "is_target": false}, {"number": 44, "content": "    */", "is_target": false}, {"number": 45, "content": "    ContactSensor(bool binary=true, double forcescale = 1, double radius = 0.05,", "is_target": true}, {"number": 46, "content": "                  bool createSphere = false, bool colorObject = true,", "is_target": false}, {"number": 47, "content": "                  Color contactColor = Color(-1,-1,-1));", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "    virtual ~ContactSensor();", "is_target": false}, {"number": 50, "content": "", "is_target": false}]}, "1489": {"lines": [{"number": 64, "content": "       @param releaseDuration time in seconds for how long the gripper cannot grasp", "is_target": false}, {"number": 65, "content": "        after release", "is_target": false}, {"number": 66, "content": "       @param size diameter of the drawn sphere (if 0 nothing is drawn)", "is_target": false}, {"number": 67, "content": "       @param drawAtContactPoint sphere is drawn at contact point static_cast<true>(or) at center of attached primitive (false)", "is_target": false}, {"number": 68, "content": "    */", "is_target": false}, {"number": 69, "content": "    Gripper(const GripperConf& conf = getDefaultConf());", "is_target": true}, {"number": 70, "content": "", "is_target": false}, {"number": 71, "content": "    static GripperConf getDefaultConf() {", "is_target": false}, {"number": 72, "content": "      GripperConf conf;", "is_target": false}, {"number": 73, "content": "      conf.name                = \"Gripper\";", "is_target": false}, {"number": 74, "content": "      conf.gripDuration        = 10;", "is_target": false}]}, "1490": {"lines": [{"number": 60, "content": "     * @param radialLegs switches between cartensian and radial leg joints", "is_target": false}, {"number": 61, "content": "     */", "is_target": false}, {"number": 62, "content": "    Uwo(const OdeHandle& odeHandle, const OsgHandle& osgHandle, const UwoConf& conf,", "is_target": false}, {"number": 63, "content": "        const std::string& name);", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "    virtual ~Uwo() { destroy(); };", "is_target": true}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "    static UwoConf getDefaultConf() {", "is_target": false}, {"number": 68, "content": "      UwoConf c;", "is_target": false}, {"number": 69, "content": "      c.size       = 1;", "is_target": false}, {"number": 70, "content": "      c.legNumber  = 8;", "is_target": false}]}, "1491": {"lines": [{"number": 81, "content": "    }", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 84, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 85, "content": "    */", "is_target": false}, {"number": 86, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 90, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 91, "content": "", "is_target": false}]}, "1492": {"lines": [{"number": 85, "content": "    */", "is_target": false}, {"number": 86, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 90, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "  protected:", "is_target": false}, {"number": 93, "content": "    /** the main object of the robot, which is used for position and speed tracking */", "is_target": false}, {"number": 94, "content": "    virtual const Primitive* getMainPrimitive() const override { return objects[0]; }", "is_target": false}, {"number": 95, "content": "", "is_target": false}]}, "1493": {"lines": [{"number": 44, "content": "    */", "is_target": false}, {"number": 45, "content": "    ContactSensor(bool binary=true, double forcescale = 1, double radius = 0.05,", "is_target": false}, {"number": 46, "content": "                  bool createSphere = false, bool colorObject = true,", "is_target": false}, {"number": 47, "content": "                  Color contactColor = Color(-1,-1,-1));", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "    virtual ~ContactSensor();", "is_target": true}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "    /** returns the sensor value in the range >=0;", "is_target": false}, {"number": 52, "content": "        0 means nothing no contact", "is_target": false}, {"number": 53, "content": "        >0 means contact with another object: size is the force in arbitrary unit", "is_target": false}, {"number": 54, "content": "        @see characteritic()", "is_target": false}]}, "1494": {"lines": [{"number": 54, "content": "        @see characteritic()", "is_target": false}, {"number": 55, "content": "     */", "is_target": false}, {"number": 56, "content": "    virtual double get();", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "    // ---- Sensor interface -----", "is_target": false}, {"number": 59, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "    virtual int getSensorNumber() const { return 1; }", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 64, "content": "", "is_target": false}]}, "1495": {"lines": [{"number": 56, "content": "    virtual double get();", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "    // ---- Sensor interface -----", "is_target": false}, {"number": 59, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "    virtual int getSensorNumber() const { return 1; }", "is_target": true}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 66, "content": "", "is_target": false}]}, "1496": {"lines": [{"number": 58, "content": "    // ---- Sensor interface -----", "is_target": false}, {"number": 59, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "    virtual int getSensorNumber() const { return 1; }", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": true}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 68, "content": "", "is_target": false}]}, "1497": {"lines": [{"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "    virtual std::list<sensor> getList()  const;", "is_target": true}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "    virtual void update();", "is_target": false}, {"number": 70, "content": "", "is_target": false}, {"number": 71, "content": "    // set measued depth (used internally) and the time (old measures are ignored)", "is_target": false}, {"number": 72, "content": "    virtual void setDepth(float depth, long int time);", "is_target": false}]}, "1498": {"lines": [{"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "    virtual void update();", "is_target": true}, {"number": 70, "content": "", "is_target": false}, {"number": 71, "content": "    // set measued depth (used internally) and the time (old measures are ignored)", "is_target": false}, {"number": 72, "content": "    virtual void setDepth(float depth, long int time);", "is_target": false}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "    Transform* getTransformObject() const;", "is_target": false}]}, "1499": {"lines": [{"number": 112, "content": "     * @param conf configuration object", "is_target": false}, {"number": 113, "content": "     */", "is_target": false}, {"number": 114, "content": "    Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle, const HexapodConf& conf,", "is_target": false}, {"number": 115, "content": "               const std::string& name);", "is_target": false}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "    virtual ~Hexapod() { destroy(); }", "is_target": true}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "    static HexapodConf getDefaultConf() {", "is_target": false}, {"number": 120, "content": "      HexapodConf c;", "is_target": false}, {"number": 121, "content": "      c.size               = 1;", "is_target": false}, {"number": 122, "content": "      c.width              = 1.0/3.0; //1.0/1.5", "is_target": false}]}, "1500": {"lines": [{"number": 173, "content": "", "is_target": false}, {"number": 174, "content": "", "is_target": false}, {"number": 175, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 176, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 177, "content": "    */", "is_target": false}, {"number": 178, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 179, "content": "", "is_target": false}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "    /** this function is called in each timestep. It should perform robot-internal checks,", "is_target": false}, {"number": 182, "content": "        like space-internal collision detection, sensor resets/update etc.", "is_target": false}, {"number": 183, "content": "        @param globalData structure that contains global data from the simulation environment", "is_target": false}]}, "1501": {"lines": [{"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "    /** this function is called in each timestep. It should perform robot-internal checks,", "is_target": false}, {"number": 182, "content": "        like space-internal collision detection, sensor resets/update etc.", "is_target": false}, {"number": 183, "content": "        @param globalData structure that contains global data from the simulation environment", "is_target": false}, {"number": 184, "content": "    */", "is_target": false}, {"number": 185, "content": "    virtual void doInternalStuff(const GlobalData& globalData);", "is_target": true}, {"number": 186, "content": "", "is_target": false}, {"number": 187, "content": "", "is_target": false}, {"number": 188, "content": "    /**", "is_target": false}, {"number": 189, "content": "     * calculates the total energy consumption of all servos.", "is_target": false}, {"number": 190, "content": "     */", "is_target": false}]}, "1502": {"lines": [{"number": 203, "content": "    [[nodiscard]] virtual Position getPosition() const override {", "is_target": false}, {"number": 204, "content": "            return Position(position[0], position[1], position[2]);", "is_target": false}, {"number": 205, "content": "    }", "is_target": false}, {"number": 206, "content": "", "is_target": false}, {"number": 207, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 208, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 209, "content": "", "is_target": false}, {"number": 210, "content": "    virtual void resetMotorPower(double power);", "is_target": false}, {"number": 211, "content": "", "is_target": false}, {"number": 212, "content": "    virtual double getPower() const;", "is_target": false}, {"number": 213, "content": "", "is_target": false}]}, "1503": {"lines": [{"number": 210, "content": "    virtual void resetMotorPower(double power);", "is_target": false}, {"number": 211, "content": "", "is_target": false}, {"number": 212, "content": "    virtual double getPower() const;", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "    /** the main object of the robot, which is used for position and speed tracking */", "is_target": false}, {"number": 215, "content": "    virtual const Primitive* getMainPrimitive() const { return objects[0]; }", "is_target": true}, {"number": 216, "content": "  protected:", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "    /** creates vehicle at desired pose", "is_target": false}, {"number": 219, "content": "        @param pose 4x4 pose matrix", "is_target": false}, {"number": 220, "content": "    */", "is_target": false}]}, "1504": {"lines": [{"number": 134, "content": "     * @param conf configuration object", "is_target": false}, {"number": 135, "content": "     */", "is_target": false}, {"number": 136, "content": "    Skeleton(const OdeHandle& odeHandle, const OsgHandle& osgHandle, SkeletonConf& conf,", "is_target": false}, {"number": 137, "content": "               const std::string& name);", "is_target": false}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "    virtual ~Skeleton() { destroy(); };", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "    static SkeletonConf getDefaultConf() {", "is_target": false}, {"number": 142, "content": "      SkeletonConf c;", "is_target": false}, {"number": 143, "content": "      c.size        = 1;", "is_target": false}, {"number": 144, "content": "      c.massfactor  = 1;", "is_target": false}]}, "1505": {"lines": [{"number": 246, "content": "", "is_target": false}, {"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 249, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 250, "content": "    */", "is_target": false}, {"number": 251, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 252, "content": "", "is_target": false}, {"number": 253, "content": "    virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": false}, {"number": 254, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": false}, {"number": 255, "content": "    virtual int getSensorNumberIntern()  const override;", "is_target": false}, {"number": 256, "content": "    virtual int getMotorNumberIntern()  const override;", "is_target": false}]}, "1506": {"lines": [{"number": 248, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 249, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 250, "content": "    */", "is_target": false}, {"number": 251, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 252, "content": "", "is_target": false}, {"number": 253, "content": "    virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": true}, {"number": 254, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": false}, {"number": 255, "content": "    virtual int getSensorNumberIntern()  const override;", "is_target": false}, {"number": 256, "content": "    virtual int getMotorNumberIntern()  const override;", "is_target": false}, {"number": 257, "content": "", "is_target": false}, {"number": 258, "content": "", "is_target": false}]}, "1507": {"lines": [{"number": 249, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 250, "content": "    */", "is_target": false}, {"number": 251, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 252, "content": "", "is_target": false}, {"number": 253, "content": "    virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": false}, {"number": 254, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 255, "content": "    virtual int getSensorNumberIntern()  const override;", "is_target": false}, {"number": 256, "content": "    virtual int getMotorNumberIntern()  const override;", "is_target": false}, {"number": 257, "content": "", "is_target": false}, {"number": 258, "content": "", "is_target": false}, {"number": 259, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}]}, "1508": {"lines": [{"number": 255, "content": "    virtual int getSensorNumberIntern()  const override;", "is_target": false}, {"number": 256, "content": "    virtual int getMotorNumberIntern()  const override;", "is_target": false}, {"number": 257, "content": "", "is_target": false}, {"number": 258, "content": "", "is_target": false}, {"number": 259, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 260, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 261, "content": "", "is_target": false}, {"number": 262, "content": "    /** the main object of the robot, which is used for position and speed tracking */", "is_target": false}, {"number": 263, "content": "    virtual const Primitive* getMainPrimitive() const { return objects[Thorax]; } // Trunk_comp", "is_target": false}, {"number": 264, "content": "", "is_target": false}, {"number": 265, "content": "    /** returns the position of the head */", "is_target": false}]}, "1509": {"lines": [{"number": 258, "content": "", "is_target": false}, {"number": 259, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 260, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 261, "content": "", "is_target": false}, {"number": 262, "content": "    /** the main object of the robot, which is used for position and speed tracking */", "is_target": false}, {"number": 263, "content": "    virtual const Primitive* getMainPrimitive() const { return objects[Thorax]; } // Trunk_comp", "is_target": true}, {"number": 264, "content": "", "is_target": false}, {"number": 265, "content": "    /** returns the position of the head */", "is_target": false}, {"number": 266, "content": "    [[nodiscard]] virtual Position getHeadPosition() const;", "is_target": false}, {"number": 267, "content": "", "is_target": false}, {"number": 268, "content": "    /** returns the position of the trunk */", "is_target": false}]}, "1512": {"lines": [{"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "  protected:", "is_target": false}, {"number": 81, "content": "    DummyPrimitive *dummy;", "is_target": false}, {"number": 82, "content": "    int sensorno = 0;      //number of sensors", "is_target": false}, {"number": 83, "content": "    int motorno = 0;       // number of motors", "is_target": false}, {"number": 84, "content": "    double* motors;", "is_target": true}, {"number": 85, "content": "  } ;", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "}", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "#endif", "is_target": false}]}, "1513": {"lines": [{"number": 55, "content": "  int t = 1;", "is_target": false}, {"number": 56, "content": "  int c = 1;", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  // constructor:", "is_target": false}, {"number": 59, "content": "  // - give handle for ODE and OSG stuff", "is_target": false}, {"number": 60, "content": "  Hexapod::Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 61, "content": "                   const HexapodConf& c, const std::string& name)", "is_target": false}, {"number": 62, "content": "    : OdeRobot(odeHandle, osgHandle, name, \"HexaPod 0.9\"), Inspectable(name), conf(c),", "is_target": false}, {"number": 63, "content": "      t(0), speed(0.0), stabaliserTransform(nullptr), bigboxtransform(nullptr), headtrans(nullptr)", "is_target": false}, {"number": 64, "content": "  {", "is_target": false}, {"number": 65, "content": "    // robot is not created till now", "is_target": false}]}, "1514": {"lines": [{"number": 61, "content": "                   const HexapodConf& c, const std::string& name)", "is_target": false}, {"number": 62, "content": "    : OdeRobot(odeHandle, osgHandle, name, \"HexaPod 0.9\"), Inspectable(name), conf(c),", "is_target": false}, {"number": 63, "content": "      t(0), speed(0.0), stabaliserTransform(nullptr), bigboxtransform(nullptr), headtrans(nullptr)", "is_target": false}, {"number": 64, "content": "  {", "is_target": false}, {"number": 65, "content": "    // robot is not created till now", "is_target": false}, {"number": 66, "content": "    massOfobject = std::make_unique<dMass>();", "is_target": true}, {"number": 67, "content": "    getPos1 = true;", "is_target": false}, {"number": 68, "content": "    timeCounter = conf.T;", "is_target": false}, {"number": 69, "content": "    energyOneStep.resize(1);", "is_target": false}, {"number": 70, "content": "    energyOneStep[0] =  0.0;", "is_target": false}, {"number": 71, "content": "    costOfTran = 0.0;", "is_target": false}]}, "1515": {"lines": [{"number": 36, "content": "  */", "is_target": false}, {"number": 37, "content": "  class ConstantMotor : public Motor {", "is_target": false}, {"number": 38, "content": "  public:", "is_target": false}, {"number": 39, "content": "    /// motor to wrap and constant values (for first and second motor value, all others = value1)", "is_target": false}, {"number": 40, "content": "    ConstantMotor(std::shared_ptr<Motor> motor, double value1=0.0, double value2=0.0)", "is_target": false}, {"number": 41, "content": "      : motor(motor), value1(value1), value2(value2)", "is_target": true}, {"number": 42, "content": "    { }", "is_target": false}, {"number": 43, "content": "    ", "is_target": false}, {"number": 44, "content": "    virtual ~ConstantMotor() = default;", "is_target": false}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) override {", "is_target": false}]}, "1516": {"lines": [{"number": 35, "content": "   */", "is_target": false}, {"number": 36, "content": "  class ShortCircuit : public OdeRobot {", "is_target": false}, {"number": 37, "content": "  public:", "is_target": false}, {"number": 38, "content": "    ShortCircuit(const OdeHandle& odeHandle, const OsgHandle& osgHandle, int sensornumber, int motornumber);", "is_target": false}, {"number": 39, "content": "", "is_target": false}, {"number": 40, "content": "    virtual ~ShortCircuit();", "is_target": true}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 45, "content": "        @param pose desired 4x4 pose matrix", "is_target": false}]}, "1517": {"lines": [{"number": 49, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 50, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 51, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 52, "content": "        @return number of actually written sensors", "is_target": false}, {"number": 53, "content": "    */", "is_target": false}, {"number": 54, "content": "    virtual int getSensorsIntern(sensor* sensors, int sensornumber);", "is_target": true}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 57, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 58, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 59, "content": "    */", "is_target": false}]}, "1518": {"lines": [{"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 57, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 58, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 59, "content": "    */", "is_target": false}, {"number": 60, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    /** returns number of sensors", "is_target": false}, {"number": 63, "content": "     */", "is_target": false}, {"number": 64, "content": "    virtual int getSensorNumberIntern() const override {return sensorno; }", "is_target": false}, {"number": 65, "content": "", "is_target": false}]}, "1519": {"lines": [{"number": 73, "content": "    */", "is_target": false}, {"number": 74, "content": "    virtual void doInternalStuff(const GlobalData& globalData) override {}", "is_target": false}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "  protected:", "is_target": false}, {"number": 77, "content": "    /** the main object of the robot, which is used for position and speed tracking */", "is_target": false}, {"number": 78, "content": "    virtual Primitive* getMainPrimitive() const { return dummy; }", "is_target": true}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "  protected:", "is_target": false}, {"number": 81, "content": "    DummyPrimitive *dummy;", "is_target": false}, {"number": 82, "content": "    int sensorno = 0;      //number of sensors", "is_target": false}, {"number": 83, "content": "    int motorno = 0;       // number of motors", "is_target": false}]}, "1520": {"lines": [{"number": 259, "content": "  */", "is_target": false}, {"number": 260, "content": "  virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 261, "content": "", "is_target": false}, {"number": 262, "content": "  /** destroys vehicle and space", "is_target": false}, {"number": 263, "content": "   */", "is_target": false}, {"number": 264, "content": "  virtual void destroy();", "is_target": true}, {"number": 265, "content": "", "is_target": false}, {"number": 266, "content": "  /**", "is_target": false}, {"number": 267, "content": "   * Assign a human readable name to a motor. This name is used for the", "is_target": false}, {"number": 268, "content": "   * associated inspectable value as used e.g. in guilogger.", "is_target": false}, {"number": 269, "content": "   *", "is_target": false}]}, "1521": {"lines": [{"number": 34, "content": "", "is_target": false}, {"number": 35, "content": "    /**", "is_target": false}, {"number": 36, "content": "       @param maxtorque at this torque the sensor value is 1.", "is_target": false}, {"number": 37, "content": "       @param avg number of averaging steps (def 1) (very noisy for universal joint)", "is_target": false}, {"number": 38, "content": "     */", "is_target": false}, {"number": 39, "content": "    TorqueSensor(double maxtorque = 1.0, int avg = 1);", "is_target": true}, {"number": 40, "content": "    virtual ~TorqueSensor();", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "    /** the primitive is not required here, set it to nullptr", "is_target": false}, {"number": 43, "content": "        @param joint the joint on which to measure the torques.", "is_target": false}, {"number": 44, "content": "    */", "is_target": false}]}, "1522": {"lines": [{"number": 35, "content": "    /**", "is_target": false}, {"number": 36, "content": "       @param maxtorque at this torque the sensor value is 1.", "is_target": false}, {"number": 37, "content": "       @param avg number of averaging steps (def 1) (very noisy for universal joint)", "is_target": false}, {"number": 38, "content": "     */", "is_target": false}, {"number": 39, "content": "    TorqueSensor(double maxtorque = 1.0, int avg = 1);", "is_target": false}, {"number": 40, "content": "    virtual ~TorqueSensor();", "is_target": true}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "    /** the primitive is not required here, set it to nullptr", "is_target": false}, {"number": 43, "content": "        @param joint the joint on which to measure the torques.", "is_target": false}, {"number": 44, "content": "    */", "is_target": false}, {"number": 45, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}]}, "1523": {"lines": [{"number": 40, "content": "    virtual ~TorqueSensor();", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "    /** the primitive is not required here, set it to nullptr", "is_target": false}, {"number": 43, "content": "        @param joint the joint on which to measure the torques.", "is_target": false}, {"number": 44, "content": "    */", "is_target": false}, {"number": 45, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 46, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 49, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 50, "content": "    virtual int get(sensor* sensors, int length)  const; // we implement this one because easier with averaging", "is_target": false}]}, "1524": {"lines": [{"number": 43, "content": "        @param joint the joint on which to measure the torques.", "is_target": false}, {"number": 44, "content": "    */", "is_target": false}, {"number": 45, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 46, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": true}, {"number": 49, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 50, "content": "    virtual int get(sensor* sensors, int length)  const; // we implement this one because easier with averaging", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  private:", "is_target": false}, {"number": 53, "content": "    Joint* joint = nullptr;", "is_target": false}]}, "1525": {"lines": [{"number": 44, "content": "    */", "is_target": false}, {"number": 45, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 46, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 49, "content": "    virtual std::list<sensor> getList()  const;", "is_target": true}, {"number": 50, "content": "    virtual int get(sensor* sensors, int length)  const; // we implement this one because easier with averaging", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  private:", "is_target": false}, {"number": 53, "content": "    Joint* joint = nullptr;", "is_target": false}, {"number": 54, "content": "    double maxtorque = 0;", "is_target": false}]}, "1526": {"lines": [{"number": 45, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 46, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 49, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 50, "content": "    virtual int get(sensor* sensors, int length)  const; // we implement this one because easier with averaging", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  private:", "is_target": false}, {"number": 53, "content": "    Joint* joint = nullptr;", "is_target": false}, {"number": 54, "content": "    double maxtorque = 0;", "is_target": false}, {"number": 55, "content": "    std::vector<sensor> values;", "is_target": false}]}, "1527": {"lines": [{"number": 42, "content": "    TwoAxisServo(TwoAxisJoint* joint, double _min1, double _max1, double power1,", "is_target": false}, {"number": 43, "content": "                 double _min2, double _max2, double power2,", "is_target": false}, {"number": 44, "content": "                 double damp=0.2, double integration=2, double maxVel=10.0,", "is_target": false}, {"number": 45, "content": "                 double jointLimit = 1.3, bool minmaxCheck=true);", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    virtual ~TwoAxisServo();", "is_target": true}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 50, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max", "is_target": false}, {"number": 51, "content": "    */", "is_target": false}, {"number": 52, "content": "    virtual void set(double pos1, double pos2);", "is_target": false}]}, "1528": {"lines": [{"number": 229, "content": "    TwoAxisServoCentered(TwoAxisJoint* joint, double _min1, double _max1, double power1,", "is_target": false}, {"number": 230, "content": "                         double _min2, double _max2, double power2,", "is_target": false}, {"number": 231, "content": "                         double damp=0.2, double integration=2, double maxVel=10.0,", "is_target": false}, {"number": 232, "content": "                         double jointLimit = 1.3);", "is_target": false}, {"number": 233, "content": "", "is_target": false}, {"number": 234, "content": "    virtual ~TwoAxisServoCentered();", "is_target": true}, {"number": 235, "content": "", "is_target": false}, {"number": 236, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 237, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}, {"number": 238, "content": "        however 0 is just in the center of min and max", "is_target": false}, {"number": 239, "content": "    */", "is_target": false}]}, "1529": {"lines": [{"number": 235, "content": "", "is_target": false}, {"number": 236, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 237, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}, {"number": 238, "content": "        however 0 is just in the center of min and max", "is_target": false}, {"number": 239, "content": "    */", "is_target": false}, {"number": 240, "content": "    virtual void set(double pos1, double pos2);", "is_target": true}, {"number": 241, "content": "", "is_target": false}, {"number": 242, "content": "    /** returns the position of the servo (joint) of 1. axis in ranges [-1, 1]", "is_target": false}, {"number": 243, "content": "        (scaled by min1, max1, centered)*/", "is_target": false}, {"number": 244, "content": "    virtual double get1() const {", "is_target": false}, {"number": 245, "content": "      double pos =  joint->getPosition1();", "is_target": false}]}, "1530": {"lines": [{"number": 239, "content": "    */", "is_target": false}, {"number": 240, "content": "    virtual void set(double pos1, double pos2);", "is_target": false}, {"number": 241, "content": "", "is_target": false}, {"number": 242, "content": "    /** returns the position of the servo (joint) of 1. axis in ranges [-1, 1]", "is_target": false}, {"number": 243, "content": "        (scaled by min1, max1, centered)*/", "is_target": false}, {"number": 244, "content": "    virtual double get1() const {", "is_target": true}, {"number": 245, "content": "      double pos =  joint->getPosition1();", "is_target": false}, {"number": 246, "content": "      return 2*(pos-min1)/(max1-min1) - 1;", "is_target": false}, {"number": 247, "content": "    }", "is_target": false}, {"number": 248, "content": "", "is_target": false}, {"number": 249, "content": "", "is_target": false}]}, "1531": {"lines": [{"number": 247, "content": "    }", "is_target": false}, {"number": 248, "content": "", "is_target": false}, {"number": 249, "content": "", "is_target": false}, {"number": 250, "content": "    /** returns the position of the servo (joint) of 2. axis in ranges [-1, 1]", "is_target": false}, {"number": 251, "content": "        (scaled by min2, max2, centered)*/", "is_target": false}, {"number": 252, "content": "    virtual double get2() const {", "is_target": true}, {"number": 253, "content": "      double pos =  joint->getPosition2();", "is_target": false}, {"number": 254, "content": "      return 2*(pos-min2)/(max2-min2) - 1;", "is_target": false}, {"number": 255, "content": "    }", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "  };", "is_target": false}]}, "1532": {"lines": [{"number": 277, "content": "    TwoAxisServoVel(const OdeHandle& odeHandle,", "is_target": false}, {"number": 278, "content": "                    TwoAxisJoint* joint, double _min1, double _max1, double power1,", "is_target": false}, {"number": 279, "content": "                    double _min2, double _max2, double power2,", "is_target": false}, {"number": 280, "content": "                    double damp=0.05, double maxVel=10.0, double jointLimit = 1.3);", "is_target": false}, {"number": 281, "content": "", "is_target": false}, {"number": 282, "content": "    virtual ~TwoAxisServoVel();", "is_target": true}, {"number": 283, "content": "", "is_target": false}, {"number": 284, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) {", "is_target": false}, {"number": 285, "content": "      if(joint) { assert(joint==this->joint); } // we cannot attach the servo to a new joint", "is_target": false}, {"number": 286, "content": "    }", "is_target": false}, {"number": 287, "content": "", "is_target": false}]}, "1533": {"lines": [{"number": 279, "content": "                    double _min2, double _max2, double power2,", "is_target": false}, {"number": 280, "content": "                    double damp=0.05, double maxVel=10.0, double jointLimit = 1.3);", "is_target": false}, {"number": 281, "content": "", "is_target": false}, {"number": 282, "content": "    virtual ~TwoAxisServoVel();", "is_target": false}, {"number": 283, "content": "", "is_target": false}, {"number": 284, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) {", "is_target": true}, {"number": 285, "content": "      if(joint) { assert(joint==this->joint); } // we cannot attach the servo to a new joint", "is_target": false}, {"number": 286, "content": "    }", "is_target": false}, {"number": 287, "content": "", "is_target": false}, {"number": 288, "content": "", "is_target": false}, {"number": 289, "content": "    virtual void setPower(double _power1, double _power2);", "is_target": false}]}, "1534": {"lines": [{"number": 284, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) {", "is_target": false}, {"number": 285, "content": "      if(joint) { assert(joint==this->joint); } // we cannot attach the servo to a new joint", "is_target": false}, {"number": 286, "content": "    }", "is_target": false}, {"number": 287, "content": "", "is_target": false}, {"number": 288, "content": "", "is_target": false}, {"number": 289, "content": "    virtual void setPower(double _power1, double _power2);", "is_target": true}, {"number": 290, "content": "", "is_target": false}, {"number": 291, "content": "    virtual void setPower1(double _power1);", "is_target": false}, {"number": 292, "content": "", "is_target": false}, {"number": 293, "content": "    virtual void setPower2(double _power2);", "is_target": false}, {"number": 294, "content": "", "is_target": false}]}, "1535": {"lines": [{"number": 286, "content": "    }", "is_target": false}, {"number": 287, "content": "", "is_target": false}, {"number": 288, "content": "", "is_target": false}, {"number": 289, "content": "    virtual void setPower(double _power1, double _power2);", "is_target": false}, {"number": 290, "content": "", "is_target": false}, {"number": 291, "content": "    virtual void setPower1(double _power1);", "is_target": true}, {"number": 292, "content": "", "is_target": false}, {"number": 293, "content": "    virtual void setPower2(double _power2);", "is_target": false}, {"number": 294, "content": "", "is_target": false}, {"number": 295, "content": "    virtual double getPower1() {", "is_target": false}, {"number": 296, "content": "      return power1;", "is_target": false}]}, "1536": {"lines": [{"number": 288, "content": "", "is_target": false}, {"number": 289, "content": "    virtual void setPower(double _power1, double _power2);", "is_target": false}, {"number": 290, "content": "", "is_target": false}, {"number": 291, "content": "    virtual void setPower1(double _power1);", "is_target": false}, {"number": 292, "content": "", "is_target": false}, {"number": 293, "content": "    virtual void setPower2(double _power2);", "is_target": true}, {"number": 294, "content": "", "is_target": false}, {"number": 295, "content": "    virtual double getPower1() {", "is_target": false}, {"number": 296, "content": "      return power1;", "is_target": false}, {"number": 297, "content": "    };", "is_target": false}, {"number": 298, "content": "    virtual double getPower2() {", "is_target": false}]}, "1537": {"lines": [{"number": 290, "content": "", "is_target": false}, {"number": 291, "content": "    virtual void setPower1(double _power1);", "is_target": false}, {"number": 292, "content": "", "is_target": false}, {"number": 293, "content": "    virtual void setPower2(double _power2);", "is_target": false}, {"number": 294, "content": "", "is_target": false}, {"number": 295, "content": "    virtual double getPower1() {", "is_target": true}, {"number": 296, "content": "      return power1;", "is_target": false}, {"number": 297, "content": "    };", "is_target": false}, {"number": 298, "content": "    virtual double getPower2() {", "is_target": false}, {"number": 299, "content": "      return power2;", "is_target": false}, {"number": 300, "content": "    };", "is_target": false}]}, "1538": {"lines": [{"number": 293, "content": "    virtual void setPower2(double _power2);", "is_target": false}, {"number": 294, "content": "", "is_target": false}, {"number": 295, "content": "    virtual double getPower1() {", "is_target": false}, {"number": 296, "content": "      return power1;", "is_target": false}, {"number": 297, "content": "    };", "is_target": false}, {"number": 298, "content": "    virtual double getPower2() {", "is_target": true}, {"number": 299, "content": "      return power2;", "is_target": false}, {"number": 300, "content": "    };", "is_target": false}, {"number": 301, "content": "", "is_target": false}, {"number": 302, "content": "    virtual double getDamping1() {", "is_target": false}, {"number": 303, "content": "      return damp;", "is_target": false}]}, "1539": {"lines": [{"number": 297, "content": "    };", "is_target": false}, {"number": 298, "content": "    virtual double getPower2() {", "is_target": false}, {"number": 299, "content": "      return power2;", "is_target": false}, {"number": 300, "content": "    };", "is_target": false}, {"number": 301, "content": "", "is_target": false}, {"number": 302, "content": "    virtual double getDamping1() {", "is_target": true}, {"number": 303, "content": "      return damp;", "is_target": false}, {"number": 304, "content": "    };", "is_target": false}, {"number": 305, "content": "    virtual double getDamping2() {", "is_target": false}, {"number": 306, "content": "      return damp;", "is_target": false}, {"number": 307, "content": "    };", "is_target": false}]}, "1540": {"lines": [{"number": 300, "content": "    };", "is_target": false}, {"number": 301, "content": "", "is_target": false}, {"number": 302, "content": "    virtual double getDamping1() {", "is_target": false}, {"number": 303, "content": "      return damp;", "is_target": false}, {"number": 304, "content": "    };", "is_target": false}, {"number": 305, "content": "    virtual double getDamping2() {", "is_target": true}, {"number": 306, "content": "      return damp;", "is_target": false}, {"number": 307, "content": "    };", "is_target": false}, {"number": 308, "content": "    virtual void setDamping1(double _damp) {", "is_target": false}, {"number": 309, "content": "      damp = clip(_damp,0.0,1.0);", "is_target": false}, {"number": 310, "content": "    };", "is_target": false}]}, "1541": {"lines": [{"number": 303, "content": "      return damp;", "is_target": false}, {"number": 304, "content": "    };", "is_target": false}, {"number": 305, "content": "    virtual double getDamping2() {", "is_target": false}, {"number": 306, "content": "      return damp;", "is_target": false}, {"number": 307, "content": "    };", "is_target": false}, {"number": 308, "content": "    virtual void setDamping1(double _damp) {", "is_target": true}, {"number": 309, "content": "      damp = clip(_damp,0.0,1.0);", "is_target": false}, {"number": 310, "content": "    };", "is_target": false}, {"number": 311, "content": "    virtual void setDamping2(double _damp) {", "is_target": false}, {"number": 312, "content": "      setDamping1(_damp);", "is_target": false}, {"number": 313, "content": "    };", "is_target": false}]}, "1542": {"lines": [{"number": 306, "content": "      return damp;", "is_target": false}, {"number": 307, "content": "    };", "is_target": false}, {"number": 308, "content": "    virtual void setDamping1(double _damp) {", "is_target": false}, {"number": 309, "content": "      damp = clip(_damp,0.0,1.0);", "is_target": false}, {"number": 310, "content": "    };", "is_target": false}, {"number": 311, "content": "    virtual void setDamping2(double _damp) {", "is_target": true}, {"number": 312, "content": "      setDamping1(_damp);", "is_target": false}, {"number": 313, "content": "    };", "is_target": false}, {"number": 314, "content": "", "is_target": false}, {"number": 315, "content": "    /** offetCanceling does not exist for this type of servo */", "is_target": false}, {"number": 316, "content": "    virtual double& offsetCanceling() {", "is_target": false}]}, "1543": {"lines": [{"number": 311, "content": "    virtual void setDamping2(double _damp) {", "is_target": false}, {"number": 312, "content": "      setDamping1(_damp);", "is_target": false}, {"number": 313, "content": "    };", "is_target": false}, {"number": 314, "content": "", "is_target": false}, {"number": 315, "content": "    /** offetCanceling does not exist for this type of servo */", "is_target": false}, {"number": 316, "content": "    virtual double& offsetCanceling() {", "is_target": true}, {"number": 317, "content": "      dummy=0;", "is_target": false}, {"number": 318, "content": "      return dummy;", "is_target": false}, {"number": 319, "content": "    };", "is_target": false}, {"number": 320, "content": "", "is_target": false}, {"number": 321, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}]}, "1544": {"lines": [{"number": 317, "content": "      dummy=0;", "is_target": false}, {"number": 318, "content": "      return dummy;", "is_target": false}, {"number": 319, "content": "    };", "is_target": false}, {"number": 320, "content": "", "is_target": false}, {"number": 321, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 322, "content": "    virtual void setMaxVel(double maxVel) {", "is_target": true}, {"number": 323, "content": "      this->maxVel = maxVel;", "is_target": false}, {"number": 324, "content": "      pid1.KP=maxVel/2;", "is_target": false}, {"number": 325, "content": "      pid2.KP=maxVel/2;", "is_target": false}, {"number": 326, "content": "    };", "is_target": false}, {"number": 327, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}]}, "1545": {"lines": [{"number": 323, "content": "      this->maxVel = maxVel;", "is_target": false}, {"number": 324, "content": "      pid1.KP=maxVel/2;", "is_target": false}, {"number": 325, "content": "      pid2.KP=maxVel/2;", "is_target": false}, {"number": 326, "content": "    };", "is_target": false}, {"number": 327, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 328, "content": "    virtual double getMaxVel() {", "is_target": true}, {"number": 329, "content": "      return maxVel;", "is_target": false}, {"number": 330, "content": "    };", "is_target": false}, {"number": 331, "content": "", "is_target": false}, {"number": 332, "content": "", "is_target": false}, {"number": 333, "content": "    /** sets the set point of the servo.", "is_target": false}]}, "1546": {"lines": [{"number": 332, "content": "", "is_target": false}, {"number": 333, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 334, "content": "        Position must be between -1 and 1. It is scaled to fit into min, max,", "is_target": false}, {"number": 335, "content": "        however 0 is just in the center of min and max", "is_target": false}, {"number": 336, "content": "    */", "is_target": false}, {"number": 337, "content": "    virtual void set(double pos1, double pos2);", "is_target": true}, {"number": 338, "content": "", "is_target": false}, {"number": 339, "content": "  protected:", "is_target": false}, {"number": 340, "content": "    AngularMotor2Axis motor;", "is_target": false}, {"number": 341, "content": "    double dummy;", "is_target": false}, {"number": 342, "content": "    double damp;", "is_target": false}]}, "1547": {"lines": [{"number": 32, "content": "        Spring(OneAxisJoint* joint, double _min, double _max,", "is_target": false}, {"number": 33, "content": "                         double power, double damp=0.2, double integration=0.0,", "is_target": false}, {"number": 34, "content": "                         double maxVel=10.0, double jointLimit = 1.0)", "is_target": false}, {"number": 35, "content": "     : OneAxisServo(joint, _min, _max, power, damp, integration, maxVel, jointLimit, false){", "is_target": false}, {"number": 36, "content": "        }", "is_target": false}, {"number": 37, "content": "        virtual ~Spring() {}", "is_target": true}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 40, "content": "        Position is relative to initial position of the two parts", "is_target": false}, {"number": 41, "content": "        connected by the spring", "is_target": false}, {"number": 42, "content": "    */", "is_target": false}]}, "1548": {"lines": [{"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "    /** sets the set point of the servo.", "is_target": false}, {"number": 40, "content": "        Position is relative to initial position of the two parts", "is_target": false}, {"number": 41, "content": "        connected by the spring", "is_target": false}, {"number": 42, "content": "    */", "is_target": false}, {"number": 43, "content": "    virtual void set(double pos) {", "is_target": true}, {"number": 44, "content": "        pid.setTargetPosition(pos);", "is_target": false}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "        double force = pid.stepNoCutoff(joint->getPosition1(), joint->odeHandle.getTime());", "is_target": false}, {"number": 47, "content": "        force = clip(force,-10*pid.KP, 10*pid.KP); // limit force to 10*KP", "is_target": false}, {"number": 48, "content": "        joint->addForce1(force);", "is_target": false}]}, "1549": {"lines": [{"number": 57, "content": "        double pos =  joint->getPosition1();", "is_target": false}, {"number": 58, "content": "        return pos;", "is_target": false}, {"number": 59, "content": "    }", "is_target": false}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "    //want to allow all kinds of borders,", "is_target": false}, {"number": 62, "content": "    virtual void setMinMax(double _min, double _max) {", "is_target": true}, {"number": 63, "content": "          min=_min;", "is_target": false}, {"number": 64, "content": "          max=_max;", "is_target": false}, {"number": 65, "content": "          joint->setParam(dParamLoStop, min - fabs(min) * (jointLimit-1));", "is_target": false}, {"number": 66, "content": "          joint->setParam(dParamHiStop, max + fabs(max) * (jointLimit-1));", "is_target": false}, {"number": 67, "content": "        }", "is_target": false}]}, "1550": {"lines": [{"number": 52, "content": "class ImpTransform : public Transform {", "is_target": false}, {"number": 53, "content": "public:", "is_target": false}, {"number": 54, "content": "        // constructor", "is_target": false}, {"number": 55, "content": "        ImpTransform(Primitive* parent, Primitive* child, const Pose& pose);", "is_target": false}, {"number": 56, "content": "        // destructor", "is_target": false}, {"number": 57, "content": "        virtual ~ImpTransform();", "is_target": true}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "        // get Child pose", "is_target": false}, {"number": 60, "content": "        Pose getChildPose() const;", "is_target": false}, {"number": 61, "content": "};", "is_target": false}, {"number": 62, "content": "", "is_target": false}]}, "1551": {"lines": [{"number": 190, "content": "", "is_target": false}, {"number": 191, "content": "    // get Motor name from legPos and joint name", "is_target": false}, {"number": 192, "content": "    static MotorName getMotorName(LegPos leg, LegJointType joint);", "is_target": false}, {"number": 193, "content": "", "is_target": false}, {"number": 194, "content": "    //destructor", "is_target": false}, {"number": 195, "content": "    virtual ~Ashigaru();", "is_target": true}, {"number": 196, "content": "", "is_target": false}, {"number": 197, "content": "  /**", "is_target": false}, {"number": 198, "content": "   * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 199, "content": "   */", "is_target": false}, {"number": 200, "content": "  virtual void update();", "is_target": false}]}, "1552": {"lines": [{"number": 195, "content": "    virtual ~Ashigaru();", "is_target": false}, {"number": 196, "content": "", "is_target": false}, {"number": 197, "content": "  /**", "is_target": false}, {"number": 198, "content": "   * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 199, "content": "   */", "is_target": false}, {"number": 200, "content": "  virtual void update();", "is_target": true}, {"number": 201, "content": "", "is_target": false}, {"number": 202, "content": "  /** sets the pose of the vehicle", "is_target": false}, {"number": 203, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 204, "content": "  */", "is_target": false}, {"number": 205, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}]}, "1553": {"lines": [{"number": 200, "content": "  virtual void update();", "is_target": false}, {"number": 201, "content": "", "is_target": false}, {"number": 202, "content": "  /** sets the pose of the vehicle", "is_target": false}, {"number": 203, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 204, "content": "  */", "is_target": false}, {"number": 205, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 206, "content": "", "is_target": false}, {"number": 207, "content": "  /** gets Primitives of Leg tibia", "is_target": false}, {"number": 208, "content": "      @param LegPos Number", "is_target": false}, {"number": 209, "content": "  */", "is_target": false}, {"number": 210, "content": "  Primitive* getTibiaPrimitive(LegPos leg);", "is_target": false}]}, "1554": {"lines": [{"number": 213, "content": "  /** returns actual sensorvalues", "is_target": false}, {"number": 214, "content": "      @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 215, "content": "      @param sensornumber length of the sensor array", "is_target": false}, {"number": 216, "content": "      @return number of actually written sensors", "is_target": false}, {"number": 217, "content": "  */", "is_target": false}, {"number": 218, "content": "  virtual int getSensorsIntern(sensor* sensors, int sensornumber);", "is_target": true}, {"number": 219, "content": "", "is_target": false}, {"number": 220, "content": "  /** sets actual motorcommands", "is_target": false}, {"number": 221, "content": "      @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 222, "content": "      @param motornumber length of the motor array", "is_target": false}, {"number": 223, "content": "  */", "is_target": false}]}, "1555": {"lines": [{"number": 219, "content": "", "is_target": false}, {"number": 220, "content": "  /** sets actual motorcommands", "is_target": false}, {"number": 221, "content": "      @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 222, "content": "      @param motornumber length of the motor array", "is_target": false}, {"number": 223, "content": "  */", "is_target": false}, {"number": 224, "content": "  virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "  /** returns number of sensors", "is_target": false}, {"number": 227, "content": "   */", "is_target": false}, {"number": 228, "content": "  virtual int getSensorNumberIntern() const override {", "is_target": false}, {"number": 229, "content": "    return sensorno;", "is_target": false}]}, "1556": {"lines": [{"number": 244, "content": "", "is_target": false}, {"number": 245, "content": "    /** this function is called in each timestep. It should perform robot-internal checks,", "is_target": false}, {"number": 246, "content": "      like space-internal collision detection, sensor resets/update etc.", "is_target": false}, {"number": 247, "content": "      @param globalData structure that contains global data from the simulation environment", "is_target": false}, {"number": 248, "content": "   */", "is_target": false}, {"number": 249, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": true}, {"number": 250, "content": "", "is_target": false}, {"number": 251, "content": "  virtual void sense(const GlobalData& globalData);", "is_target": false}, {"number": 252, "content": "", "is_target": false}, {"number": 253, "content": "", "is_target": false}, {"number": 254, "content": "  virtual double& getContactPoints() { return contactPoints; }", "is_target": false}]}, "1557": {"lines": [{"number": 246, "content": "      like space-internal collision detection, sensor resets/update etc.", "is_target": false}, {"number": 247, "content": "      @param globalData structure that contains global data from the simulation environment", "is_target": false}, {"number": 248, "content": "   */", "is_target": false}, {"number": 249, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 250, "content": "", "is_target": false}, {"number": 251, "content": "  virtual void sense(const GlobalData& globalData);", "is_target": true}, {"number": 252, "content": "", "is_target": false}, {"number": 253, "content": "", "is_target": false}, {"number": 254, "content": "  virtual double& getContactPoints() { return contactPoints; }", "is_target": false}, {"number": 255, "content": "", "is_target": false}, {"number": 256, "content": "protected: // Functions", "is_target": false}]}, "1558": {"lines": [{"number": 323, "content": "      this->maxVel = maxVel;", "is_target": false}, {"number": 324, "content": "      pid1.KP=maxVel/2;", "is_target": false}, {"number": 325, "content": "      pid2.KP=maxVel/2;", "is_target": false}, {"number": 326, "content": "    };", "is_target": false}, {"number": 327, "content": "    /** adjusts maximal speed of servo*/", "is_target": false}, {"number": 328, "content": "    virtual double getMaxVel() {", "is_target": true}, {"number": 329, "content": "      return maxVel;", "is_target": false}, {"number": 330, "content": "    };", "is_target": false}, {"number": 331, "content": "", "is_target": false}, {"number": 332, "content": "", "is_target": false}, {"number": 333, "content": "    /** sets the set point of the servo.", "is_target": false}]}, "1559": {"lines": [{"number": 57, "content": "        double pos =  joint->getPosition1();", "is_target": false}, {"number": 58, "content": "        return pos;", "is_target": false}, {"number": 59, "content": "    }", "is_target": false}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "    //want to allow all kinds of borders,", "is_target": false}, {"number": 62, "content": "    virtual void setMinMax(double _min, double _max) {", "is_target": true}, {"number": 63, "content": "          min=_min;", "is_target": false}, {"number": 64, "content": "          max=_max;", "is_target": false}, {"number": 65, "content": "          joint->setParam(dParamLoStop, min - fabs(min) * (jointLimit-1));", "is_target": false}, {"number": 66, "content": "          joint->setParam(dParamHiStop, max + fabs(max) * (jointLimit-1));", "is_target": false}, {"number": 67, "content": "        }", "is_target": false}]}, "1560": {"lines": [{"number": 46, "content": "namespace lpzrobots {", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "  // constructor:", "is_target": false}, {"number": 49, "content": "  // - give handle for ODE and OSG stuff", "is_target": false}, {"number": 50, "content": "  // - size of robot, maximal used force and speed factor are adjustable", "is_target": false}, {"number": 51, "content": "  TruckMesh::TruckMesh(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 52, "content": "                       const std::string& name,", "is_target": false}, {"number": 53, "content": "                       double size/*=1.0*/, double force /*=3*/, double speed/*=15*/, double mass/*=1*/)", "is_target": false}, {"number": 54, "content": "    : // calling OdeRobots construtor with name of the actual robot", "is_target": false}, {"number": 55, "content": "    OdeRobot(odeHandle, osgHandle, name, \"$Id$\")", "is_target": false}, {"number": 56, "content": "  {", "is_target": false}]}, "1561": {"lines": [{"number": 100, "content": "    */", "is_target": false}, {"number": 101, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "    /** destroys vehicle and space", "is_target": false}, {"number": 104, "content": "     */", "is_target": false}, {"number": 105, "content": "    virtual void destroy();", "is_target": true}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "    /** additional things for collision handling can be done here", "is_target": false}, {"number": 108, "content": "     */", "is_target": false}, {"number": 109, "content": "    static void mycallback(void *data, dGeomID o1, dGeomID o2);", "is_target": false}, {"number": 110, "content": "", "is_target": false}]}, "1562": {"lines": [{"number": 47, "content": "     */", "is_target": false}, {"number": 48, "content": "    TruckMesh(const OdeHandle& odeHandle, const OsgHandle& osgHandle, const std::string& name,", "is_target": false}, {"number": 49, "content": "              double size=1, double force=3, double speed=15, double mass=1);", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual ~TruckMesh() { destroy(); }", "is_target": true}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    /**", "is_target": false}, {"number": 55, "content": "     * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 56, "content": "     */", "is_target": false}, {"number": 57, "content": "    virtual void update();", "is_target": false}]}, "1563": {"lines": [{"number": 52, "content": "    virtual ~TruckMesh() { destroy(); }", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    /**", "is_target": false}, {"number": 55, "content": "     * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 56, "content": "     */", "is_target": false}, {"number": 57, "content": "    virtual void update();", "is_target": true}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 61, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 62, "content": "    */", "is_target": false}]}, "1564": {"lines": [{"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 61, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 62, "content": "    */", "is_target": false}, {"number": 63, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 66, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 67, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 68, "content": "        @return number of actually written sensors", "is_target": false}]}, "1565": {"lines": [{"number": 65, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 66, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 67, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 68, "content": "        @return number of actually written sensors", "is_target": false}, {"number": 69, "content": "    */", "is_target": false}, {"number": 70, "content": "    virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": true}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 73, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 74, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 75, "content": "    */", "is_target": false}]}, "1566": {"lines": [{"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 73, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 74, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 75, "content": "    */", "is_target": false}, {"number": 76, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "    /** returns number of sensors", "is_target": false}, {"number": 79, "content": "     */", "is_target": false}, {"number": 80, "content": "    virtual int getSensorNumberIntern() const override {", "is_target": false}, {"number": 81, "content": "      return sensorno;", "is_target": false}]}, "1567": {"lines": [{"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    /** this function is called in each timestep. It should perform robot-internal checks,", "is_target": false}, {"number": 91, "content": "        like space-internal collision detection, sensor resets/update etc.", "is_target": false}, {"number": 92, "content": "        @param globalData structure that contains global data from the simulation environment", "is_target": false}, {"number": 93, "content": "    */", "is_target": false}, {"number": 94, "content": "    virtual void doInternalStuff(const GlobalData& globalData);", "is_target": true}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "  protected:", "is_target": false}, {"number": 98, "content": "    /** creates vehicle at desired pose", "is_target": false}, {"number": 99, "content": "        @param pose 4x4 pose matrix", "is_target": false}]}, "1568": {"lines": [{"number": 232, "content": "        cyl = new Cylinder(radius,wheelthickness*1.80);", "is_target": false}, {"number": 233, "content": "        wpos = Vec3(middlelength-length*0.201,", "is_target": false}, {"number": 234, "content": "                    middlewidth+((i-1)%2==0?-1.02:1)*width*0.35,", "is_target": false}, {"number": 235, "content": "                    -height*0.302+radius );", "is_target": false}, {"number": 236, "content": "      }", "is_target": false}, {"number": 237, "content": "      else if (i<7){ // front wheels", "is_target": true}, {"number": 238, "content": "        cyl = new Cylinder(radius,wheelthickness*1.02);", "is_target": false}, {"number": 239, "content": "        wpos = Vec3(middlelength+length*0.407,", "is_target": false}, {"number": 240, "content": "                    middlewidth+((i-1)%2==0?-1.05:1)*width*0.387,", "is_target": false}, {"number": 241, "content": "                    -height*0.302+radius);", "is_target": false}, {"number": 242, "content": "      }", "is_target": false}]}, "1569": {"lines": [{"number": 164, "content": "", "is_target": false}, {"number": 165, "content": "  };", "is_target": false}, {"number": 166, "content": "", "is_target": false}, {"number": 167, "content": "  /** things for collision handling inside the space of the robot can be done here", "is_target": false}, {"number": 168, "content": "   */", "is_target": false}, {"number": 169, "content": "  void TruckMesh::mycallback(void *data, dGeomID o1, dGeomID o2){", "is_target": true}, {"number": 170, "content": "    // do collisions handling for collisions between parts inside the space of the robot here", "is_target": false}, {"number": 171, "content": "    // this has no meaning for this robot, because collsions between wheels and body are ignored", "is_target": false}, {"number": 172, "content": "    // but if parts of the robot can move against each other this is important", "is_target": false}, {"number": 173, "content": "", "is_target": false}, {"number": 174, "content": "    // the follwing (not active) code part can be used to check if objects which had collisions", "is_target": false}]}, "1570": {"lines": [{"number": 316, "content": "#ifdef VERBOSE", "is_target": false}, {"number": 317, "content": "    std::cerr << \"AmosII::setMotors BEGIN\\n\";", "is_target": false}, {"number": 318, "content": "#endif", "is_target": false}, {"number": 319, "content": "    assert(created);", "is_target": false}, {"number": 320, "content": "    // robot must exist", "is_target": false}, {"number": 321, "content": "    assert(motornumber==getMotorNumber());", "is_target": true}, {"number": 322, "content": "    for (MotorMap::iterator it = servos.begin(); it != servos.end(); ++it)  {", "is_target": false}, {"number": 323, "content": "      MotorName const name = it->first;", "is_target": false}, {"number": 324, "content": "      OneAxisServo * const servo = it->second;", "is_target": false}, {"number": 325, "content": "      //We multiple with -1 to map to real hexapod", "is_target": false}, {"number": 326, "content": "      if (servo) servo->set(-motors[name]);", "is_target": false}]}, "1571": {"lines": [{"number": 44, "content": "    /**", "is_target": false}, {"number": 45, "content": "       @param maxSpeed maximal speed that is expected used for normalisation of sensor value", "is_target": false}, {"number": 46, "content": "       @param dimensions bit mask for the dimensions to sense. Default: X | Y | Z (all dimensions)", "is_target": false}, {"number": 47, "content": "       @see Dimensions", "is_target": false}, {"number": 48, "content": "     */", "is_target": false}, {"number": 49, "content": "    SpeedSensor(double maxSpeed, Mode mode = Translational, short dimensions = X | Y | Z );", "is_target": true}, {"number": 50, "content": "    virtual ~SpeedSensor() {}", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 53, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 54, "content": "", "is_target": false}]}, "1572": {"lines": [{"number": 35, "content": "      Wrapper for Motor to have a constant set value (resulting in getMotorNumber()=0)", "is_target": false}, {"number": 36, "content": "  */", "is_target": false}, {"number": 37, "content": "  class ConstantMotor : public Motor {", "is_target": false}, {"number": 38, "content": "  public:", "is_target": false}, {"number": 39, "content": "    /// motor to wrap and constant values (for first and second motor value, all others = value1)", "is_target": false}, {"number": 40, "content": "    ConstantMotor(std::shared_ptr<Motor> motor, double value1=0.0, double value2=0.0)", "is_target": true}, {"number": 41, "content": "      : motor(motor), value1(value1), value2(value2)", "is_target": false}, {"number": 42, "content": "    { }", "is_target": false}, {"number": 43, "content": "    ", "is_target": false}, {"number": 44, "content": "    virtual ~ConstantMotor() = default;", "is_target": false}, {"number": 45, "content": "", "is_target": false}]}, "1573": {"lines": [{"number": 45, "content": "       @param maxSpeed maximal speed that is expected used for normalisation of sensor value", "is_target": false}, {"number": 46, "content": "       @param dimensions bit mask for the dimensions to sense. Default: X | Y | Z (all dimensions)", "is_target": false}, {"number": 47, "content": "       @see Dimensions", "is_target": false}, {"number": 48, "content": "     */", "is_target": false}, {"number": 49, "content": "    SpeedSensor(double maxSpeed, Mode mode = Translational, short dimensions = X | Y | Z );", "is_target": false}, {"number": 50, "content": "    virtual ~SpeedSensor() {}", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 53, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}]}, "1574": {"lines": [{"number": 47, "content": "       @see Dimensions", "is_target": false}, {"number": 48, "content": "     */", "is_target": false}, {"number": 49, "content": "    SpeedSensor(double maxSpeed, Mode mode = Translational, short dimensions = X | Y | Z );", "is_target": false}, {"number": 50, "content": "    virtual ~SpeedSensor() {}", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 53, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 56, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 57, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}]}, "1575": {"lines": [{"number": 50, "content": "    virtual ~SpeedSensor() {}", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 53, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": true}, {"number": 56, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 57, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 58, "content": "  protected:", "is_target": false}, {"number": 59, "content": "    matrix::Matrix getSenseMatrix() const;", "is_target": false}, {"number": 60, "content": "", "is_target": false}]}, "1576": {"lines": [{"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 53, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 56, "content": "    virtual std::list<sensor> getList()  const;", "is_target": true}, {"number": 57, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 58, "content": "  protected:", "is_target": false}, {"number": 59, "content": "    matrix::Matrix getSenseMatrix() const;", "is_target": false}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "  protected:", "is_target": false}]}, "1577": {"lines": [{"number": 39, "content": "    /// motor to wrap and constant values (for first and second motor value, all others = value1)", "is_target": false}, {"number": 40, "content": "    ConstantMotor(std::shared_ptr<Motor> motor, double value1=0.0, double value2=0.0)", "is_target": false}, {"number": 41, "content": "      : motor(motor), value1(value1), value2(value2)", "is_target": false}, {"number": 42, "content": "    { }", "is_target": false}, {"number": 43, "content": "    ", "is_target": false}, {"number": 44, "content": "    virtual ~ConstantMotor() = default;", "is_target": true}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) override {", "is_target": false}, {"number": 47, "content": "      motor->init(own, joint);", "is_target": false}, {"number": 48, "content": "    }", "is_target": false}, {"number": 49, "content": "", "is_target": false}]}, "1578": {"lines": [{"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) override {", "is_target": false}, {"number": 47, "content": "      motor->init(own, joint);", "is_target": false}, {"number": 48, "content": "    }", "is_target": false}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    virtual int getMotorNumber() const { return 0; };", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual bool act(const GlobalData& globaldata) override {", "is_target": false}, {"number": 53, "content": "      int len = motor->getMotorNumber();", "is_target": false}, {"number": 54, "content": "      double* dat = new double[len];", "is_target": false}, {"number": 55, "content": "      std::fill_n( dat, len, value1);", "is_target": false}]}, "1579": {"lines": [{"number": 112, "content": "     * @param conf configuration object", "is_target": false}, {"number": 113, "content": "     */", "is_target": false}, {"number": 114, "content": "    Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle, const HexapodConf& conf,", "is_target": false}, {"number": 115, "content": "               const std::string& name);", "is_target": false}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "    virtual ~Hexapod() { destroy(); }", "is_target": true}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "    static HexapodConf getDefaultConf() {", "is_target": false}, {"number": 120, "content": "      HexapodConf c;", "is_target": false}, {"number": 121, "content": "      c.size               = 1;", "is_target": false}, {"number": 122, "content": "      c.width              = 1.0/3.0; //1.0/1.5", "is_target": false}]}, "1580": {"lines": [{"number": 173, "content": "", "is_target": false}, {"number": 174, "content": "", "is_target": false}, {"number": 175, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 176, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 177, "content": "    */", "is_target": false}, {"number": 178, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 179, "content": "", "is_target": false}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "    /** this function is called in each timestep. It should perform robot-internal checks,", "is_target": false}, {"number": 182, "content": "        like space-internal collision detection, sensor resets/update etc.", "is_target": false}, {"number": 183, "content": "        @param globalData structure that contains global data from the simulation environment", "is_target": false}]}, "1581": {"lines": [{"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "    /** this function is called in each timestep. It should perform robot-internal checks,", "is_target": false}, {"number": 182, "content": "        like space-internal collision detection, sensor resets/update etc.", "is_target": false}, {"number": 183, "content": "        @param globalData structure that contains global data from the simulation environment", "is_target": false}, {"number": 184, "content": "    */", "is_target": false}, {"number": 185, "content": "    virtual void doInternalStuff(const GlobalData& globalData);", "is_target": true}, {"number": 186, "content": "", "is_target": false}, {"number": 187, "content": "", "is_target": false}, {"number": 188, "content": "    /**", "is_target": false}, {"number": 189, "content": "     * calculates the total energy consumption of all servos.", "is_target": false}, {"number": 190, "content": "     */", "is_target": false}]}, "1582": {"lines": [{"number": 210, "content": "    virtual void resetMotorPower(double power);", "is_target": false}, {"number": 211, "content": "", "is_target": false}, {"number": 212, "content": "    virtual double getPower() const;", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "    /** the main object of the robot, which is used for position and speed tracking */", "is_target": false}, {"number": 215, "content": "    virtual const Primitive* getMainPrimitive() const { return objects[0]; }", "is_target": true}, {"number": 216, "content": "  protected:", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "    /** creates vehicle at desired pose", "is_target": false}, {"number": 219, "content": "        @param pose 4x4 pose matrix", "is_target": false}, {"number": 220, "content": "    */", "is_target": false}]}, "1583": {"lines": [{"number": 889, "content": "", "is_target": false}, {"number": 890, "content": "    created=true;", "is_target": false}, {"number": 891, "content": "  };", "is_target": false}, {"number": 892, "content": "", "is_target": false}, {"number": 893, "content": "  // getTorqueSensorData", "is_target": false}, {"number": 894, "content": "  sensor Ashigaru::getTorqueData(TorqueSensor*  torqueSensor){", "is_target": true}, {"number": 895, "content": "    // Georg: the following should do:", "is_target": false}, {"number": 896, "content": "    if(torqueSensor)", "is_target": false}, {"number": 897, "content": "      return torqueSensor->getList().front();", "is_target": false}, {"number": 898, "content": "    else", "is_target": false}, {"number": 899, "content": "      return -1.;", "is_target": false}]}, "1584": {"lines": [{"number": 139, "content": "    return pow(torques[0] + torques[1] + torques[2],2);", "is_target": false}, {"number": 140, "content": "  }", "is_target": false}, {"number": 141, "content": "", "is_target": false}, {"number": 142, "content": "  double Hexapod::energyConsumption(){", "is_target": false}, {"number": 143, "content": "", "is_target": false}, {"number": 144, "content": "    const dReal *torques;", "is_target": true}, {"number": 145, "content": "    const dReal *angularV;", "is_target": false}, {"number": 146, "content": "    double gamma = 0.005;", "is_target": false}, {"number": 147, "content": "    double e = 0.0;", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "    for(unsigned int i = 0; i < legs.size(); ++i) {", "is_target": false}]}, "1585": {"lines": [{"number": 140, "content": "  }", "is_target": false}, {"number": 141, "content": "", "is_target": false}, {"number": 142, "content": "  double Hexapod::energyConsumption(){", "is_target": false}, {"number": 143, "content": "", "is_target": false}, {"number": 144, "content": "    const dReal *torques;", "is_target": false}, {"number": 145, "content": "    const dReal *angularV;", "is_target": true}, {"number": 146, "content": "    double gamma = 0.005;", "is_target": false}, {"number": 147, "content": "    double e = 0.0;", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "    for(unsigned int i = 0; i < legs.size(); ++i) {", "is_target": false}, {"number": 150, "content": "      torques = dBodyGetTorque(legs[i]->getBody());", "is_target": false}]}, "1587": {"lines": [{"number": 52, "content": "    return cPose;", "is_target": false}, {"number": 53, "content": "  }", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "  // constructor:", "is_target": false}, {"number": 56, "content": "  // - give handle for ODE and OSG stuff, and default configuration", "is_target": false}, {"number": 57, "content": "  Hexabot::Hexabot(const OdeHandle& odehandle, const OsgHandle& osgHandle, const HexabotConf& conf, const std::string& name):OdeRobot(odehandle,osgHandle,name,\"$Id$\"),conf(conf),trunk()", "is_target": true}, {"number": 58, "content": "  {", "is_target": false}, {"number": 59, "content": "    //", "is_target": false}, {"number": 60, "content": "    contactPoints=0;", "is_target": false}, {"number": 61, "content": "    // robot not created up to now", "is_target": false}, {"number": 62, "content": "    created=false;", "is_target": false}]}, "1588": {"lines": [{"number": 52, "content": "    return cPose;", "is_target": false}, {"number": 53, "content": "  }", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "  // constructor:", "is_target": false}, {"number": 56, "content": "  // - give handle for ODE and OSG stuff, and default configuration", "is_target": false}, {"number": 57, "content": "  Hexabot::Hexabot(const OdeHandle& odehandle, const OsgHandle& osgHandle, const HexabotConf& conf, const std::string& name):OdeRobot(odehandle,osgHandle,name,\"$Id$\"),conf(conf),trunk()", "is_target": true}, {"number": 58, "content": "  {", "is_target": false}, {"number": 59, "content": "    //", "is_target": false}, {"number": 60, "content": "    contactPoints=0;", "is_target": false}, {"number": 61, "content": "    // robot not created up to now", "is_target": false}, {"number": 62, "content": "    created=false;", "is_target": false}]}, "1589": {"lines": [{"number": 230, "content": "      }", "is_target": false}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "", "is_target": false}, {"number": 233, "content": "      for(unsigned int i = 0; i < 6; ++i) {", "is_target": false}, {"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "        const dReal *position = dBodyGetPosition(legContactArray[i].bodyID);", "is_target": true}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "        // cout<< dJointGetUniversalAngle1(joints[0]->getJoint()) * 180/M_PI  << endl;", "is_target": false}, {"number": 238, "content": "        // cout<< dJointGetUniversalAngle2(joints[0]->getJoint())  * 180/M_PI<< endl;", "is_target": false}, {"number": 239, "content": "        //  cout << dJointGetUniversalAngle1(legContactArray[i].joint) * 180/M_PI << endl;", "is_target": false}, {"number": 240, "content": "        //  cout << dJointGetUniversalAngle2(legContactArray[i].joint) * 180/M_PI << endl;", "is_target": false}]}, "1590": {"lines": [{"number": 469, "content": "        // springy knee joint", "is_target": false}, {"number": 470, "content": "        HingeJoint* k = new HingeJoint(coxaThorax, tibia, Pos(0,0,-len1/2) * m1,", "is_target": false}, {"number": 471, "content": "                                       Axis(n%2==0 ? -1 : 1,0,0) * m1);", "is_target": false}, {"number": 472, "content": "        k->init(odeHandle, osgHandleJ, true, rad1 * 2.1);", "is_target": false}, {"number": 473, "content": "        // servo used as a spring", "is_target": false}, {"number": 474, "content": "        auto servo = std::make_shared<HingeServo>(k, -1, 1, 1, 0.01,0); // parameters are set later", "is_target": true}, {"number": 475, "content": "        tebiaservos.push_back(servo);", "is_target": false}, {"number": 476, "content": "        if(conf.useTebiaMotors){", "is_target": false}, {"number": 477, "content": "          static_cast<Sensor*>(servo.get())->setBaseName(\"leg pair \" + itos(n/2) + (n%2==0 ? \" right \" : \" left \") + \"tebia (knee)\");", "is_target": false}, {"number": 478, "content": "          addSensor(servo);", "is_target": false}, {"number": 479, "content": "          addMotor(servo);", "is_target": false}]}, "1591": {"lines": [{"number": 528, "content": "          // springy joint", "is_target": false}, {"number": 529, "content": "          HingeJoint* k = new HingeJoint(tibia, tarsus, Pos(0,0,-len2/2) * m2,", "is_target": false}, {"number": 530, "content": "                                         Axis(n%2==0 ? -1 : 1,0,0) * m2);", "is_target": false}, {"number": 531, "content": "          k->init(odeHandle, osgHandleJ, true, rad2 * 2.1);", "is_target": false}, {"number": 532, "content": "          // servo used as a spring", "is_target": false}, {"number": 533, "content": "          auto servo = std::make_shared<OneAxisServoVel>(odeHandle,k, -1, 1, 1, 0.01); // parameters are set later", "is_target": true}, {"number": 534, "content": "          joints.push_back(k);", "is_target": false}, {"number": 535, "content": "          auto spring = std::make_shared<ConstantMotor>(servo, 0.0);", "is_target": false}, {"number": 536, "content": "          tarsussprings.push_back(servo);", "is_target": false}, {"number": 537, "content": "          addMotor(spring);", "is_target": false}, {"number": 538, "content": "", "is_target": false}]}, "1592": {"lines": [{"number": 213, "content": "      */", "is_target": false}, {"number": 214, "content": "", "is_target": false}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "      if(floor(global.time) == timeCounter){", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "        dReal *position_1 = pos_record.front();", "is_target": true}, {"number": 219, "content": "        dReal *position_2 = pos_record.back();", "is_target": false}, {"number": 220, "content": "        double distance = sqrt(pow((position_2[0] - position_1[0]),2) + pow((position_2[1] - position_1[1]),2) );//+ pow((position_2[2] - position_1[2]),2));", "is_target": false}, {"number": 221, "content": "        conf.v[0] = distance/conf.T;", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "", "is_target": false}]}, "1593": {"lines": [{"number": 214, "content": "", "is_target": false}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "      if(floor(global.time) == timeCounter){", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "        dReal *position_1 = pos_record.front();", "is_target": false}, {"number": 219, "content": "        dReal *position_2 = pos_record.back();", "is_target": true}, {"number": 220, "content": "        double distance = sqrt(pow((position_2[0] - position_1[0]),2) + pow((position_2[1] - position_1[1]),2) );//+ pow((position_2[2] - position_1[2]),2));", "is_target": false}, {"number": 221, "content": "        conf.v[0] = distance/conf.T;", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "", "is_target": false}, {"number": 224, "content": "        costOfTran = costOfTransport(E_t,getMassOfRobot(),conf.v[0],conf.T);", "is_target": false}]}, "1594": {"lines": [{"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "", "is_target": false}, {"number": 157, "content": "protected:", "is_target": false}, {"number": 158, "content": "", "is_target": false}, {"number": 159, "content": "  virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 160, "content": "  virtual void destroy();", "is_target": true}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "", "is_target": false}, {"number": 163, "content": "};", "is_target": false}, {"number": 164, "content": "", "is_target": false}, {"number": 165, "content": "}", "is_target": false}]}, "1595": {"lines": [{"number": 195, "content": "  */", "is_target": false}, {"number": 196, "content": "  virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 197, "content": "", "is_target": false}, {"number": 198, "content": "  /** destroys vehicle and space", "is_target": false}, {"number": 199, "content": "   */", "is_target": false}, {"number": 200, "content": "  virtual void destroy();", "is_target": true}, {"number": 201, "content": "  static void mycallback(void *data, dGeomID o1, dGeomID o2);", "is_target": false}, {"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "  /**", "is_target": false}, {"number": 204, "content": "   * Assign a human readable name to a motor. This name is used for the", "is_target": false}, {"number": 205, "content": "   * associated inspectable value as used e.g. in guilogger.", "is_target": false}]}, "1596": {"lines": [{"number": 61, "content": "class ImpTransform2 : public Transform {", "is_target": false}, {"number": 62, "content": "public:", "is_target": false}, {"number": 63, "content": "  // constructor", "is_target": false}, {"number": 64, "content": "  ImpTransform2(Primitive* parent, Primitive* child, const Pose& pose);", "is_target": false}, {"number": 65, "content": "  // destructor", "is_target": false}, {"number": 66, "content": "  virtual ~ImpTransform2();", "is_target": true}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "  // get Child pose", "is_target": false}, {"number": 69, "content": "  Pose getChildPose() const;", "is_target": false}, {"number": 70, "content": "};", "is_target": false}, {"number": 71, "content": "", "is_target": false}]}, "1597": {"lines": [{"number": 125, "content": "", "is_target": false}, {"number": 126, "content": "  // get Motor name from legPos and joint name", "is_target": false}, {"number": 127, "content": "  static MotorName getMotorName(LegPos leg, LegJointType joint);", "is_target": false}, {"number": 128, "content": "", "is_target": false}, {"number": 129, "content": "  //destructor", "is_target": false}, {"number": 130, "content": "  virtual ~Hexabot();", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "  /**", "is_target": false}, {"number": 133, "content": "   * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 134, "content": "   */", "is_target": false}, {"number": 135, "content": "  virtual void update();", "is_target": false}]}, "1598": {"lines": [{"number": 130, "content": "  virtual ~Hexabot();", "is_target": false}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "  /**", "is_target": false}, {"number": 133, "content": "   * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 134, "content": "   */", "is_target": false}, {"number": 135, "content": "  virtual void update();", "is_target": true}, {"number": 136, "content": "", "is_target": false}, {"number": 137, "content": "  /** sets the pose of the vehicle", "is_target": false}, {"number": 138, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 139, "content": "  */", "is_target": false}, {"number": 140, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}]}, "1599": {"lines": [{"number": 135, "content": "  virtual void update();", "is_target": false}, {"number": 136, "content": "", "is_target": false}, {"number": 137, "content": "  /** sets the pose of the vehicle", "is_target": false}, {"number": 138, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 139, "content": "  */", "is_target": false}, {"number": 140, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 141, "content": "", "is_target": false}, {"number": 142, "content": "  /** gets Primitives of Leg tibia", "is_target": false}, {"number": 143, "content": "      @param LegPos Number", "is_target": false}, {"number": 144, "content": "  */", "is_target": false}, {"number": 145, "content": "  Primitive* getTibiaPrimitive(LegPos leg);", "is_target": false}]}, "1600": {"lines": [{"number": 148, "content": "  /** returns actual sensorvalues", "is_target": false}, {"number": 149, "content": "      @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 150, "content": "      @param sensornumber length of the sensor array", "is_target": false}, {"number": 151, "content": "      @return number of actually written sensors", "is_target": false}, {"number": 152, "content": "  */", "is_target": false}, {"number": 153, "content": "  virtual int getSensorsIntern(sensor* sensors, int sensornumber);", "is_target": true}, {"number": 154, "content": "", "is_target": false}, {"number": 155, "content": "  /** sets actual motorcommands", "is_target": false}, {"number": 156, "content": "      @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 157, "content": "      @param motornumber length of the motor array", "is_target": false}, {"number": 158, "content": "  */", "is_target": false}]}, "1601": {"lines": [{"number": 154, "content": "", "is_target": false}, {"number": 155, "content": "  /** sets actual motorcommands", "is_target": false}, {"number": 156, "content": "      @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 157, "content": "      @param motornumber length of the motor array", "is_target": false}, {"number": 158, "content": "  */", "is_target": false}, {"number": 159, "content": "  virtual void setMotorsIntern(const motor* motors, int motornumber);", "is_target": true}, {"number": 160, "content": "", "is_target": false}, {"number": 161, "content": "  /** returns number of sensors", "is_target": false}, {"number": 162, "content": "   */", "is_target": false}, {"number": 163, "content": "  virtual int getSensorNumberIntern() const override {", "is_target": false}, {"number": 164, "content": "    return sensorno;", "is_target": false}]}, "1602": {"lines": [{"number": 179, "content": "", "is_target": false}, {"number": 180, "content": "  /** this function is called in each timestep. It should perform robot-internal checks,", "is_target": false}, {"number": 181, "content": "    like space-internal collision detection, sensor resets/update etc.", "is_target": false}, {"number": 182, "content": "    @param globalData structure that contains global data from the simulation environment", "is_target": false}, {"number": 183, "content": "  */", "is_target": false}, {"number": 184, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": true}, {"number": 185, "content": "", "is_target": false}, {"number": 186, "content": "  virtual void sense(const GlobalData& globalData);", "is_target": false}, {"number": 187, "content": "", "is_target": false}, {"number": 188, "content": "  virtual double& getSumForce() { return sumForce; }", "is_target": false}, {"number": 189, "content": "", "is_target": false}]}, "1603": {"lines": [{"number": 181, "content": "    like space-internal collision detection, sensor resets/update etc.", "is_target": false}, {"number": 182, "content": "    @param globalData structure that contains global data from the simulation environment", "is_target": false}, {"number": 183, "content": "  */", "is_target": false}, {"number": 184, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 185, "content": "", "is_target": false}, {"number": 186, "content": "  virtual void sense(const GlobalData& globalData);", "is_target": true}, {"number": 187, "content": "", "is_target": false}, {"number": 188, "content": "  virtual double& getSumForce() { return sumForce; }", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "  virtual double& getContactPoints() { return contactPoints; }", "is_target": false}, {"number": 191, "content": "", "is_target": false}]}, "1604": {"lines": [{"number": 454, "content": "      virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 455, "content": "", "is_target": false}, {"number": 456, "content": "      /**", "is_target": false}, {"number": 457, "content": "       * destroys vehicle and space", "is_target": false}, {"number": 458, "content": "       */", "is_target": false}, {"number": 459, "content": "      virtual void destroy();", "is_target": true}, {"number": 460, "content": "", "is_target": false}, {"number": 461, "content": "      /**", "is_target": false}, {"number": 462, "content": "       * Assign a human readable name to a motor. This name is used for the", "is_target": false}, {"number": 463, "content": "       * associated inspectable value as used e.g. in guilogger.", "is_target": false}, {"number": 464, "content": "       *", "is_target": false}]}, "1605": {"lines": [{"number": 540, "content": "", "is_target": false}, {"number": 541, "content": "      // back bone joint", "is_target": false}, {"number": 542, "content": "      OneAxisServo * backboneServo;", "is_target": false}, {"number": 543, "content": "", "is_target": false}, {"number": 544, "content": "      // all the objects", "is_target": false}, {"number": 545, "content": "      PrimitiveList objects;", "is_target": true}, {"number": 546, "content": "", "is_target": false}, {"number": 547, "content": "      // all the joints", "is_target": false}, {"number": 548, "content": "      JointList joints;", "is_target": false}, {"number": 549, "content": "", "is_target": false}, {"number": 550, "content": "      // passive servos without a Motorname", "is_target": false}]}, "1606": {"lines": [{"number": 543, "content": "", "is_target": false}, {"number": 544, "content": "      // all the objects", "is_target": false}, {"number": 545, "content": "      PrimitiveList objects;", "is_target": false}, {"number": 546, "content": "", "is_target": false}, {"number": 547, "content": "      // all the joints", "is_target": false}, {"number": 548, "content": "      JointList joints;", "is_target": true}, {"number": 549, "content": "", "is_target": false}, {"number": 550, "content": "      // passive servos without a Motorname", "is_target": false}, {"number": 551, "content": "      ServoList passiveServos;", "is_target": false}, {"number": 552, "content": "", "is_target": false}, {"number": 553, "content": "      // contains all active servos", "is_target": false}]}, "1607": {"lines": [{"number": 44, "content": "       @param mode how to measure the axis orientation", "is_target": false}, {"number": 45, "content": "       @param dimensions bit mask for the dimensions to sense. Default: X | Y | Z (all dimensions)", "is_target": false}, {"number": 46, "content": "       @see Sensor::Dimensions", "is_target": false}, {"number": 47, "content": "       @see Mode", "is_target": false}, {"number": 48, "content": "     */", "is_target": false}, {"number": 49, "content": "    AxisOrientationSensor(Mode mode, short dimensions = Sensor::X | Sensor::Y | Sensor::Z );", "is_target": true}, {"number": 50, "content": "    virtual ~AxisOrientationSensor() {}", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 53, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 54, "content": "", "is_target": false}]}, "1608": {"lines": [{"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "      if(conf.useSliders){", "is_target": false}, {"number": 126, "content": "        Primitive* f;", "is_target": false}, {"number": 127, "content": "        f = new Sphere(conf.legLength/8);", "is_target": false}, {"number": 128, "content": "        f->init(odeHandle, legmass/8, osgHandle);", "is_target": false}, {"number": 129, "content": "        Pos pos = Pos(0,0,-(conf.legLength/2+conf.sliderLength/1.6));", "is_target": true}, {"number": 130, "content": "        f->setPose( osg::Matrix::translate(pos) * p->getPose());", "is_target": false}, {"number": 131, "content": "        objects.push_back(f);", "is_target": false}, {"number": 132, "content": "        SliderJoint* sj = new SliderJoint(p, f, pos * p->getPose(), Axis(0,0,1)* p->getPose());", "is_target": false}, {"number": 133, "content": "        sj->init(odeHandle, osgHandle, true, conf.sliderLength+conf.legLength/16);", "is_target": false}, {"number": 134, "content": "        joints.push_back(sj);", "is_target": false}]}, "1609": {"lines": [{"number": 45, "content": "       @param dimensions bit mask for the dimensions to sense. Default: X | Y | Z (all dimensions)", "is_target": false}, {"number": 46, "content": "       @see Sensor::Dimensions", "is_target": false}, {"number": 47, "content": "       @see Mode", "is_target": false}, {"number": 48, "content": "     */", "is_target": false}, {"number": 49, "content": "    AxisOrientationSensor(Mode mode, short dimensions = Sensor::X | Sensor::Y | Sensor::Z );", "is_target": false}, {"number": 50, "content": "    virtual ~AxisOrientationSensor() {}", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 53, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}]}, "1610": {"lines": [{"number": 47, "content": "       @see Mode", "is_target": false}, {"number": 48, "content": "     */", "is_target": false}, {"number": 49, "content": "    AxisOrientationSensor(Mode mode, short dimensions = Sensor::X | Sensor::Y | Sensor::Z );", "is_target": false}, {"number": 50, "content": "    virtual ~AxisOrientationSensor() {}", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 53, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 56, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 57, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}]}, "1611": {"lines": [{"number": 50, "content": "    virtual ~AxisOrientationSensor() {}", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 53, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": true}, {"number": 56, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 57, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  private:", "is_target": false}, {"number": 60, "content": "    Mode mode;", "is_target": false}]}, "1612": {"lines": [{"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 53, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 56, "content": "    virtual std::list<sensor> getList()  const;", "is_target": true}, {"number": 57, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  private:", "is_target": false}, {"number": 60, "content": "    Mode mode;", "is_target": false}, {"number": 61, "content": "    short dimensions;", "is_target": false}]}, "1613": {"lines": [{"number": 329, "content": "       * @param name name to display for this robot", "is_target": false}, {"number": 330, "content": "       */", "is_target": false}, {"number": 331, "content": "      AmosFour(const OdeHandle& odeHandle, const OsgHandle& osgHandle, const AmosFourConf& conf = getDefaultConf(),", "is_target": false}, {"number": 332, "content": "          const std::string& name = \"AmosII robot\");", "is_target": false}, {"number": 333, "content": "", "is_target": false}, {"number": 334, "content": "      virtual ~AmosFour();", "is_target": true}, {"number": 335, "content": "", "is_target": false}, {"number": 336, "content": "      /**", "is_target": false}, {"number": 337, "content": "       * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 338, "content": "       */", "is_target": false}, {"number": 339, "content": "      virtual void update();", "is_target": false}]}, "1614": {"lines": [{"number": 334, "content": "      virtual ~AmosFour();", "is_target": false}, {"number": 335, "content": "", "is_target": false}, {"number": 336, "content": "      /**", "is_target": false}, {"number": 337, "content": "       * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 338, "content": "       */", "is_target": false}, {"number": 339, "content": "      virtual void update();", "is_target": true}, {"number": 340, "content": "", "is_target": false}, {"number": 341, "content": "      /**", "is_target": false}, {"number": 342, "content": "       * sets the pose of the vehicle", "is_target": false}, {"number": 343, "content": "       * @param pose desired pose matrix", "is_target": false}, {"number": 344, "content": "       */", "is_target": false}]}, "1615": {"lines": [{"number": 340, "content": "", "is_target": false}, {"number": 341, "content": "      /**", "is_target": false}, {"number": 342, "content": "       * sets the pose of the vehicle", "is_target": false}, {"number": 343, "content": "       * @param pose desired pose matrix", "is_target": false}, {"number": 344, "content": "       */", "is_target": false}, {"number": 345, "content": "      virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 346, "content": "", "is_target": false}, {"number": 347, "content": "      /**", "is_target": false}, {"number": 348, "content": "       * returns actual sensorvalues", "is_target": false}, {"number": 349, "content": "       * @param sensors sensor array with sensors scaled to [-1,1]", "is_target": false}, {"number": 350, "content": "       * @param sensornumber length of the sensor array", "is_target": false}]}, "1616": {"lines": [{"number": 348, "content": "       * returns actual sensorvalues", "is_target": false}, {"number": 349, "content": "       * @param sensors sensor array with sensors scaled to [-1,1]", "is_target": false}, {"number": 350, "content": "       * @param sensornumber length of the sensor array", "is_target": false}, {"number": 351, "content": "       * @return number of actually written sensors", "is_target": false}, {"number": 352, "content": "       */", "is_target": false}, {"number": 353, "content": "      virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": true}, {"number": 354, "content": "", "is_target": false}, {"number": 355, "content": "      /**", "is_target": false}, {"number": 356, "content": "       * sets actual motorcommands", "is_target": false}, {"number": 357, "content": "       * @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 358, "content": "       * @param motornumber length of the motor array", "is_target": false}]}, "1617": {"lines": [{"number": 355, "content": "      /**", "is_target": false}, {"number": 356, "content": "       * sets actual motorcommands", "is_target": false}, {"number": 357, "content": "       * @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 358, "content": "       * @param motornumber length of the motor array", "is_target": false}, {"number": 359, "content": "       */", "is_target": false}, {"number": 360, "content": "      virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 361, "content": "", "is_target": false}, {"number": 362, "content": "      /**", "is_target": false}, {"number": 363, "content": "       * returns number of sensors", "is_target": false}, {"number": 364, "content": "       */", "is_target": false}, {"number": 365, "content": "      virtual int getSensorNumberIntern()  const override;", "is_target": false}]}, "1618": {"lines": [{"number": 374, "content": "       * robot-internal checks,like space-internal collision detection, sensor", "is_target": false}, {"number": 375, "content": "       * resets/update etc.", "is_target": false}, {"number": 376, "content": "       * @param globalData structure that contains global data from the", "is_target": false}, {"number": 377, "content": "       *                   simulation environment", "is_target": false}, {"number": 378, "content": "       */", "is_target": false}, {"number": 379, "content": "      virtual void doInternalStuff(const GlobalData& globalData);", "is_target": true}, {"number": 380, "content": "", "is_target": false}, {"number": 381, "content": "      virtual void sense(const GlobalData& globalData);", "is_target": false}, {"number": 382, "content": "", "is_target": false}, {"number": 383, "content": "      virtual double getMassOfRobot();", "is_target": false}, {"number": 384, "content": "", "is_target": false}]}, "1619": {"lines": [{"number": 376, "content": "       * @param globalData structure that contains global data from the", "is_target": false}, {"number": 377, "content": "       *                   simulation environment", "is_target": false}, {"number": 378, "content": "       */", "is_target": false}, {"number": 379, "content": "      virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 380, "content": "", "is_target": false}, {"number": 381, "content": "      virtual void sense(const GlobalData& globalData);", "is_target": true}, {"number": 382, "content": "", "is_target": false}, {"number": 383, "content": "      virtual double getMassOfRobot();", "is_target": false}, {"number": 384, "content": "", "is_target": false}, {"number": 385, "content": "      void setLegPosUsage(LegPos leg, LegPosUsage usage);", "is_target": false}, {"number": 386, "content": "", "is_target": false}]}, "1620": {"lines": [{"number": 383, "content": "      virtual double getMassOfRobot();", "is_target": false}, {"number": 384, "content": "", "is_target": false}, {"number": 385, "content": "      void setLegPosUsage(LegPos leg, LegPosUsage usage);", "is_target": false}, {"number": 386, "content": "", "is_target": false}, {"number": 387, "content": "      // Configurable Interface", "is_target": false}, {"number": 388, "content": "      virtual bool setParam(const paramkey& key, paramval val, bool traverseChildren = true);", "is_target": true}, {"number": 389, "content": "", "is_target": false}, {"number": 390, "content": "      /**", "is_target": false}, {"number": 391, "content": "       * the main object of the robot, which is used for position and speed", "is_target": false}, {"number": 392, "content": "       * tracking", "is_target": false}, {"number": 393, "content": "       */", "is_target": false}]}, "1621": {"lines": [{"number": 389, "content": "", "is_target": false}, {"number": 390, "content": "      /**", "is_target": false}, {"number": 391, "content": "       * the main object of the robot, which is used for position and speed", "is_target": false}, {"number": 392, "content": "       * tracking", "is_target": false}, {"number": 393, "content": "       */", "is_target": false}, {"number": 394, "content": "      virtual Primitive* getMainPrimitive()  const;", "is_target": true}, {"number": 395, "content": "", "is_target": false}, {"number": 396, "content": "      /**", "is_target": false}, {"number": 397, "content": "       * returns the MotorName enum value for the given joint at the given", "is_target": false}, {"number": 398, "content": "       * leg. If the value for leg or joint are not valid AMOSII_MOTOR_MAX", "is_target": false}, {"number": 399, "content": "       * is returned.", "is_target": false}]}, "1622": {"lines": [{"number": 44, "content": "       @param mode how to measure the axis orientation", "is_target": false}, {"number": 45, "content": "       @param dimensions bit mask for the dimensions to sense. Default: X | Y | Z (all dimensions)", "is_target": false}, {"number": 46, "content": "       @see Sensor::Dimensions", "is_target": false}, {"number": 47, "content": "       @see Mode", "is_target": false}, {"number": 48, "content": "     */", "is_target": false}, {"number": 49, "content": "    AxisOrientationSensor(Mode mode, short dimensions = Sensor::X | Sensor::Y | Sensor::Z );", "is_target": true}, {"number": 50, "content": "    virtual ~AxisOrientationSensor() {}", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 53, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 54, "content": "", "is_target": false}]}, "1623": {"lines": [{"number": 45, "content": "       @param dimensions bit mask for the dimensions to sense. Default: X | Y | Z (all dimensions)", "is_target": false}, {"number": 46, "content": "       @see Sensor::Dimensions", "is_target": false}, {"number": 47, "content": "       @see Mode", "is_target": false}, {"number": 48, "content": "     */", "is_target": false}, {"number": 49, "content": "    AxisOrientationSensor(Mode mode, short dimensions = Sensor::X | Sensor::Y | Sensor::Z );", "is_target": false}, {"number": 50, "content": "    virtual ~AxisOrientationSensor() {}", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 53, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}]}, "1624": {"lines": [{"number": 47, "content": "       @see Mode", "is_target": false}, {"number": 48, "content": "     */", "is_target": false}, {"number": 49, "content": "    AxisOrientationSensor(Mode mode, short dimensions = Sensor::X | Sensor::Y | Sensor::Z );", "is_target": false}, {"number": 50, "content": "    virtual ~AxisOrientationSensor() {}", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 53, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 56, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 57, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}]}, "1625": {"lines": [{"number": 50, "content": "    virtual ~AxisOrientationSensor() {}", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 53, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": true}, {"number": 56, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 57, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  private:", "is_target": false}, {"number": 60, "content": "    Mode mode;", "is_target": false}]}, "1626": {"lines": [{"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 53, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 56, "content": "    virtual std::list<sensor> getList()  const;", "is_target": true}, {"number": 57, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "  private:", "is_target": false}, {"number": 60, "content": "    Mode mode;", "is_target": false}, {"number": 61, "content": "    short dimensions;", "is_target": false}]}, "1627": {"lines": [{"number": 1014, "content": "", "is_target": false}, {"number": 1015, "content": "    created=true;", "is_target": false}, {"number": 1016, "content": "  }", "is_target": false}, {"number": 1017, "content": "", "is_target": false}, {"number": 1018, "content": "  // getTorqueSensorData", "is_target": false}, {"number": 1019, "content": "  sensor Hexabot::getTorqueData(TorqueSensor*  torqueSensor){", "is_target": true}, {"number": 1020, "content": "    std::list<sensor> a;", "is_target": false}, {"number": 1021, "content": "    std::list<sensor>::iterator it;", "is_target": false}, {"number": 1022, "content": "    if(0){//(torqueSensor){", "is_target": false}, {"number": 1023, "content": "      a = torqueSensor->getList();", "is_target": false}, {"number": 1024, "content": "      it = a.end();", "is_target": false}]}, "1628": {"lines": [{"number": 104, "content": "      c.height    = 128;", "is_target": false}, {"number": 105, "content": "      c.fov       = 90;", "is_target": false}, {"number": 106, "content": "      c.anamorph  = 1;", "is_target": false}, {"number": 107, "content": "      c.behind    = 0.04f; // since the nearplane is at 0.05", "is_target": false}, {"number": 108, "content": "      c.camSize   = 0.2f;", "is_target": false}, {"number": 109, "content": "      c.draw      = true;", "is_target": true}, {"number": 110, "content": "      c.show      = true;", "is_target": false}, {"number": 111, "content": "      c.scale     = 1.0;", "is_target": false}, {"number": 112, "content": "      c.name      = \"raw\";", "is_target": false}, {"number": 113, "content": "      return c;", "is_target": false}, {"number": 114, "content": "    }", "is_target": false}]}, "1629": {"lines": [{"number": 94, "content": "         in conf.imageProcessors matters.", "is_target": false}, {"number": 95, "content": "        The resulting CameraImages are stored in a list (see getImages) and", "is_target": false}, {"number": 96, "content": "        usually the processors use the last image in this list (result of last processing).", "is_target": false}, {"number": 97, "content": "     */", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "    Camera( const CameraConf& conf = getDefaultConf() );", "is_target": true}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "    static CameraConf getDefaultConf() {", "is_target": false}, {"number": 102, "content": "      CameraConf c;", "is_target": false}, {"number": 103, "content": "      c.width     = 256;", "is_target": false}, {"number": 104, "content": "      c.height    = 128;", "is_target": false}]}, "1630": {"lines": [{"number": 1410, "content": "    c.footMass = (mass - c.trunkMass) / 6 * c.useFoot / 20.0;", "is_target": false}, {"number": 1411, "content": "", "is_target": false}, {"number": 1412, "content": "    //As real robot!!", "is_target": false}, {"number": 1413, "content": "    const double shoulderHeight_cm = 6.5;", "is_target": false}, {"number": 1414, "content": "    //shoulder height __PLACEHOLDER_205__ --> correct=6.5 cm from rotating point", "is_target": false}, {"number": 1415, "content": "    c.shoulderHeight = shoulderHeight_cm / 6.5 * c.height;", "is_target": true}, {"number": 1416, "content": "", "is_target": false}, {"number": 1417, "content": "    // distance between hindlegs and middle legs", "is_target": false}, {"number": 1418, "content": "    c.legdist1 = 19.0 / 43.0 * c.size;", "is_target": false}, {"number": 1419, "content": "    // distance between middle legs and front legs", "is_target": false}, {"number": 1420, "content": "    c.legdist2 = 15.0 / 43.0 * c.size;", "is_target": false}]}, "1631": {"lines": [{"number": 382, "content": "      sensors[R2_fs] = legContactSensors[R2] ? legContactSensors[R2]->get() : 0;", "is_target": false}, {"number": 383, "content": "//      sensors[L0_fs] = legContactSensors[L0] ? legContactSensors[L0]->get() : 0;", "is_target": false}, {"number": 384, "content": "      sensors[L1_fs] = legContactSensors[L1] ? legContactSensors[L1]->get() : 0;", "is_target": false}, {"number": 385, "content": "      sensors[L2_fs] = legContactSensors[L2] ? legContactSensors[L2]->get() : 0;", "is_target": false}, {"number": 386, "content": "    } else { // Scaling since analog signals are used then we scale them to the range of [0,..,1]", "is_target": false}, {"number": 387, "content": "      std::vector<double> max, min;", "is_target": true}, {"number": 388, "content": "      if (conf.amos_version == 2) {", "is_target": false}, {"number": 389, "content": "        max.push_back(0.16);", "is_target": false}, {"number": 390, "content": "        max.push_back(0.20);", "is_target": false}, {"number": 391, "content": "        max.push_back(0.14);", "is_target": false}, {"number": 392, "content": "        max.push_back(0.24);", "is_target": false}]}, "1632": {"lines": [{"number": 382, "content": "      sensors[R2_fs] = legContactSensors[R2] ? legContactSensors[R2]->get() : 0;", "is_target": false}, {"number": 383, "content": "//      sensors[L0_fs] = legContactSensors[L0] ? legContactSensors[L0]->get() : 0;", "is_target": false}, {"number": 384, "content": "      sensors[L1_fs] = legContactSensors[L1] ? legContactSensors[L1]->get() : 0;", "is_target": false}, {"number": 385, "content": "      sensors[L2_fs] = legContactSensors[L2] ? legContactSensors[L2]->get() : 0;", "is_target": false}, {"number": 386, "content": "    } else { // Scaling since analog signals are used then we scale them to the range of [0,..,1]", "is_target": false}, {"number": 387, "content": "      std::vector<double> max, min;", "is_target": true}, {"number": 388, "content": "      if (conf.amos_version == 2) {", "is_target": false}, {"number": 389, "content": "        max.push_back(0.16);", "is_target": false}, {"number": 390, "content": "        max.push_back(0.20);", "is_target": false}, {"number": 391, "content": "        max.push_back(0.14);", "is_target": false}, {"number": 392, "content": "        max.push_back(0.24);", "is_target": false}]}, "1633": {"lines": [{"number": 848, "content": "    // create the legs", "is_target": false}, {"number": 849, "content": "    for (int i = 0; i < LEG_POS_MAX; ++i)  {", "is_target": false}, {"number": 850, "content": "      LegPos leg = LegPos(i);", "is_target": false}, {"number": 851, "content": "      if (legPosUsage[leg] == LEG) {", "is_target": false}, {"number": 852, "content": "        // get a representation of the origin", "is_target": false}, {"number": 853, "content": "        const Pos nullpos(0, 0, 0);", "is_target": true}, {"number": 854, "content": "", "is_target": false}, {"number": 855, "content": "        // +1 for R1,R2,R3, -1 for L1,L2,L3", "is_target": false}, {"number": 856, "content": "        const double pmrl = (leg == R1 || leg == R2) - (leg == L1 || leg == L2);", "is_target": false}, {"number": 857, "content": "", "is_target": false}, {"number": 858, "content": "        osg::Matrix c1;", "is_target": false}]}, "1634": {"lines": [{"number": 857, "content": "", "is_target": false}, {"number": 858, "content": "        osg::Matrix c1;", "is_target": false}, {"number": 859, "content": "", "is_target": false}, {"number": 860, "content": "        // m0 is the position where the center of mass of the zeroth limb", "is_target": false}, {"number": 861, "content": "        // capsule is placed", "is_target": false}, {"number": 862, "content": "        osg::Matrix m0;", "is_target": true}, {"number": 863, "content": "", "is_target": false}, {"number": 864, "content": "        if (conf.useShoulder) {", "is_target": false}, {"number": 865, "content": "          //shift connection of coxa outward", "is_target": false}, {"number": 866, "content": "          c1 = TRANSM(0, 0, -l0) * legtrunkconnections[leg];", "is_target": false}, {"number": 867, "content": "          //create shoulder", "is_target": false}]}, "1635": {"lines": [{"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "    /** Creates a camera sensor. Use setInitData() to make it useable.", "is_target": false}, {"number": 44, "content": "     */", "is_target": false}, {"number": 45, "content": "    CameraSensor();", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    virtual ~CameraSensor();", "is_target": true}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "    /** sets the initial data structures like the camera.", "is_target": false}, {"number": 50, "content": "        The camera will be initialized in init() (don't initialize it before).", "is_target": false}, {"number": 51, "content": "        @param pose position and orientation of camera wrt.", "is_target": false}, {"number": 52, "content": "        the primitive that is given at init()", "is_target": false}]}, "1636": {"lines": [{"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "    /// relative pose of the camera", "is_target": false}, {"number": 61, "content": "    virtual osg::Matrix getPose();", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "    /// this function initialized the camera (no need to overload) (Sensor interface)", "is_target": false}, {"number": 64, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "    /// overload this function an process the image (use camera->getImage())", "is_target": false}, {"number": 67, "content": "    virtual bool sense(const GlobalData& globaldata)  = 0;", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "    /// overload this function and return the number of sensor values", "is_target": false}]}, "1637": {"lines": [{"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "    /// this function initialized the camera (no need to overload) (Sensor interface)", "is_target": false}, {"number": 64, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "    /// overload this function an process the image (use camera->getImage())", "is_target": false}, {"number": 67, "content": "    virtual bool sense(const GlobalData& globaldata)  = 0;", "is_target": true}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "    /// overload this function and return the number of sensor values", "is_target": false}, {"number": 70, "content": "    virtual int getSensorNumber() const  = 0;", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    /// overload this function and return the sensor values", "is_target": false}]}, "1638": {"lines": [{"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "    /// overload this function an process the image (use camera->getImage())", "is_target": false}, {"number": 67, "content": "    virtual bool sense(const GlobalData& globaldata)  = 0;", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "    /// overload this function and return the number of sensor values", "is_target": false}, {"number": 70, "content": "    virtual int getSensorNumber() const  = 0;", "is_target": true}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    /// overload this function and return the sensor values", "is_target": false}, {"number": 73, "content": "    virtual int get(sensor* sensors, int length) const  = 0;", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "    /// we update the camera's visual appearance", "is_target": false}]}, "1639": {"lines": [{"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "    /// overload this function and return the number of sensor values", "is_target": false}, {"number": 70, "content": "    virtual int getSensorNumber() const  = 0;", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    /// overload this function and return the sensor values", "is_target": false}, {"number": 73, "content": "    virtual int get(sensor* sensors, int length) const  = 0;", "is_target": true}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "    /// we update the camera's visual appearance", "is_target": false}, {"number": 76, "content": "    virtual void update();", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "    /// this is implemented based on get(sensor*,int)", "is_target": false}]}, "1640": {"lines": [{"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    /// overload this function and return the sensor values", "is_target": false}, {"number": 73, "content": "    virtual int get(sensor* sensors, int length) const  = 0;", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "    /// we update the camera's visual appearance", "is_target": false}, {"number": 76, "content": "    virtual void update();", "is_target": true}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "    /// this is implemented based on get(sensor*,int)", "is_target": false}, {"number": 79, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  protected:", "is_target": false}]}, "1641": {"lines": [{"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "    /// we update the camera's visual appearance", "is_target": false}, {"number": 76, "content": "    virtual void update();", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "    /// this is implemented based on get(sensor*,int)", "is_target": false}, {"number": 79, "content": "    virtual std::list<sensor> getList()  const;", "is_target": true}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  protected:", "is_target": false}, {"number": 82, "content": "    /** overload this function to initialized you data structures.", "is_target": false}, {"number": 83, "content": "        Use camera->getImage() to get the image from the camera", "is_target": false}, {"number": 84, "content": "    */", "is_target": false}]}, "1643": {"lines": [{"number": 13, "content": "", "is_target": false}, {"number": 14, "content": "    /**", "is_target": false}, {"number": 15, "content": "     * @param attachedSensor Sensor of which the derivative is computed", "is_target": false}, {"number": 16, "content": "     * @param factor Scaling factor for derivative", "is_target": false}, {"number": 17, "content": "     */", "is_target": false}, {"number": 18, "content": "    DerivativeSensor(Sensor* attachedSensor, double factor = 1);", "is_target": true}, {"number": 19, "content": "", "is_target": false}, {"number": 20, "content": "    virtual ~DerivativeSensor() {}", "is_target": false}, {"number": 21, "content": "", "is_target": false}, {"number": 22, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 23, "content": "", "is_target": false}]}, "1644": {"lines": [{"number": 15, "content": "     * @param attachedSensor Sensor of which the derivative is computed", "is_target": false}, {"number": 16, "content": "     * @param factor Scaling factor for derivative", "is_target": false}, {"number": 17, "content": "     */", "is_target": false}, {"number": 18, "content": "    DerivativeSensor(Sensor* attachedSensor, double factor = 1);", "is_target": false}, {"number": 19, "content": "", "is_target": false}, {"number": 20, "content": "    virtual ~DerivativeSensor() {}", "is_target": true}, {"number": 21, "content": "", "is_target": false}, {"number": 22, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 23, "content": "", "is_target": false}, {"number": 24, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 25, "content": "", "is_target": false}]}, "1645": {"lines": [{"number": 17, "content": "     */", "is_target": false}, {"number": 18, "content": "    DerivativeSensor(Sensor* attachedSensor, double factor = 1);", "is_target": false}, {"number": 19, "content": "", "is_target": false}, {"number": 20, "content": "    virtual ~DerivativeSensor() {}", "is_target": false}, {"number": 21, "content": "", "is_target": false}, {"number": 22, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 23, "content": "", "is_target": false}, {"number": 24, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 25, "content": "", "is_target": false}, {"number": 26, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 27, "content": "", "is_target": false}]}, "1646": {"lines": [{"number": 21, "content": "", "is_target": false}, {"number": 22, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 23, "content": "", "is_target": false}, {"number": 24, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 25, "content": "", "is_target": false}, {"number": 26, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": true}, {"number": 27, "content": "", "is_target": false}, {"number": 28, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 29, "content": "", "is_target": false}, {"number": 30, "content": "  protected:", "is_target": false}, {"number": 31, "content": "    //Current time step of the simulation", "is_target": false}]}, "1647": {"lines": [{"number": 23, "content": "", "is_target": false}, {"number": 24, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 25, "content": "", "is_target": false}, {"number": 26, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 27, "content": "", "is_target": false}, {"number": 28, "content": "    virtual std::list<sensor> getList()  const;", "is_target": true}, {"number": 29, "content": "", "is_target": false}, {"number": 30, "content": "  protected:", "is_target": false}, {"number": 31, "content": "    //Current time step of the simulation", "is_target": false}, {"number": 32, "content": "    double timeStepSize = 0;", "is_target": false}, {"number": 33, "content": "    //Values of last time step", "is_target": false}]}, "1648": {"lines": [{"number": 134, "content": "     * @param conf configuration object", "is_target": false}, {"number": 135, "content": "     */", "is_target": false}, {"number": 136, "content": "    Skeleton(const OdeHandle& odeHandle, const OsgHandle& osgHandle, SkeletonConf& conf,", "is_target": false}, {"number": 137, "content": "               const std::string& name);", "is_target": false}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "    virtual ~Skeleton() { destroy(); };", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "    static SkeletonConf getDefaultConf() {", "is_target": false}, {"number": 142, "content": "      SkeletonConf c;", "is_target": false}, {"number": 143, "content": "      c.size        = 1;", "is_target": false}, {"number": 144, "content": "      c.massfactor  = 1;", "is_target": false}]}, "1649": {"lines": [{"number": 246, "content": "", "is_target": false}, {"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 249, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 250, "content": "    */", "is_target": false}, {"number": 251, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 252, "content": "", "is_target": false}, {"number": 253, "content": "    virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": false}, {"number": 254, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": false}, {"number": 255, "content": "    virtual int getSensorNumberIntern()  const override;", "is_target": false}, {"number": 256, "content": "    virtual int getMotorNumberIntern()  const override;", "is_target": false}]}, "1650": {"lines": [{"number": 248, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 249, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 250, "content": "    */", "is_target": false}, {"number": 251, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 252, "content": "", "is_target": false}, {"number": 253, "content": "    virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": true}, {"number": 254, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": false}, {"number": 255, "content": "    virtual int getSensorNumberIntern()  const override;", "is_target": false}, {"number": 256, "content": "    virtual int getMotorNumberIntern()  const override;", "is_target": false}, {"number": 257, "content": "", "is_target": false}, {"number": 258, "content": "", "is_target": false}]}, "1651": {"lines": [{"number": 249, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 250, "content": "    */", "is_target": false}, {"number": 251, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 252, "content": "", "is_target": false}, {"number": 253, "content": "    virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": false}, {"number": 254, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 255, "content": "    virtual int getSensorNumberIntern()  const override;", "is_target": false}, {"number": 256, "content": "    virtual int getMotorNumberIntern()  const override;", "is_target": false}, {"number": 257, "content": "", "is_target": false}, {"number": 258, "content": "", "is_target": false}, {"number": 259, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}]}, "1652": {"lines": [{"number": 258, "content": "", "is_target": false}, {"number": 259, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 260, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 261, "content": "", "is_target": false}, {"number": 262, "content": "    /** the main object of the robot, which is used for position and speed tracking */", "is_target": false}, {"number": 263, "content": "    virtual const Primitive* getMainPrimitive() const { return objects[Thorax]; } // Trunk_comp", "is_target": true}, {"number": 264, "content": "", "is_target": false}, {"number": 265, "content": "    /** returns the position of the head */", "is_target": false}, {"number": 266, "content": "    [[nodiscard]] virtual Position getHeadPosition() const;", "is_target": false}, {"number": 267, "content": "", "is_target": false}, {"number": 268, "content": "    /** returns the position of the trunk */", "is_target": false}]}, "1653": {"lines": [{"number": 109, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"hip left sagital  (back-/front+)\");", "is_target": false}, {"number": 110, "content": "    n++;", "is_target": false}, {"number": 111, "content": "    if(!conf.onlyPrimaryFunctions)", "is_target": false}, {"number": 112, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"hip left lateral  (in-/out+)\");", "is_target": false}, {"number": 113, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"hip right sagital (back-/front+)\");", "is_target": false}, {"number": 114, "content": "    if(!conf.onlyPrimaryFunctions)", "is_target": true}, {"number": 115, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"hip right lateral (in-/out+)\");", "is_target": false}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"knee left (bend-/stretch+)\");", "is_target": false}, {"number": 118, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"knee right (bend-/stretch+)\");", "is_target": false}, {"number": 119, "content": "", "is_target": false}]}, "1654": {"lines": [{"number": 119, "content": "", "is_target": false}, {"number": 120, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"ankle left (bend-/stretch+)\");", "is_target": false}, {"number": 121, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"ankle right (bend-/stretch+)\");", "is_target": false}, {"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"shoulder left lateral (up-/down+)\");", "is_target": false}, {"number": 124, "content": "    if(!conf.onlyPrimaryFunctions)", "is_target": true}, {"number": 125, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"shoulder left sagital (out-/in+)\");", "is_target": false}, {"number": 126, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"shoulder right lateral (up-/down+)\");", "is_target": false}, {"number": 127, "content": "    if(!conf.onlyPrimaryFunctions)", "is_target": false}, {"number": 128, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"shoulder right sagital (out-/in+)\");", "is_target": false}, {"number": 129, "content": "", "is_target": false}]}, "1655": {"lines": [{"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"shoulder left lateral (up-/down+)\");", "is_target": false}, {"number": 124, "content": "    if(!conf.onlyPrimaryFunctions)", "is_target": false}, {"number": 125, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"shoulder left sagital (out-/in+)\");", "is_target": false}, {"number": 126, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"shoulder right lateral (up-/down+)\");", "is_target": false}, {"number": 127, "content": "    if(!conf.onlyPrimaryFunctions)", "is_target": true}, {"number": 128, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"shoulder right sagital (out-/in+)\");", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"elbow left (bend-/stretch+)\");", "is_target": false}, {"number": 131, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"elbow right (bend-/stretch+)\");", "is_target": false}, {"number": 132, "content": "", "is_target": false}]}, "1656": {"lines": [{"number": 128, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"shoulder right sagital (out-/in+)\");", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"elbow left (bend-/stretch+)\");", "is_target": false}, {"number": 131, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"elbow right (bend-/stretch+)\");", "is_target": false}, {"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "    if(!conf.onlyPrimaryFunctions)", "is_target": true}, {"number": 134, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"pelvis (bend left-/right+)\");", "is_target": false}, {"number": 135, "content": "    if(conf.useBackJoint){", "is_target": false}, {"number": 136, "content": "      if(conf.backSideBend && !conf.onlyPrimaryFunctions){", "is_target": false}, {"number": 137, "content": "        // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"back (torsion)\");", "is_target": false}, {"number": 138, "content": "        // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"back (bend back-/front+)\");", "is_target": false}]}, "1657": {"lines": [{"number": 37, "content": "       @param exponent exponent of the sensor characteritic (default: 1 (linear))", "is_target": false}, {"number": 38, "content": "       @param size size of sensor in simulation", "is_target": false}, {"number": 39, "content": "       @param range maximum range of the IR sensor", "is_target": false}, {"number": 40, "content": "       @param drawMode draw mode of the sensor", "is_target": false}, {"number": 41, "content": "    */", "is_target": false}, {"number": 42, "content": "    IRSensor(double exponent = 1, double size = 0.05, double range = 2,", "is_target": true}, {"number": 43, "content": "             RaySensor::rayDrawMode drawMode = RaySensor::drawSensor);", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "    //Override sense to include characteristic", "is_target": false}, {"number": 46, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 47, "content": "", "is_target": false}]}, "1658": {"lines": [{"number": 34, "content": "   */", "is_target": false}, {"number": 35, "content": "  class PhysicalSensor : public Sensor {", "is_target": false}, {"number": 36, "content": "  public:", "is_target": false}, {"number": 37, "content": "", "is_target": false}, {"number": 38, "content": "    PhysicalSensor() : isInitDataSet(false) {}", "is_target": false}, {"number": 39, "content": "    virtual ~PhysicalSensor() {}", "is_target": true}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "    /** sets the initial data structures", "is_target": false}, {"number": 42, "content": "        @param pose position and orientation of sensor (e.g. camera) wrt.", "is_target": false}, {"number": 43, "content": "        the primitive that is given at init()", "is_target": false}, {"number": 44, "content": "     */", "is_target": false}]}, "1659": {"lines": [{"number": 52, "content": "     * @param range maximum range of the Ray sensor", "is_target": false}, {"number": 53, "content": "     * @param drawMode draw mode of the sensor", "is_target": false}, {"number": 54, "content": "     */", "is_target": false}, {"number": 55, "content": "    RaySensor(double size , double range, rayDrawMode drawMode);", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "    ~RaySensor();", "is_target": true}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "    ///Create a copy of this without initialization", "is_target": false}, {"number": 60, "content": "    virtual RaySensor* clone() const;", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    void setPose(const osg::Matrix& pose);", "is_target": false}]}, "1660": {"lines": [{"number": 57, "content": "    ~RaySensor();", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "    ///Create a copy of this without initialization", "is_target": false}, {"number": 60, "content": "    virtual RaySensor* clone() const;", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    void setPose(const osg::Matrix& pose);", "is_target": true}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "    void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "    bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 67, "content": "", "is_target": false}]}, "1661": {"lines": [{"number": 59, "content": "    ///Create a copy of this without initialization", "is_target": false}, {"number": 60, "content": "    virtual RaySensor* clone() const;", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    void setPose(const osg::Matrix& pose);", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "    void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "    bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "    int get(sensor* sensors, int length)  const;", "is_target": false}, {"number": 69, "content": "", "is_target": false}]}, "1662": {"lines": [{"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    void setPose(const osg::Matrix& pose);", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "    void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "    bool sense(const GlobalData& globaldata);", "is_target": true}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "    int get(sensor* sensors, int length)  const;", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "    std::list<sensor> getList()  const;", "is_target": false}, {"number": 71, "content": "", "is_target": false}]}, "1663": {"lines": [{"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "    void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "    bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "    int get(sensor* sensors, int length)  const;", "is_target": true}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "    std::list<sensor> getList()  const;", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 73, "content": "", "is_target": false}]}, "1664": {"lines": [{"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "    bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "    int get(sensor* sensors, int length)  const;", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "    std::list<sensor> getList()  const;", "is_target": true}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "    virtual void update();", "is_target": false}, {"number": 75, "content": "", "is_target": false}]}, "1665": {"lines": [{"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "    std::list<sensor> getList()  const;", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "    virtual void update();", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "    ///Set maximum range of ray", "is_target": false}, {"number": 77, "content": "    virtual void setRange(double range);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "    ///Set draw mode of ray", "is_target": false}]}, "1666": {"lines": [{"number": 41, "content": "    */", "is_target": false}, {"number": 42, "content": "    IRSensor(double exponent = 1, double size = 0.05, double range = 2,", "is_target": false}, {"number": 43, "content": "             RaySensor::rayDrawMode drawMode = RaySensor::drawSensor);", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "    //Override sense to include characteristic", "is_target": false}, {"number": 46, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": true}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "    //Override to return value given by characteristic", "is_target": false}, {"number": 49, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 50, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 51, "content": "", "is_target": false}]}, "1667": {"lines": [{"number": 45, "content": "    //Override sense to include characteristic", "is_target": false}, {"number": 46, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "    //Override to return value given by characteristic", "is_target": false}, {"number": 49, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 50, "content": "    virtual std::list<sensor> getList()  const;", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    //Directly return value (needed for backward compatibility", "is_target": false}, {"number": 53, "content": "    virtual double getValue() const;", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    /// returns the exponent of the sensor characteritic (default: 1 (linear))", "is_target": false}]}, "1669": {"lines": [{"number": 364, "content": "", "is_target": false}, {"number": 365, "content": "    OsgHandle osgHandleJ = osgHandle.changeColor(\"joint\");", "is_target": false}, {"number": 366, "content": "    HingeJoint* j;", "is_target": false}, {"number": 367, "content": "    UniversalJoint* uj;", "is_target": false}, {"number": 368, "content": "    FixedJoint* fj;", "is_target": false}, {"number": 369, "content": "    BallJoint*  bj;", "is_target": true}, {"number": 370, "content": "    OneAxisServo* servo1;", "is_target": false}, {"number": 371, "content": "    TwoAxisServo* servo2;", "is_target": false}, {"number": 372, "content": "    Primitive* b ;", "is_target": false}, {"number": 373, "content": "    //    AngularMotor* f;", "is_target": false}, {"number": 374, "content": "", "is_target": false}]}, "1670": {"lines": [{"number": 355, "content": "    osgHandle = osgHandle.changeColor(conf.bodyColor);", "is_target": false}, {"number": 356, "content": "    OsgHandle osgHTrousers(osgHandle.changeColor(conf.trouserColor));", "is_target": false}, {"number": 357, "content": "    OsgHandle osgHTrunk(osgHandle.changeColor(conf.trunkColor));", "is_target": false}, {"number": 358, "content": "", "is_target": false}, {"number": 359, "content": "", "is_target": false}, {"number": 360, "content": "    OdeHandle ignoreColSpace(odeHandle);", "is_target": true}, {"number": 361, "content": "    ignoreColSpace.createNewSimpleSpace(odeHandle.space, true);", "is_target": false}, {"number": 362, "content": "", "is_target": false}, {"number": 363, "content": "", "is_target": false}, {"number": 364, "content": "", "is_target": false}, {"number": 365, "content": "    OsgHandle osgHandleJ = osgHandle.changeColor(\"joint\");", "is_target": false}]}, "1671": {"lines": [{"number": 104, "content": "      c.height    = 128;", "is_target": false}, {"number": 105, "content": "      c.fov       = 90;", "is_target": false}, {"number": 106, "content": "      c.anamorph  = 1;", "is_target": false}, {"number": 107, "content": "      c.behind    = 0.04f; // since the nearplane is at 0.05", "is_target": false}, {"number": 108, "content": "      c.camSize   = 0.2f;", "is_target": false}, {"number": 109, "content": "      c.draw      = true;", "is_target": true}, {"number": 110, "content": "      c.show      = true;", "is_target": false}, {"number": 111, "content": "      c.scale     = 1.0;", "is_target": false}, {"number": 112, "content": "      c.name      = \"raw\";", "is_target": false}, {"number": 113, "content": "      return c;", "is_target": false}, {"number": 114, "content": "    }", "is_target": false}]}, "1672": {"lines": [{"number": 75, "content": "  /// black and white image @see StdImageProcessor", "is_target": false}, {"number": 76, "content": "  struct BWImageProcessor : public StdImageProcessor {", "is_target": false}, {"number": 77, "content": "    enum ChannelMask {Red = 1, Green = 2, Blue = 4, Hue = 1, Saturation = 2, Value = 4};", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "    /// @param channelmask which channels to consider, @see BWImageProcessor::ChannelMask", "is_target": false}, {"number": 80, "content": "    BWImageProcessor(bool show, float scale, char channelmask = 7)", "is_target": true}, {"number": 81, "content": "      : StdImageProcessor(show,scale), channelmask(channelmask) {}", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "    virtual ~BWImageProcessor() {}", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "    virtual void initDestImage(Camera::CameraImage& dest, const Camera::CameraImage& src) override {", "is_target": false}]}, "1673": {"lines": [{"number": 75, "content": "  /// black and white image @see StdImageProcessor", "is_target": false}, {"number": 76, "content": "  struct BWImageProcessor : public StdImageProcessor {", "is_target": false}, {"number": 77, "content": "    enum ChannelMask {Red = 1, Green = 2, Blue = 4, Hue = 1, Saturation = 2, Value = 4};", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "    /// @param channelmask which channels to consider, @see BWImageProcessor::ChannelMask", "is_target": false}, {"number": 80, "content": "    BWImageProcessor(bool show, float scale, char channelmask = 7)", "is_target": true}, {"number": 81, "content": "      : StdImageProcessor(show,scale), channelmask(channelmask) {}", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "    virtual ~BWImageProcessor() {}", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "    virtual void initDestImage(Camera::CameraImage& dest, const Camera::CameraImage& src) override {", "is_target": false}]}, "1674": {"lines": [{"number": 75, "content": "  /// black and white image @see StdImageProcessor", "is_target": false}, {"number": 76, "content": "  struct BWImageProcessor : public StdImageProcessor {", "is_target": false}, {"number": 77, "content": "    enum ChannelMask {Red = 1, Green = 2, Blue = 4, Hue = 1, Saturation = 2, Value = 4};", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "    /// @param channelmask which channels to consider, @see BWImageProcessor::ChannelMask", "is_target": false}, {"number": 80, "content": "    BWImageProcessor(bool show, float scale, char channelmask = 7)", "is_target": true}, {"number": 81, "content": "      : StdImageProcessor(show,scale), channelmask(channelmask) {}", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "    virtual ~BWImageProcessor() {}", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "    virtual void initDestImage(Camera::CameraImage& dest, const Camera::CameraImage& src) override {", "is_target": false}]}, "1675": {"lines": [{"number": 149, "content": "      c.border           = 0;", "is_target": false}, {"number": 150, "content": "      return c;", "is_target": false}, {"number": 151, "content": "    }", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "    /// sets the names of the sensors and starts with the given names (for subclasses)", "is_target": false}, {"number": 154, "content": "    virtual void setNamesIntern(std::vector<std::string>& names) {", "is_target": true}, {"number": 155, "content": "      setBaseInfo(SensorMotorInfo(\"CamAvg: \").changequantity(SensorMotorInfo::Other));", "is_target": false}, {"number": 156, "content": "      if(conf.values& Position) {", "is_target": false}, {"number": 157, "content": "        if(conf.dims& X) names.push_back(\"PosH\");", "is_target": false}, {"number": 158, "content": "        if(conf.dims& Y) names.push_back(\"PosV\");", "is_target": false}, {"number": 159, "content": "      }", "is_target": false}]}, "1676": {"lines": [{"number": 100, "content": "    */", "is_target": false}, {"number": 101, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "    /** destroys vehicle and space", "is_target": false}, {"number": 104, "content": "     */", "is_target": false}, {"number": 105, "content": "    virtual void destroy();", "is_target": true}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "    TwoWheeledConf conf;", "is_target": false}, {"number": 108, "content": "    CameraSensor* camsensor;", "is_target": false}, {"number": 109, "content": "    Camera* cam;", "is_target": false}, {"number": 110, "content": "  };", "is_target": false}]}, "1677": {"lines": [{"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "    /** destroys vehicle and space", "is_target": false}, {"number": 104, "content": "     */", "is_target": false}, {"number": 105, "content": "    virtual void destroy();", "is_target": false}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "    TwoWheeledConf conf;", "is_target": true}, {"number": 108, "content": "    CameraSensor* camsensor;", "is_target": false}, {"number": 109, "content": "    Camera* cam;", "is_target": false}, {"number": 110, "content": "  };", "is_target": false}, {"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "}", "is_target": false}]}, "1678": {"lines": [{"number": 60, "content": "     * @param name name of the robot", "is_target": false}, {"number": 61, "content": "     */", "is_target": false}, {"number": 62, "content": "    TwoWheeled(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 63, "content": "               TwoWheeledConf conf, const std::string& name);", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "    static TwoWheeledConf getDefaultConf() {", "is_target": true}, {"number": 66, "content": "      TwoWheeledConf conf;", "is_target": false}, {"number": 67, "content": "      conf.n2cfg = Nimm2::getDefaultConf();", "is_target": false}, {"number": 68, "content": "      conf.camcfg = Camera::getDefaultConf();", "is_target": false}, {"number": 69, "content": "      conf.camcfg.width = 256;", "is_target": false}, {"number": 70, "content": "      conf.camcfg.height = 64;", "is_target": false}]}, "1679": {"lines": [{"number": 313, "content": "      if(mconf.dims & X) names.push_back(\"MotionH\");", "is_target": false}, {"number": 314, "content": "      if(mconf.dims & Y) names.push_back(\"MotionV\");", "is_target": false}, {"number": 315, "content": "      setNamesIntern(names);", "is_target": false}, {"number": 316, "content": "    }", "is_target": false}, {"number": 317, "content": "", "is_target": false}, {"number": 318, "content": "    static MotionCameraSensorConf getDefaultConf() {", "is_target": true}, {"number": 319, "content": "      MotionCameraSensorConf c;", "is_target": false}, {"number": 320, "content": "      c.avg              = 2;", "is_target": false}, {"number": 321, "content": "      c.values           = None;", "is_target": false}, {"number": 322, "content": "      c.dims             = X;", "is_target": false}, {"number": 323, "content": "      c.factorSizeChange = 10.0;", "is_target": false}]}, "1680": {"lines": [{"number": 94, "content": "         in conf.imageProcessors matters.", "is_target": false}, {"number": 95, "content": "        The resulting CameraImages are stored in a list (see getImages) and", "is_target": false}, {"number": 96, "content": "        usually the processors use the last image in this list (result of last processing).", "is_target": false}, {"number": 97, "content": "     */", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "    Camera( const CameraConf& conf = getDefaultConf() );", "is_target": true}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "    static CameraConf getDefaultConf() {", "is_target": false}, {"number": 102, "content": "      CameraConf c;", "is_target": false}, {"number": 103, "content": "      c.width     = 256;", "is_target": false}, {"number": 104, "content": "      c.height    = 128;", "is_target": false}]}, "1681": {"lines": [{"number": 47, "content": "        @see CameraSensor for further parameter explanation.", "is_target": false}, {"number": 48, "content": "        @param minValue pixel value that corresponds to -1", "is_target": false}, {"number": 49, "content": "        @param maxValue pixel value that corresponds to 1", "is_target": false}, {"number": 50, "content": "        (for minValue =-256 and maxValue=256 the sensor values are in [0,1)", "is_target": false}, {"number": 51, "content": "     */", "is_target": false}, {"number": 52, "content": "    DirectCameraSensor(int minValue=-256, int maxValue=256)", "is_target": true}, {"number": 53, "content": "      : minValue(minValue), maxValue(maxValue) {", "is_target": false}, {"number": 54, "content": "    }", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "    virtual ~DirectCameraSensor() {", "is_target": false}]}, "1682": {"lines": [{"number": 129, "content": "        @param values sensor values to compute (@see PositionCameraSensor::ValueTypes)", "is_target": false}, {"number": 130, "content": "        @param dims dimensions to return the position (X means horizonal, Y vertical)", "is_target": false}, {"number": 131, "content": "        @param border if >0 then the size and sizechange are zero if position is that far (border) away from", "is_target": false}, {"number": 132, "content": "        image border", "is_target": false}, {"number": 133, "content": "     */", "is_target": false}, {"number": 134, "content": "    PositionCameraSensor(PositionCameraSensorConf conf = getDefaultConf())", "is_target": true}, {"number": 135, "content": "      : conf(conf), oldsize(0) {", "is_target": false}, {"number": 136, "content": "      num = (bool(conf.dims& X) + bool(conf.dims& Y))* bool(conf.values& Position) +", "is_target": false}, {"number": 137, "content": "        bool(conf.values& Size) + bool(conf.values& SizeChange);", "is_target": false}, {"number": 138, "content": "      std::vector<std::string> names;", "is_target": false}, {"number": 139, "content": "      setNamesIntern(names);", "is_target": false}]}, "1683": {"lines": [{"number": 301, "content": "        (e.g. @see BWImageProcessor or ColorFilterImgProc)", "is_target": false}, {"number": 302, "content": "        @see CameraSensor for further parameter explanation.", "is_target": false}, {"number": 303, "content": "        @param mconf configuration object @see MotionCameraSensorConf", "is_target": false}, {"number": 304, "content": "         and @see PositionCameraSensorConf", "is_target": false}, {"number": 305, "content": "     */", "is_target": false}, {"number": 306, "content": "    MotionCameraSensor(const MotionCameraSensorConf& mconf = getDefaultConf())", "is_target": true}, {"number": 307, "content": "      : PositionCameraSensor(mconf), mconf(mconf)", "is_target": false}, {"number": 308, "content": "    {", "is_target": false}, {"number": 309, "content": "      if(this->mconf.avg<1) this->mconf.avg=1;", "is_target": false}, {"number": 310, "content": "      lambda = 1/static_cast<double>(this->mconf.avg);", "is_target": false}, {"number": 311, "content": "      num   += bool(this->mconf.dims & X) + bool(this->mconf.dims & Y);", "is_target": false}]}, "1685": {"lines": [{"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "    /** Creates a camera sensor. Use setInitData() to make it useable.", "is_target": false}, {"number": 44, "content": "     */", "is_target": false}, {"number": 45, "content": "    CameraSensor();", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    virtual ~CameraSensor();", "is_target": true}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "    /** sets the initial data structures like the camera.", "is_target": false}, {"number": 50, "content": "        The camera will be initialized in init() (don't initialize it before).", "is_target": false}, {"number": 51, "content": "        @param pose position and orientation of camera wrt.", "is_target": false}, {"number": 52, "content": "        the primitive that is given at init()", "is_target": false}]}, "1686": {"lines": [{"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "    /// relative pose of the camera", "is_target": false}, {"number": 61, "content": "    virtual osg::Matrix getPose();", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "    /// this function initialized the camera (no need to overload) (Sensor interface)", "is_target": false}, {"number": 64, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "    /// overload this function an process the image (use camera->getImage())", "is_target": false}, {"number": 67, "content": "    virtual bool sense(const GlobalData& globaldata)  = 0;", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "    /// overload this function and return the number of sensor values", "is_target": false}]}, "1687": {"lines": [{"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "    /// this function initialized the camera (no need to overload) (Sensor interface)", "is_target": false}, {"number": 64, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "    /// overload this function an process the image (use camera->getImage())", "is_target": false}, {"number": 67, "content": "    virtual bool sense(const GlobalData& globaldata)  = 0;", "is_target": true}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "    /// overload this function and return the number of sensor values", "is_target": false}, {"number": 70, "content": "    virtual int getSensorNumber() const  = 0;", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    /// overload this function and return the sensor values", "is_target": false}]}, "1688": {"lines": [{"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "    /// overload this function an process the image (use camera->getImage())", "is_target": false}, {"number": 67, "content": "    virtual bool sense(const GlobalData& globaldata)  = 0;", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "    /// overload this function and return the number of sensor values", "is_target": false}, {"number": 70, "content": "    virtual int getSensorNumber() const  = 0;", "is_target": true}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    /// overload this function and return the sensor values", "is_target": false}, {"number": 73, "content": "    virtual int get(sensor* sensors, int length) const  = 0;", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "    /// we update the camera's visual appearance", "is_target": false}]}, "1689": {"lines": [{"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "    /// overload this function and return the number of sensor values", "is_target": false}, {"number": 70, "content": "    virtual int getSensorNumber() const  = 0;", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    /// overload this function and return the sensor values", "is_target": false}, {"number": 73, "content": "    virtual int get(sensor* sensors, int length) const  = 0;", "is_target": true}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "    /// we update the camera's visual appearance", "is_target": false}, {"number": 76, "content": "    virtual void update();", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "    /// this is implemented based on get(sensor*,int)", "is_target": false}]}, "1690": {"lines": [{"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "    /// overload this function and return the sensor values", "is_target": false}, {"number": 73, "content": "    virtual int get(sensor* sensors, int length) const  = 0;", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "    /// we update the camera's visual appearance", "is_target": false}, {"number": 76, "content": "    virtual void update();", "is_target": true}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "    /// this is implemented based on get(sensor*,int)", "is_target": false}, {"number": 79, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  protected:", "is_target": false}]}, "1691": {"lines": [{"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "    /// we update the camera's visual appearance", "is_target": false}, {"number": 76, "content": "    virtual void update();", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "    /// this is implemented based on get(sensor*,int)", "is_target": false}, {"number": 79, "content": "    virtual std::list<sensor> getList()  const;", "is_target": true}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  protected:", "is_target": false}, {"number": 82, "content": "    /** overload this function to initialized you data structures.", "is_target": false}, {"number": 83, "content": "        Use camera->getImage() to get the image from the camera", "is_target": false}, {"number": 84, "content": "    */", "is_target": false}]}, "1692": {"lines": [{"number": 39, "content": "  public:", "is_target": false}, {"number": 40, "content": "    StdImageProcessor(bool show, float scale) {", "is_target": false}, {"number": 41, "content": "      _dest.show  = show;", "is_target": false}, {"number": 42, "content": "      _dest.scale = scale;", "is_target": false}, {"number": 43, "content": "    };", "is_target": false}, {"number": 44, "content": "    virtual ~StdImageProcessor() {", "is_target": true}, {"number": 45, "content": "    };", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    /// overload this function and initialise the dest.img and the dest.name", "is_target": false}, {"number": 48, "content": "    virtual void initDestImage(Camera::CameraImage& dest, const Camera::CameraImage& src) = 0;", "is_target": false}, {"number": 49, "content": "", "is_target": false}]}, "1693": {"lines": [{"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "    /// @param channelmask which channels to consider, @see BWImageProcessor::ChannelMask", "is_target": false}, {"number": 80, "content": "    BWImageProcessor(bool show, float scale, char channelmask = 7)", "is_target": false}, {"number": 81, "content": "      : StdImageProcessor(show,scale), channelmask(channelmask) {}", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "    virtual ~BWImageProcessor() {}", "is_target": true}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "    virtual void initDestImage(Camera::CameraImage& dest, const Camera::CameraImage& src) override {", "is_target": false}, {"number": 86, "content": "      dest.img->allocateImage(src.img->s(), src.img->t(), 1, GL_LUMINANCE, GL_UNSIGNED_BYTE);", "is_target": false}, {"number": 87, "content": "      dest.name  = \"bw(\" + src.name + \")\";", "is_target": false}, {"number": 88, "content": "      red   = (channelmask & 1);", "is_target": false}]}, "1694": {"lines": [{"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "    HSVImgProc(bool show, float scale)", "is_target": false}, {"number": 125, "content": "      : StdImageProcessor(show,scale) {", "is_target": false}, {"number": 126, "content": "    }", "is_target": false}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "    virtual ~HSVImgProc() {}", "is_target": true}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "    virtual void initDestImage(Camera::CameraImage& dest, const Camera::CameraImage& src) override {", "is_target": false}, {"number": 131, "content": "      dest.img->allocateImage(src.img->s(), src.img->t(), 1, GL_RGB, GL_UNSIGNED_BYTE);", "is_target": false}, {"number": 132, "content": "      dest.name  = \"hsv(\" + src.name + \")\";", "is_target": false}, {"number": 133, "content": "    }", "is_target": false}]}, "1695": {"lines": [{"number": 198, "content": "                       int sat_threshold=100, int val_threshold=50)", "is_target": false}, {"number": 199, "content": "      : StdImageProcessor(show,scale),", "is_target": false}, {"number": 200, "content": "        minhue(minhue), maxhue(maxhue), sat_threshold(sat_threshold), val_threshold(val_threshold) {", "is_target": false}, {"number": 201, "content": "    }", "is_target": false}, {"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "    virtual ~ColorFilterImgProc() {}", "is_target": true}, {"number": 204, "content": "", "is_target": false}, {"number": 205, "content": "    virtual void initDestImage(Camera::CameraImage& dest, const Camera::CameraImage& src) override {", "is_target": false}, {"number": 206, "content": "      dest.img->allocateImage(src.img->s(), src.img->t(), 1, GL_LUMINANCE, GL_UNSIGNED_BYTE);", "is_target": false}, {"number": 207, "content": "          //      dest.img->allocateImage(16, 1, 1, GL_LUMINANCE, GL_UNSIGNED_BYTE);", "is_target": false}, {"number": 208, "content": "      dest.name  = \"spots(\" + src.name + \")\";", "is_target": false}]}, "1696": {"lines": [{"number": 244, "content": "  struct LineImgProc : public StdImageProcessor {", "is_target": false}, {"number": 245, "content": "    LineImgProc(bool show, float scale, int num, double factor = 20.0)", "is_target": false}, {"number": 246, "content": "      : StdImageProcessor(show,scale), num(num), factor(factor) {", "is_target": false}, {"number": 247, "content": "    }", "is_target": false}, {"number": 248, "content": "", "is_target": false}, {"number": 249, "content": "    virtual ~LineImgProc() {}", "is_target": true}, {"number": 250, "content": "", "is_target": false}, {"number": 251, "content": "    virtual void initDestImage(Camera::CameraImage& dest, const Camera::CameraImage& src) override {", "is_target": false}, {"number": 252, "content": "      dest.img->allocateImage(num, 1, 1, GL_LUMINANCE, GL_UNSIGNED_BYTE);", "is_target": false}, {"number": 253, "content": "      dest.name  = \"line(\" + src.name + \")\";", "is_target": false}, {"number": 254, "content": "    }", "is_target": false}]}, "1697": {"lines": [{"number": 289, "content": "      : StdImageProcessor(show,scale), time(time) {", "is_target": false}, {"number": 290, "content": "      if(time<1) time =1;", "is_target": false}, {"number": 291, "content": "      factor = 1.0/static_cast<float>(time);", "is_target": false}, {"number": 292, "content": "    }", "is_target": false}, {"number": 293, "content": "", "is_target": false}, {"number": 294, "content": "    virtual ~AvgImgProc() {}", "is_target": true}, {"number": 295, "content": "", "is_target": false}, {"number": 296, "content": "    virtual void initDestImage(Camera::CameraImage& dest, const Camera::CameraImage& src) override {", "is_target": false}, {"number": 297, "content": "      assert(src.img && src.img->getDataType()==GL_UNSIGNED_BYTE);", "is_target": false}, {"number": 298, "content": "      dest.img->allocateImage(src.img->s(), src.img->t(), 1, src.img->getPixelFormat(),", "is_target": false}, {"number": 299, "content": "                              GL_UNSIGNED_BYTE);", "is_target": false}]}, "1698": {"lines": [{"number": 81, "content": "        * osg::Matrix::translate(-0.20,0,0.40);", "is_target": false}, {"number": 82, "content": "      conf.camSensor = 0;", "is_target": false}, {"number": 83, "content": "      return conf;", "is_target": false}, {"number": 84, "content": "    }", "is_target": false}, {"number": 85, "content": "", "is_target": false}, {"number": 86, "content": "    virtual ~TwoWheeled();", "is_target": true}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "    virtual void update();", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 91, "content": "", "is_target": false}]}, "1699": {"lines": [{"number": 83, "content": "      return conf;", "is_target": false}, {"number": 84, "content": "    }", "is_target": false}, {"number": 85, "content": "", "is_target": false}, {"number": 86, "content": "    virtual ~TwoWheeled();", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "    virtual void update();", "is_target": true}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "    virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": false}, {"number": 93, "content": "", "is_target": false}]}, "1700": {"lines": [{"number": 85, "content": "", "is_target": false}, {"number": 86, "content": "    virtual ~TwoWheeled();", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "    virtual void update();", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    virtual int getSensorNumberIntern() const;", "is_target": true}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "    virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": false}, {"number": 93, "content": "", "is_target": false}, {"number": 94, "content": "    virtual void sense(const GlobalData& globalData);", "is_target": false}, {"number": 95, "content": "", "is_target": false}]}, "1701": {"lines": [{"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "    virtual void update();", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "    virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": true}, {"number": 93, "content": "", "is_target": false}, {"number": 94, "content": "    virtual void sense(const GlobalData& globalData);", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "  protected:", "is_target": false}]}, "1702": {"lines": [{"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "    virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": false}, {"number": 93, "content": "", "is_target": false}, {"number": 94, "content": "    virtual void sense(const GlobalData& globalData);", "is_target": true}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "  protected:", "is_target": false}, {"number": 98, "content": "    /** creates vehicle at desired pose", "is_target": false}, {"number": 99, "content": "        @param pose 4x4 pose matrix", "is_target": false}]}, "1703": {"lines": [{"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "  protected:", "is_target": false}, {"number": 98, "content": "    /** creates vehicle at desired pose", "is_target": false}, {"number": 99, "content": "        @param pose 4x4 pose matrix", "is_target": false}, {"number": 100, "content": "    */", "is_target": false}, {"number": 101, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": true}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "    /** destroys vehicle and space", "is_target": false}, {"number": 104, "content": "     */", "is_target": false}, {"number": 105, "content": "    virtual void destroy();", "is_target": false}, {"number": 106, "content": "", "is_target": false}]}, "1704": {"lines": [{"number": 100, "content": "    */", "is_target": false}, {"number": 101, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "    /** destroys vehicle and space", "is_target": false}, {"number": 104, "content": "     */", "is_target": false}, {"number": 105, "content": "    virtual void destroy();", "is_target": true}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "    TwoWheeledConf conf;", "is_target": false}, {"number": 108, "content": "    CameraSensor* camsensor;", "is_target": false}, {"number": 109, "content": "    Camera* cam;", "is_target": false}, {"number": 110, "content": "  };", "is_target": false}]}, "1705": {"lines": [{"number": 52, "content": "    DirectCameraSensor(int minValue=-256, int maxValue=256)", "is_target": false}, {"number": 53, "content": "      : minValue(minValue), maxValue(maxValue) {", "is_target": false}, {"number": 54, "content": "    }", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "    virtual ~DirectCameraSensor() {", "is_target": true}, {"number": 58, "content": "      delete[] data;", "is_target": false}, {"number": 59, "content": "    }", "is_target": false}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "    virtual void intern_init() override {", "is_target": false}, {"number": 62, "content": "      assert(camera->isInitialized());", "is_target": false}]}, "1706": {"lines": [{"number": 160, "content": "      if(conf.values& Size) names.push_back(\"Size\");", "is_target": false}, {"number": 161, "content": "      if(conf.values& SizeChange) names.push_back(\"Size Change\");", "is_target": false}, {"number": 162, "content": "      setNames(names);", "is_target": false}, {"number": 163, "content": "    }", "is_target": false}, {"number": 164, "content": "", "is_target": false}, {"number": 165, "content": "    virtual ~PositionCameraSensor() {", "is_target": true}, {"number": 166, "content": "      if(data) delete[] data;", "is_target": false}, {"number": 167, "content": "    }", "is_target": false}, {"number": 168, "content": "", "is_target": false}, {"number": 169, "content": "    virtual void intern_init() override {", "is_target": false}, {"number": 170, "content": "      assert(camera->isInitialized());", "is_target": false}]}, "1707": {"lines": [{"number": 327, "content": "      c.factorMotion     = 5.0;", "is_target": false}, {"number": 328, "content": "      c.window           = true;", "is_target": false}, {"number": 329, "content": "      return c;", "is_target": false}, {"number": 330, "content": "    }", "is_target": false}, {"number": 331, "content": "", "is_target": false}, {"number": 332, "content": "    virtual ~MotionCameraSensor() {", "is_target": true}, {"number": 333, "content": "    }", "is_target": false}, {"number": 334, "content": "", "is_target": false}, {"number": 335, "content": "    /// Performs the calculations", "is_target": false}, {"number": 336, "content": "    virtual bool sense(const GlobalData& globaldata) override {", "is_target": false}, {"number": 337, "content": "      const osg::Image* img = camera->getImage();", "is_target": false}]}, "1708": {"lines": [{"number": 100, "content": "    */", "is_target": false}, {"number": 101, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "    /** destroys vehicle and space", "is_target": false}, {"number": 104, "content": "     */", "is_target": false}, {"number": 105, "content": "    virtual void destroy();", "is_target": true}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "    TwoWheeledConf conf;", "is_target": false}, {"number": 108, "content": "    CameraSensor* camsensor;", "is_target": false}, {"number": 109, "content": "    Camera* cam;", "is_target": false}, {"number": 110, "content": "  };", "is_target": false}]}, "1709": {"lines": [{"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "      data = new sensor[num];", "is_target": false}, {"number": 173, "content": "      memset(data,0,sizeof(sensor)*num);", "is_target": false}, {"number": 174, "content": "", "is_target": false}, {"number": 175, "content": "      const osg::Image* img = camera->getImage();", "is_target": false}, {"number": 176, "content": "      img=img; // to avoid unused variable in NDEBUG mode", "is_target": true}, {"number": 177, "content": "      assert(img && img->getPixelFormat()==GL_LUMINANCE  &&", "is_target": false}, {"number": 178, "content": "             img->getDataType()==GL_UNSIGNED_BYTE);", "is_target": false}, {"number": 179, "content": "    };", "is_target": false}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "", "is_target": false}]}, "1710": {"lines": [{"number": 35, "content": "", "is_target": false}, {"number": 36, "content": "namespace lpzrobots {", "is_target": false}, {"number": 37, "content": "", "is_target": false}, {"number": 38, "content": "  // this function is called if the sensor object has a collision. In the userdata we get the", "is_target": false}, {"number": 39, "content": "  //  contactsensor and the depth is in the contact information", "is_target": false}, {"number": 40, "content": "  int contactCollCallbackNoCol(dSurfaceParameters& params, GlobalData& globaldata, void *userdata,", "is_target": true}, {"number": 41, "content": "                               dContact* contacts, int numContacts,", "is_target": false}, {"number": 42, "content": "                               dGeomID o1, dGeomID o2, const Substance& s1, const Substance& s2){", "is_target": false}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "    ContactSensor* sensor = static_cast<ContactSensor*>(userdata);", "is_target": false}, {"number": 45, "content": "    sensor->setDepth(contacts[0].geom.depth, globaldata.sim_step);", "is_target": false}]}, "1711": {"lines": [{"number": 45, "content": "    sensor->setDepth(contacts[0].geom.depth, globaldata.sim_step);", "is_target": false}, {"number": 46, "content": "    return 0;", "is_target": false}, {"number": 47, "content": "  }", "is_target": false}, {"number": 48, "content": "  // this function is called if the sensor object has a collision. In the userdata we get the", "is_target": false}, {"number": 49, "content": "  //  contactsensor and the depth is in the contact information", "is_target": false}, {"number": 50, "content": "  int contactCollCallback(dSurfaceParameters& params, GlobalData& globaldata, void *userdata,", "is_target": true}, {"number": 51, "content": "                          dContact* contacts, int numContacts,", "is_target": false}, {"number": 52, "content": "                          dGeomID o1, dGeomID o2, const Substance& s1, const Substance& s2){", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    ContactSensor* sensor = static_cast<ContactSensor*>(userdata);", "is_target": false}, {"number": 55, "content": "    sensor->setDepth(contacts[0].geom.depth, globaldata.sim_step);", "is_target": false}]}, "1712": {"lines": [{"number": 105, "content": "      addParameter(\"backjointlimit\",   &conf.backJointLimit       ,0,10);", "is_target": false}, {"number": 106, "content": "    }", "is_target": false}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "    int n=0;", "is_target": false}, {"number": 109, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"hip left sagital  (back-/front+)\");", "is_target": false}, {"number": 110, "content": "    n++;", "is_target": true}, {"number": 111, "content": "    if(!conf.onlyPrimaryFunctions)", "is_target": false}, {"number": 112, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"hip left lateral  (in-/out+)\");", "is_target": false}, {"number": 113, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"hip right sagital (back-/front+)\");", "is_target": false}, {"number": 114, "content": "    if(!conf.onlyPrimaryFunctions)", "is_target": false}, {"number": 115, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"hip right lateral (in-/out+)\");", "is_target": false}]}, "1713": {"lines": [{"number": 135, "content": "    if(conf.useBackJoint){", "is_target": false}, {"number": 136, "content": "      if(conf.backSideBend && !conf.onlyPrimaryFunctions){", "is_target": false}, {"number": 137, "content": "        // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"back (torsion)\");", "is_target": false}, {"number": 138, "content": "        // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"back (bend back-/front+)\");", "is_target": false}, {"number": 139, "content": "        // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"back (bend left-/right+)\");", "is_target": false}, {"number": 140, "content": "        n += 3;", "is_target": true}, {"number": 141, "content": "      }else{", "is_target": false}, {"number": 142, "content": "        // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"back (bend back-/front+)\");", "is_target": false}, {"number": 143, "content": "        // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"back (torsion)\");", "is_target": false}, {"number": 144, "content": "        n += 2;", "is_target": false}, {"number": 145, "content": "      }", "is_target": false}]}, "1714": {"lines": [{"number": 139, "content": "        // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"back (bend left-/right+)\");", "is_target": false}, {"number": 140, "content": "        n += 3;", "is_target": false}, {"number": 141, "content": "      }else{", "is_target": false}, {"number": 142, "content": "        // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"back (bend back-/front+)\");", "is_target": false}, {"number": 143, "content": "        // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"back (torsion)\");", "is_target": false}, {"number": 144, "content": "        n += 2;", "is_target": true}, {"number": 145, "content": "      }", "is_target": false}, {"number": 146, "content": "    }", "is_target": false}, {"number": 147, "content": "    if(conf.movableHead && !conf.onlyPrimaryFunctions){", "is_target": false}, {"number": 148, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"head (left-/right+)\");", "is_target": false}, {"number": 149, "content": "    // addInspectableDescription(\"x[\" + itos(n++) + \"]\",\"head (back-/front+)\");", "is_target": false}]}, "1715": {"lines": [{"number": 467, "content": "      virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 468, "content": "", "is_target": false}, {"number": 469, "content": "      /**", "is_target": false}, {"number": 470, "content": "       * destroys vehicle and space", "is_target": false}, {"number": 471, "content": "       */", "is_target": false}, {"number": 472, "content": "      virtual void destroy();", "is_target": true}, {"number": 473, "content": "", "is_target": false}, {"number": 474, "content": "      /**", "is_target": false}, {"number": 475, "content": "       * Assign a human readable name to a motor. This name is used for the", "is_target": false}, {"number": 476, "content": "       * associated inspectable value as used e.g. in guilogger.", "is_target": false}, {"number": 477, "content": "       *", "is_target": false}]}, "1716": {"lines": [{"number": 49, "content": "    /** @param dim Up-axis of the robot (sometimes it is not Z)", "is_target": false}, {"number": 50, "content": "        @param measure what to measure @see Measure", "is_target": false}, {"number": 51, "content": "    */", "is_target": false}, {"number": 52, "content": "    explicit SoundSensor(Dimensions dim = Z, Measure measure = Angle,", "is_target": false}, {"number": 53, "content": "                int segments=1, int levels=1, double maxDistance=50, double noisestrength=0.1);", "is_target": false}, {"number": 54, "content": "    virtual ~SoundSensor();", "is_target": true}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) override { this->own = own;}", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 59, "content": "", "is_target": false}]}, "1717": {"lines": [{"number": 53, "content": "                int segments=1, int levels=1, double maxDistance=50, double noisestrength=0.1);", "is_target": false}, {"number": 54, "content": "    virtual ~SoundSensor();", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) override { this->own = own;}", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": true}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "    /// default implementation is a linear decrease in intensity until it is 0 at maxDistance", "is_target": false}, {"number": 61, "content": "    virtual float distanceDependency(const Sound& s, double distance);", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}]}, "1718": {"lines": [{"number": 60, "content": "    /// default implementation is a linear decrease in intensity until it is 0 at maxDistance", "is_target": false}, {"number": 61, "content": "    virtual float distanceDependency(const Sound& s, double distance);", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "    virtual std::list<sensor> getList()  const;", "is_target": true}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "  private:", "is_target": false}, {"number": 70, "content": "    short dim = 0; ///< the axis in which the sensor is selective around", "is_target": false}]}, "1719": {"lines": [{"number": 342, "content": "       * @param name name to display for this robot", "is_target": false}, {"number": 343, "content": "       */", "is_target": false}, {"number": 344, "content": "      AmosII(const OdeHandle& odeHandle, const OsgHandle& osgHandle, const AmosIIConf& conf = getDefaultConf(),", "is_target": false}, {"number": 345, "content": "          const std::string& name = \"AmosII robot\");", "is_target": false}, {"number": 346, "content": "", "is_target": false}, {"number": 347, "content": "      virtual ~AmosII();", "is_target": true}, {"number": 348, "content": "", "is_target": false}, {"number": 349, "content": "      /**", "is_target": false}, {"number": 350, "content": "       * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 351, "content": "       */", "is_target": false}, {"number": 352, "content": "      virtual void update();", "is_target": false}]}, "1720": {"lines": [{"number": 347, "content": "      virtual ~AmosII();", "is_target": false}, {"number": 348, "content": "", "is_target": false}, {"number": 349, "content": "      /**", "is_target": false}, {"number": 350, "content": "       * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 351, "content": "       */", "is_target": false}, {"number": 352, "content": "      virtual void update();", "is_target": true}, {"number": 353, "content": "", "is_target": false}, {"number": 354, "content": "      /**", "is_target": false}, {"number": 355, "content": "       * sets the pose of the vehicle", "is_target": false}, {"number": 356, "content": "       * @param pose desired pose matrix", "is_target": false}, {"number": 357, "content": "       */", "is_target": false}]}, "1721": {"lines": [{"number": 353, "content": "", "is_target": false}, {"number": 354, "content": "      /**", "is_target": false}, {"number": 355, "content": "       * sets the pose of the vehicle", "is_target": false}, {"number": 356, "content": "       * @param pose desired pose matrix", "is_target": false}, {"number": 357, "content": "       */", "is_target": false}, {"number": 358, "content": "      virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 359, "content": "", "is_target": false}, {"number": 360, "content": "      /**", "is_target": false}, {"number": 361, "content": "       * returns actual sensorvalues", "is_target": false}, {"number": 362, "content": "       * @param sensors sensor array with sensors scaled to [-1,1]", "is_target": false}, {"number": 363, "content": "       * @param sensornumber length of the sensor array", "is_target": false}]}, "1722": {"lines": [{"number": 361, "content": "       * returns actual sensorvalues", "is_target": false}, {"number": 362, "content": "       * @param sensors sensor array with sensors scaled to [-1,1]", "is_target": false}, {"number": 363, "content": "       * @param sensornumber length of the sensor array", "is_target": false}, {"number": 364, "content": "       * @return number of actually written sensors", "is_target": false}, {"number": 365, "content": "       */", "is_target": false}, {"number": 366, "content": "      virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": true}, {"number": 367, "content": "", "is_target": false}, {"number": 368, "content": "      /**", "is_target": false}, {"number": 369, "content": "       * sets actual motorcommands", "is_target": false}, {"number": 370, "content": "       * @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 371, "content": "       * @param motornumber length of the motor array", "is_target": false}]}, "1723": {"lines": [{"number": 368, "content": "      /**", "is_target": false}, {"number": 369, "content": "       * sets actual motorcommands", "is_target": false}, {"number": 370, "content": "       * @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 371, "content": "       * @param motornumber length of the motor array", "is_target": false}, {"number": 372, "content": "       */", "is_target": false}, {"number": 373, "content": "      virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 374, "content": "", "is_target": false}, {"number": 375, "content": "      /**", "is_target": false}, {"number": 376, "content": "       * returns number of sensors", "is_target": false}, {"number": 377, "content": "       */", "is_target": false}, {"number": 378, "content": "      virtual int getSensorNumberIntern()  const override;", "is_target": false}]}, "1724": {"lines": [{"number": 387, "content": "       * robot-internal checks,like space-internal collision detection, sensor", "is_target": false}, {"number": 388, "content": "       * resets/update etc.", "is_target": false}, {"number": 389, "content": "       * @param globalData structure that contains global data from the", "is_target": false}, {"number": 390, "content": "       *                   simulation environment", "is_target": false}, {"number": 391, "content": "       */", "is_target": false}, {"number": 392, "content": "      virtual void doInternalStuff(const GlobalData& globalData);", "is_target": true}, {"number": 393, "content": "", "is_target": false}, {"number": 394, "content": "      virtual void sense(const GlobalData& globalData);", "is_target": false}, {"number": 395, "content": "", "is_target": false}, {"number": 396, "content": "      virtual double getMassOfRobot();", "is_target": false}, {"number": 397, "content": "", "is_target": false}]}, "1725": {"lines": [{"number": 389, "content": "       * @param globalData structure that contains global data from the", "is_target": false}, {"number": 390, "content": "       *                   simulation environment", "is_target": false}, {"number": 391, "content": "       */", "is_target": false}, {"number": 392, "content": "      virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 393, "content": "", "is_target": false}, {"number": 394, "content": "      virtual void sense(const GlobalData& globalData);", "is_target": true}, {"number": 395, "content": "", "is_target": false}, {"number": 396, "content": "      virtual double getMassOfRobot();", "is_target": false}, {"number": 397, "content": "", "is_target": false}, {"number": 398, "content": "      void setLegPosUsage(LegPos leg, LegPosUsage usage);", "is_target": false}, {"number": 399, "content": "", "is_target": false}]}, "1726": {"lines": [{"number": 396, "content": "      virtual double getMassOfRobot();", "is_target": false}, {"number": 397, "content": "", "is_target": false}, {"number": 398, "content": "      void setLegPosUsage(LegPos leg, LegPosUsage usage);", "is_target": false}, {"number": 399, "content": "", "is_target": false}, {"number": 400, "content": "      // Configurable Interface", "is_target": false}, {"number": 401, "content": "      virtual bool setParam(const paramkey& key, paramval val, bool traverseChildren = true);", "is_target": true}, {"number": 402, "content": "", "is_target": false}, {"number": 403, "content": "      /**", "is_target": false}, {"number": 404, "content": "       * the main object of the robot, which is used for position and speed", "is_target": false}, {"number": 405, "content": "       * tracking", "is_target": false}, {"number": 406, "content": "       */", "is_target": false}]}, "1727": {"lines": [{"number": 402, "content": "", "is_target": false}, {"number": 403, "content": "      /**", "is_target": false}, {"number": 404, "content": "       * the main object of the robot, which is used for position and speed", "is_target": false}, {"number": 405, "content": "       * tracking", "is_target": false}, {"number": 406, "content": "       */", "is_target": false}, {"number": 407, "content": "      virtual const Primitive* getMainPrimitive()  const;", "is_target": true}, {"number": 408, "content": "", "is_target": false}, {"number": 409, "content": "      /**", "is_target": false}, {"number": 410, "content": "       * returns the MotorName enum value for the given joint at the given", "is_target": false}, {"number": 411, "content": "       * leg. If the value for leg or joint are not valid AMOSII_MOTOR_MAX", "is_target": false}, {"number": 412, "content": "       * is returned.", "is_target": false}]}, "1728": {"lines": [{"number": 1549, "content": "    c.footMass = (mass - c.trunkMass) / 6 * c.useFoot / 20.0;", "is_target": false}, {"number": 1550, "content": "", "is_target": false}, {"number": 1551, "content": "    //As real robot!!", "is_target": false}, {"number": 1552, "content": "    const double shoulderHeight_cm = 6.5;", "is_target": false}, {"number": 1553, "content": "    //shoulder height __PLACEHOLDER_208__ --> correct=6.5 cm from rotating point", "is_target": false}, {"number": 1554, "content": "    c.shoulderHeight = shoulderHeight_cm / 6.5 * c.height;", "is_target": true}, {"number": 1555, "content": "", "is_target": false}, {"number": 1556, "content": "    // distance between hindlegs and middle legs", "is_target": false}, {"number": 1557, "content": "    c.legdist1 = 19.0 / 43.0 * c.size;", "is_target": false}, {"number": 1558, "content": "    // distance between middle legs and front legs", "is_target": false}, {"number": 1559, "content": "    c.legdist2 = 15.0 / 43.0 * c.size;", "is_target": false}]}, "1730": {"lines": [{"number": 398, "content": "      sensors[L0_fs] = legContactSensors[L0] ? legContactSensors[L0]->get() : 0;", "is_target": false}, {"number": 399, "content": "      sensors[L1_fs] = legContactSensors[L1] ? legContactSensors[L1]->get() : 0;", "is_target": false}, {"number": 400, "content": "      sensors[L2_fs] = legContactSensors[L2] ? legContactSensors[L2]->get() : 0;", "is_target": false}, {"number": 401, "content": "    } else { // Scaling since analog signals are used then we scale them to the range of [0,..,1]", "is_target": false}, {"number": 402, "content": "      // Koh! Georg: What are the different values", "is_target": false}, {"number": 403, "content": "      std::vector<double> max, min;", "is_target": true}, {"number": 404, "content": "      if (conf.amos_version == 2) {", "is_target": false}, {"number": 405, "content": "", "is_target": false}, {"number": 406, "content": "        // Koh Corrected to have all equal max force in all legs", "is_target": false}, {"number": 407, "content": "         max.push_back(0.2);", "is_target": false}, {"number": 408, "content": "         max.push_back(0.2);", "is_target": false}]}, "1731": {"lines": [{"number": 398, "content": "      sensors[L0_fs] = legContactSensors[L0] ? legContactSensors[L0]->get() : 0;", "is_target": false}, {"number": 399, "content": "      sensors[L1_fs] = legContactSensors[L1] ? legContactSensors[L1]->get() : 0;", "is_target": false}, {"number": 400, "content": "      sensors[L2_fs] = legContactSensors[L2] ? legContactSensors[L2]->get() : 0;", "is_target": false}, {"number": 401, "content": "    } else { // Scaling since analog signals are used then we scale them to the range of [0,..,1]", "is_target": false}, {"number": 402, "content": "      // Koh! Georg: What are the different values", "is_target": false}, {"number": 403, "content": "      std::vector<double> max, min;", "is_target": true}, {"number": 404, "content": "      if (conf.amos_version == 2) {", "is_target": false}, {"number": 405, "content": "", "is_target": false}, {"number": 406, "content": "        // Koh Corrected to have all equal max force in all legs", "is_target": false}, {"number": 407, "content": "         max.push_back(0.2);", "is_target": false}, {"number": 408, "content": "         max.push_back(0.2);", "is_target": false}]}, "1732": {"lines": [{"number": 900, "content": "    // create the legs", "is_target": false}, {"number": 901, "content": "    for (int i = 0; i < LEG_POS_MAX; ++i)  {", "is_target": false}, {"number": 902, "content": "      LegPos leg = LegPos(i);", "is_target": false}, {"number": 903, "content": "      if (legPosUsage[leg] == LEG) {", "is_target": false}, {"number": 904, "content": "        // get a representation of the origin", "is_target": false}, {"number": 905, "content": "        const Pos nullpos(0, 0, 0);", "is_target": true}, {"number": 906, "content": "", "is_target": false}, {"number": 907, "content": "        // +1 for R1,R2,R3, -1 for L1,L2,L3", "is_target": false}, {"number": 908, "content": "        const double pmrl = (leg == R0 || leg == R1 || leg == R2) - (leg == L0 || leg == L1 || leg == L2);", "is_target": false}, {"number": 909, "content": "", "is_target": false}, {"number": 910, "content": "        osg::Matrix c1;", "is_target": false}]}, "1733": {"lines": [{"number": 909, "content": "", "is_target": false}, {"number": 910, "content": "        osg::Matrix c1;", "is_target": false}, {"number": 911, "content": "", "is_target": false}, {"number": 912, "content": "        // m0 is the position where the center of mass of the zeroth limb", "is_target": false}, {"number": 913, "content": "        // capsule is placed", "is_target": false}, {"number": 914, "content": "        osg::Matrix m0;", "is_target": true}, {"number": 915, "content": "", "is_target": false}, {"number": 916, "content": "        if (conf.useShoulder) {", "is_target": false}, {"number": 917, "content": "          //shift connection of coxa outward", "is_target": false}, {"number": 918, "content": "          c1 = TRANSM(0, 0, -l0) * legtrunkconnections[leg];", "is_target": false}, {"number": 919, "content": "          //create shoulder", "is_target": false}]}, "1734": {"lines": [{"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "    /** @see CameraSensor for further parameter explanation.", "is_target": false}, {"number": 75, "content": "     */", "is_target": false}, {"number": 76, "content": "    explicit OpticalFlow(OpticalFlowConf conf = getDefaultConf());", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "    virtual ~OpticalFlow();", "is_target": true}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "    /** calculates default positions for optical flow detection.", "is_target": false}, {"number": 81, "content": "        The points are in aranged horizontally in a line at the vertical center.", "is_target": false}, {"number": 82, "content": "        For num 2 the points are at the border, ", "is_target": false}, {"number": 83, "content": "        3 points there is additioanlly one is the center and so on.      ", "is_target": false}]}, "1735": {"lines": [{"number": 93, "content": "      c.maxFlow = 0.15;", "is_target": false}, {"number": 94, "content": "      c.verbose = 1;", "is_target": false}, {"number": 95, "content": "      return c;", "is_target": false}, {"number": 96, "content": "    }", "is_target": false}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "    virtual void intern_init();", "is_target": true}, {"number": 99, "content": "    ", "is_target": false}, {"number": 100, "content": "    /// Performs the calculations", "is_target": false}, {"number": 101, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 102, "content": "    ", "is_target": false}, {"number": 103, "content": "    virtual int getSensorNumber() const {", "is_target": false}]}, "1736": {"lines": [{"number": 96, "content": "    }", "is_target": false}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "    virtual void intern_init();", "is_target": false}, {"number": 99, "content": "    ", "is_target": false}, {"number": 100, "content": "    /// Performs the calculations", "is_target": false}, {"number": 101, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": true}, {"number": 102, "content": "    ", "is_target": false}, {"number": 103, "content": "    virtual int getSensorNumber() const {", "is_target": false}, {"number": 104, "content": "      return num;", "is_target": false}, {"number": 105, "content": "    };", "is_target": false}, {"number": 106, "content": "", "is_target": false}]}, "1737": {"lines": [{"number": 98, "content": "    virtual void intern_init();", "is_target": false}, {"number": 99, "content": "    ", "is_target": false}, {"number": 100, "content": "    /// Performs the calculations", "is_target": false}, {"number": 101, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 102, "content": "    ", "is_target": false}, {"number": 103, "content": "    virtual int getSensorNumber() const {", "is_target": true}, {"number": 104, "content": "      return num;", "is_target": false}, {"number": 105, "content": "    };", "is_target": false}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 108, "content": "", "is_target": false}]}, "1738": {"lines": [{"number": 36, "content": " */", "is_target": false}, {"number": 37, "content": "  class RaySensorBank : public PhysicalSensor {", "is_target": false}, {"number": 38, "content": "  public:", "is_target": false}, {"number": 39, "content": "    RaySensorBank();", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "    virtual ~RaySensorBank();", "is_target": true}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "    virtual void setInitData(const OdeHandle& odeHandle,", "is_target": false}, {"number": 44, "content": "                             const OsgHandle& osgHandle,", "is_target": false}, {"number": 45, "content": "                             const osg::Matrix& pose);", "is_target": false}, {"number": 46, "content": "", "is_target": false}]}, "1739": {"lines": [{"number": 38, "content": "  public:", "is_target": false}, {"number": 39, "content": "    RaySensorBank();", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "    virtual ~RaySensorBank();", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "    virtual void setInitData(const OdeHandle& odeHandle,", "is_target": true}, {"number": 44, "content": "                             const OsgHandle& osgHandle,", "is_target": false}, {"number": 45, "content": "                             const osg::Matrix& pose);", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    // ---- Sensor interface -----", "is_target": false}, {"number": 48, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}]}, "1740": {"lines": [{"number": 43, "content": "    virtual void setInitData(const OdeHandle& odeHandle,", "is_target": false}, {"number": 44, "content": "                             const OsgHandle& osgHandle,", "is_target": false}, {"number": 45, "content": "                             const osg::Matrix& pose);", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    // ---- Sensor interface -----", "is_target": false}, {"number": 48, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 53, "content": "", "is_target": false}]}, "1741": {"lines": [{"number": 47, "content": "    // ---- Sensor interface -----", "is_target": false}, {"number": 48, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": true}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 55, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "    virtual void update();", "is_target": false}]}, "1742": {"lines": [{"number": 50, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 55, "content": "    virtual std::list<sensor> getList()  const;", "is_target": true}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "    virtual void update();", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "    /** registers a new sensor at the sensor bank. The body and the pose have to be provided.", "is_target": false}, {"number": 60, "content": "        @param raysensor RaySensor to add", "is_target": false}]}, "1743": {"lines": [{"number": 52, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 55, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "    virtual void update();", "is_target": true}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "    /** registers a new sensor at the sensor bank. The body and the pose have to be provided.", "is_target": false}, {"number": 60, "content": "        @param raysensor RaySensor to add", "is_target": false}, {"number": 61, "content": "        @param body body to which the sensor should be connected", "is_target": false}, {"number": 62, "content": "        @param pose relative position/orientation", "is_target": false}]}, "1744": {"lines": [{"number": 17, "content": "  class RangeFinder : public RaySensorBank {", "is_target": false}, {"number": 18, "content": "  public:", "is_target": false}, {"number": 19, "content": "", "is_target": false}, {"number": 20, "content": "    RangeFinder() : own(nullptr) {};", "is_target": false}, {"number": 21, "content": "", "is_target": false}, {"number": 22, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 23, "content": "", "is_target": false}, {"number": 24, "content": "    /**", "is_target": false}, {"number": 25, "content": "     * Register equidistant IR sensor in a given angular range", "is_target": false}, {"number": 26, "content": "     * @param numBeams: number of beams of the range finder", "is_target": false}, {"number": 27, "content": "     * @param startAngle: angle of the leftmost beam", "is_target": false}]}, "1745": {"lines": [{"number": 69, "content": "     * @param conf configuration object", "is_target": false}, {"number": 70, "content": "     */", "is_target": false}, {"number": 71, "content": "    VierBeiner(const OdeHandle& odeHandle, const OsgHandle& osgHandle, const VierBeinerConf& conf,", "is_target": false}, {"number": 72, "content": "               const std::string& name);", "is_target": false}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "    virtual ~VierBeiner() {};", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "    static VierBeinerConf getDefaultConf() {", "is_target": false}, {"number": 77, "content": "      VierBeinerConf c;", "is_target": false}, {"number": 78, "content": "      c.size               = 1;", "is_target": false}, {"number": 79, "content": "      c.legNumber          = 4;", "is_target": false}]}, "1746": {"lines": [{"number": 99, "content": "    }", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "    /**", "is_target": false}, {"number": 102, "content": "     * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 103, "content": "     */", "is_target": false}, {"number": 104, "content": "    virtual void update();", "is_target": true}, {"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 108, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 109, "content": "    */", "is_target": false}]}, "1747": {"lines": [{"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 108, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 109, "content": "    */", "is_target": false}, {"number": 110, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 113, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 114, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 115, "content": "        @return number of actually written sensors", "is_target": false}]}, "1748": {"lines": [{"number": 112, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 113, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 114, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 115, "content": "        @return number of actually written sensors", "is_target": false}, {"number": 116, "content": "    */", "is_target": false}, {"number": 117, "content": "    virtual int getSensorsIntern(sensor* sensors, int sensornumber);", "is_target": true}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 120, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 121, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 122, "content": "    */", "is_target": false}]}, "1749": {"lines": [{"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 120, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 121, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 122, "content": "    */", "is_target": false}, {"number": 123, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "    /** returns number of sensors", "is_target": false}, {"number": 126, "content": "     */", "is_target": false}, {"number": 127, "content": "    virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 128, "content": "", "is_target": false}]}, "1750": {"lines": [{"number": 122, "content": "    */", "is_target": false}, {"number": 123, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "    /** returns number of sensors", "is_target": false}, {"number": 126, "content": "     */", "is_target": false}, {"number": 127, "content": "    virtual int getSensorNumberIntern() const;", "is_target": true}, {"number": 128, "content": "", "is_target": false}, {"number": 129, "content": "    /** returns number of motors", "is_target": false}, {"number": 130, "content": "     */", "is_target": false}, {"number": 131, "content": "    virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 132, "content": "", "is_target": false}]}, "1751": {"lines": [{"number": 126, "content": "     */", "is_target": false}, {"number": 127, "content": "    virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 128, "content": "", "is_target": false}, {"number": 129, "content": "    /** returns number of motors", "is_target": false}, {"number": 130, "content": "     */", "is_target": false}, {"number": 131, "content": "    virtual int getMotorNumberIntern() const;", "is_target": true}, {"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "    /** this function is called in each timestep. It should perform robot-internal checks,", "is_target": false}, {"number": 134, "content": "        like space-internal collision detection, sensor resets/update etc.", "is_target": false}, {"number": 135, "content": "        @param globalData structure that contains global data from the simulation environment", "is_target": false}, {"number": 136, "content": "    */", "is_target": false}]}, "1752": {"lines": [{"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "    /** this function is called in each timestep. It should perform robot-internal checks,", "is_target": false}, {"number": 134, "content": "        like space-internal collision detection, sensor resets/update etc.", "is_target": false}, {"number": 135, "content": "        @param globalData structure that contains global data from the simulation environment", "is_target": false}, {"number": 136, "content": "    */", "is_target": false}, {"number": 137, "content": "    virtual void doInternalStuff(const GlobalData& globalData);", "is_target": true}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "", "is_target": false}, {"number": 140, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 141, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 142, "content": "", "is_target": false}]}, "1753": {"lines": [{"number": 136, "content": "    */", "is_target": false}, {"number": 137, "content": "    virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "", "is_target": false}, {"number": 140, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 141, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "    /** the main object of the robot, which is used for position and speed tracking */", "is_target": false}, {"number": 144, "content": "    virtual const Primitive* getMainPrimitive() const override { return objects[0]; }", "is_target": false}, {"number": 145, "content": "  protected:", "is_target": false}, {"number": 146, "content": "", "is_target": false}]}, "1754": {"lines": [{"number": 346, "content": "      double l2 =       n<2 ? conf.legLength*0.45 : conf.legLength*0.5;", "is_target": false}, {"number": 347, "content": "      double t2       = conf.legLength/10;", "is_target": false}, {"number": 348, "content": "      double kneeangle = n<2 ? M_PI/5 : -M_PI/5;", "is_target": false}, {"number": 349, "content": "      double kneelowstop = -conf.kneeJointLimit;", "is_target": false}, {"number": 350, "content": "      double kneehighstop = conf.kneeJointLimit;", "is_target": false}, {"number": 351, "content": "      double l3 = n<2 ? conf.legLength*0.25 : 0;  // front legs have no feet", "is_target": true}, {"number": 352, "content": "      double t3       = conf.legLength/12;", "is_target": false}, {"number": 353, "content": "      double ankleangle = n<2 ? -M_PI/3 : 0;", "is_target": false}, {"number": 354, "content": "      double anklelowstop = -M_PI/5;", "is_target": false}, {"number": 355, "content": "      double anklehighstop = M_PI/3;", "is_target": false}, {"number": 356, "content": "", "is_target": false}]}, "1755": {"lines": [{"number": 348, "content": "      double kneeangle = n<2 ? M_PI/5 : -M_PI/5;", "is_target": false}, {"number": 349, "content": "      double kneelowstop = -conf.kneeJointLimit;", "is_target": false}, {"number": 350, "content": "      double kneehighstop = conf.kneeJointLimit;", "is_target": false}, {"number": 351, "content": "      double l3 = n<2 ? conf.legLength*0.25 : 0;  // front legs have no feet", "is_target": false}, {"number": 352, "content": "      double t3       = conf.legLength/12;", "is_target": false}, {"number": 353, "content": "      double ankleangle = n<2 ? -M_PI/3 : 0;", "is_target": true}, {"number": 354, "content": "      double anklelowstop = -M_PI/5;", "is_target": false}, {"number": 355, "content": "      double anklehighstop = M_PI/3;", "is_target": false}, {"number": 356, "content": "", "is_target": false}, {"number": 357, "content": "      // upper limp", "is_target": false}, {"number": 358, "content": "      Primitive* p1;", "is_target": false}]}, "1756": {"lines": [{"number": 349, "content": "      double kneelowstop = -conf.kneeJointLimit;", "is_target": false}, {"number": 350, "content": "      double kneehighstop = conf.kneeJointLimit;", "is_target": false}, {"number": 351, "content": "      double l3 = n<2 ? conf.legLength*0.25 : 0;  // front legs have no feet", "is_target": false}, {"number": 352, "content": "      double t3       = conf.legLength/12;", "is_target": false}, {"number": 353, "content": "      double ankleangle = n<2 ? -M_PI/3 : 0;", "is_target": false}, {"number": 354, "content": "      double anklelowstop = -M_PI/5;", "is_target": true}, {"number": 355, "content": "      double anklehighstop = M_PI/3;", "is_target": false}, {"number": 356, "content": "", "is_target": false}, {"number": 357, "content": "      // upper limp", "is_target": false}, {"number": 358, "content": "      Primitive* p1;", "is_target": false}, {"number": 359, "content": "      Pos pos = Pos(-conf.size/(2+0.2) + (static_cast<int>(n)/2) * legdist,", "is_target": false}]}, "1757": {"lines": [{"number": 350, "content": "      double kneehighstop = conf.kneeJointLimit;", "is_target": false}, {"number": 351, "content": "      double l3 = n<2 ? conf.legLength*0.25 : 0;  // front legs have no feet", "is_target": false}, {"number": 352, "content": "      double t3       = conf.legLength/12;", "is_target": false}, {"number": 353, "content": "      double ankleangle = n<2 ? -M_PI/3 : 0;", "is_target": false}, {"number": 354, "content": "      double anklelowstop = -M_PI/5;", "is_target": false}, {"number": 355, "content": "      double anklehighstop = M_PI/3;", "is_target": true}, {"number": 356, "content": "", "is_target": false}, {"number": 357, "content": "      // upper limp", "is_target": false}, {"number": 358, "content": "      Primitive* p1;", "is_target": false}, {"number": 359, "content": "      Pos pos = Pos(-conf.size/(2+0.2) + (static_cast<int>(n)/2) * legdist,", "is_target": false}, {"number": 360, "content": "                    n%2==0 ? - twidth/2 : twidth/2,", "is_target": false}]}, "1758": {"lines": [{"number": 25, "content": "", "is_target": false}, {"number": 26, "content": "namespace lpzrobots {", "is_target": false}, {"number": 27, "content": "", "is_target": false}, {"number": 28, "content": "  // this function is called if the ray has a collision. In the userdata we get the", "is_target": false}, {"number": 29, "content": "  //  RaySensor and the depth is in the contact information", "is_target": false}, {"number": 30, "content": "  int rayCollCallback(dSurfaceParameters& params, GlobalData& globaldata, void *userdata,", "is_target": true}, {"number": 31, "content": "                     dContact* contacts, int numContacts,", "is_target": false}, {"number": 32, "content": "                     dGeomID o1, dGeomID o2, const Substance& s1, const Substance& s2){", "is_target": false}, {"number": 33, "content": "", "is_target": false}, {"number": 34, "content": "    RaySensor* sensor = static_cast<RaySensor*>(userdata);", "is_target": false}, {"number": 35, "content": "    sensor->setLength(contacts[0].geom.depth, globaldata.sim_step);", "is_target": false}]}, "1760": {"lines": [{"number": 39, "content": "       @param dimensions bit mask for the dimensions to sense. Default: X | Y | Z (all dimensions)", "is_target": false}, {"number": 40, "content": "       @see Dimensions", "is_target": false}, {"number": 41, "content": "       If exact static_cast<relative>(positions) should be produced, use maxDistance=1 and exponent=1", "is_target": false}, {"number": 42, "content": "     */", "is_target": false}, {"number": 43, "content": "    RelativePositionSensor(double maxDistance, double exponent, short dimensions = Sensor::X | Sensor::Y | Sensor::Z , bool local_coordinates = false);", "is_target": false}, {"number": 44, "content": "    virtual ~RelativePositionSensor() {}", "is_target": true}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 47, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}]}, "1761": {"lines": [{"number": 41, "content": "       If exact static_cast<relative>(positions) should be produced, use maxDistance=1 and exponent=1", "is_target": false}, {"number": 42, "content": "     */", "is_target": false}, {"number": 43, "content": "    RelativePositionSensor(double maxDistance, double exponent, short dimensions = Sensor::X | Sensor::Y | Sensor::Z , bool local_coordinates = false);", "is_target": false}, {"number": 44, "content": "    virtual ~RelativePositionSensor() {}", "is_target": false}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 47, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 50, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 51, "content": "", "is_target": false}]}, "1762": {"lines": [{"number": 44, "content": "    virtual ~RelativePositionSensor() {}", "is_target": false}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 47, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": true}, {"number": 50, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    /**", "is_target": false}, {"number": 53, "content": "       Sets the reference object we use for relative position measureing.", "is_target": false}, {"number": 54, "content": "       If not set or 0 then the origin is used.", "is_target": false}]}, "1763": {"lines": [{"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 47, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 50, "content": "    virtual std::list<sensor> getList()  const;", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    /**", "is_target": false}, {"number": 53, "content": "       Sets the reference object we use for relative position measureing.", "is_target": false}, {"number": 54, "content": "       If not set or 0 then the origin is used.", "is_target": false}, {"number": 55, "content": "       This can be another robot an obstacle (light source) and such like", "is_target": false}]}, "1764": {"lines": [{"number": 88, "content": "     */", "is_target": false}, {"number": 89, "content": "    virtual dSpaceID getSpaceID() const;", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "    // delete all registered sensors.", "is_target": false}, {"number": 93, "content": "    virtual void clear();", "is_target": true}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "    // returns true if initialized", "is_target": false}, {"number": 96, "content": "    virtual bool isInitialized() { return initialized;}", "is_target": false}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "  protected:", "is_target": false}]}, "1765": {"lines": [{"number": 58, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "    /// default implementation is a linear decrease in intensity until it is 0 at maxDistance", "is_target": false}, {"number": 61, "content": "    virtual float distanceDependency(const Sound& s, double distance);", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "    virtual int getSensorNumber()  const override;", "is_target": true}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 68, "content": "", "is_target": false}]}, "1766": {"lines": [{"number": 49, "content": "    /** @param dim Up-axis of the robot (sometimes it is not Z)", "is_target": false}, {"number": 50, "content": "        @param measure what to measure @see Measure", "is_target": false}, {"number": 51, "content": "    */", "is_target": false}, {"number": 52, "content": "    explicit SoundSensor(Dimensions dim = Z, Measure measure = Angle,", "is_target": false}, {"number": 53, "content": "                int segments=1, int levels=1, double maxDistance=50, double noisestrength=0.1);", "is_target": false}, {"number": 54, "content": "    virtual ~SoundSensor();", "is_target": true}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) override { this->own = own;}", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 59, "content": "", "is_target": false}]}, "1767": {"lines": [{"number": 53, "content": "                int segments=1, int levels=1, double maxDistance=50, double noisestrength=0.1);", "is_target": false}, {"number": 54, "content": "    virtual ~SoundSensor();", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr) override { this->own = own;}", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": true}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "    /// default implementation is a linear decrease in intensity until it is 0 at maxDistance", "is_target": false}, {"number": 61, "content": "    virtual float distanceDependency(const Sound& s, double distance);", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}]}, "1768": {"lines": [{"number": 60, "content": "    /// default implementation is a linear decrease in intensity until it is 0 at maxDistance", "is_target": false}, {"number": 61, "content": "    virtual float distanceDependency(const Sound& s, double distance);", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "    virtual std::list<sensor> getList()  const;", "is_target": true}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "  private:", "is_target": false}, {"number": 70, "content": "    short dim = 0; ///< the axis in which the sensor is selective around", "is_target": false}]}, "1769": {"lines": [{"number": 67, "content": "        float dist = relpos.length();", "is_target": false}, {"number": 68, "content": "        // close enough and not from us.", "is_target": false}, {"number": 69, "content": "        if(dist<maxDistance && s->sender != static_cast<void*>(own)){", "is_target": false}, {"number": 70, "content": "          int l = clip(static_cast<int>(s->frequency/2.0+0.5)*levels,0,levels-1);", "is_target": false}, {"number": 71, "content": "          // normalise", "is_target": false}, {"number": 72, "content": "          double len = sqrt(x*x + y*y);", "is_target": true}, {"number": 73, "content": "          if(len>0){ x/=len, y/=len; }", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "          double angle = atan2(y, x);", "is_target": false}, {"number": 76, "content": "          double intens = distanceDependency(*s, dist);", "is_target": false}, {"number": 77, "content": "          if(intens<=0) continue;", "is_target": false}]}, "1770": {"lines": [{"number": 44, "content": "    /**", "is_target": false}, {"number": 45, "content": "       @param maxSpeed maximal speed that is expected used for normalisation of sensor value", "is_target": false}, {"number": 46, "content": "       @param dimensions bit mask for the dimensions to sense. Default: X | Y | Z (all dimensions)", "is_target": false}, {"number": 47, "content": "       @see Dimensions", "is_target": false}, {"number": 48, "content": "     */", "is_target": false}, {"number": 49, "content": "    SpeedSensor(double maxSpeed, Mode mode = Translational, short dimensions = X | Y | Z );", "is_target": true}, {"number": 50, "content": "    virtual ~SpeedSensor() {}", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 53, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 54, "content": "", "is_target": false}]}, "1771": {"lines": [{"number": 45, "content": "       @param maxSpeed maximal speed that is expected used for normalisation of sensor value", "is_target": false}, {"number": 46, "content": "       @param dimensions bit mask for the dimensions to sense. Default: X | Y | Z (all dimensions)", "is_target": false}, {"number": 47, "content": "       @see Dimensions", "is_target": false}, {"number": 48, "content": "     */", "is_target": false}, {"number": 49, "content": "    SpeedSensor(double maxSpeed, Mode mode = Translational, short dimensions = X | Y | Z );", "is_target": false}, {"number": 50, "content": "    virtual ~SpeedSensor() {}", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 53, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}]}, "1772": {"lines": [{"number": 47, "content": "       @see Dimensions", "is_target": false}, {"number": 48, "content": "     */", "is_target": false}, {"number": 49, "content": "    SpeedSensor(double maxSpeed, Mode mode = Translational, short dimensions = X | Y | Z );", "is_target": false}, {"number": 50, "content": "    virtual ~SpeedSensor() {}", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 53, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 56, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 57, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}]}, "1773": {"lines": [{"number": 50, "content": "    virtual ~SpeedSensor() {}", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 53, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": true}, {"number": 56, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 57, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 58, "content": "  protected:", "is_target": false}, {"number": 59, "content": "    matrix::Matrix getSenseMatrix() const;", "is_target": false}, {"number": 60, "content": "", "is_target": false}]}, "1774": {"lines": [{"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 53, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 56, "content": "    virtual std::list<sensor> getList()  const;", "is_target": true}, {"number": 57, "content": "    virtual int get(sensor* sensors, int length)  const override;", "is_target": false}, {"number": 58, "content": "  protected:", "is_target": false}, {"number": 59, "content": "    matrix::Matrix getSenseMatrix() const;", "is_target": false}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "  protected:", "is_target": false}]}, "1775": {"lines": [{"number": 34, "content": "", "is_target": false}, {"number": 35, "content": "    /**", "is_target": false}, {"number": 36, "content": "       @param maxtorque at this torque the sensor value is 1.", "is_target": false}, {"number": 37, "content": "       @param avg number of averaging steps (def 1) (very noisy for universal joint)", "is_target": false}, {"number": 38, "content": "     */", "is_target": false}, {"number": 39, "content": "    TorqueSensor(double maxtorque = 1.0, int avg = 1);", "is_target": true}, {"number": 40, "content": "    virtual ~TorqueSensor();", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "    /** the primitive is not required here, set it to nullptr", "is_target": false}, {"number": 43, "content": "        @param joint the joint on which to measure the torques.", "is_target": false}, {"number": 44, "content": "    */", "is_target": false}]}, "1776": {"lines": [{"number": 35, "content": "    /**", "is_target": false}, {"number": 36, "content": "       @param maxtorque at this torque the sensor value is 1.", "is_target": false}, {"number": 37, "content": "       @param avg number of averaging steps (def 1) (very noisy for universal joint)", "is_target": false}, {"number": 38, "content": "     */", "is_target": false}, {"number": 39, "content": "    TorqueSensor(double maxtorque = 1.0, int avg = 1);", "is_target": false}, {"number": 40, "content": "    virtual ~TorqueSensor();", "is_target": true}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "    /** the primitive is not required here, set it to nullptr", "is_target": false}, {"number": 43, "content": "        @param joint the joint on which to measure the torques.", "is_target": false}, {"number": 44, "content": "    */", "is_target": false}, {"number": 45, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}]}, "1777": {"lines": [{"number": 40, "content": "    virtual ~TorqueSensor();", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "    /** the primitive is not required here, set it to nullptr", "is_target": false}, {"number": 43, "content": "        @param joint the joint on which to measure the torques.", "is_target": false}, {"number": 44, "content": "    */", "is_target": false}, {"number": 45, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": true}, {"number": 46, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 49, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 50, "content": "    virtual int get(sensor* sensors, int length)  const; // we implement this one because easier with averaging", "is_target": false}]}, "1778": {"lines": [{"number": 43, "content": "        @param joint the joint on which to measure the torques.", "is_target": false}, {"number": 44, "content": "    */", "is_target": false}, {"number": 45, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 46, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": true}, {"number": 49, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 50, "content": "    virtual int get(sensor* sensors, int length)  const; // we implement this one because easier with averaging", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  private:", "is_target": false}, {"number": 53, "content": "    Joint* joint = nullptr;", "is_target": false}]}, "1779": {"lines": [{"number": 44, "content": "    */", "is_target": false}, {"number": 45, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 46, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 49, "content": "    virtual std::list<sensor> getList()  const;", "is_target": true}, {"number": 50, "content": "    virtual int get(sensor* sensors, int length)  const; // we implement this one because easier with averaging", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  private:", "is_target": false}, {"number": 53, "content": "    Joint* joint = nullptr;", "is_target": false}, {"number": 54, "content": "    double maxtorque = 0;", "is_target": false}]}, "1780": {"lines": [{"number": 45, "content": "    virtual void init(Primitive* own, Joint* joint = nullptr);", "is_target": false}, {"number": 46, "content": "    virtual int getSensorNumber()  const override;", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "    virtual bool sense(const GlobalData& globaldata);", "is_target": false}, {"number": 49, "content": "    virtual std::list<sensor> getList()  const;", "is_target": false}, {"number": 50, "content": "    virtual int get(sensor* sensors, int length)  const; // we implement this one because easier with averaging", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  private:", "is_target": false}, {"number": 53, "content": "    Joint* joint = nullptr;", "is_target": false}, {"number": 54, "content": "    double maxtorque = 0;", "is_target": false}, {"number": 55, "content": "    std::vector<sensor> values;", "is_target": false}]}, "1781": {"lines": [{"number": 341, "content": "", "is_target": false}, {"number": 342, "content": "  // add own key handling stuff here, just insert some case values", "is_target": false}, {"number": 343, "content": "  virtual bool command(const OdeHandle&, const OsgHandle&, GlobalData& globalData, int key, bool down) override {", "is_target": false}, {"number": 344, "content": "    if (down)", "is_target": false}, {"number": 345, "content": "    { // only when key is pressed, not when released", "is_target": false}, {"number": 346, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 347, "content": "      {", "is_target": false}, {"number": 348, "content": "      default:", "is_target": false}, {"number": 349, "content": "        return false;", "is_target": false}, {"number": 350, "content": "        break;", "is_target": false}, {"number": 351, "content": "      }", "is_target": false}]}, "1782": {"lines": [{"number": 30, "content": "namespace lpzrobots{", "is_target": false}, {"number": 31, "content": "", "is_target": false}, {"number": 32, "content": "class Color : public osg::Vec4 {", "is_target": false}, {"number": 33, "content": "public:", "is_target": false}, {"number": 34, "content": "  Color() : osg::Vec4() {}", "is_target": false}, {"number": 35, "content": "  Color(const osg::Vec4& color) ", "is_target": true}, {"number": 36, "content": "    : osg::Vec4(color)  {};", "is_target": false}, {"number": 37, "content": "  Color(float r, float g, float b)", "is_target": false}, {"number": 38, "content": "    : osg::Vec4(r, g, b, 1.0){} ", "is_target": false}, {"number": 39, "content": "  Color(float r, float g, float b, float a)", "is_target": false}, {"number": 40, "content": "    : osg::Vec4(r, g, b, a){} ", "is_target": false}]}, "1783": {"lines": [{"number": 60, "content": "    std::string fontColor;", "is_target": false}, {"number": 61, "content": "  };", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "  class Base : public ::Configurable {", "is_target": false}, {"number": 64, "content": "  public:", "is_target": false}, {"number": 65, "content": "    Base(const std::string& caption=\"LpzRobots Simulator (Martius et al)\");", "is_target": true}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "    static const int PHYSICS_CALLBACKABLE = 1; //!< called each ode/physics step", "is_target": false}, {"number": 68, "content": "    static const int GRAPHICS_CALLBACKABLE = 2; //!< called each osg/draw step", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "    /// create the ground plane", "is_target": false}]}, "1784": {"lines": [{"number": 57, "content": "  class GlobalData : public GlobalDataBase {", "is_target": false}, {"number": 58, "content": "    public:", "is_target": false}, {"number": 59, "content": "      GlobalData() : environment(0), time(0), sim_step(0) {", "is_target": false}, {"number": 60, "content": "      }", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "      virtual ~GlobalData() {}", "is_target": true}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "      OdeConfig odeConfig;", "is_target": false}, {"number": 65, "content": "      ObstacleList obstacles;", "is_target": false}, {"number": 66, "content": "      OdeAgentList agents;", "is_target": false}, {"number": 67, "content": "      Primitive* environment; /// < this is used to be able to attach objects to the static environment", "is_target": false}]}, "1785": {"lines": [{"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "      double time = 0;", "is_target": false}, {"number": 76, "content": "      long int sim_step; ///< time steps since start", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "      /// returns the list of all agents", "is_target": false}, {"number": 79, "content": "      virtual AgentList& getAgents();", "is_target": true}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "      /// adds a temporary display item with given life duration in sec", "is_target": false}, {"number": 83, "content": "      virtual void addTmpObject(TmpObject* i, double duration);", "is_target": false}, {"number": 84, "content": "", "is_target": false}]}, "1786": {"lines": [{"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "  virtual void setColor(const Color& color) { textColor = color;}", "is_target": false}, {"number": 99, "content": "  virtual void setFontsize(int size) {fontsize = size; yOffset = static_cast<float>(1.2*size);}", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "  virtual ~HUDStatisticsManager();", "is_target": true}, {"number": 102, "content": "  ", "is_target": false}, {"number": 103, "content": "  virtual StatisticMeasure* getMeasure(double& observedValue, const char* measureName, MeasureMode mode, long stepSpan, double additionalParam);", "is_target": false}, {"number": 104, "content": "  virtual double& addMeasure(double& observedValue, const char* measureName, MeasureMode mode, long stepSpan, double additionalParam);", "is_target": false}, {"number": 105, "content": "  virtual double& addMeasure(AbstractMeasure* measure);", "is_target": false}, {"number": 106, "content": "  virtual double& addMeasureList(std::list<AbstractMeasure*> measureList);", "is_target": false}]}, "1787": {"lines": [{"number": 105, "content": "  virtual double& addMeasure(AbstractMeasure* measure);", "is_target": false}, {"number": 106, "content": "  virtual double& addMeasureList(std::list<AbstractMeasure*> measureList);", "is_target": false}, {"number": 107, "content": "  virtual double& addMeasureList(std::list<ComplexMeasure*> measureList);", "is_target": false}, {"number": 108, "content": "  virtual double& addMeasureList(std::list<StatisticMeasure*> measureList);", "is_target": false}, {"number": 109, "content": "  ", "is_target": false}, {"number": 110, "content": "  virtual void doOnCallBack(BackCaller* source, BackCaller::CallbackableType type = BackCaller::DEFAULT_CALLBACKABLE_TYPE);", "is_target": true}, {"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "protected:", "is_target": false}, {"number": 113, "content": "", "is_target": false}, {"number": 114, "content": "/// the struct list which holds the measures and the appropiate text", "is_target": false}, {"number": 115, "content": "  std::list<WindowStatistic*> windowStatisticList;", "is_target": false}]}, "1788": {"lines": [{"number": 115, "content": "     * But do not display if the system is initialised with -nographics.", "is_target": false}, {"number": 116, "content": "     * @return the actual HUDStatisticsManager", "is_target": false}, {"number": 117, "content": "     */", "is_target": false}, {"number": 118, "content": "    virtual HUDStatisticsManager* getHUDSM() const;", "is_target": false}, {"number": 119, "content": "", "is_target": false}, {"number": 120, "content": "    virtual ~Base();", "is_target": true}, {"number": 121, "content": "", "is_target": false}, {"number": 122, "content": "  protected:", "is_target": false}, {"number": 123, "content": "    virtual void setTimeStats(double time, double realtimefactor,", "is_target": false}, {"number": 124, "content": "                              double truerealtimefactor,bool pause);", "is_target": false}, {"number": 125, "content": "", "is_target": false}]}, "1789": {"lines": [{"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "    enum SimulationState { none, initialised, running, closed };", "is_target": false}, {"number": 62, "content": "    enum CameraMode {Static=0, Follow, TV, Race};", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "    Simulation();", "is_target": false}, {"number": 65, "content": "    virtual ~Simulation();", "is_target": true}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "    /** starts the Simulation. Do not overload it.", "is_target": false}, {"number": 68, "content": "        This function returns of the simulation is terminated.", "is_target": false}, {"number": 69, "content": "        @return: true if closed regulary, false on error", "is_target": false}, {"number": 70, "content": "    */", "is_target": false}]}, "1790": {"lines": [{"number": 133, "content": "", "is_target": false}, {"number": 134, "content": "    virtual void odeStep();", "is_target": false}, {"number": 135, "content": "", "is_target": false}, {"number": 136, "content": "    virtual void osgStep();", "is_target": false}, {"number": 137, "content": "", "is_target": false}, {"number": 138, "content": "    virtual void doOnCallBack(BackCaller *src, BackCaller::CallbackableType type=BackCaller::DEFAULT_CALLBACKABLE_TYPE);", "is_target": true}, {"number": 139, "content": "", "is_target": false}, {"number": 140, "content": "  protected:", "is_target": false}, {"number": 141, "content": "    // GUIEventHandler", "is_target": false}, {"number": 142, "content": "    virtual bool handle(const osgGA::GUIEventAdapter& ea,osgGA::GUIActionAdapter&);", "is_target": false}, {"number": 143, "content": "    virtual void getUsage (osg::ApplicationUsage & au) const;", "is_target": false}]}, "1791": {"lines": [{"number": 113, "content": "  playground->setPosition ( 0, 0, 0 ); // playground positionieren und generieren", "is_target": false}, {"number": 114, "content": "  global.obstacles.push_back ( playground );", "is_target": false}, {"number": 115, "content": "", "is_target": false}, {"number": 116, "content": "  //*******robots and their atoms******", "is_target": false}, {"number": 117, "content": "", "is_target": false}, {"number": 118, "content": "  int anzprozeile = static_cast<int>( sqrt ( static_cast<double> maxpopulationsize ) );", "is_target": true}, {"number": 119, "content": "  if ( anzprozeile < sqrt ( static_cast<double> maxpopulationsize ) )", "is_target": false}, {"number": 120, "content": "    anzprozeile += 1;", "is_target": false}, {"number": 121, "content": "  Position posA;", "is_target": false}, {"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "  for ( int n = 0; n < startingpopulationsize; ++n)", "is_target": false}]}, "1792": {"lines": [{"number": 83, "content": "  matrix::Matrix h; // Controller Bias", "is_target": false}, {"number": 84, "content": "  matrix::Matrix L; // Jacobi Matrix", "is_target": false}, {"number": 85, "content": "  std::vector<matrix::Matrix> x_buffer;", "is_target": false}, {"number": 86, "content": "  std::vector<matrix::Matrix> y_buffer;", "is_target": false}, {"number": 87, "content": "  int t = 0;", "is_target": false}, {"number": 88, "content": "  paramkey name;", "is_target": true}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "  /*   virtual void iteration(double *column, */", "is_target": false}, {"number": 91, "content": "  /*                          double dommy[NUMBER_CHANNELS][NUMBER_CHANNELS], */", "is_target": false}, {"number": 92, "content": "  /*                          double *improvment); */", "is_target": false}, {"number": 93, "content": "", "is_target": false}]}, "1793": {"lines": [{"number": 67, "content": "    /** @deprecated obsolete provide globaldata, see the other constructors", "is_target": false}, {"number": 68, "content": "     */", "is_target": false}, {"number": 69, "content": "    explicit OdeAgent(const ::PlotOption& plotOption = ::PlotOption(::PlotMode::NoPlot), double noisefactor = 1, const std::string& name = \"OdeAgent\", const std::string& revision = \"$ID$\") __attribute__ ((deprecated));", "is_target": false}, {"number": 70, "content": "    /** @deprecated obsolete provide globaldata, see the other constructors", "is_target": false}, {"number": 71, "content": "     */", "is_target": false}, {"number": 72, "content": "    OdeAgent(const std::list<::PlotOption>& plotOptions, double noisefactor = 1, const std::string& name = \"OdeAgent\", const std::string& revision = \"$ID$\") __attribute__ ((deprecated));", "is_target": true}, {"number": 73, "content": "    /** The plotoptions are taken from globaldata", "is_target": false}, {"number": 74, "content": "        @param noisefactor factor for sensor noise for this agent", "is_target": false}, {"number": 75, "content": "     */", "is_target": false}, {"number": 76, "content": "    OdeAgent(const GlobalData& globalData, double noisefactor = 1, const std::string& name = \"OdeAgent\", const std::string& revision = \"\");", "is_target": false}, {"number": 77, "content": "    /** Provided for convinience. A single plotoption is used as given by plotOption */", "is_target": false}]}, "1794": {"lines": [{"number": 71, "content": "     */", "is_target": false}, {"number": 72, "content": "    OdeAgent(const std::list<::PlotOption>& plotOptions, double noisefactor = 1, const std::string& name = \"OdeAgent\", const std::string& revision = \"$ID$\") __attribute__ ((deprecated));", "is_target": false}, {"number": 73, "content": "    /** The plotoptions are taken from globaldata", "is_target": false}, {"number": 74, "content": "        @param noisefactor factor for sensor noise for this agent", "is_target": false}, {"number": 75, "content": "     */", "is_target": false}, {"number": 76, "content": "    OdeAgent(const GlobalData& globalData, double noisefactor = 1, const std::string& name = \"OdeAgent\", const std::string& revision = \"\");", "is_target": true}, {"number": 77, "content": "    /** Provided for convinience. A single plotoption is used as given by plotOption */", "is_target": false}, {"number": 78, "content": "    OdeAgent(const GlobalData& globalData, const ::PlotOption& plotOption, double noisefactor = 1, const std::string& name = \"OdeAgent\", const std::string& revision = \"\");", "is_target": false}, {"number": 79, "content": "    /** Provided for convinience. The plotoptions are taken from the given plotOptions", "is_target": false}, {"number": 80, "content": "        (and not from globaldata, if you wish to overwrite them)", "is_target": false}, {"number": 81, "content": "    */", "is_target": false}]}, "1795": {"lines": [{"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    // Delete copy constructor and assignment operator", "is_target": false}, {"number": 51, "content": "    TmpPrimitive(const TmpPrimitive&) = delete;", "is_target": false}, {"number": 52, "content": "    TmpPrimitive& operator=(const TmpPrimitive&) = delete;", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": true}, {"number": 55, "content": "    virtual void deleteObject();", "is_target": false}, {"number": 56, "content": "    virtual void update();", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  private:", "is_target": false}, {"number": 59, "content": "    Primitive* item = nullptr;", "is_target": false}]}, "1796": {"lines": [{"number": 50, "content": "    // Delete copy constructor and assignment operator", "is_target": false}, {"number": 51, "content": "    TmpPrimitive(const TmpPrimitive&) = delete;", "is_target": false}, {"number": 52, "content": "    TmpPrimitive& operator=(const TmpPrimitive&) = delete;", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": false}, {"number": 55, "content": "    virtual void deleteObject();", "is_target": true}, {"number": 56, "content": "    virtual void update();", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  private:", "is_target": false}, {"number": 59, "content": "    Primitive* item = nullptr;", "is_target": false}, {"number": 60, "content": "    char mode = 0;", "is_target": false}]}, "1797": {"lines": [{"number": 51, "content": "    TmpPrimitive(const TmpPrimitive&) = delete;", "is_target": false}, {"number": 52, "content": "    TmpPrimitive& operator=(const TmpPrimitive&) = delete;", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": false}, {"number": 55, "content": "    virtual void deleteObject();", "is_target": false}, {"number": 56, "content": "    virtual void update();", "is_target": true}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  private:", "is_target": false}, {"number": 59, "content": "    Primitive* item = nullptr;", "is_target": false}, {"number": 60, "content": "    char mode = 0;", "is_target": false}, {"number": 61, "content": "    double mass = 0;", "is_target": false}]}, "1798": {"lines": [{"number": 85, "content": "", "is_target": false}, {"number": 86, "content": "    // Delete copy constructor and assignment operator", "is_target": false}, {"number": 87, "content": "    TmpDisplayItem(const TmpDisplayItem&) = delete;", "is_target": false}, {"number": 88, "content": "    TmpDisplayItem& operator=(const TmpDisplayItem&) = delete;", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": true}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "    virtual void deleteObject();", "is_target": false}, {"number": 93, "content": "    virtual void update() override {} // nothing to be done here, because they do not move", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  private:", "is_target": false}]}, "1799": {"lines": [{"number": 87, "content": "    TmpDisplayItem(const TmpDisplayItem&) = delete;", "is_target": false}, {"number": 88, "content": "    TmpDisplayItem& operator=(const TmpDisplayItem&) = delete;", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": false}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "    virtual void deleteObject();", "is_target": true}, {"number": 93, "content": "    virtual void update() override {} // nothing to be done here, because they do not move", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  private:", "is_target": false}, {"number": 96, "content": "    OSGPrimitive* item;", "is_target": false}, {"number": 97, "content": "    Pose pose;", "is_target": false}]}, "1800": {"lines": [{"number": 120, "content": "", "is_target": false}, {"number": 121, "content": "    // Delete copy constructor and assignment operator", "is_target": false}, {"number": 122, "content": "    TmpJoint(const TmpJoint&) = delete;", "is_target": false}, {"number": 123, "content": "    TmpJoint& operator=(const TmpJoint&) = delete;", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": true}, {"number": 126, "content": "", "is_target": false}, {"number": 127, "content": "    virtual void deleteObject();", "is_target": false}, {"number": 128, "content": "    virtual void update();", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "  private:", "is_target": false}]}, "1801": {"lines": [{"number": 122, "content": "    TmpJoint(const TmpJoint&) = delete;", "is_target": false}, {"number": 123, "content": "    TmpJoint& operator=(const TmpJoint&) = delete;", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": false}, {"number": 126, "content": "", "is_target": false}, {"number": 127, "content": "    virtual void deleteObject();", "is_target": true}, {"number": 128, "content": "    virtual void update();", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "  private:", "is_target": false}, {"number": 131, "content": "    Joint* joint = nullptr;", "is_target": false}, {"number": 132, "content": "    Color color;", "is_target": false}]}, "1802": {"lines": [{"number": 123, "content": "    TmpJoint& operator=(const TmpJoint&) = delete;", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": false}, {"number": 126, "content": "", "is_target": false}, {"number": 127, "content": "    virtual void deleteObject();", "is_target": false}, {"number": 128, "content": "    virtual void update();", "is_target": true}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "  private:", "is_target": false}, {"number": 131, "content": "    Joint* joint = nullptr;", "is_target": false}, {"number": 132, "content": "    Color color;", "is_target": false}, {"number": 133, "content": "    std::string colorname;", "is_target": false}]}, "1803": {"lines": [{"number": 56, "content": "    Operator( const std::string& name, const std::string& revision)", "is_target": false}, {"number": 57, "content": "      : ::Configurable(name, revision)", "is_target": false}, {"number": 58, "content": "    {", "is_target": false}, {"number": 59, "content": "    }", "is_target": false}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "    virtual ~Operator() {", "is_target": true}, {"number": 62, "content": "    }", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "    /** called every simulation step", "is_target": false}, {"number": 65, "content": "        @return what was done with the robot", "is_target": false}, {"number": 66, "content": "     */", "is_target": false}]}, "1804": {"lines": [{"number": 78, "content": "    OdeAgent(const GlobalData& globalData, const ::PlotOption& plotOption, double noisefactor = 1, const std::string& name = \"OdeAgent\", const std::string& revision = \"\");", "is_target": false}, {"number": 79, "content": "    /** Provided for convinience. The plotoptions are taken from the given plotOptions", "is_target": false}, {"number": 80, "content": "        (and not from globaldata, if you wish to overwrite them)", "is_target": false}, {"number": 81, "content": "    */", "is_target": false}, {"number": 82, "content": "    OdeAgent(const GlobalData& globalData, const PlotOptionList& plotOptions, double noisefactor = 1, const std::string& name = \"OdeAgent\", const std::string& revision = \"\");", "is_target": false}, {"number": 83, "content": "    virtual ~OdeAgent();", "is_target": true}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "    // Bring base class init methods into scope", "is_target": false}, {"number": 86, "content": "    using Agent::init;", "is_target": false}, {"number": 87, "content": "    ", "is_target": false}, {"number": 88, "content": "    /** initializes the object with the given controller, robot and wiring", "is_target": false}]}, "1805": {"lines": [{"number": 91, "content": "    virtual bool init(AbstractController* controller, OdeRobot* robot, AbstractWiring* wiring,", "is_target": false}, {"number": 92, "content": "                      long int seed = 0) {", "is_target": false}, {"number": 93, "content": "      return Agent::init(controller, robot, wiring, seed);", "is_target": false}, {"number": 94, "content": "    }", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "    virtual void step(double noise, double time);", "is_target": true}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "    /**", "is_target": false}, {"number": 99, "content": "     * Returns a pointer to the robot.", "is_target": false}, {"number": 100, "content": "     */", "is_target": false}, {"number": 101, "content": "    virtual OdeRobot* getRobot() { return static_cast<OdeRobot*>(robot);}", "is_target": false}]}, "1806": {"lines": [{"number": 115, "content": "    virtual void setTraceThickness(int tracethickness) { }", "is_target": false}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "    /// adds tracking for individual primitives", "is_target": false}, {"number": 118, "content": "    virtual void addTracking(unsigned int primitiveIndex,const TrackRobot& trackrobot,", "is_target": false}, {"number": 119, "content": "                             const Color& color);", "is_target": false}, {"number": 120, "content": "    virtual void setTrackOptions(const TrackRobot& trackrobot);", "is_target": true}, {"number": 121, "content": "    virtual bool stopTracking();", "is_target": false}, {"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "    /****** STOREABLE **********/", "is_target": false}, {"number": 125, "content": "    virtual bool store(FILE* f)  const override;", "is_target": false}]}, "1807": {"lines": [{"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "    /// adds tracking for individual primitives", "is_target": false}, {"number": 118, "content": "    virtual void addTracking(unsigned int primitiveIndex,const TrackRobot& trackrobot,", "is_target": false}, {"number": 119, "content": "                             const Color& color);", "is_target": false}, {"number": 120, "content": "    virtual void setTrackOptions(const TrackRobot& trackrobot);", "is_target": false}, {"number": 121, "content": "    virtual bool stopTracking();", "is_target": true}, {"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "    /****** STOREABLE **********/", "is_target": false}, {"number": 125, "content": "    virtual bool store(FILE* f)  const override;", "is_target": false}, {"number": 126, "content": "    virtual bool restore(FILE* f);", "is_target": false}]}, "1808": {"lines": [{"number": 121, "content": "    virtual bool stopTracking();", "is_target": false}, {"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "    /****** STOREABLE **********/", "is_target": false}, {"number": 125, "content": "    virtual bool store(FILE* f)  const override;", "is_target": false}, {"number": 126, "content": "    virtual bool restore(FILE* f);", "is_target": true}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "", "is_target": false}, {"number": 129, "content": "    /****** OPERATORS *********/", "is_target": false}, {"number": 130, "content": "    /// adds an operator to the agent (the operator is deleted on destruction of the agent!)", "is_target": false}, {"number": 131, "content": "    virtual void addOperator(Operator* o, bool addToConfigurable = true );", "is_target": false}]}, "1809": {"lines": [{"number": 37, "content": "  public:", "is_target": false}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "    AbstractGround(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 40, "content": "                   bool createGround, double groundLength, double groundWidth, double wallThickness);", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "    virtual ~AbstractGround();", "is_target": true}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "    virtual void setPose(const osg::Matrix& pose) override;", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    virtual void createGround(bool create);", "is_target": false}]}, "1810": {"lines": [{"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "    virtual void setPose(const osg::Matrix& pose) override;", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "    virtual void createGround(bool create);", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "    virtual Primitive* getMainPrimitive()  const;", "is_target": true}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "    virtual void changeGeometry(double length, double width, double height, double factorxy);", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "    /// prints the contour of the boxes into the file", "is_target": false}, {"number": 54, "content": "    virtual void printContours(FILE* f);", "is_target": false}]}, "1811": {"lines": [{"number": 48, "content": "      width=dimension.y();", "is_target": false}, {"number": 49, "content": "      height=dimension.z();", "is_target": false}, {"number": 50, "content": "      factorlength2=factorxy;", "is_target": false}, {"number": 51, "content": "    };", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "    virtual void changeGeometry(double length, double width, double height, double factorxy) {", "is_target": true}, {"number": 54, "content": "      AbstractGround::changeGeometry(length, width, height, factorxy);", "is_target": false}, {"number": 55, "content": "      this->length = length;", "is_target": false}, {"number": 56, "content": "      this->width  = width;", "is_target": false}, {"number": 57, "content": "      this->height  = height;", "is_target": false}, {"number": 58, "content": "      this->factorlength2  = factorxy;", "is_target": false}]}, "1812": {"lines": [{"number": 61, "content": "        create();", "is_target": false}, {"number": 62, "content": "      }", "is_target": false}, {"number": 63, "content": "    }", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "  protected:", "is_target": false}, {"number": 66, "content": "    virtual void create() {", "is_target": true}, {"number": 67, "content": "      createGround();", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "      Box* box;", "is_target": false}, {"number": 70, "content": "      osg::Vec3 offset(0,", "is_target": false}, {"number": 71, "content": "                       (length/2 * factorlength2 + width/2),", "is_target": false}]}, "1813": {"lines": [{"number": 55, "content": "  class Arm2Segm : public OdeRobot {", "is_target": false}, {"number": 56, "content": "  public:", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "    Arm2Segm(const OdeHandle& odeHandle, const OsgHandle& osgHandle, const Arm2SegmConf& conf, const std::string& name);", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "    virtual ~Arm2Segm() {};", "is_target": true}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    static Arm2SegmConf getDefaultConf() {", "is_target": false}, {"number": 63, "content": "      return Arm2SegmConf();", "is_target": false}, {"number": 64, "content": "    }", "is_target": false}, {"number": 65, "content": "", "is_target": false}]}, "1814": {"lines": [{"number": 62, "content": "    static Arm2SegmConf getDefaultConf() {", "is_target": false}, {"number": 63, "content": "      return Arm2SegmConf();", "is_target": false}, {"number": 64, "content": "    }", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "    /// update the subcomponents", "is_target": false}, {"number": 67, "content": "    virtual void update();", "is_target": true}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 70, "content": "        @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 71, "content": "    */", "is_target": false}, {"number": 72, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}]}, "1815": {"lines": [{"number": 67, "content": "    virtual void update();", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 70, "content": "        @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 71, "content": "    */", "is_target": false}, {"number": 72, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 75, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 76, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 77, "content": "        @return number of actually written sensors", "is_target": false}]}, "1816": {"lines": [{"number": 74, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 75, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 76, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 77, "content": "        @return number of actually written sensors", "is_target": false}, {"number": 78, "content": "    */", "is_target": false}, {"number": 79, "content": "    virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": true}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 82, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 83, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 84, "content": "    */", "is_target": false}]}, "1817": {"lines": [{"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 82, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 83, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 84, "content": "    */", "is_target": false}, {"number": 85, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "    /** returns number of sensors", "is_target": false}, {"number": 88, "content": "     */", "is_target": false}, {"number": 89, "content": "    virtual int getSensorNumberIntern() const override {", "is_target": false}, {"number": 90, "content": "      return sensorno;", "is_target": false}]}, "1818": {"lines": [{"number": 101, "content": "        @return length of the list", "is_target": false}, {"number": 102, "content": "    */", "is_target": false}, {"number": 103, "content": "    virtual int getSegmentsPosition(std::vector<Position> &poslist);", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "    /** the main object of the robot, which is used for position and speed tracking */", "is_target": false}, {"number": 106, "content": "    virtual const Primitive* getMainPrimitive()  const;", "is_target": true}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "  protected:", "is_target": false}, {"number": 109, "content": "", "is_target": false}, {"number": 110, "content": "    /** creates vehicle at desired pose", "is_target": false}, {"number": 111, "content": "        @param pose 4x4 pose matrix", "is_target": false}]}, "1819": {"lines": [{"number": 34, "content": " */", "is_target": false}, {"number": 35, "content": "class InvertNChannelController : public InvertController {", "is_target": false}, {"number": 36, "content": "", "is_target": false}, {"number": 37, "content": "public:", "is_target": false}, {"number": 38, "content": "  explicit InvertNChannelController(int _buffersize, bool _update_only_1 = false);", "is_target": false}, {"number": 39, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  virtual ~InvertNChannelController();", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "  /// returns the name of the object (with version number)", "is_target": false}, {"number": 44, "content": "  virtual paramkey getName() const noexcept override {", "is_target": false}]}, "1820": {"lines": [{"number": 36, "content": "", "is_target": false}, {"number": 37, "content": "public:", "is_target": false}, {"number": 38, "content": "  explicit InvertNChannelController(int _buffersize, bool _update_only_1 = false);", "is_target": false}, {"number": 39, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  virtual ~InvertNChannelController();", "is_target": true}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "  /// returns the name of the object (with version number)", "is_target": false}, {"number": 44, "content": "  virtual paramkey getName() const noexcept override {", "is_target": false}, {"number": 45, "content": "    return name;", "is_target": false}, {"number": 46, "content": "  }", "is_target": false}]}, "1821": {"lines": [{"number": 53, "content": "    return number_channels;", "is_target": false}, {"number": 54, "content": "  }", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 57, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 58, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 61, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 62, "content": "                              int number_sensors,", "is_target": false}, {"number": 63, "content": "                              motor*,", "is_target": false}]}, "1822": {"lines": [{"number": 56, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 57, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 58, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 61, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 62, "content": "                              int number_sensors,", "is_target": false}, {"number": 63, "content": "                              motor*,", "is_target": false}, {"number": 64, "content": "                              int number_motors);", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "  /***** STOREABLE ****/", "is_target": false}]}, "1823": {"lines": [{"number": 68, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 69, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 70, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  // inspectable interface", "is_target": false}, {"number": 73, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": true}, {"number": 74, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "protected:", "is_target": false}, {"number": 77, "content": "  unsigned short number_channels = 0;", "is_target": false}, {"number": 78, "content": "  unsigned short buffersize = 0;", "is_target": false}]}, "1824": {"lines": [{"number": 69, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 70, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  // inspectable interface", "is_target": false}, {"number": 73, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 74, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "protected:", "is_target": false}, {"number": 77, "content": "  unsigned short number_channels = 0;", "is_target": false}, {"number": 78, "content": "  unsigned short buffersize = 0;", "is_target": false}, {"number": 79, "content": "  bool update_only_1 = false;", "is_target": false}]}, "1825": {"lines": [{"number": 778, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 779, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 780, "content": "", "is_target": false}, {"number": 781, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 782, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 783, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 784, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 785, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 786, "content": "", "is_target": false}, {"number": 787, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 788, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1826": {"lines": [{"number": 778, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 779, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 780, "content": "", "is_target": false}, {"number": 781, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 782, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 783, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 784, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 785, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 786, "content": "", "is_target": false}, {"number": 787, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 788, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1827": {"lines": [{"number": 778, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 779, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 780, "content": "", "is_target": false}, {"number": 781, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 782, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 783, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 784, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 785, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 786, "content": "", "is_target": false}, {"number": 787, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 788, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1828": {"lines": [{"number": 778, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 779, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 780, "content": "", "is_target": false}, {"number": 781, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 782, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 783, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 784, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 785, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 786, "content": "", "is_target": false}, {"number": 787, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 788, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1829": {"lines": [{"number": 778, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 779, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 780, "content": "", "is_target": false}, {"number": 781, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 782, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 783, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 784, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 785, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 786, "content": "", "is_target": false}, {"number": 787, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 788, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1830": {"lines": [{"number": 778, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 779, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 780, "content": "", "is_target": false}, {"number": 781, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 782, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 783, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 784, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 785, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 786, "content": "", "is_target": false}, {"number": 787, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 788, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1831": {"lines": [{"number": 778, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 779, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 780, "content": "", "is_target": false}, {"number": 781, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 782, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 783, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 784, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 785, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 786, "content": "", "is_target": false}, {"number": 787, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 788, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1832": {"lines": [{"number": 778, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 779, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 780, "content": "", "is_target": false}, {"number": 781, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 782, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 783, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 784, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 785, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 786, "content": "", "is_target": false}, {"number": 787, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 788, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1833": {"lines": [{"number": 778, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 779, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 780, "content": "", "is_target": false}, {"number": 781, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 782, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 783, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 784, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 785, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 786, "content": "", "is_target": false}, {"number": 787, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 788, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1834": {"lines": [{"number": 734, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 735, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 736, "content": "", "is_target": false}, {"number": 737, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 738, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 739, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 740, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 741, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 742, "content": "", "is_target": false}, {"number": 743, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 744, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.1, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1835": {"lines": [{"number": 734, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 735, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 736, "content": "", "is_target": false}, {"number": 737, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 738, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 739, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 740, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 741, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 742, "content": "", "is_target": false}, {"number": 743, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 744, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.1, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1836": {"lines": [{"number": 734, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 735, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 736, "content": "", "is_target": false}, {"number": 737, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 738, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 739, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 740, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 741, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 742, "content": "", "is_target": false}, {"number": 743, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 744, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.1, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1837": {"lines": [{"number": 896, "content": "          break;", "is_target": false}, {"number": 897, "content": "        }", "is_target": false}, {"number": 898, "content": "    }", "is_target": false}, {"number": 899, "content": "    return false;", "is_target": false}, {"number": 900, "content": "  }", "is_target": false}, {"number": 901, "content": "};", "is_target": true}, {"number": 902, "content": "", "is_target": false}, {"number": 903, "content": "", "is_target": false}, {"number": 904, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 905, "content": "{", "is_target": false}, {"number": 906, "content": "  ThisSim sim;", "is_target": false}]}, "1838": {"lines": [{"number": 896, "content": "          break;", "is_target": false}, {"number": 897, "content": "        }", "is_target": false}, {"number": 898, "content": "    }", "is_target": false}, {"number": 899, "content": "    return false;", "is_target": false}, {"number": 900, "content": "  }", "is_target": false}, {"number": 901, "content": "};", "is_target": true}, {"number": 902, "content": "", "is_target": false}, {"number": 903, "content": "", "is_target": false}, {"number": 904, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 905, "content": "{", "is_target": false}, {"number": 906, "content": "  ThisSim sim;", "is_target": false}]}, "1839": {"lines": [{"number": 734, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 735, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 736, "content": "", "is_target": false}, {"number": 737, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 738, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 739, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 740, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 741, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 742, "content": "", "is_target": false}, {"number": 743, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 744, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.1, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1840": {"lines": [{"number": 896, "content": "          break;", "is_target": false}, {"number": 897, "content": "        }", "is_target": false}, {"number": 898, "content": "    }", "is_target": false}, {"number": 899, "content": "    return false;", "is_target": false}, {"number": 900, "content": "  }", "is_target": false}, {"number": 901, "content": "};", "is_target": true}, {"number": 902, "content": "", "is_target": false}, {"number": 903, "content": "", "is_target": false}, {"number": 904, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 905, "content": "{", "is_target": false}, {"number": 906, "content": "  ThisSim sim;", "is_target": false}]}, "1841": {"lines": [{"number": 734, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 735, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 736, "content": "", "is_target": false}, {"number": 737, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 738, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 739, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 740, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 741, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 742, "content": "", "is_target": false}, {"number": 743, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 744, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.1, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1842": {"lines": [{"number": 896, "content": "          break;", "is_target": false}, {"number": 897, "content": "        }", "is_target": false}, {"number": 898, "content": "    }", "is_target": false}, {"number": 899, "content": "    return false;", "is_target": false}, {"number": 900, "content": "  }", "is_target": false}, {"number": 901, "content": "};", "is_target": true}, {"number": 902, "content": "", "is_target": false}, {"number": 903, "content": "", "is_target": false}, {"number": 904, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 905, "content": "{", "is_target": false}, {"number": 906, "content": "  ThisSim sim;", "is_target": false}]}, "1843": {"lines": [{"number": 734, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 735, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 736, "content": "", "is_target": false}, {"number": 737, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 738, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 739, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 740, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 741, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 742, "content": "", "is_target": false}, {"number": 743, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 744, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.1, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1844": {"lines": [{"number": 896, "content": "          break;", "is_target": false}, {"number": 897, "content": "        }", "is_target": false}, {"number": 898, "content": "    }", "is_target": false}, {"number": 899, "content": "    return false;", "is_target": false}, {"number": 900, "content": "  }", "is_target": false}, {"number": 901, "content": "};", "is_target": true}, {"number": 902, "content": "", "is_target": false}, {"number": 903, "content": "", "is_target": false}, {"number": 904, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 905, "content": "{", "is_target": false}, {"number": 906, "content": "  ThisSim sim;", "is_target": false}]}, "1845": {"lines": [{"number": 896, "content": "          break;", "is_target": false}, {"number": 897, "content": "        }", "is_target": false}, {"number": 898, "content": "    }", "is_target": false}, {"number": 899, "content": "    return false;", "is_target": false}, {"number": 900, "content": "  }", "is_target": false}, {"number": 901, "content": "};", "is_target": true}, {"number": 902, "content": "", "is_target": false}, {"number": 903, "content": "", "is_target": false}, {"number": 904, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 905, "content": "{", "is_target": false}, {"number": 906, "content": "  ThisSim sim;", "is_target": false}]}, "1846": {"lines": [{"number": 734, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 735, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 736, "content": "", "is_target": false}, {"number": 737, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 738, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 739, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 740, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 741, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 742, "content": "", "is_target": false}, {"number": 743, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 744, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.1, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1847": {"lines": [{"number": 896, "content": "          break;", "is_target": false}, {"number": 897, "content": "        }", "is_target": false}, {"number": 898, "content": "    }", "is_target": false}, {"number": 899, "content": "    return false;", "is_target": false}, {"number": 900, "content": "  }", "is_target": false}, {"number": 901, "content": "};", "is_target": true}, {"number": 902, "content": "", "is_target": false}, {"number": 903, "content": "", "is_target": false}, {"number": 904, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 905, "content": "{", "is_target": false}, {"number": 906, "content": "  ThisSim sim;", "is_target": false}]}, "1848": {"lines": [{"number": 734, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 735, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 736, "content": "", "is_target": false}, {"number": 737, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 738, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 739, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 740, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 741, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 742, "content": "", "is_target": false}, {"number": 743, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 744, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.1, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1849": {"lines": [{"number": 896, "content": "          break;", "is_target": false}, {"number": 897, "content": "        }", "is_target": false}, {"number": 898, "content": "    }", "is_target": false}, {"number": 899, "content": "    return false;", "is_target": false}, {"number": 900, "content": "  }", "is_target": false}, {"number": 901, "content": "};", "is_target": true}, {"number": 902, "content": "", "is_target": false}, {"number": 903, "content": "", "is_target": false}, {"number": 904, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 905, "content": "{", "is_target": false}, {"number": 906, "content": "  ThisSim sim;", "is_target": false}]}, "1850": {"lines": [{"number": 734, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 735, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 736, "content": "", "is_target": false}, {"number": 737, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 738, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 739, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 740, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 741, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 742, "content": "", "is_target": false}, {"number": 743, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 744, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.1, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1851": {"lines": [{"number": 896, "content": "          break;", "is_target": false}, {"number": 897, "content": "        }", "is_target": false}, {"number": 898, "content": "    }", "is_target": false}, {"number": 899, "content": "    return false;", "is_target": false}, {"number": 900, "content": "  }", "is_target": false}, {"number": 901, "content": "};", "is_target": true}, {"number": 902, "content": "", "is_target": false}, {"number": 903, "content": "", "is_target": false}, {"number": 904, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 905, "content": "{", "is_target": false}, {"number": 906, "content": "  ThisSim sim;", "is_target": false}]}, "1852": {"lines": [{"number": 781, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 782, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 783, "content": "", "is_target": false}, {"number": 784, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 785, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 786, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 787, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 788, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 789, "content": "", "is_target": false}, {"number": 790, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 791, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1853": {"lines": [{"number": 781, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 782, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 783, "content": "", "is_target": false}, {"number": 784, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 785, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 786, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 787, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 788, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 789, "content": "", "is_target": false}, {"number": 790, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 791, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1854": {"lines": [{"number": 134, "content": "  {", "is_target": false}, {"number": 135, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 136, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 137, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 138, "content": "  };", "is_target": false}, {"number": 139, "content": "};", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "#endif", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "", "is_target": false}]}, "1855": {"lines": [{"number": 781, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 782, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 783, "content": "", "is_target": false}, {"number": 784, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 785, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 786, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 787, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 788, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 789, "content": "", "is_target": false}, {"number": 790, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 791, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1856": {"lines": [{"number": 781, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 782, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 783, "content": "", "is_target": false}, {"number": 784, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 785, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 786, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 787, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 788, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 789, "content": "", "is_target": false}, {"number": 790, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 791, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1857": {"lines": [{"number": 781, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 782, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 783, "content": "", "is_target": false}, {"number": 784, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 785, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 786, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 787, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 788, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 789, "content": "", "is_target": false}, {"number": 790, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 791, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1858": {"lines": [{"number": 781, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 782, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 783, "content": "", "is_target": false}, {"number": 784, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 785, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 786, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 787, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 788, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 789, "content": "", "is_target": false}, {"number": 790, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 791, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1859": {"lines": [{"number": 781, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 782, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 783, "content": "", "is_target": false}, {"number": 784, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 785, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 786, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 787, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 788, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 789, "content": "", "is_target": false}, {"number": 790, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 791, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1860": {"lines": [{"number": 781, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 782, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 783, "content": "", "is_target": false}, {"number": 784, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 785, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 786, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 787, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 788, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 789, "content": "", "is_target": false}, {"number": 790, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 791, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1861": {"lines": [{"number": 781, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 782, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 783, "content": "", "is_target": false}, {"number": 784, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 785, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 786, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 787, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 788, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 789, "content": "", "is_target": false}, {"number": 790, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 791, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "1862": {"lines": [{"number": 134, "content": "  {", "is_target": false}, {"number": 135, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 136, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 137, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 138, "content": "  };", "is_target": false}, {"number": 139, "content": "};", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "#endif", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "", "is_target": false}]}, "1863": {"lines": [{"number": 134, "content": "  {", "is_target": false}, {"number": 135, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 136, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 137, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 138, "content": "  };", "is_target": false}, {"number": 139, "content": "};", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "#endif", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "", "is_target": false}]}, "1864": {"lines": [{"number": 206, "content": "    return handled;", "is_target": false}, {"number": 207, "content": "  }", "is_target": false}, {"number": 208, "content": "", "is_target": false}, {"number": 209, "content": "", "is_target": false}, {"number": 210, "content": "", "is_target": false}, {"number": 211, "content": "};", "is_target": true}, {"number": 212, "content": "", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 215, "content": "{", "is_target": false}, {"number": 216, "content": "  ThisSim sim;", "is_target": false}]}, "1865": {"lines": [{"number": 134, "content": "  {", "is_target": false}, {"number": 135, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 136, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 137, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 138, "content": "  };", "is_target": false}, {"number": 139, "content": "};", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "#endif", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "", "is_target": false}]}, "1866": {"lines": [{"number": 206, "content": "    return handled;", "is_target": false}, {"number": 207, "content": "  }", "is_target": false}, {"number": 208, "content": "", "is_target": false}, {"number": 209, "content": "", "is_target": false}, {"number": 210, "content": "", "is_target": false}, {"number": 211, "content": "};", "is_target": true}, {"number": 212, "content": "", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 215, "content": "{", "is_target": false}, {"number": 216, "content": "  ThisSim sim;", "is_target": false}]}, "1867": {"lines": [{"number": 206, "content": "    return handled;", "is_target": false}, {"number": 207, "content": "  }", "is_target": false}, {"number": 208, "content": "", "is_target": false}, {"number": 209, "content": "", "is_target": false}, {"number": 210, "content": "", "is_target": false}, {"number": 211, "content": "};", "is_target": true}, {"number": 212, "content": "", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 215, "content": "{", "is_target": false}, {"number": 216, "content": "  ThisSim sim;", "is_target": false}]}, "1868": {"lines": [{"number": 134, "content": "  {", "is_target": false}, {"number": 135, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 136, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 137, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 138, "content": "  };", "is_target": false}, {"number": 139, "content": "};", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "#endif", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "", "is_target": false}]}, "1869": {"lines": [{"number": 206, "content": "    return handled;", "is_target": false}, {"number": 207, "content": "  }", "is_target": false}, {"number": 208, "content": "", "is_target": false}, {"number": 209, "content": "", "is_target": false}, {"number": 210, "content": "", "is_target": false}, {"number": 211, "content": "};", "is_target": true}, {"number": 212, "content": "", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 215, "content": "{", "is_target": false}, {"number": 216, "content": "  ThisSim sim;", "is_target": false}]}, "1870": {"lines": [{"number": 134, "content": "  {", "is_target": false}, {"number": 135, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 136, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 137, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 138, "content": "  };", "is_target": false}, {"number": 139, "content": "};", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "#endif", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "", "is_target": false}]}, "1871": {"lines": [{"number": 206, "content": "    return handled;", "is_target": false}, {"number": 207, "content": "  }", "is_target": false}, {"number": 208, "content": "", "is_target": false}, {"number": 209, "content": "", "is_target": false}, {"number": 210, "content": "", "is_target": false}, {"number": 211, "content": "};", "is_target": true}, {"number": 212, "content": "", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 215, "content": "{", "is_target": false}, {"number": 216, "content": "  ThisSim sim;", "is_target": false}]}, "1872": {"lines": [{"number": 206, "content": "    return handled;", "is_target": false}, {"number": 207, "content": "  }", "is_target": false}, {"number": 208, "content": "", "is_target": false}, {"number": 209, "content": "", "is_target": false}, {"number": 210, "content": "", "is_target": false}, {"number": 211, "content": "};", "is_target": true}, {"number": 212, "content": "", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 215, "content": "{", "is_target": false}, {"number": 216, "content": "  ThisSim sim;", "is_target": false}]}, "1873": {"lines": [{"number": 134, "content": "  {", "is_target": false}, {"number": 135, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 136, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 137, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 138, "content": "  };", "is_target": false}, {"number": 139, "content": "};", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "#endif", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "", "is_target": false}]}, "1874": {"lines": [{"number": 206, "content": "    return handled;", "is_target": false}, {"number": 207, "content": "  }", "is_target": false}, {"number": 208, "content": "", "is_target": false}, {"number": 209, "content": "", "is_target": false}, {"number": 210, "content": "", "is_target": false}, {"number": 211, "content": "};", "is_target": true}, {"number": 212, "content": "", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 215, "content": "{", "is_target": false}, {"number": 216, "content": "  ThisSim sim;", "is_target": false}]}, "1875": {"lines": [{"number": 206, "content": "    return handled;", "is_target": false}, {"number": 207, "content": "  }", "is_target": false}, {"number": 208, "content": "", "is_target": false}, {"number": 209, "content": "", "is_target": false}, {"number": 210, "content": "", "is_target": false}, {"number": 211, "content": "};", "is_target": true}, {"number": 212, "content": "", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 215, "content": "{", "is_target": false}, {"number": 216, "content": "  ThisSim sim;", "is_target": false}]}, "1876": {"lines": [{"number": 134, "content": "  {", "is_target": false}, {"number": 135, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 136, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 137, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 138, "content": "  };", "is_target": false}, {"number": 139, "content": "};", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "#endif", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "", "is_target": false}]}, "1877": {"lines": [{"number": 206, "content": "    return handled;", "is_target": false}, {"number": 207, "content": "  }", "is_target": false}, {"number": 208, "content": "", "is_target": false}, {"number": 209, "content": "", "is_target": false}, {"number": 210, "content": "", "is_target": false}, {"number": 211, "content": "};", "is_target": true}, {"number": 212, "content": "", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 215, "content": "{", "is_target": false}, {"number": 216, "content": "  ThisSim sim;", "is_target": false}]}, "1878": {"lines": [{"number": 134, "content": "  {", "is_target": false}, {"number": 135, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 136, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 137, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 138, "content": "  };", "is_target": false}, {"number": 139, "content": "};", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "#endif", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "", "is_target": false}]}, "1879": {"lines": [{"number": 134, "content": "  {", "is_target": false}, {"number": 135, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 136, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 137, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 138, "content": "  };", "is_target": false}, {"number": 139, "content": "};", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "#endif", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "", "is_target": false}]}, "1880": {"lines": [{"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "  }", "is_target": false}, {"number": 131, "content": "  // add own key handling stuff here, just insert some case values", "is_target": false}, {"number": 132, "content": "  virtual bool command(const OdeHandle&, const OsgHandle&, GlobalData& globalData, int key, bool down) override {", "is_target": false}, {"number": 133, "content": "    if (down) { // only when key is pressed, not when released", "is_target": false}, {"number": 134, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 135, "content": "        {", "is_target": false}, {"number": 136, "content": "        default:", "is_target": false}, {"number": 137, "content": "          return false;", "is_target": false}, {"number": 138, "content": "          break;", "is_target": false}, {"number": 139, "content": "        }", "is_target": false}]}, "1881": {"lines": [{"number": 125, "content": "    c.irSide=false;", "is_target": false}, {"number": 126, "content": "    c.drawIRs=RaySensor::drawAll;", "is_target": false}, {"number": 127, "content": "    c.irsensorscale=1.5;", "is_target": false}, {"number": 128, "content": "    c.irCharacter=1;", "is_target": false}, {"number": 129, "content": "    c.irSensorTempl=0;", "is_target": false}, {"number": 130, "content": "    c.motor_ir_before_sensors=false;", "is_target": true}, {"number": 131, "content": "    c.axesShift=0;", "is_target": false}, {"number": 132, "content": "    c.brake=0;", "is_target": false}, {"number": 133, "content": "    c.axesShift=0;", "is_target": false}, {"number": 134, "content": "   return c;", "is_target": false}, {"number": 135, "content": "  }", "is_target": false}]}, "1882": {"lines": [{"number": 93, "content": "    c.irAxis3=false;", "is_target": false}, {"number": 94, "content": "    c.drawIRs=RaySensor::drawAll;", "is_target": false}, {"number": 95, "content": "    c.irsensorscale=1.5;", "is_target": false}, {"number": 96, "content": "    c.irCharacter=1;", "is_target": false}, {"number": 97, "content": "    c.irSensorTempl=0;", "is_target": false}, {"number": 98, "content": "    c.motor_ir_before_sensors=false;", "is_target": true}, {"number": 99, "content": "    c.brake=0;", "is_target": false}, {"number": 100, "content": "    c.axesShift=0;", "is_target": false}, {"number": 101, "content": "    return c;", "is_target": false}, {"number": 102, "content": "  }", "is_target": false}, {"number": 103, "content": "", "is_target": false}]}, "1883": {"lines": [{"number": 350, "content": "    return false;", "is_target": false}, {"number": 351, "content": "  }", "is_target": false}, {"number": 352, "content": "", "is_target": false}, {"number": 353, "content": "", "is_target": false}, {"number": 354, "content": "", "is_target": false}, {"number": 355, "content": "};", "is_target": true}, {"number": 356, "content": "", "is_target": false}, {"number": 357, "content": "", "is_target": false}, {"number": 358, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 359, "content": "{", "is_target": false}, {"number": 360, "content": "  ThisSim sim;", "is_target": false}]}, "1884": {"lines": [{"number": 198, "content": "    for(int i=0; i<l; ++i) {", "is_target": false}, {"number": 199, "content": "      if(m.val(i,i)<0.8) m.val(i,i)+=0.001;", "is_target": false}, {"number": 200, "content": "    }", "is_target": false}, {"number": 201, "content": "  }", "is_target": false}, {"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "};", "is_target": true}, {"number": 204, "content": "", "is_target": false}, {"number": 205, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 206, "content": "{", "is_target": false}, {"number": 207, "content": "  ThisSim sim;", "is_target": false}, {"number": 208, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "1885": {"lines": [{"number": 350, "content": "    return false;", "is_target": false}, {"number": 351, "content": "  }", "is_target": false}, {"number": 352, "content": "", "is_target": false}, {"number": 353, "content": "", "is_target": false}, {"number": 354, "content": "", "is_target": false}, {"number": 355, "content": "};", "is_target": true}, {"number": 356, "content": "", "is_target": false}, {"number": 357, "content": "", "is_target": false}, {"number": 358, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 359, "content": "{", "is_target": false}, {"number": 360, "content": "  ThisSim sim;", "is_target": false}]}, "1886": {"lines": [{"number": 198, "content": "    for(int i=0; i<l; ++i) {", "is_target": false}, {"number": 199, "content": "      if(m.val(i,i)<0.8) m.val(i,i)+=0.001;", "is_target": false}, {"number": 200, "content": "    }", "is_target": false}, {"number": 201, "content": "  }", "is_target": false}, {"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "};", "is_target": true}, {"number": 204, "content": "", "is_target": false}, {"number": 205, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 206, "content": "{", "is_target": false}, {"number": 207, "content": "  ThisSim sim;", "is_target": false}, {"number": 208, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "1887": {"lines": [{"number": 350, "content": "    return false;", "is_target": false}, {"number": 351, "content": "  }", "is_target": false}, {"number": 352, "content": "", "is_target": false}, {"number": 353, "content": "", "is_target": false}, {"number": 354, "content": "", "is_target": false}, {"number": 355, "content": "};", "is_target": true}, {"number": 356, "content": "", "is_target": false}, {"number": 357, "content": "", "is_target": false}, {"number": 358, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 359, "content": "{", "is_target": false}, {"number": 360, "content": "  ThisSim sim;", "is_target": false}]}, "1888": {"lines": [{"number": 198, "content": "    for(int i=0; i<l; ++i) {", "is_target": false}, {"number": 199, "content": "      if(m.val(i,i)<0.8) m.val(i,i)+=0.001;", "is_target": false}, {"number": 200, "content": "    }", "is_target": false}, {"number": 201, "content": "  }", "is_target": false}, {"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "};", "is_target": true}, {"number": 204, "content": "", "is_target": false}, {"number": 205, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 206, "content": "{", "is_target": false}, {"number": 207, "content": "  ThisSim sim;", "is_target": false}, {"number": 208, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "1889": {"lines": [{"number": 46, "content": "  /**", "is_target": false}, {"number": 47, "content": "   * Constructor", "is_target": false}, {"number": 48, "content": "   */", "is_target": false}, {"number": 49, "content": "  PassiveSphere(const OdeHandle& odeHandle, const OsgHandle& osgHandle, double radius = 0.3, double mass = 1.0)", "is_target": false}, {"number": 50, "content": "     : AbstractObstacle(odeHandle, osgHandle), radius(radius), mass(mass), sphere(nullptr) {", "is_target": false}, {"number": 51, "content": "    sphere = new Sphere(radius);", "is_target": true}, {"number": 52, "content": "    obst.push_back(sphere);", "is_target": false}, {"number": 53, "content": "    obstacle_exists=false;", "is_target": false}, {"number": 54, "content": "  };", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "", "is_target": false}]}, "1890": {"lines": [{"number": 46, "content": "  /**", "is_target": false}, {"number": 47, "content": "   * Constructor", "is_target": false}, {"number": 48, "content": "   */", "is_target": false}, {"number": 49, "content": "  PassiveSphere(const OdeHandle& odeHandle, const OsgHandle& osgHandle, double radius = 0.3, double mass = 1.0)", "is_target": false}, {"number": 50, "content": "     : AbstractObstacle(odeHandle, osgHandle), radius(radius), mass(mass), sphere(nullptr) {", "is_target": false}, {"number": 51, "content": "    sphere = new Sphere(radius);", "is_target": true}, {"number": 52, "content": "    obst.push_back(sphere);", "is_target": false}, {"number": 53, "content": "    obstacle_exists=false;", "is_target": false}, {"number": 54, "content": "  };", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "", "is_target": false}]}, "1891": {"lines": [{"number": 48, "content": "   */", "is_target": false}, {"number": 49, "content": "  PassiveBox(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 50, "content": "             const osg::Vec3& dimension = osg::Vec3(1.0, 1.0, 1.0), double mass = 1.0):", "is_target": false}, {"number": 51, "content": "    AbstractObstacle(odeHandle, osgHandle), dimension(dimension), mass(mass)", "is_target": false}, {"number": 52, "content": "  {", "is_target": false}, {"number": 53, "content": "    box = new Box(dimension.x(), dimension.y(), dimension.z());", "is_target": true}, {"number": 54, "content": "    obst.push_back(box);", "is_target": false}, {"number": 55, "content": "    obstacle_exists=false;", "is_target": false}, {"number": 56, "content": "  };", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "", "is_target": false}]}, "1892": {"lines": [{"number": 48, "content": "   */", "is_target": false}, {"number": 49, "content": "  PassiveBox(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 50, "content": "             const osg::Vec3& dimension = osg::Vec3(1.0, 1.0, 1.0), double mass = 1.0):", "is_target": false}, {"number": 51, "content": "    AbstractObstacle(odeHandle, osgHandle), dimension(dimension), mass(mass)", "is_target": false}, {"number": 52, "content": "  {", "is_target": false}, {"number": 53, "content": "    box = new Box(dimension.x(), dimension.y(), dimension.z());", "is_target": true}, {"number": 54, "content": "    obst.push_back(box);", "is_target": false}, {"number": 55, "content": "    obstacle_exists=false;", "is_target": false}, {"number": 56, "content": "  };", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "", "is_target": false}]}, "1893": {"lines": [{"number": 76, "content": "      obst.push_back(box);", "is_target": false}, {"number": 77, "content": "    }", "is_target": false}, {"number": 78, "content": "    obstacle_exists=true;", "is_target": false}, {"number": 79, "content": "  };", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  virtual void calcBoxLength() {", "is_target": true}, {"number": 82, "content": "    double r = radius+width/2;", "is_target": false}, {"number": 83, "content": "    //    box_length =1.4 * sqrt( 2 * pow(radius,2) * (1 - cos(angle)) );", "is_target": false}, {"number": 84, "content": "    box_length =  sqrt(pow( 1 - cos(angle), 2) + pow(sin(angle),2)) * r;", "is_target": false}, {"number": 85, "content": "  }", "is_target": false}, {"number": 86, "content": "", "is_target": false}]}, "1894": {"lines": [{"number": 55, "content": "    calcBoxLength();", "is_target": false}, {"number": 56, "content": "  };", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "protected:", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  virtual void create() {", "is_target": true}, {"number": 61, "content": "    createGround();", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "    // radius for positioning is smaller than radius since we use secants.", "is_target": false}, {"number": 64, "content": "    //  r is the smallest distance of the secant to the center of the circle.", "is_target": false}, {"number": 65, "content": "    double r = sqrt(pow((1+cos(angle))/2, 2) + pow( sin(angle)/2 ,2)) * radius;", "is_target": false}]}, "1895": {"lines": [{"number": 53, "content": "     x_{t-1},y_{t-2},...,x_{t-history})^T \\f]", "is_target": false}, {"number": 54, "content": "      @param init_wait number of timesteps to wait before controlling", "is_target": false}, {"number": 55, "content": "  */", "is_target": false}, {"number": 56, "content": "  FFNNController(MultiLayerFFNN* net, int history, bool input_only_x, unsigned int init_wait = 0);", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  virtual ~FFNNController();", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 63, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "1896": {"lines": [{"number": 55, "content": "  */", "is_target": false}, {"number": 56, "content": "  FFNNController(MultiLayerFFNN* net, int history, bool input_only_x, unsigned int init_wait = 0);", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "  virtual ~FFNNController();", "is_target": true}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 63, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 64, "content": "    return number_sensors;", "is_target": false}, {"number": 65, "content": "  }", "is_target": false}]}, "1897": {"lines": [{"number": 66, "content": "  /// returns the mumber of motors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 67, "content": "  virtual int getMotorNumber() const override {", "is_target": false}, {"number": 68, "content": "    return number_motors;", "is_target": false}, {"number": 69, "content": "  }", "is_target": false}, {"number": 70, "content": "", "is_target": false}, {"number": 71, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 72, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 73, "content": "                              int number_sensors,", "is_target": false}, {"number": 74, "content": "                              motor*,", "is_target": false}, {"number": 75, "content": "                              int number_motors);", "is_target": false}, {"number": 76, "content": "", "is_target": false}]}, "1898": {"lines": [{"number": 67, "content": "  virtual int getMotorNumber() const override {", "is_target": false}, {"number": 68, "content": "    return number_motors;", "is_target": false}, {"number": 69, "content": "  }", "is_target": false}, {"number": 70, "content": "", "is_target": false}, {"number": 71, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 72, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 73, "content": "                              int number_sensors,", "is_target": false}, {"number": 74, "content": "                              motor*,", "is_target": false}, {"number": 75, "content": "                              int number_motors);", "is_target": false}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "  /**** CONFIGURABLE ****/", "is_target": false}]}, "1899": {"lines": [{"number": 73, "content": "                              int number_sensors,", "is_target": false}, {"number": 74, "content": "                              motor*,", "is_target": false}, {"number": 75, "content": "                              int number_motors);", "is_target": false}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "  /**** CONFIGURABLE ****/", "is_target": false}, {"number": 78, "content": "  void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "  /**** STOREABLE ****/", "is_target": false}, {"number": 81, "content": "  /** stores the controller values to a given file (binary).  */", "is_target": false}, {"number": 82, "content": "  virtual bool store(FILE* f) const;", "is_target": false}, {"number": 83, "content": "  /** loads the controller values from a given file (binary). */", "is_target": false}]}, "1900": {"lines": [{"number": 40, "content": "};", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "struct select_all : public  select_predicate { };", "is_target": false}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "struct select_firsthalf : public  select_predicate {", "is_target": false}, {"number": 45, "content": "  virtual bool operator()( int index,  int len) { return index < len/2; }", "is_target": true}, {"number": 46, "content": "};", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "/// select sensors in the range [from, to] inclusively", "is_target": false}, {"number": 49, "content": "struct select_from_to : public  select_predicate {", "is_target": false}, {"number": 50, "content": "  select_from_to( int from,  int to) : from(from), to(to) {}", "is_target": false}]}, "1901": {"lines": [{"number": 46, "content": "};", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "/// select sensors in the range [from, to] inclusively", "is_target": false}, {"number": 49, "content": "struct select_from_to : public  select_predicate {", "is_target": false}, {"number": 50, "content": "  select_from_to( int from,  int to) : from(from), to(to) {}", "is_target": false}, {"number": 51, "content": "  virtual bool operator()( int index,  int len) { return (index >= from) && (index <= to); }", "is_target": true}, {"number": 52, "content": "  int from;", "is_target": false}, {"number": 53, "content": "  int to;", "is_target": false}, {"number": 54, "content": "};", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "/**", "is_target": false}]}, "1902": {"lines": [{"number": 63, "content": "      @param noise NoiseGenerator that is used for adding noise to sensor values", "is_target": false}, {"number": 64, "content": "      @param sel_sensor binary predicate taking the index and the length (number of sensors)", "is_target": false}, {"number": 65, "content": "             and decides which sensor to select", "is_target": false}, {"number": 66, "content": "  */", "is_target": false}, {"number": 67, "content": "  SelectiveOne2OneWiring(NoiseGenerator* noise, select_predicate* sel_sensor, int plotMode = Controller, const std::string& name = \"SelectiveOne2OneWiring\");", "is_target": false}, {"number": 68, "content": "  virtual ~SelectiveOne2OneWiring();", "is_target": true}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "protected:", "is_target": false}, {"number": 71, "content": "  virtual bool initIntern();", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": false}]}, "1903": {"lines": [{"number": 66, "content": "  */", "is_target": false}, {"number": 67, "content": "  SelectiveOne2OneWiring(NoiseGenerator* noise, select_predicate* sel_sensor, int plotMode = Controller, const std::string& name = \"SelectiveOne2OneWiring\");", "is_target": false}, {"number": 68, "content": "  virtual ~SelectiveOne2OneWiring();", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "protected:", "is_target": false}, {"number": 71, "content": "  virtual bool initIntern();", "is_target": true}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": false}, {"number": 74, "content": "                                 sensor* csensors, int csensornumber,", "is_target": false}, {"number": 75, "content": "                                 double noise);", "is_target": false}, {"number": 76, "content": "", "is_target": false}]}, "1904": {"lines": [{"number": 68, "content": "  virtual ~SelectiveOne2OneWiring();", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "protected:", "is_target": false}, {"number": 71, "content": "  virtual bool initIntern();", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  virtual bool wireSensorsIntern(const sensor* rsensors, int rsensornumber,", "is_target": true}, {"number": 74, "content": "                                 sensor* csensors, int csensornumber,", "is_target": false}, {"number": 75, "content": "                                 double noise);", "is_target": false}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "protected:", "is_target": false}, {"number": 78, "content": "  select_predicate* sel_sensor = nullptr;", "is_target": false}]}, "1905": {"lines": [{"number": 103, "content": "                       const Sphererobot3MassesConf& conf,", "is_target": false}, {"number": 104, "content": "                       const std::string& name, const std::string& revision, double transparency);", "is_target": false}, {"number": 105, "content": "  /// initialises some internal variables", "is_target": false}, {"number": 106, "content": "  void init();", "is_target": false}, {"number": 107, "content": "public:", "is_target": false}, {"number": 108, "content": "  virtual ~Sphererobot3Masses();", "is_target": true}, {"number": 109, "content": "", "is_target": false}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "  /// default configuration", "is_target": false}, {"number": 112, "content": "  static Sphererobot3MassesConf getDefaultConf() {", "is_target": false}, {"number": 113, "content": "    Sphererobot3MassesConf c;", "is_target": false}]}, "1906": {"lines": [{"number": 132, "content": "    c.brake=0;", "is_target": false}, {"number": 133, "content": "    c.axesShift=0;", "is_target": false}, {"number": 134, "content": "   return c;", "is_target": false}, {"number": 135, "content": "  }", "is_target": false}, {"number": 136, "content": "", "is_target": false}, {"number": 137, "content": "  virtual void update();", "is_target": true}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 142, "content": "", "is_target": false}]}, "1907": {"lines": [{"number": 134, "content": "   return c;", "is_target": false}, {"number": 135, "content": "  }", "is_target": false}, {"number": 136, "content": "", "is_target": false}, {"number": 137, "content": "  virtual void update();", "is_target": false}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "  virtual void sense(const GlobalData& globalData);", "is_target": false}, {"number": 144, "content": "", "is_target": false}]}, "1908": {"lines": [{"number": 136, "content": "", "is_target": false}, {"number": 137, "content": "  virtual void update();", "is_target": false}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": true}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "  virtual void sense(const GlobalData& globalData);", "is_target": false}, {"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "  virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 146, "content": "", "is_target": false}]}, "1909": {"lines": [{"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "  virtual void sense(const GlobalData& globalData);", "is_target": true}, {"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "  virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 148, "content": "", "is_target": false}]}, "1910": {"lines": [{"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "  virtual void sense(const GlobalData& globalData);", "is_target": false}, {"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "  virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": true}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "  virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "1911": {"lines": [{"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "  virtual void sense(const GlobalData& globalData);", "is_target": false}, {"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "  virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": true}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "  virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "  virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 152, "content": "", "is_target": false}]}, "1912": {"lines": [{"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "  virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "  virtual int getMotorNumberIntern() const;", "is_target": true}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "  virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "  /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 154, "content": "  virtual void notifyOnChange(const paramkey& key);", "is_target": false}]}, "1913": {"lines": [{"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "  virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "  virtual int getSensorNumberIntern() const;", "is_target": true}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "  /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 154, "content": "  virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "", "is_target": false}]}, "1914": {"lines": [{"number": 149, "content": "  virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "  virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "  /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 154, "content": "  virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "", "is_target": false}, {"number": 157, "content": "protected:", "is_target": false}, {"number": 158, "content": "", "is_target": false}, {"number": 159, "content": "  virtual void create(const osg::Matrix& pose);", "is_target": false}]}, "1915": {"lines": [{"number": 72, "content": "   Just two of the 3 axis are used. The worldZaxissensor  and irAxis3 has no meaning here.", "is_target": false}, {"number": 73, "content": "   **/", "is_target": false}, {"number": 74, "content": "  Barrel2Masses ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 75, "content": "                       const Sphererobot3MassesConf& conf, const std::string& name, double transparency=0.5 );", "is_target": false}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "  virtual ~Barrel2Masses();", "is_target": true}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /** default configuration for Barrel2Masses. It has no sensors.", "is_target": false}, {"number": 80, "content": "      Use addSensor(std::make_shared<Sensor>(AxisOrientationSensor(ZProjectionXY)) for example.*/", "is_target": false}, {"number": 81, "content": "  static Sphererobot3MassesConf getDefaultConfBarrel() {", "is_target": false}, {"number": 82, "content": "    Sphererobot3MassesConf c = Sphererobot3Masses::getDefaultConf();", "is_target": false}]}, "1916": {"lines": [{"number": 99, "content": "    c.brake=0;", "is_target": false}, {"number": 100, "content": "    c.axesShift=0;", "is_target": false}, {"number": 101, "content": "    return c;", "is_target": false}, {"number": 102, "content": "  }", "is_target": false}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "  virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": true}, {"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "protected:", "is_target": false}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "  /// The cylinder (main body) lies on the ground, that it is rotating about the z-axis", "is_target": false}, {"number": 109, "content": "  virtual void create(const osg::Matrix& pose);", "is_target": false}]}, "1917": {"lines": [{"number": 104, "content": "  virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "protected:", "is_target": false}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "  /// The cylinder (main body) lies on the ground, that it is rotating about the z-axis", "is_target": false}, {"number": 109, "content": "  virtual void create(const osg::Matrix& pose);", "is_target": true}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "};", "is_target": false}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "}", "is_target": false}, {"number": 114, "content": "", "is_target": false}]}, "1918": {"lines": [{"number": 61, "content": "  Sensor* sensor = nullptr;", "is_target": false}, {"number": 62, "content": "  double friction = 0.1;", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "  // starting function (executed once at the beginning of the simulation loop)", "is_target": false}, {"number": 66, "content": "  void start(const OdeHandle& odeHandle, const OsgHandle& osgHandle, GlobalData& global)", "is_target": true}, {"number": 67, "content": "  {", "is_target": false}, {"number": 68, "content": "    int num_barrels=1;", "is_target": false}, {"number": 69, "content": "    int num_barrels_test=0;", "is_target": false}, {"number": 70, "content": "", "is_target": false}, {"number": 71, "content": "    sensor=0;", "is_target": false}]}, "1919": {"lines": [{"number": 198, "content": "    for(int i=0; i<l; ++i) {", "is_target": false}, {"number": 199, "content": "      if(m.val(i,i)<0.8) m.val(i,i)+=0.001;", "is_target": false}, {"number": 200, "content": "    }", "is_target": false}, {"number": 201, "content": "  }", "is_target": false}, {"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "};", "is_target": true}, {"number": 204, "content": "", "is_target": false}, {"number": 205, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 206, "content": "{", "is_target": false}, {"number": 207, "content": "  ThisSim sim;", "is_target": false}, {"number": 208, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "1920": {"lines": [{"number": 350, "content": "    return false;", "is_target": false}, {"number": 351, "content": "  }", "is_target": false}, {"number": 352, "content": "", "is_target": false}, {"number": 353, "content": "", "is_target": false}, {"number": 354, "content": "", "is_target": false}, {"number": 355, "content": "};", "is_target": true}, {"number": 356, "content": "", "is_target": false}, {"number": 357, "content": "", "is_target": false}, {"number": 358, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 359, "content": "{", "is_target": false}, {"number": 360, "content": "  ThisSim sim;", "is_target": false}]}, "1921": {"lines": [{"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "    // add a new parameter to be configured on the console", "is_target": false}, {"number": 85, "content": "    global.odeConfig.addParameterDef(\"friction\", &friction, 0.1, \"rolling friction coefficient\");", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "    if(normalplayground){", "is_target": true}, {"number": 89, "content": "      Playground* playground = new Playground(odeHandle, osgHandle,osg::Vec3(20, 0.01, 0.01 ), 1);", "is_target": false}, {"number": 90, "content": "      playground->setGroundColor(Color(255/255.0,200/255.0,0/255.0));", "is_target": false}, {"number": 91, "content": "      playground->setGroundTexture(\"Images/really_white.rgb\");", "is_target": false}, {"number": 92, "content": "      playground->setColor(Color(255/255.0,200/255.0,21/255.0, 0.1));", "is_target": false}, {"number": 93, "content": "      playground->setPosition(osg::Vec3(0,0,0.05));", "is_target": false}]}, "1922": {"lines": [{"number": 143, "content": "      global.configs.push_back ( controller );", "is_target": false}, {"number": 144, "content": "    }", "is_target": false}, {"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "    /* * * * TEST BARRELS * * * */", "is_target": false}, {"number": 148, "content": "    for(int i=0; i< num_barrels_test; ++i) {", "is_target": true}, {"number": 149, "content": "      global.odeConfig.setParam(\"realtimefactor\",1);", "is_target": false}, {"number": 150, "content": "      //****************", "is_target": false}, {"number": 151, "content": "      Sphererobot3MassesConf conf = Sphererobot3Masses::getDefaultConf();", "is_target": false}, {"number": 152, "content": "      conf.pendularrange  = 0.15;", "is_target": false}, {"number": 153, "content": "      conf.motorsensor=true;", "is_target": false}]}, "1923": {"lines": [{"number": 198, "content": "    for(int i=0; i<l; ++i) {", "is_target": false}, {"number": 199, "content": "      if(m.val(i,i)<0.8) m.val(i,i)+=0.001;", "is_target": false}, {"number": 200, "content": "    }", "is_target": false}, {"number": 201, "content": "  }", "is_target": false}, {"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "};", "is_target": true}, {"number": 204, "content": "", "is_target": false}, {"number": 205, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 206, "content": "{", "is_target": false}, {"number": 207, "content": "  ThisSim sim;", "is_target": false}, {"number": 208, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "1924": {"lines": [{"number": 350, "content": "    return false;", "is_target": false}, {"number": 351, "content": "  }", "is_target": false}, {"number": 352, "content": "", "is_target": false}, {"number": 353, "content": "", "is_target": false}, {"number": 354, "content": "", "is_target": false}, {"number": 355, "content": "};", "is_target": true}, {"number": 356, "content": "", "is_target": false}, {"number": 357, "content": "", "is_target": false}, {"number": 358, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 359, "content": "{", "is_target": false}, {"number": 360, "content": "  ThisSim sim;", "is_target": false}]}, "1925": {"lines": [{"number": 198, "content": "    for(int i=0; i<l; ++i) {", "is_target": false}, {"number": 199, "content": "      if(m.val(i,i)<0.8) m.val(i,i)+=0.001;", "is_target": false}, {"number": 200, "content": "    }", "is_target": false}, {"number": 201, "content": "  }", "is_target": false}, {"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "};", "is_target": true}, {"number": 204, "content": "", "is_target": false}, {"number": 205, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 206, "content": "{", "is_target": false}, {"number": 207, "content": "  ThisSim sim;", "is_target": false}, {"number": 208, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "1926": {"lines": [{"number": 68, "content": "public:", "is_target": false}, {"number": 69, "content": "  /// is called with current motor values and returns new motor values", "is_target": false}, {"number": 70, "content": "  typedef matrix::Matrix (*MotorCallback)(const matrix::Matrix& y);", "is_target": false}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  /// is called with current controller matrix C and bias H which can be altered", "is_target": false}, {"number": 73, "content": "  typedef void (*ControllerCallback)(matrix::const Matrix& C, matrix::const Matrix& H);", "is_target": true}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "  /**", "is_target": false}, {"number": 76, "content": "   */", "is_target": false}, {"number": 77, "content": "  Deprivation(MotorCallback motorCallback, ControllerCallback controllerCallback =0,", "is_target": false}, {"number": 78, "content": "              const InvertMotorNStepConf& conf = getDefaultConf())", "is_target": false}]}, "1927": {"lines": [{"number": 350, "content": "    return false;", "is_target": false}, {"number": 351, "content": "  }", "is_target": false}, {"number": 352, "content": "", "is_target": false}, {"number": 353, "content": "", "is_target": false}, {"number": 354, "content": "", "is_target": false}, {"number": 355, "content": "};", "is_target": true}, {"number": 356, "content": "", "is_target": false}, {"number": 357, "content": "", "is_target": false}, {"number": 358, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 359, "content": "{", "is_target": false}, {"number": 360, "content": "  ThisSim sim;", "is_target": false}]}, "1928": {"lines": [{"number": 198, "content": "    for(int i=0; i<l; ++i) {", "is_target": false}, {"number": 199, "content": "      if(m.val(i,i)<0.8) m.val(i,i)+=0.001;", "is_target": false}, {"number": 200, "content": "    }", "is_target": false}, {"number": 201, "content": "  }", "is_target": false}, {"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "};", "is_target": true}, {"number": 204, "content": "", "is_target": false}, {"number": 205, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 206, "content": "{", "is_target": false}, {"number": 207, "content": "  ThisSim sim;", "is_target": false}, {"number": 208, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "1929": {"lines": [{"number": 350, "content": "    return false;", "is_target": false}, {"number": 351, "content": "  }", "is_target": false}, {"number": 352, "content": "", "is_target": false}, {"number": 353, "content": "", "is_target": false}, {"number": 354, "content": "", "is_target": false}, {"number": 355, "content": "};", "is_target": true}, {"number": 356, "content": "", "is_target": false}, {"number": 357, "content": "", "is_target": false}, {"number": 358, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 359, "content": "{", "is_target": false}, {"number": 360, "content": "  ThisSim sim;", "is_target": false}]}, "1930": {"lines": [{"number": 198, "content": "    for(int i=0; i<l; ++i) {", "is_target": false}, {"number": 199, "content": "      if(m.val(i,i)<0.8) m.val(i,i)+=0.001;", "is_target": false}, {"number": 200, "content": "    }", "is_target": false}, {"number": 201, "content": "  }", "is_target": false}, {"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "};", "is_target": true}, {"number": 204, "content": "", "is_target": false}, {"number": 205, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 206, "content": "{", "is_target": false}, {"number": 207, "content": "  ThisSim sim;", "is_target": false}, {"number": 208, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "1931": {"lines": [{"number": 198, "content": "    for(int i=0; i<l; ++i) {", "is_target": false}, {"number": 199, "content": "      if(m.val(i,i)<0.8) m.val(i,i)+=0.001;", "is_target": false}, {"number": 200, "content": "    }", "is_target": false}, {"number": 201, "content": "  }", "is_target": false}, {"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "};", "is_target": true}, {"number": 204, "content": "", "is_target": false}, {"number": 205, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 206, "content": "{", "is_target": false}, {"number": 207, "content": "  ThisSim sim;", "is_target": false}, {"number": 208, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "1932": {"lines": [{"number": 350, "content": "    return false;", "is_target": false}, {"number": 351, "content": "  }", "is_target": false}, {"number": 352, "content": "", "is_target": false}, {"number": 353, "content": "", "is_target": false}, {"number": 354, "content": "", "is_target": false}, {"number": 355, "content": "};", "is_target": true}, {"number": 356, "content": "", "is_target": false}, {"number": 357, "content": "", "is_target": false}, {"number": 358, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 359, "content": "{", "is_target": false}, {"number": 360, "content": "  ThisSim sim;", "is_target": false}]}, "1933": {"lines": [{"number": 350, "content": "    return false;", "is_target": false}, {"number": 351, "content": "  }", "is_target": false}, {"number": 352, "content": "", "is_target": false}, {"number": 353, "content": "", "is_target": false}, {"number": 354, "content": "", "is_target": false}, {"number": 355, "content": "};", "is_target": true}, {"number": 356, "content": "", "is_target": false}, {"number": 357, "content": "", "is_target": false}, {"number": 358, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 359, "content": "{", "is_target": false}, {"number": 360, "content": "  ThisSim sim;", "is_target": false}]}, "1934": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "1935": {"lines": [{"number": 519, "content": "          break;", "is_target": false}, {"number": 520, "content": "        }", "is_target": false}, {"number": 521, "content": "    }", "is_target": false}, {"number": 522, "content": "    return false;", "is_target": false}, {"number": 523, "content": "  }", "is_target": false}, {"number": 524, "content": "};", "is_target": true}, {"number": 525, "content": "", "is_target": false}, {"number": 526, "content": "", "is_target": false}, {"number": 527, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 528, "content": "{", "is_target": false}, {"number": 529, "content": "  ThisSim sim;", "is_target": false}]}, "1936": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "1937": {"lines": [{"number": 519, "content": "          break;", "is_target": false}, {"number": 520, "content": "        }", "is_target": false}, {"number": 521, "content": "    }", "is_target": false}, {"number": 522, "content": "    return false;", "is_target": false}, {"number": 523, "content": "  }", "is_target": false}, {"number": 524, "content": "};", "is_target": true}, {"number": 525, "content": "", "is_target": false}, {"number": 526, "content": "", "is_target": false}, {"number": 527, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 528, "content": "{", "is_target": false}, {"number": 529, "content": "  ThisSim sim;", "is_target": false}]}, "1938": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "1939": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "1940": {"lines": [{"number": 519, "content": "          break;", "is_target": false}, {"number": 520, "content": "        }", "is_target": false}, {"number": 521, "content": "    }", "is_target": false}, {"number": 522, "content": "    return false;", "is_target": false}, {"number": 523, "content": "  }", "is_target": false}, {"number": 524, "content": "};", "is_target": true}, {"number": 525, "content": "", "is_target": false}, {"number": 526, "content": "", "is_target": false}, {"number": 527, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 528, "content": "{", "is_target": false}, {"number": 529, "content": "  ThisSim sim;", "is_target": false}]}, "1941": {"lines": [{"number": 426, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 427, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 428, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 429, "content": "", "is_target": false}, {"number": 430, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 431, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 432, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 433, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 434, "content": "", "is_target": false}, {"number": 435, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 436, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "1942": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "1943": {"lines": [{"number": 519, "content": "          break;", "is_target": false}, {"number": 520, "content": "        }", "is_target": false}, {"number": 521, "content": "    }", "is_target": false}, {"number": 522, "content": "    return false;", "is_target": false}, {"number": 523, "content": "  }", "is_target": false}, {"number": 524, "content": "};", "is_target": true}, {"number": 525, "content": "", "is_target": false}, {"number": 526, "content": "", "is_target": false}, {"number": 527, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 528, "content": "{", "is_target": false}, {"number": 529, "content": "  ThisSim sim;", "is_target": false}]}, "1944": {"lines": [{"number": 426, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 427, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 428, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 429, "content": "", "is_target": false}, {"number": 430, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 431, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 432, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 433, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 434, "content": "", "is_target": false}, {"number": 435, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 436, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "1945": {"lines": [{"number": 519, "content": "          break;", "is_target": false}, {"number": 520, "content": "        }", "is_target": false}, {"number": 521, "content": "    }", "is_target": false}, {"number": 522, "content": "    return false;", "is_target": false}, {"number": 523, "content": "  }", "is_target": false}, {"number": 524, "content": "};", "is_target": true}, {"number": 525, "content": "", "is_target": false}, {"number": 526, "content": "", "is_target": false}, {"number": 527, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 528, "content": "{", "is_target": false}, {"number": 529, "content": "  ThisSim sim;", "is_target": false}]}, "1946": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "1947": {"lines": [{"number": 519, "content": "          break;", "is_target": false}, {"number": 520, "content": "        }", "is_target": false}, {"number": 521, "content": "    }", "is_target": false}, {"number": 522, "content": "    return false;", "is_target": false}, {"number": 523, "content": "  }", "is_target": false}, {"number": 524, "content": "};", "is_target": true}, {"number": 525, "content": "", "is_target": false}, {"number": 526, "content": "", "is_target": false}, {"number": 527, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 528, "content": "{", "is_target": false}, {"number": 529, "content": "  ThisSim sim;", "is_target": false}]}, "1948": {"lines": [{"number": 426, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 427, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 428, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 429, "content": "", "is_target": false}, {"number": 430, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 431, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 432, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 433, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 434, "content": "", "is_target": false}, {"number": 435, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 436, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "1949": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "1950": {"lines": [{"number": 519, "content": "          break;", "is_target": false}, {"number": 520, "content": "        }", "is_target": false}, {"number": 521, "content": "    }", "is_target": false}, {"number": 522, "content": "    return false;", "is_target": false}, {"number": 523, "content": "  }", "is_target": false}, {"number": 524, "content": "};", "is_target": true}, {"number": 525, "content": "", "is_target": false}, {"number": 526, "content": "", "is_target": false}, {"number": 527, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 528, "content": "{", "is_target": false}, {"number": 529, "content": "  ThisSim sim;", "is_target": false}]}, "1951": {"lines": [{"number": 426, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 427, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 428, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 429, "content": "", "is_target": false}, {"number": 430, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 431, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 432, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 433, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 434, "content": "", "is_target": false}, {"number": 435, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 436, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "1952": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "1953": {"lines": [{"number": 519, "content": "          break;", "is_target": false}, {"number": 520, "content": "        }", "is_target": false}, {"number": 521, "content": "    }", "is_target": false}, {"number": 522, "content": "    return false;", "is_target": false}, {"number": 523, "content": "  }", "is_target": false}, {"number": 524, "content": "};", "is_target": true}, {"number": 525, "content": "", "is_target": false}, {"number": 526, "content": "", "is_target": false}, {"number": 527, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 528, "content": "{", "is_target": false}, {"number": 529, "content": "  ThisSim sim;", "is_target": false}]}, "1954": {"lines": [{"number": 426, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 427, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 428, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 429, "content": "", "is_target": false}, {"number": 430, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 431, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 432, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 433, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 434, "content": "", "is_target": false}, {"number": 435, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 436, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "1955": {"lines": [{"number": 519, "content": "          break;", "is_target": false}, {"number": 520, "content": "        }", "is_target": false}, {"number": 521, "content": "    }", "is_target": false}, {"number": 522, "content": "    return false;", "is_target": false}, {"number": 523, "content": "  }", "is_target": false}, {"number": 524, "content": "};", "is_target": true}, {"number": 525, "content": "", "is_target": false}, {"number": 526, "content": "", "is_target": false}, {"number": 527, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 528, "content": "{", "is_target": false}, {"number": 529, "content": "  ThisSim sim;", "is_target": false}]}, "1956": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "1957": {"lines": [{"number": 426, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 427, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 428, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 429, "content": "", "is_target": false}, {"number": 430, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 431, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 432, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 433, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 434, "content": "", "is_target": false}, {"number": 435, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 436, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "1958": {"lines": [{"number": 426, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 427, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 428, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 429, "content": "", "is_target": false}, {"number": 430, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 431, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 432, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 433, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 434, "content": "", "is_target": false}, {"number": 435, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 436, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "1959": {"lines": [{"number": 426, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 427, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 428, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 429, "content": "", "is_target": false}, {"number": 430, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 431, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 432, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 433, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 434, "content": "", "is_target": false}, {"number": 435, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 436, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "1960": {"lines": [{"number": 190, "content": "   * updates the osg notes", "is_target": false}, {"number": 191, "content": "   */", "is_target": false}, {"number": 192, "content": "  void ZweiBeiner::update(){", "is_target": false}, {"number": 193, "content": "    assert(created); // robot must exist", "is_target": false}, {"number": 194, "content": "", "is_target": false}, {"number": 195, "content": "    for (vector<Primitive*>::iterator i = objects.begin(); i!= objects.end(); ++i) override {", "is_target": true}, {"number": 196, "content": "      if(*i) (*i)->update();", "is_target": false}, {"number": 197, "content": "    }", "is_target": false}, {"number": 198, "content": "    for (vector<Joint*>::iterator i = joints.begin(); i!= joints.end(); ++i) override {", "is_target": false}, {"number": 199, "content": "      if(*i) (*i)->update();", "is_target": false}, {"number": 200, "content": "    }", "is_target": false}]}, "1961": {"lines": [{"number": 426, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 427, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 428, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 429, "content": "", "is_target": false}, {"number": 430, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 431, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 432, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 433, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 434, "content": "", "is_target": false}, {"number": 435, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 436, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "1962": {"lines": [{"number": 93, "content": "                          motor* motors, int motornumber) {", "is_target": false}, {"number": 94, "content": "  stepNoLearning(sensors, sensornumber, motors, motornumber);", "is_target": false}, {"number": 95, "content": "};", "is_target": false}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "doublesign(double v)", "is_target": true}, {"number": 99, "content": "{", "is_target": false}, {"number": 100, "content": "  if(v > 0.0)", "is_target": false}, {"number": 101, "content": "    return 1.0;", "is_target": false}, {"number": 102, "content": "  else if(v < 0.0)", "is_target": false}, {"number": 103, "content": "    return -1.0;", "is_target": false}]}, "1963": {"lines": [{"number": 434, "content": "", "is_target": false}, {"number": 435, "content": "  // add own key handling stuff here, just insert some case values", "is_target": false}, {"number": 436, "content": "  virtual bool command(const OdeHandle&, const OsgHandle&, GlobalData& globalData, int key, bool down) override {", "is_target": false}, {"number": 437, "content": "    if (down)", "is_target": false}, {"number": 438, "content": "    { // only when key is pressed, not when released", "is_target": false}, {"number": 439, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 440, "content": "      {", "is_target": false}, {"number": 441, "content": "      case 'e':", "is_target": false}, {"number": 442, "content": "        /*   printf(__PLACEHOLDER_46__,this->sim_step);", "is_target": false}, {"number": 443, "content": "        printf(__PLACEHOLDER_47__,(static_cast<float>(this)->sim_step)/100/60);", "is_target": false}, {"number": 444, "content": "        printf(__PLACEHOLDER_48__,(mic->getMI(0)+mic->getMI(1))/2);", "is_target": false}]}, "1964": {"lines": [{"number": 293, "content": "  }", "is_target": false}, {"number": 294, "content": "", "is_target": false}, {"number": 295, "content": "  // add own key handling stuff here, just insert some case values", "is_target": false}, {"number": 296, "content": "  virtual bool command(const OdeHandle&, const OsgHandle&, GlobalData& globalData, int key, bool down) override {", "is_target": false}, {"number": 297, "content": "    if (down) { // only when key is pressed, not when released", "is_target": false}, {"number": 298, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 299, "content": "        {", "is_target": false}, {"number": 300, "content": "        case 'y' : dBodyAddForce ( robot->getMainPrimitive()->getBody() , 30 ,0 , 0 ); break;", "is_target": false}, {"number": 301, "content": "        case 'Y' : dBodyAddForce ( robot->getMainPrimitive()->getBody() , -30 , 0 , 0 ); break;", "is_target": false}, {"number": 302, "content": "        case 'x' : dBodyAddTorque ( robot->getMainPrimitive()->getBody() , 0 , 10 , 0 ); break;", "is_target": false}, {"number": 303, "content": "        case 'X' : dBodyAddTorque ( robot->getMainPrimitive()->getBody() , 0 , -10 , 0 ); break;", "is_target": false}]}, "1965": {"lines": [{"number": 122, "content": "//  virtual void setCameraHandling()  const;", "is_target": false}, {"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "", "is_target": false}, {"number": 126, "content": "protected:", "is_target": false}, {"number": 127, "content": "  string name;", "is_target": true}, {"number": 128, "content": "  int t = 0;", "is_target": false}, {"number": 129, "content": "  int number_sensors = 0;", "is_target": false}, {"number": 130, "content": "  int number_motors = 0;", "is_target": false}, {"number": 131, "content": "  int cameraHandlingDefined = 0;", "is_target": false}, {"number": 132, "content": "", "is_target": false}]}, "1966": {"lines": [{"number": 74, "content": "  */", "is_target": false}, {"number": 75, "content": "  virtual void init(int sensornumber, int motornumber);", "is_target": false}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "  /// returns the name of the object (with version number)", "is_target": false}, {"number": 78, "content": "  //  virtual constparamkey getName() const {return name; }", "is_target": false}, {"number": 79, "content": "  virtual paramkey getName() const {return name; }", "is_target": true}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  /** @return Number of sensors the controller was initialised with or 0 if not initialised*/", "is_target": false}, {"number": 82, "content": "  virtual int getSensorNumber() const {return number_sensors;}", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "", "is_target": false}]}, "1967": {"lines": [{"number": 77, "content": "  /// returns the name of the object (with version number)", "is_target": false}, {"number": 78, "content": "  //  virtual constparamkey getName() const {return name; }", "is_target": false}, {"number": 79, "content": "  virtual paramkey getName() const {return name; }", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  /** @return Number of sensors the controller was initialised with or 0 if not initialised*/", "is_target": false}, {"number": 82, "content": "  virtual int getSensorNumber() const {return number_sensors;}", "is_target": true}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  /** @return Number of motors the controller was initialised with or 0 if not initialised */", "is_target": false}, {"number": 86, "content": "  virtual int getMotorNumber() const {return number_motors;}", "is_target": false}, {"number": 87, "content": "", "is_target": false}]}, "1968": {"lines": [{"number": 81, "content": "  /** @return Number of sensors the controller was initialised with or 0 if not initialised*/", "is_target": false}, {"number": 82, "content": "  virtual int getSensorNumber() const {return number_sensors;}", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  /** @return Number of motors the controller was initialised with or 0 if not initialised */", "is_target": false}, {"number": 86, "content": "  virtual int getMotorNumber() const {return number_motors;}", "is_target": true}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  /** performs one step (includes learning).", "is_target": false}, {"number": 89, "content": "      Calculates motor commands from sensor inputs.", "is_target": false}, {"number": 90, "content": "      @param sensor sensors inputs scaled to [-1,1]", "is_target": false}, {"number": 91, "content": "      @param sensornumber length of the sensor array", "is_target": false}]}, "1969": {"lines": [{"number": 90, "content": "      @param sensor sensors inputs scaled to [-1,1]", "is_target": false}, {"number": 91, "content": "      @param sensornumber length of the sensor array", "is_target": false}, {"number": 92, "content": "      @param motor motors outputs. MUST have enough space for motor values!", "is_target": false}, {"number": 93, "content": "      @param motornumber length of the provided motor array", "is_target": false}, {"number": 94, "content": "  */", "is_target": false}, {"number": 95, "content": "  virtual void step(const sensor* sensors, int sensornumber,", "is_target": true}, {"number": 96, "content": "                    motor* motors, int motornumber);", "is_target": false}, {"number": 97, "content": "  /** performs one step without learning.", "is_target": false}, {"number": 98, "content": "      @see step", "is_target": false}, {"number": 99, "content": "  */", "is_target": false}, {"number": 100, "content": "  virtual void stepNoLearning(const sensor* , int number_sensors,", "is_target": false}]}, "1970": {"lines": [{"number": 95, "content": "  virtual void step(const sensor* sensors, int sensornumber,", "is_target": false}, {"number": 96, "content": "                    motor* motors, int motornumber);", "is_target": false}, {"number": 97, "content": "  /** performs one step without learning.", "is_target": false}, {"number": 98, "content": "      @see step", "is_target": false}, {"number": 99, "content": "  */", "is_target": false}, {"number": 100, "content": "  virtual void stepNoLearning(const sensor* , int number_sensors,", "is_target": true}, {"number": 101, "content": "                              motor* , int number_motors);", "is_target": false}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "  /** The list of the names of all internal parameters given by getInternalParams().", "is_target": false}, {"number": 104, "content": "      @param keylist (do NOT free it! It is a pointer to an internal structure)", "is_target": false}, {"number": 105, "content": "      @return length of the lists", "is_target": false}]}, "1971": {"lines": [{"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "  /** The list of the names of all internal parameters given by getInternalParams().", "is_target": false}, {"number": 110, "content": "   */", "is_target": false}, {"number": 111, "content": "  virtual list<iparamval> getInternalParams() const {return list<iparamval>();}", "is_target": false}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "  virtual paramval getParam(const paramkey& key, bool traverseChildren=true) const;", "is_target": true}, {"number": 114, "content": "  virtual bool setParam(const paramkey& key, paramval val, bool traverseChildren=true);", "is_target": false}, {"number": 115, "content": "  virtual paramlist getParamList() const ;", "is_target": false}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "  /** Initialises the registers the given callback functions.", "is_target": false}, {"number": 118, "content": "      @param handling() is called every step that the camera gets new position", "is_target": false}]}, "1972": {"lines": [{"number": 109, "content": "  /** The list of the names of all internal parameters given by getInternalParams().", "is_target": false}, {"number": 110, "content": "   */", "is_target": false}, {"number": 111, "content": "  virtual list<iparamval> getInternalParams() const {return list<iparamval>();}", "is_target": false}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "  virtual paramval getParam(const paramkey& key, bool traverseChildren=true) const;", "is_target": false}, {"number": 114, "content": "  virtual bool setParam(const paramkey& key, paramval val, bool traverseChildren=true);", "is_target": true}, {"number": 115, "content": "  virtual paramlist getParamList() const ;", "is_target": false}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "  /** Initialises the registers the given callback functions.", "is_target": false}, {"number": 118, "content": "      @param handling() is called every step that the camera gets new position", "is_target": false}, {"number": 119, "content": "      and view.", "is_target": false}]}, "1973": {"lines": [{"number": 110, "content": "   */", "is_target": false}, {"number": 111, "content": "  virtual list<iparamval> getInternalParams() const {return list<iparamval>();}", "is_target": false}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "  virtual paramval getParam(const paramkey& key, bool traverseChildren=true) const;", "is_target": false}, {"number": 114, "content": "  virtual bool setParam(const paramkey& key, paramval val, bool traverseChildren=true);", "is_target": false}, {"number": 115, "content": "  virtual paramlist getParamList() const ;", "is_target": true}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "  /** Initialises the registers the given callback functions.", "is_target": false}, {"number": 118, "content": "      @param handling() is called every step that the camera gets new position", "is_target": false}, {"number": 119, "content": "      and view.", "is_target": false}, {"number": 120, "content": "  */", "is_target": false}]}, "1974": {"lines": [{"number": 132, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 133, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 134, "content": "", "is_target": false}, {"number": 135, "content": "  private:", "is_target": false}, {"number": 136, "content": "    bool created = false;", "is_target": false}, {"number": 137, "content": "    std::vector<Primitive*> objects;  // for compatibility with getAllPrimitives", "is_target": true}, {"number": 138, "content": "    ", "is_target": false}, {"number": 139, "content": "    static void mycallback(void *data, dGeomID o1, dGeomID o2);", "is_target": false}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 142, "content": "    virtual void destroy();", "is_target": false}]}, "1975": {"lines": [{"number": 181, "content": "                      double factor = 1, double heightfactor=0.02, bool createGround=true);", "is_target": false}, {"number": 182, "content": "", "is_target": false}, {"number": 183, "content": "    void createPolyline(const PolyLine&);", "is_target": false}, {"number": 184, "content": "", "is_target": false}, {"number": 185, "content": "  protected:", "is_target": false}, {"number": 186, "content": "    virtual void create();", "is_target": true}, {"number": 187, "content": "", "is_target": false}, {"number": 188, "content": "  };", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "}", "is_target": false}, {"number": 191, "content": "", "is_target": false}]}, "1976": {"lines": [{"number": 79, "content": "  public:", "is_target": false}, {"number": 80, "content": "    SliderWheelie(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 81, "content": "                  const SliderWheelieConf& conf, const std::string& name,", "is_target": false}, {"number": 82, "content": "                  const std::string& revision = \"\");", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "    virtual ~SliderWheelie();", "is_target": true}, {"number": 85, "content": "", "is_target": false}, {"number": 86, "content": "    static SliderWheelieConf getDefaultConf() {", "is_target": false}, {"number": 87, "content": "      SliderWheelieConf conf;", "is_target": false}, {"number": 88, "content": "      conf.segmNumber = 8;       //  number of snake elements", "is_target": false}, {"number": 89, "content": "      conf.segmLength = 0.4;     // length of one snake element", "is_target": false}]}, "1977": {"lines": [{"number": 102, "content": "      conf.showCenter      = false;", "is_target": false}, {"number": 103, "content": "      conf.texture         = \"\";", "is_target": false}, {"number": 104, "content": "      return conf;", "is_target": false}, {"number": 105, "content": "    }", "is_target": false}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "    virtual void update();", "is_target": false}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "    virtual void doInternalStuff(const GlobalData& global);", "is_target": false}, {"number": 112, "content": "", "is_target": false}]}, "1978": {"lines": [{"number": 104, "content": "      return conf;", "is_target": false}, {"number": 105, "content": "    }", "is_target": false}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "    virtual void update();", "is_target": true}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "    virtual void doInternalStuff(const GlobalData& global);", "is_target": false}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 114, "content": "", "is_target": false}]}, "1979": {"lines": [{"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "    virtual void update();", "is_target": false}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "    virtual void doInternalStuff(const GlobalData& global);", "is_target": true}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "    virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 116, "content": "", "is_target": false}]}, "1980": {"lines": [{"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "    virtual void update();", "is_target": false}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "    virtual void doInternalStuff(const GlobalData& global);", "is_target": false}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": true}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "    virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": false}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "    virtual int getSensorNumberIntern() const override { assert(created);", "is_target": false}, {"number": 118, "content": "      return hingeServos.size()+angularMotors.size()+sliderServos.size(); }", "is_target": false}]}, "1981": {"lines": [{"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "    virtual void doInternalStuff(const GlobalData& global);", "is_target": false}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "    virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": true}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "    virtual int getSensorNumberIntern() const override { assert(created);", "is_target": false}, {"number": 118, "content": "      return hingeServos.size()+angularMotors.size()+sliderServos.size(); }", "is_target": false}, {"number": 119, "content": "", "is_target": false}, {"number": 120, "content": "    virtual int getMotorNumberIntern() const override { assert(created);", "is_target": false}]}, "1982": {"lines": [{"number": 128, "content": "    }", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "    virtual std::vector<Primitive*> getAllPrimitives() const override { return objects;}", "is_target": false}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 133, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 134, "content": "", "is_target": false}, {"number": 135, "content": "  private:", "is_target": false}, {"number": 136, "content": "    bool created = false;", "is_target": false}, {"number": 137, "content": "    std::vector<Primitive*> objects;  // for compatibility with getAllPrimitives", "is_target": false}, {"number": 138, "content": "    ", "is_target": false}]}, "1983": {"lines": [{"number": 158, "content": "    //    One2OneWiring* wiring = new One2OneWiring(new ColorUniformNoise(0.1));", "is_target": false}, {"number": 159, "content": "    AbstractWiring* wiring = new FeedbackWiring(new ColorUniformNoise(0.1),", "is_target": false}, {"number": 160, "content": "                                                FeedbackWiring::Motor, 0.75);", "is_target": false}, {"number": 161, "content": "    //plotoptions.push_back(PlotOption(GuiLogger,Robot,5));", "is_target": false}, {"number": 162, "content": "    OdeAgent* agent = new OdeAgent(global);", "is_target": false}, {"number": 163, "content": "    agent->init(controller, vehicle, wiring);", "is_target": true}, {"number": 164, "content": "    if(agent) static_cast<TrackRobot*>(agent)->setTrackOptions(TrackRobot(true,false,false, false,", "is_target": false}, {"number": 165, "content": "                                                 change < 50 ? std::itos(change).c_str() : \"uni\", 50));", "is_target": false}, {"number": 166, "content": "    global.agents.push_back(agent);", "is_target": false}, {"number": 167, "content": "    global.configs.push_back(controller);", "is_target": false}, {"number": 168, "content": "", "is_target": false}]}, "1984": {"lines": [{"number": 42, "content": "    //  register the inspectable and configureable controller", "is_target": false}, {"number": 43, "content": "    addConfigurable(controller);", "is_target": false}, {"number": 44, "content": "    addInspectable(controller);", "is_target": false}, {"number": 45, "content": "  }", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "  virtual ~AbstractControllerAdapter() {}", "is_target": true}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "  /****************************************************************************/", "is_target": false}, {"number": 50, "content": "  /*        AbstractControllerAdapter must implement the following classes:                */", "is_target": false}, {"number": 51, "content": "  /*        AbstractController, Configurable, Inspectable, Storeable                    */", "is_target": false}, {"number": 52, "content": "  /****************************************************************************/", "is_target": false}]}, "1985": {"lines": [{"number": 59, "content": "    Teachable* t2 = dynamic_cast<Teachable*>(controller);", "is_target": false}, {"number": 60, "content": "    (void)(t2); // this is to avoid a warning in -DNDEBUG mode", "is_target": false}, {"number": 61, "content": "    assert(static_cast<void*>(t2) == static_cast<void*>(teachable));", "is_target": false}, {"number": 62, "content": "  }", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "  virtual void step(const sensor* sensors,", "is_target": true}, {"number": 65, "content": "                    int sensornumber,", "is_target": false}, {"number": 66, "content": "                    motor* motors,", "is_target": false}, {"number": 67, "content": "                    int motornumber);", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "  virtual void setCMC(const CMC& cmc);", "is_target": false}]}, "1986": {"lines": [{"number": 183, "content": "    //    One2OneWiring* wiring = new One2OneWiring(new ColorUniformNoise(0.1));", "is_target": false}, {"number": 184, "content": "    AbstractWiring* wiring = new FeedbackWiring(new ColorUniformNoise(0.1),", "is_target": false}, {"number": 185, "content": "                                                FeedbackWiring::Motor, 0.75);", "is_target": false}, {"number": 186, "content": "    //global.plotoptions.push_back(PlotOption(GuiLogger,Robot,5));", "is_target": false}, {"number": 187, "content": "    OdeAgent* agent = new OdeAgent(global);", "is_target": false}, {"number": 188, "content": "    agent->addCallbackable(&stats);", "is_target": true}, {"number": 189, "content": "    agent->init(controller, vehicle, wiring);", "is_target": false}, {"number": 190, "content": "    if(agent) static_cast<TrackRobot*>(agent)->setTrackOptions(TrackRobot(true,false,false, false,", "is_target": false}, {"number": 191, "content": "                                                 change < 50 ? std::itos(change).c_str() : \"uni\", 50));", "is_target": false}, {"number": 192, "content": "    global.agents.push_back(agent);", "is_target": false}, {"number": 193, "content": "    global.configs.push_back(controller);", "is_target": false}]}, "1987": {"lines": [{"number": 184, "content": "    AbstractWiring* wiring = new FeedbackWiring(new ColorUniformNoise(0.1),", "is_target": false}, {"number": 185, "content": "                                                FeedbackWiring::Motor, 0.75);", "is_target": false}, {"number": 186, "content": "    //global.plotoptions.push_back(PlotOption(GuiLogger,Robot,5));", "is_target": false}, {"number": 187, "content": "    OdeAgent* agent = new OdeAgent(global);", "is_target": false}, {"number": 188, "content": "    agent->addCallbackable(&stats);", "is_target": false}, {"number": 189, "content": "    agent->init(controller, vehicle, wiring);", "is_target": true}, {"number": 190, "content": "    if(agent) static_cast<TrackRobot*>(agent)->setTrackOptions(TrackRobot(true,false,false, false,", "is_target": false}, {"number": 191, "content": "                                                 change < 50 ? std::itos(change).c_str() : \"uni\", 50));", "is_target": false}, {"number": 192, "content": "    global.agents.push_back(agent);", "is_target": false}, {"number": 193, "content": "    global.configs.push_back(controller);", "is_target": false}, {"number": 194, "content": "", "is_target": false}]}, "1988": {"lines": [{"number": 114, "content": "int stairs=0;", "is_target": false}, {"number": 115, "content": "", "is_target": false}, {"number": 116, "content": "// wiring to use motor values as sensors as well", "is_target": false}, {"number": 117, "content": "class MotorAsSensors{", "is_target": false}, {"number": 118, "content": "public:", "is_target": false}, {"number": 119, "content": "  MotorAsSensors(NoiseGenerator* noise, int plotMode=Controller)", "is_target": true}, {"number": 120, "content": "    : One2OneWiring(noise,plotMode, 0) {", "is_target": false}, {"number": 121, "content": "  }", "is_target": false}, {"number": 122, "content": "  virtual ~MotorAsSensors() {}", "is_target": false}, {"number": 123, "content": "protected:", "is_target": false}, {"number": 124, "content": "  virtual bool initIntern() override {", "is_target": false}]}, "1989": {"lines": [{"number": 258, "content": "    //AbstractWiring* wiring = new MotorAsSensors(new ColorUniformNoise(0.1));", "is_target": false}, {"number": 259, "content": "    AbstractWiring* wiring = new FeedbackWiring(new ColorUniformNoise(0.1),", "is_target": false}, {"number": 260, "content": "                                                 FeedbackWiring::Motor, 0.75);", "is_target": false}, {"number": 261, "content": "    //global.plotoptions.push_back(PlotOption(GuiLogger,Robot,5));", "is_target": false}, {"number": 262, "content": "    OdeAgent* agent = new OdeAgent(global);", "is_target": false}, {"number": 263, "content": "    agent->init(controller, vehicle, wiring);", "is_target": true}, {"number": 264, "content": "    if(agent) static_cast<TrackRobot*>(agent)->setTrackOptions(TrackRobot(true,false,false, false,", "is_target": false}, {"number": 265, "content": "                                                 change != 0 ? std::itos(change).c_str() : \"uni\", 50));", "is_target": false}, {"number": 266, "content": "    global.agents.push_back(agent);", "is_target": false}, {"number": 267, "content": "    global.configs.push_back(controller);", "is_target": false}, {"number": 268, "content": "", "is_target": false}]}, "1990": {"lines": [{"number": 83, "content": "                                               int number_steps_for_averaging_) {", "is_target": false}, {"number": 84, "content": "    // number_steps_for_averaging_ must not be larger than buffersize", "is_target": false}, {"number": 85, "content": "    assert(static_cast<int>(number_steps_for_averaging_) <= buffersize);", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "    matrix::Matrix result(buffer[t % buffersize]);", "is_target": false}, {"number": 88, "content": "    for (int k = 1; k < number_steps_for_averaging_; ++k) {", "is_target": true}, {"number": 89, "content": "      result += buffer[(t - k + buffersize) % buffersize];", "is_target": false}, {"number": 90, "content": "    }", "is_target": false}, {"number": 91, "content": "    result *= 1 / (static_cast<double>(number_steps_for_averaging_)); // scalar multiplication", "is_target": false}, {"number": 92, "content": "    return result;", "is_target": false}, {"number": 93, "content": "  };", "is_target": false}]}, "1991": {"lines": [{"number": 272, "content": "  matrix::Matrix calculateSmoothValuesVec(const std::vector<matrix::Matrix>& buffer, int number_steps_for_averaging_) {", "is_target": false}, {"number": 273, "content": "    // number_steps_for_averaging_ must not be larger than buffersize", "is_target": false}, {"number": 274, "content": "    assert(static_cast<unsigned>(number_steps_for_averaging_) <= buffersize);", "is_target": false}, {"number": 275, "content": "    ", "is_target": false}, {"number": 276, "content": "    matrix::Matrix result(buffer[t % buffersize]);", "is_target": false}, {"number": 277, "content": "    for (int k = 1; k < number_steps_for_averaging_; ++k) {", "is_target": true}, {"number": 278, "content": "      result += buffer[(t - k + buffersize) % buffersize];", "is_target": false}, {"number": 279, "content": "    }", "is_target": false}, {"number": 280, "content": "    result *= 1 / (static_cast<double>(number_steps_for_averaging_)); // scalar multiplication", "is_target": false}, {"number": 281, "content": "    return result;", "is_target": false}, {"number": 282, "content": "  }", "is_target": false}]}, "1992": {"lines": [{"number": 214, "content": "  matrix::Matrix calculateSmoothValuesVec(const std::vector<matrix::Matrix>& buffer, int number_steps_for_averaging_) {", "is_target": false}, {"number": 215, "content": "    // number_steps_for_averaging_ must not be larger than buffersize", "is_target": false}, {"number": 216, "content": "    assert(static_cast<unsigned>(number_steps_for_averaging_) <= buffersize);", "is_target": false}, {"number": 217, "content": "    ", "is_target": false}, {"number": 218, "content": "    matrix::Matrix result(buffer[t % buffersize]);", "is_target": false}, {"number": 219, "content": "    for (int k = 1; k < number_steps_for_averaging_; ++k) {", "is_target": true}, {"number": 220, "content": "      result += buffer[(t - k + buffersize) % buffersize];", "is_target": false}, {"number": 221, "content": "    }", "is_target": false}, {"number": 222, "content": "    result *= 1 / (static_cast<double>(number_steps_for_averaging_)); // scalar multiplication", "is_target": false}, {"number": 223, "content": "    return result;", "is_target": false}, {"number": 224, "content": "  }", "is_target": false}]}, "1994": {"lines": [{"number": 83, "content": "                                               int number_steps_for_averaging_) {", "is_target": false}, {"number": 84, "content": "    // number_steps_for_averaging_ must not be larger than buffersize", "is_target": false}, {"number": 85, "content": "    assert(static_cast<int>(number_steps_for_averaging_) <= buffersize);", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "    matrix::Matrix result(buffer[t % buffersize]);", "is_target": false}, {"number": 88, "content": "    for (int k = 1; k < number_steps_for_averaging_; ++k) {", "is_target": true}, {"number": 89, "content": "      result += buffer[(t - k + buffersize) % buffersize];", "is_target": false}, {"number": 90, "content": "    }", "is_target": false}, {"number": 91, "content": "    result *= 1 / (static_cast<double>(number_steps_for_averaging_)); // scalar multiplication", "is_target": false}, {"number": 92, "content": "    return result;", "is_target": false}, {"number": 93, "content": "  };", "is_target": false}]}, "1995": {"lines": [{"number": 272, "content": "  matrix::Matrix calculateSmoothValuesVec(const std::vector<matrix::Matrix>& buffer, int number_steps_for_averaging_) {", "is_target": false}, {"number": 273, "content": "    // number_steps_for_averaging_ must not be larger than buffersize", "is_target": false}, {"number": 274, "content": "    assert(static_cast<unsigned>(number_steps_for_averaging_) <= buffersize);", "is_target": false}, {"number": 275, "content": "    ", "is_target": false}, {"number": 276, "content": "    matrix::Matrix result(buffer[t % buffersize]);", "is_target": false}, {"number": 277, "content": "    for (int k = 1; k < number_steps_for_averaging_; ++k) {", "is_target": true}, {"number": 278, "content": "      result += buffer[(t - k + buffersize) % buffersize];", "is_target": false}, {"number": 279, "content": "    }", "is_target": false}, {"number": 280, "content": "    result *= 1 / (static_cast<double>(number_steps_for_averaging_)); // scalar multiplication", "is_target": false}, {"number": 281, "content": "    return result;", "is_target": false}, {"number": 282, "content": "  }", "is_target": false}]}, "1996": {"lines": [{"number": 214, "content": "  matrix::Matrix calculateSmoothValuesVec(const std::vector<matrix::Matrix>& buffer, int number_steps_for_averaging_) {", "is_target": false}, {"number": 215, "content": "    // number_steps_for_averaging_ must not be larger than buffersize", "is_target": false}, {"number": 216, "content": "    assert(static_cast<unsigned>(number_steps_for_averaging_) <= buffersize);", "is_target": false}, {"number": 217, "content": "    ", "is_target": false}, {"number": 218, "content": "    matrix::Matrix result(buffer[t % buffersize]);", "is_target": false}, {"number": 219, "content": "    for (int k = 1; k < number_steps_for_averaging_; ++k) {", "is_target": true}, {"number": 220, "content": "      result += buffer[(t - k + buffersize) % buffersize];", "is_target": false}, {"number": 221, "content": "    }", "is_target": false}, {"number": 222, "content": "    result *= 1 / (static_cast<double>(number_steps_for_averaging_)); // scalar multiplication", "is_target": false}, {"number": 223, "content": "    return result;", "is_target": false}, {"number": 224, "content": "  }", "is_target": false}]}, "1997": {"lines": [{"number": 55, "content": "  int t = 1;", "is_target": false}, {"number": 56, "content": "  int c = 1;", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  // constructor:", "is_target": false}, {"number": 59, "content": "  // - give handle for ODE and OSG stuff", "is_target": false}, {"number": 60, "content": "  Hexapod::Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 61, "content": "                   const HexapodConf& c, const std::string& name)", "is_target": false}, {"number": 62, "content": "    : OdeRobot(odeHandle, osgHandle, name, \"HexaPod 0.9\"), conf(c)", "is_target": false}, {"number": 63, "content": "  {", "is_target": false}, {"number": 64, "content": "    // robot is not created till now", "is_target": false}, {"number": 65, "content": "    pos1d = new double[3];", "is_target": false}]}, "1998": {"lines": [{"number": 55, "content": "  int t = 1;", "is_target": false}, {"number": 56, "content": "  int c = 1;", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  // constructor:", "is_target": false}, {"number": 59, "content": "  // - give handle for ODE and OSG stuff", "is_target": false}, {"number": 60, "content": "  Hexapod::Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 61, "content": "                   const HexapodConf& c, const std::string& name)", "is_target": false}, {"number": 62, "content": "    : OdeRobot(odeHandle, osgHandle, name, \"HexaPod 0.9\"), conf(c)", "is_target": false}, {"number": 63, "content": "  {", "is_target": false}, {"number": 64, "content": "    // robot is not created till now", "is_target": false}, {"number": 65, "content": "    pos1d = new double[3];", "is_target": false}]}, "1999": {"lines": [{"number": 55, "content": "  int t = 1;", "is_target": false}, {"number": 56, "content": "  int c = 1;", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  // constructor:", "is_target": false}, {"number": 59, "content": "  // - give handle for ODE and OSG stuff", "is_target": false}, {"number": 60, "content": "  Hexapod::Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 61, "content": "                   const HexapodConf& c, const std::string& name)", "is_target": false}, {"number": 62, "content": "    : OdeRobot(odeHandle, osgHandle, name, \"HexaPod 0.9\"), conf(c)", "is_target": false}, {"number": 63, "content": "  {", "is_target": false}, {"number": 64, "content": "    // robot is not created till now", "is_target": false}, {"number": 65, "content": "    pos1d = new double[3];", "is_target": false}]}, "2000": {"lines": [{"number": 55, "content": "  int t = 1;", "is_target": false}, {"number": 56, "content": "  int c = 1;", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  // constructor:", "is_target": false}, {"number": 59, "content": "  // - give handle for ODE and OSG stuff", "is_target": false}, {"number": 60, "content": "  Hexapod::Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 61, "content": "                   const HexapodConf& c, const std::string& name)", "is_target": false}, {"number": 62, "content": "    : OdeRobot(odeHandle, osgHandle, name, \"HexaPod 0.9\"), conf(c)", "is_target": false}, {"number": 63, "content": "  {", "is_target": false}, {"number": 64, "content": "    // robot is not created till now", "is_target": false}, {"number": 65, "content": "    pos1d = new double[3];", "is_target": false}]}, "2001": {"lines": [{"number": 55, "content": "  int t = 1;", "is_target": false}, {"number": 56, "content": "  int c = 1;", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  // constructor:", "is_target": false}, {"number": 59, "content": "  // - give handle for ODE and OSG stuff", "is_target": false}, {"number": 60, "content": "  Hexapod::Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 61, "content": "                   const HexapodConf& c, const std::string& name)", "is_target": false}, {"number": 62, "content": "    : OdeRobot(odeHandle, osgHandle, name, \"HexaPod 0.9\"), conf(c)", "is_target": false}, {"number": 63, "content": "  {", "is_target": false}, {"number": 64, "content": "    // robot is not created till now", "is_target": false}, {"number": 65, "content": "    pos1d = new double[3];", "is_target": false}]}, "2002": {"lines": [{"number": 67, "content": "    pos2 = new dReal();", "is_target": false}, {"number": 68, "content": "    t = 0;", "is_target": false}, {"number": 69, "content": "    massOfobject = new dMass();", "is_target": false}, {"number": 70, "content": "    getPos1 = true;", "is_target": false}, {"number": 71, "content": "    timeCounter = conf.T;", "is_target": false}, {"number": 72, "content": "    energyOneStep = new double[1];", "is_target": true}, {"number": 73, "content": "    energyOneStep[0] =  0.0;", "is_target": false}, {"number": 74, "content": "    costOfTran = 0.0;", "is_target": false}, {"number": 75, "content": "    created=false;", "is_target": false}, {"number": 76, "content": "    check = false;", "is_target": false}, {"number": 77, "content": "    recordGait=false;", "is_target": false}]}, "2003": {"lines": [{"number": 67, "content": "    pos2 = new dReal();", "is_target": false}, {"number": 68, "content": "    t = 0;", "is_target": false}, {"number": 69, "content": "    massOfobject = new dMass();", "is_target": false}, {"number": 70, "content": "    getPos1 = true;", "is_target": false}, {"number": 71, "content": "    timeCounter = conf.T;", "is_target": false}, {"number": 72, "content": "    energyOneStep = new double[1];", "is_target": true}, {"number": 73, "content": "    energyOneStep[0] =  0.0;", "is_target": false}, {"number": 74, "content": "    costOfTran = 0.0;", "is_target": false}, {"number": 75, "content": "    created=false;", "is_target": false}, {"number": 76, "content": "    check = false;", "is_target": false}, {"number": 77, "content": "    recordGait=false;", "is_target": false}]}, "2004": {"lines": [{"number": 372, "content": "    }", "is_target": false}, {"number": 373, "content": "", "is_target": false}, {"number": 374, "content": "    odeHandle.createNewSimpleSpace(parentspace,false);", "is_target": false}, {"number": 375, "content": "    // color of joint axis and whiskers", "is_target": false}, {"number": 376, "content": "    OsgHandle osgHandleJ = osgHandle.changeColor(Color(72./255.,16./255.,16./255.));", "is_target": false}, {"number": 377, "content": "    TwoAxisServo* servo;", "is_target": true}, {"number": 378, "content": "    OneAxisServo* spring;", "is_target": false}, {"number": 379, "content": "    FixedJoint* fixedJoint;", "is_target": false}, {"number": 380, "content": "", "is_target": false}, {"number": 381, "content": "    // create body", "is_target": false}, {"number": 382, "content": "    double twidth = conf.size * conf.width ;// 1/1.5;", "is_target": false}]}, "2005": {"lines": [{"number": 374, "content": "    odeHandle.createNewSimpleSpace(parentspace,false);", "is_target": false}, {"number": 375, "content": "    // color of joint axis and whiskers", "is_target": false}, {"number": 376, "content": "    OsgHandle osgHandleJ = osgHandle.changeColor(Color(72./255.,16./255.,16./255.));", "is_target": false}, {"number": 377, "content": "    TwoAxisServo* servo;", "is_target": false}, {"number": 378, "content": "    OneAxisServo* spring;", "is_target": false}, {"number": 379, "content": "    FixedJoint* fixedJoint;", "is_target": true}, {"number": 380, "content": "", "is_target": false}, {"number": 381, "content": "    // create body", "is_target": false}, {"number": 382, "content": "    double twidth = conf.size * conf.width ;// 1/1.5;", "is_target": false}, {"number": 383, "content": "    double theight = conf.size * conf.height; // 1/4;", "is_target": false}, {"number": 384, "content": "    trunk = new Box(conf.size, twidth, theight);", "is_target": false}]}, "2006": {"lines": [{"number": 187, "content": "    assert(created); // robot must exist", "is_target": false}, {"number": 188, "content": "", "is_target": false}, {"number": 189, "content": "    for (vector<Primitive*>::iterator i = objects.begin(); i!= objects.end(); ++i) override {", "is_target": false}, {"number": 190, "content": "      if(*i) (*i)->update();", "is_target": false}, {"number": 191, "content": "    }", "is_target": false}, {"number": 192, "content": "    for (vector<Joint*>::iterator i = joints.begin(); i!= joints.end(); ++i) override {", "is_target": true}, {"number": 193, "content": "      if(*i) (*i)->update();", "is_target": false}, {"number": 194, "content": "    }", "is_target": false}, {"number": 195, "content": "", "is_target": false}, {"number": 196, "content": "    irSensorBank.update();", "is_target": false}, {"number": 197, "content": "  };", "is_target": false}]}, "2007": {"lines": [{"number": 643, "content": "        if(*i) delete *i;", "is_target": false}, {"number": 644, "content": "      }", "is_target": false}, {"number": 645, "content": "      whiskersprings.clear();", "is_target": false}, {"number": 646, "content": "", "is_target": false}, {"number": 647, "content": "", "is_target": false}, {"number": 648, "content": "      for (vector<Joint*>::iterator i = joints.begin(); i!= joints.end(); ++i) override {", "is_target": true}, {"number": 649, "content": "        if(*i) delete *i;", "is_target": false}, {"number": 650, "content": "      }", "is_target": false}, {"number": 651, "content": "      joints.clear();", "is_target": false}, {"number": 652, "content": "      for (vector<Primitive*>::iterator i = objects.begin(); i!= objects.end(); ++i) override {", "is_target": false}, {"number": 653, "content": "        if(*i) delete *i;", "is_target": false}]}, "2008": {"lines": [{"number": 647, "content": "", "is_target": false}, {"number": 648, "content": "      for (vector<Joint*>::iterator i = joints.begin(); i!= joints.end(); ++i) override {", "is_target": false}, {"number": 649, "content": "        if(*i) delete *i;", "is_target": false}, {"number": 650, "content": "      }", "is_target": false}, {"number": 651, "content": "      joints.clear();", "is_target": false}, {"number": 652, "content": "      for (vector<Primitive*>::iterator i = objects.begin(); i!= objects.end(); ++i) override {", "is_target": true}, {"number": 653, "content": "        if(*i) delete *i;", "is_target": false}, {"number": 654, "content": "      }", "is_target": false}, {"number": 655, "content": "      objects.clear();", "is_target": false}, {"number": 656, "content": "", "is_target": false}, {"number": 657, "content": "      odeHandle.deleteSpace();", "is_target": false}]}, "2009": {"lines": [{"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "  //  virtual double calculateE_(const matrix::Matrix& x_delay, const matrix::Matrix& y_delay);", "is_target": false}, {"number": 174, "content": "  virtual void learn(const matrix::Matrix& x_delay, const matrix::Matrix& y_delay);", "is_target": false}, {"number": 175, "content": "", "is_target": false}, {"number": 176, "content": "};", "is_target": true}, {"number": 177, "content": "", "is_target": false}, {"number": 178, "content": "#endif", "is_target": false}, {"number": 179, "content": "", "is_target": false}]}, "2010": {"lines": [{"number": 44, "content": " * by a joint", "is_target": false}, {"number": 45, "content": " **/", "is_target": false}, {"number": 46, "content": "class Schlange : public DefaultCaterPillar {", "is_target": false}, {"number": 47, "content": "protected:", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "  bool created = false;", "is_target": true}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "  std::vector <AngularMotor*> frictionmotors;", "is_target": false}, {"number": 52, "content": "  SchlangeConf conf;", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "public:", "is_target": false}]}, "2011": {"lines": [{"number": 46, "content": "class Schlange : public DefaultCaterPillar {", "is_target": false}, {"number": 47, "content": "protected:", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "  bool created = false;", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "  std::vector <AngularMotor*> frictionmotors;", "is_target": true}, {"number": 52, "content": "  SchlangeConf conf;", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "public:", "is_target": false}, {"number": 55, "content": "  Schlange ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 56, "content": "             const SchlangeConf& conf, const std::string& name, const std::string& revision);", "is_target": false}]}, "2012": {"lines": [{"number": 47, "content": "protected:", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "  bool created = false;", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "  std::vector <AngularMotor*> frictionmotors;", "is_target": false}, {"number": 52, "content": "  SchlangeConf conf;", "is_target": true}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "public:", "is_target": false}, {"number": 55, "content": "  Schlange ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 56, "content": "             const SchlangeConf& conf, const std::string& name, const std::string& revision);", "is_target": false}, {"number": 57, "content": "", "is_target": false}]}, "2013": {"lines": [{"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "public:", "is_target": false}, {"number": 55, "content": "  Schlange ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 56, "content": "             const SchlangeConf& conf, const std::string& name, const std::string& revision);", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  static SchlangeConf getDefaultConf() {", "is_target": true}, {"number": 59, "content": "    SchlangeConf conf;", "is_target": false}, {"number": 60, "content": "    conf.segmNumber = 10;    //  number of snake elements", "is_target": false}, {"number": 61, "content": "    conf.segmLength = 0.8;   // length of one snake element", "is_target": false}, {"number": 62, "content": "    conf.segmDia    = 0.2;   //  diameter of a snake element", "is_target": false}, {"number": 63, "content": "    conf.segmMass   = 0.1;//0.4   //  mass of one snake element", "is_target": false}]}, "2014": {"lines": [{"number": 75, "content": "    conf.jointLimit =  M_PI/8;", "is_target": false}, {"number": 76, "content": "    conf.firstJoint=1;", "is_target": false}, {"number": 77, "content": "    return conf;", "is_target": false}, {"number": 78, "content": "  }", "is_target": false}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "  virtual ~DefaultCaterPillar();", "is_target": true}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  /** sets the pose of the vehicle", "is_target": false}, {"number": 84, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 85, "content": "  */", "is_target": false}]}, "2015": {"lines": [{"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  /** sets the pose of the vehicle", "is_target": false}, {"number": 84, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 85, "content": "  */", "is_target": false}, {"number": 86, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  /// update all primitives and joints", "is_target": false}, {"number": 89, "content": "  virtual void update();", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "  /**", "is_target": false}]}, "2016": {"lines": [{"number": 84, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 85, "content": "  */", "is_target": false}, {"number": 86, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "  /// update all primitives and joints", "is_target": false}, {"number": 89, "content": "  virtual void update();", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "  /**", "is_target": false}, {"number": 92, "content": "   *Reads the actual motor commands from an array,", "is_target": false}, {"number": 93, "content": "   *an sets all motors of the snake to this values.", "is_target": false}, {"number": 94, "content": "   *It is an linear allocation.", "is_target": false}]}, "2017": {"lines": [{"number": 118, "content": "      @return length of the list", "is_target": false}, {"number": 119, "content": "  */", "is_target": false}, {"number": 120, "content": "  virtual int getSegmentsPosition(std::vector<Position> &poslist);", "is_target": false}, {"number": 121, "content": "", "is_target": false}, {"number": 122, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 123, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "  /** the main object of the robot, which is used for position and speed tracking */", "is_target": false}, {"number": 126, "content": "  virtual const Primitive* getMainPrimitive() const override {", "is_target": false}, {"number": 127, "content": "    if(!objects.empty()){", "is_target": false}, {"number": 128, "content": "      //      int half = objects.size()/2;", "is_target": false}]}, "2018": {"lines": [{"number": 71, "content": "    conf.headColor   = \"robot2\";", "is_target": false}, {"number": 72, "content": "    conf.bodyColor   = \"robot1\";", "is_target": false}, {"number": 73, "content": "    return conf;", "is_target": false}, {"number": 74, "content": "  }", "is_target": false}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "  virtual ~Schlange();", "is_target": true}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /** sets the pose of the vehicle", "is_target": false}, {"number": 80, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 81, "content": "  */", "is_target": false}]}, "2019": {"lines": [{"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /** sets the pose of the vehicle", "is_target": false}, {"number": 80, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 81, "content": "  */", "is_target": false}, {"number": 82, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  /// update all primitives and joints", "is_target": false}, {"number": 85, "content": "  virtual void update();", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "  /**", "is_target": false}]}, "2020": {"lines": [{"number": 80, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 81, "content": "  */", "is_target": false}, {"number": 82, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  /// update all primitives and joints", "is_target": false}, {"number": 85, "content": "  virtual void update();", "is_target": true}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "  /**", "is_target": false}, {"number": 88, "content": "   *Reads the actual motor commands from an array,", "is_target": false}, {"number": 89, "content": "   *an sets all motors of the snake to this values.", "is_target": false}, {"number": 90, "content": "   *It is an linear allocation.", "is_target": false}]}, "2021": {"lines": [{"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "  /** returns a vector with the positions of all segments of the robot", "is_target": false}, {"number": 113, "content": "      @param poslist vector of positions (of all robot segments)", "is_target": false}, {"number": 114, "content": "      @return length of the list", "is_target": false}, {"number": 115, "content": "  */", "is_target": false}, {"number": 116, "content": "  virtual int getSegmentsPosition(std::vector<Position> &poslist);", "is_target": true}, {"number": 117, "content": "", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "  /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 120, "content": "  virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 121, "content": "", "is_target": false}]}, "2022": {"lines": [{"number": 115, "content": "  */", "is_target": false}, {"number": 116, "content": "  virtual int getSegmentsPosition(std::vector<Position> &poslist);", "is_target": false}, {"number": 117, "content": "", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "  /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 120, "content": "  virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 121, "content": "", "is_target": false}, {"number": 122, "content": "  /** the main object of the robot, which is used for position and speed tracking */", "is_target": false}, {"number": 123, "content": "  virtual const Primitive* getMainPrimitive() const override {", "is_target": false}, {"number": 124, "content": "    if(!objects.empty()){", "is_target": false}, {"number": 125, "content": "      //      int half = objects.size()/2;", "is_target": false}]}, "2023": {"lines": [{"number": 150, "content": "  std::vector<OdeHandle> spaces;", "is_target": false}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "  /** creates vehicle at desired pose", "is_target": false}, {"number": 153, "content": "      @param pose 4x4 pose matrix", "is_target": false}, {"number": 154, "content": "  */", "is_target": false}, {"number": 155, "content": "  virtual void create(const osg::Matrix& pose);", "is_target": true}, {"number": 156, "content": "  /**", "is_target": false}, {"number": 157, "content": "     creates and initialised the segment with the given index", "is_target": false}, {"number": 158, "content": "   */", "is_target": false}, {"number": 159, "content": "  virtual Primitive* createSegment(int index, const OdeHandle& odeHandle);", "is_target": false}, {"number": 160, "content": "  virtual void destroy();", "is_target": false}]}, "2024": {"lines": [{"number": 155, "content": "  virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 156, "content": "  /**", "is_target": false}, {"number": 157, "content": "     creates and initialised the segment with the given index", "is_target": false}, {"number": 158, "content": "   */", "is_target": false}, {"number": 159, "content": "  virtual Primitive* createSegment(int index, const OdeHandle& odeHandle);", "is_target": false}, {"number": 160, "content": "  virtual void destroy();", "is_target": true}, {"number": 161, "content": "};", "is_target": false}, {"number": 162, "content": "", "is_target": false}, {"number": 163, "content": "}", "is_target": false}, {"number": 164, "content": "", "is_target": false}, {"number": 165, "content": "#endif", "is_target": false}]}, "2025": {"lines": [{"number": 49, "content": "    SchlangeServo ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 50, "content": "                    const SchlangeConf& conf,", "is_target": false}, {"number": 51, "content": "                    const std::string& name, const std::string& revision=\"\");", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual ~SchlangeServo();", "is_target": true}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    /**", "is_target": false}, {"number": 57, "content": "     *Reads the actual motor commands from an array,", "is_target": false}, {"number": 58, "content": "     *an sets all motors of the snake to this values.", "is_target": false}, {"number": 59, "content": "     *It is an linear allocation.", "is_target": false}]}, "2026": {"lines": [{"number": 58, "content": "     *an sets all motors of the snake to this values.", "is_target": false}, {"number": 59, "content": "     *It is an linear allocation.", "is_target": false}, {"number": 60, "content": "     *@param motors pointer to the array, motor values are scaled to [-1,1]", "is_target": false}, {"number": 61, "content": "     *@param motornumber length of the motor array", "is_target": false}, {"number": 62, "content": "     **/", "is_target": false}, {"number": 63, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": true}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "    /**", "is_target": false}, {"number": 66, "content": "     *Writes the sensor values to an array in the memory.", "is_target": false}, {"number": 67, "content": "     *@param sensors pointer to the array", "is_target": false}, {"number": 68, "content": "     *@param sensornumber length of the sensor array", "is_target": false}]}, "2027": {"lines": [{"number": 66, "content": "     *Writes the sensor values to an array in the memory.", "is_target": false}, {"number": 67, "content": "     *@param sensors pointer to the array", "is_target": false}, {"number": 68, "content": "     *@param sensornumber length of the sensor array", "is_target": false}, {"number": 69, "content": "     *@return number of actually written sensors", "is_target": false}, {"number": 70, "content": "     **/", "is_target": false}, {"number": 71, "content": "    virtual int getSensorsIntern( double* sensors, int sensornumber );", "is_target": true}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "    /** returns number of sensors", "is_target": false}, {"number": 74, "content": "     */", "is_target": false}, {"number": 75, "content": "    virtual int getSensorNumberIntern() const override { assert(created); return servos.size(); }", "is_target": false}, {"number": 76, "content": "", "is_target": false}]}, "2028": {"lines": [{"number": 77, "content": "    /** returns number of motors", "is_target": false}, {"number": 78, "content": "     */", "is_target": false}, {"number": 79, "content": "    virtual int getMotorNumberIntern() const override { assert(created); return servos.size(); }", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 82, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  private:", "is_target": false}, {"number": 85, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 86, "content": "    virtual void destroy();", "is_target": false}, {"number": 87, "content": "  };", "is_target": false}]}, "2029": {"lines": [{"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 82, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  private:", "is_target": false}, {"number": 85, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": true}, {"number": 86, "content": "    virtual void destroy();", "is_target": false}, {"number": 87, "content": "  };", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "}", "is_target": false}, {"number": 90, "content": "", "is_target": false}]}, "2030": {"lines": [{"number": 81, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 82, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  private:", "is_target": false}, {"number": 85, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 86, "content": "    virtual void destroy();", "is_target": true}, {"number": 87, "content": "  };", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "}", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "/*", "is_target": false}]}, "2031": {"lines": [{"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "    //    AbstractWiring* wiring = new FeedbackWiring(new ColorUniformNoise(0.1),", "is_target": false}, {"number": 151, "content": "    //                                                  FeedbackWiring::Motor, 0.75);", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "    OdeAgent* agent = new OdeAgent(global);", "is_target": false}, {"number": 154, "content": "    agent->init(controller, vehicle, wiring);", "is_target": true}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "    if(agent) agent->setTrackOptions(TrackRobot(true,false,false, false,", "is_target": false}, {"number": 157, "content": "                                                 change < 50 ? std::itos(change).c_str() : \"uni\", 50));", "is_target": false}, {"number": 158, "content": "    global.agents.push_back(agent);", "is_target": false}, {"number": 159, "content": "    global.configs.push_back(controller);", "is_target": false}]}, "2032": {"lines": [{"number": 83, "content": "                                               int number_steps_for_averaging_) {", "is_target": false}, {"number": 84, "content": "    // number_steps_for_averaging_ must not be larger than buffersize", "is_target": false}, {"number": 85, "content": "    assert(static_cast<int>(number_steps_for_averaging_) <= buffersize);", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "    matrix::Matrix result(buffer[t % buffersize]);", "is_target": false}, {"number": 88, "content": "    for (int k = 1; k < number_steps_for_averaging_; ++k) {", "is_target": true}, {"number": 89, "content": "      result += buffer[(t - k + buffersize) % buffersize];", "is_target": false}, {"number": 90, "content": "    }", "is_target": false}, {"number": 91, "content": "    result *= 1 / (static_cast<double>(number_steps_for_averaging_)); // scalar multiplication", "is_target": false}, {"number": 92, "content": "    return result;", "is_target": false}, {"number": 93, "content": "  };", "is_target": false}]}, "2033": {"lines": [{"number": 214, "content": "  matrix::Matrix calculateSmoothValuesVec(const std::vector<matrix::Matrix>& buffer, int number_steps_for_averaging_) {", "is_target": false}, {"number": 215, "content": "    // number_steps_for_averaging_ must not be larger than buffersize", "is_target": false}, {"number": 216, "content": "    assert(static_cast<unsigned>(number_steps_for_averaging_) <= buffersize);", "is_target": false}, {"number": 217, "content": "    ", "is_target": false}, {"number": 218, "content": "    matrix::Matrix result(buffer[t % buffersize]);", "is_target": false}, {"number": 219, "content": "    for (int k = 1; k < number_steps_for_averaging_; ++k) {", "is_target": true}, {"number": 220, "content": "      result += buffer[(t - k + buffersize) % buffersize];", "is_target": false}, {"number": 221, "content": "    }", "is_target": false}, {"number": 222, "content": "    result *= 1 / (static_cast<double>(number_steps_for_averaging_)); // scalar multiplication", "is_target": false}, {"number": 223, "content": "    return result;", "is_target": false}, {"number": 224, "content": "  }", "is_target": false}]}, "2035": {"lines": [{"number": 190, "content": "  } else {", "is_target": false}, {"number": 191, "content": "      H_reset->at(0) = 0;", "is_target": false}, {"number": 192, "content": "      H_reset->at(1) = 0;", "is_target": false}, {"number": 193, "content": "  }", "is_target": false}, {"number": 194, "content": "", "is_target": false}, {"number": 195, "content": "  for (int i=2; i<number_motors; ++i) {", "is_target": true}, {"number": 196, "content": "    if ( (IRused_old.at(i-1)==1) && (IRused.at(i-1)== nullptr) ){", "is_target": false}, {"number": 197, "content": "        H_reset->at(i) = 1;", "is_target": false}, {"number": 198, "content": "    } else {", "is_target": false}, {"number": 199, "content": "        H_reset->at(i) = 0;", "is_target": false}, {"number": 200, "content": "    }", "is_target": false}]}, "2036": {"lines": [{"number": 102, "content": "      context_sensors.push_back(x_[i]);", "is_target": false}, {"number": 103, "content": "    }", "is_target": false}, {"number": 104, "content": "    all_sensors[i]=x_[i];", "is_target": false}, {"number": 105, "content": "  }", "is_target": false}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "  InvertNChannelController::step(sensors,number_motors,y_, number_motors);", "is_target": true}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "};", "is_target": false}, {"number": 110, "content": "", "is_target": false}, {"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "/// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}]}, "2037": {"lines": [{"number": 118, "content": "      sensors[i]=x_[i];", "is_target": false}, {"number": 119, "content": "    }", "is_target": false}, {"number": 120, "content": "    all_sensors[i]=x_[i];", "is_target": false}, {"number": 121, "content": "  }", "is_target": false}, {"number": 122, "content": "", "is_target": false}, {"number": 123, "content": "  InvertNChannelController::stepNoLearning(sensors,number_motors,y_, number_motors);", "is_target": true}, {"number": 124, "content": "};", "is_target": false}, {"number": 125, "content": "", "is_target": false}, {"number": 126, "content": "/*", "is_target": false}, {"number": 127, "content": "Matrix InvertNChannelControllerHebbHHand::hebb(const Matrix& xsi, sensor* sensors){", "is_target": false}, {"number": 128, "content": "", "is_target": false}]}, "2038": {"lines": [{"number": 115, "content": "", "is_target": false}, {"number": 116, "content": "  //double p0_pos, p0_neg, p1_pos, p1_neg;", "is_target": false}, {"number": 117, "content": "", "is_target": false}, {"number": 118, "content": "  sensor old_sensors[10]; //memory of old sensor values (used for hebbian learning)", "is_target": false}, {"number": 119, "content": "", "is_target": false}, {"number": 120, "content": "  virtual matrix::Matrix hebb(matrix::const Matrix& xsi, sensor* sensors);", "is_target": true}, {"number": 121, "content": "  virtual double calculateEHebb(const matrix::Matrix& x_delay, const matrix::Matrix& y_delay);", "is_target": false}, {"number": 122, "content": "  virtual void learn(const matrix::Matrix& x_delay, const matrix::Matrix& y_delay);", "is_target": false}, {"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "};", "is_target": false}, {"number": 125, "content": "", "is_target": false}]}, "2039": {"lines": [{"number": 121, "content": "", "is_target": false}, {"number": 122, "content": "  //double p0_pos, p0_neg, p1_pos, p1_neg;", "is_target": false}, {"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "  sensor old_sensors[10]; //memory of old sensor values (used for hebbian learning)", "is_target": false}, {"number": 125, "content": "", "is_target": false}, {"number": 126, "content": "  virtual matrix::Matrix hebb(matrix::const Matrix& xsi, sensor* sensors);", "is_target": true}, {"number": 127, "content": "  virtual double calculateEHebb(const matrix::Matrix& x_delay, const matrix::Matrix& y_delay);", "is_target": false}, {"number": 128, "content": "  virtual void learn(const matrix::Matrix& x_delay, const matrix::Matrix& y_delay);", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "};", "is_target": false}, {"number": 131, "content": "", "is_target": false}]}, "2040": {"lines": [{"number": 43, "content": "      @param noise NoiseGenerator that is used for adding noise to sensor values", "is_target": false}, {"number": 44, "content": "      @param plotNoise for plotting the noise values (to observe it from outside", "is_target": false}, {"number": 45, "content": "      via getInternalParams() and guilogger) set it TRUE, for not plotting the noise set", "is_target": false}, {"number": 46, "content": "      it to FALSE.", "is_target": false}, {"number": 47, "content": "   */", "is_target": false}, {"number": 48, "content": "  IRInvertWiring(NoiseGenerator* noise, bool plotNoise=false, const std::string& name = \"IRInvertWiring\");", "is_target": true}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "  /** destructor", "is_target": false}, {"number": 52, "content": "   */", "is_target": false}, {"number": 53, "content": "  //  virtual ~IRInvertWiring();", "is_target": false}]}, "2043": {"lines": [{"number": 126, "content": "", "is_target": false}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "    /**", "is_target": false}, {"number": 129, "content": "     * update the subcomponents", "is_target": false}, {"number": 130, "content": "     */", "is_target": false}, {"number": 131, "content": "    virtual void update();", "is_target": true}, {"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "    /**", "is_target": false}, {"number": 134, "content": "     * sets the pose of the vehicle", "is_target": false}, {"number": 135, "content": "     * @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 136, "content": "     */", "is_target": false}]}, "2044": {"lines": [{"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "    /**", "is_target": false}, {"number": 134, "content": "     * sets the pose of the vehicle", "is_target": false}, {"number": 135, "content": "     * @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 136, "content": "     */", "is_target": false}, {"number": 137, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "    virtual void sense(const GlobalData& globalData);", "is_target": false}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 142, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}]}, "2045": {"lines": [{"number": 134, "content": "     * sets the pose of the vehicle", "is_target": false}, {"number": 135, "content": "     * @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 136, "content": "     */", "is_target": false}, {"number": 137, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "    virtual void sense(const GlobalData& globalData);", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 142, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 143, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 144, "content": "        @return number of actually written sensors", "is_target": false}]}, "2046": {"lines": [{"number": 141, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 142, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 143, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 144, "content": "        @return number of actually written sensors", "is_target": false}, {"number": 145, "content": "    */", "is_target": false}, {"number": 146, "content": "    virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": true}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 149, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 150, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 151, "content": "    */", "is_target": false}]}, "2047": {"lines": [{"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 149, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 150, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 151, "content": "    */", "is_target": false}, {"number": 152, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 153, "content": "", "is_target": false}, {"number": 154, "content": "    /** returns number of sensors", "is_target": false}, {"number": 155, "content": "     */", "is_target": false}, {"number": 156, "content": "    virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 157, "content": "", "is_target": false}]}, "2048": {"lines": [{"number": 151, "content": "    */", "is_target": false}, {"number": 152, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": false}, {"number": 153, "content": "", "is_target": false}, {"number": 154, "content": "    /** returns number of sensors", "is_target": false}, {"number": 155, "content": "     */", "is_target": false}, {"number": 156, "content": "    virtual int getSensorNumberIntern() const;", "is_target": true}, {"number": 157, "content": "", "is_target": false}, {"number": 158, "content": "    /** returns number of motors", "is_target": false}, {"number": 159, "content": "     */", "is_target": false}, {"number": 160, "content": "    virtual int getMotorNumberIntern() const;", "is_target": false}, {"number": 161, "content": "", "is_target": false}]}, "2049": {"lines": [{"number": 155, "content": "     */", "is_target": false}, {"number": 156, "content": "    virtual int getSensorNumberIntern() const;", "is_target": false}, {"number": 157, "content": "", "is_target": false}, {"number": 158, "content": "    /** returns number of motors", "is_target": false}, {"number": 159, "content": "     */", "is_target": false}, {"number": 160, "content": "    virtual int getMotorNumberIntern() const;", "is_target": true}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "    /** returns a vector with the positions of all segments of the robot", "is_target": false}, {"number": 163, "content": "        @param poslist vector of positions (of all robot segments)", "is_target": false}, {"number": 164, "content": "        @return length of the list", "is_target": false}, {"number": 165, "content": "    */", "is_target": false}]}, "2050": {"lines": [{"number": 164, "content": "        @return length of the list", "is_target": false}, {"number": 165, "content": "    */", "is_target": false}, {"number": 166, "content": "    //  virtual int getSegmentsPosition(vector<Position> &poslist);", "is_target": false}, {"number": 167, "content": "", "is_target": false}, {"number": 168, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 169, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 170, "content": "", "is_target": false}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "  protected:", "is_target": false}, {"number": 173, "content": "    /**", "is_target": false}, {"number": 174, "content": "     * Returns the palm as the main object of the robot,", "is_target": false}]}, "2051": {"lines": [{"number": 172, "content": "  protected:", "is_target": false}, {"number": 173, "content": "    /**", "is_target": false}, {"number": 174, "content": "     * Returns the palm as the main object of the robot,", "is_target": false}, {"number": 175, "content": "     * which is used for position and speed tracking.", "is_target": false}, {"number": 176, "content": "     */", "is_target": false}, {"number": 177, "content": "    virtual const Primitive* getMainPrimitive() const {", "is_target": true}, {"number": 178, "content": "      if(!objects.empty()){", "is_target": false}, {"number": 179, "content": "        return (objects[0]); // returns forearm for fixation", "is_target": false}, {"number": 180, "content": "        //return (objects[1]); // returns palm", "is_target": false}, {"number": 181, "content": "      }else return 0;", "is_target": false}, {"number": 182, "content": "    }", "is_target": false}]}, "2053": {"lines": [{"number": 217, "content": "        matODE[6] = 1.0f;", "is_target": false}, {"number": 218, "content": "        matODE[7] =0.0f;", "is_target": false}, {"number": 219, "content": "        matODE[8] = 1.0f;", "is_target": false}, {"number": 220, "content": "        matODE[9] = 1.0f;", "is_target": false}, {"number": 221, "content": "        matODE[10] = 1.0f;", "is_target": false}, {"number": 222, "content": "        matODE[11] =0.0f;", "is_target": true}, {"number": 223, "content": "        double Pos[3];", "is_target": false}, {"number": 224, "content": "        Pos[0]=0;", "is_target": false}, {"number": 225, "content": "        Pos[1]=0;", "is_target": false}, {"number": 226, "content": "        Pos[2]=5;", "is_target": false}, {"number": 227, "content": "        //hand->place(osgPose( Pos , matODE ) );", "is_target": false}]}, "2054": {"lines": [{"number": 221, "content": "        matODE[10] = 1.0f;", "is_target": false}, {"number": 222, "content": "        matODE[11] =0.0f;", "is_target": false}, {"number": 223, "content": "        double Pos[3];", "is_target": false}, {"number": 224, "content": "        Pos[0]=0;", "is_target": false}, {"number": 225, "content": "        Pos[1]=0;", "is_target": false}, {"number": 226, "content": "        Pos[2]=5;", "is_target": true}, {"number": 227, "content": "        //hand->place(osgPose( Pos , matODE ) );", "is_target": false}, {"number": 228, "content": "        }", "is_target": false}, {"number": 229, "content": "    //hand->place(Pos(2.5,1.26,0));", "is_target": false}, {"number": 230, "content": "    hand->place(Pos(0,0,6));", "is_target": false}, {"number": 231, "content": "    //hand->place(Pos(2,3,1));", "is_target": false}]}, "2055": {"lines": [{"number": 55, "content": "  int t = 1;", "is_target": false}, {"number": 56, "content": "  int c = 1;", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  // constructor:", "is_target": false}, {"number": 59, "content": "  // - give handle for ODE and OSG stuff", "is_target": false}, {"number": 60, "content": "  Hexapod::Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 61, "content": "                   const HexapodConf& c, const std::string& name)", "is_target": false}, {"number": 62, "content": "    : OdeRobot(odeHandle, osgHandle, name, \"HexaPod 0.9\"), conf(c)", "is_target": false}, {"number": 63, "content": "  {", "is_target": false}, {"number": 64, "content": "    // robot is not created till now", "is_target": false}, {"number": 65, "content": "    pos1d = new double[3];", "is_target": false}]}, "2056": {"lines": [{"number": 55, "content": "  int t = 1;", "is_target": false}, {"number": 56, "content": "  int c = 1;", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  // constructor:", "is_target": false}, {"number": 59, "content": "  // - give handle for ODE and OSG stuff", "is_target": false}, {"number": 60, "content": "  Hexapod::Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 61, "content": "                   const HexapodConf& c, const std::string& name)", "is_target": false}, {"number": 62, "content": "    : OdeRobot(odeHandle, osgHandle, name, \"HexaPod 0.9\"), conf(c)", "is_target": false}, {"number": 63, "content": "  {", "is_target": false}, {"number": 64, "content": "    // robot is not created till now", "is_target": false}, {"number": 65, "content": "    pos1d = new double[3];", "is_target": false}]}, "2057": {"lines": [{"number": 55, "content": "  int t = 1;", "is_target": false}, {"number": 56, "content": "  int c = 1;", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  // constructor:", "is_target": false}, {"number": 59, "content": "  // - give handle for ODE and OSG stuff", "is_target": false}, {"number": 60, "content": "  Hexapod::Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 61, "content": "                   const HexapodConf& c, const std::string& name)", "is_target": false}, {"number": 62, "content": "    : OdeRobot(odeHandle, osgHandle, name, \"HexaPod 0.9\"), conf(c)", "is_target": false}, {"number": 63, "content": "  {", "is_target": false}, {"number": 64, "content": "    // robot is not created till now", "is_target": false}, {"number": 65, "content": "    pos1d = new double[3];", "is_target": false}]}, "2058": {"lines": [{"number": 55, "content": "  int t = 1;", "is_target": false}, {"number": 56, "content": "  int c = 1;", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  // constructor:", "is_target": false}, {"number": 59, "content": "  // - give handle for ODE and OSG stuff", "is_target": false}, {"number": 60, "content": "  Hexapod::Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 61, "content": "                   const HexapodConf& c, const std::string& name)", "is_target": false}, {"number": 62, "content": "    : OdeRobot(odeHandle, osgHandle, name, \"HexaPod 0.9\"), conf(c)", "is_target": false}, {"number": 63, "content": "  {", "is_target": false}, {"number": 64, "content": "    // robot is not created till now", "is_target": false}, {"number": 65, "content": "    pos1d = new double[3];", "is_target": false}]}, "2059": {"lines": [{"number": 55, "content": "  int t = 1;", "is_target": false}, {"number": 56, "content": "  int c = 1;", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  // constructor:", "is_target": false}, {"number": 59, "content": "  // - give handle for ODE and OSG stuff", "is_target": false}, {"number": 60, "content": "  Hexapod::Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 61, "content": "                   const HexapodConf& c, const std::string& name)", "is_target": false}, {"number": 62, "content": "    : OdeRobot(odeHandle, osgHandle, name, \"HexaPod 0.9\"), conf(c)", "is_target": false}, {"number": 63, "content": "  {", "is_target": false}, {"number": 64, "content": "    // robot is not created till now", "is_target": false}, {"number": 65, "content": "    pos1d = new double[3];", "is_target": false}]}, "2060": {"lines": [{"number": 67, "content": "    pos2 = new dReal();", "is_target": false}, {"number": 68, "content": "    t = 0;", "is_target": false}, {"number": 69, "content": "    massOfobject = new dMass();", "is_target": false}, {"number": 70, "content": "    getPos1 = true;", "is_target": false}, {"number": 71, "content": "    timeCounter = conf.T;", "is_target": false}, {"number": 72, "content": "    energyOneStep = new double[1];", "is_target": true}, {"number": 73, "content": "    energyOneStep[0] =  0.0;", "is_target": false}, {"number": 74, "content": "    costOfTran = 0.0;", "is_target": false}, {"number": 75, "content": "    created=false;", "is_target": false}, {"number": 76, "content": "    check = false;", "is_target": false}, {"number": 77, "content": "    recordGait=false;", "is_target": false}]}, "2061": {"lines": [{"number": 67, "content": "    pos2 = new dReal();", "is_target": false}, {"number": 68, "content": "    t = 0;", "is_target": false}, {"number": 69, "content": "    massOfobject = new dMass();", "is_target": false}, {"number": 70, "content": "    getPos1 = true;", "is_target": false}, {"number": 71, "content": "    timeCounter = conf.T;", "is_target": false}, {"number": 72, "content": "    energyOneStep = new double[1];", "is_target": true}, {"number": 73, "content": "    energyOneStep[0] =  0.0;", "is_target": false}, {"number": 74, "content": "    costOfTran = 0.0;", "is_target": false}, {"number": 75, "content": "    created=false;", "is_target": false}, {"number": 76, "content": "    check = false;", "is_target": false}, {"number": 77, "content": "    recordGait=false;", "is_target": false}]}, "2062": {"lines": [{"number": 33, "content": " * This controller implements the standard algorihm described the Chapter 3 (Homeokinesis)", "is_target": false}, {"number": 34, "content": " */", "is_target": false}, {"number": 35, "content": "class Sox{", "is_target": false}, {"number": 36, "content": "", "is_target": false}, {"number": 37, "content": "public:", "is_target": false}, {"number": 38, "content": "  Sox(double init_feedback_strength = 1.0, bool useExtendedModel=true);", "is_target": true}, {"number": 39, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "  virtual ~Sox();", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}]}, "2063": {"lines": [{"number": 55, "content": "  int t = 1;", "is_target": false}, {"number": 56, "content": "  int c = 1;", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  // constructor:", "is_target": false}, {"number": 59, "content": "  // - give handle for ODE and OSG stuff", "is_target": false}, {"number": 60, "content": "  Hexapod::Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 61, "content": "                   const HexapodConf& c, const std::string& name)", "is_target": false}, {"number": 62, "content": "    : OdeRobot(odeHandle, osgHandle, name, \"HexaPod 0.9\"), conf(c)", "is_target": false}, {"number": 63, "content": "  {", "is_target": false}, {"number": 64, "content": "    // robot is not created till now", "is_target": false}, {"number": 65, "content": "    pos1d = new double[3];", "is_target": false}]}, "2064": {"lines": [{"number": 55, "content": "  int t = 1;", "is_target": false}, {"number": 56, "content": "  int c = 1;", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  // constructor:", "is_target": false}, {"number": 59, "content": "  // - give handle for ODE and OSG stuff", "is_target": false}, {"number": 60, "content": "  Hexapod::Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 61, "content": "                   const HexapodConf& c, const std::string& name)", "is_target": false}, {"number": 62, "content": "    : OdeRobot(odeHandle, osgHandle, name, \"HexaPod 0.9\"), conf(c)", "is_target": false}, {"number": 63, "content": "  {", "is_target": false}, {"number": 64, "content": "    // robot is not created till now", "is_target": false}, {"number": 65, "content": "    pos1d = new double[3];", "is_target": false}]}, "2065": {"lines": [{"number": 55, "content": "  int t = 1;", "is_target": false}, {"number": 56, "content": "  int c = 1;", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  // constructor:", "is_target": false}, {"number": 59, "content": "  // - give handle for ODE and OSG stuff", "is_target": false}, {"number": 60, "content": "  Hexapod::Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 61, "content": "                   const HexapodConf& c, const std::string& name)", "is_target": false}, {"number": 62, "content": "    : OdeRobot(odeHandle, osgHandle, name, \"HexaPod 0.9\"), conf(c)", "is_target": false}, {"number": 63, "content": "  {", "is_target": false}, {"number": 64, "content": "    // robot is not created till now", "is_target": false}, {"number": 65, "content": "    pos1d = new double[3];", "is_target": false}]}, "2066": {"lines": [{"number": 55, "content": "  int t = 1;", "is_target": false}, {"number": 56, "content": "  int c = 1;", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  // constructor:", "is_target": false}, {"number": 59, "content": "  // - give handle for ODE and OSG stuff", "is_target": false}, {"number": 60, "content": "  Hexapod::Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 61, "content": "                   const HexapodConf& c, const std::string& name)", "is_target": false}, {"number": 62, "content": "    : OdeRobot(odeHandle, osgHandle, name, \"HexaPod 0.9\"), conf(c)", "is_target": false}, {"number": 63, "content": "  {", "is_target": false}, {"number": 64, "content": "    // robot is not created till now", "is_target": false}, {"number": 65, "content": "    pos1d = new double[3];", "is_target": false}]}, "2067": {"lines": [{"number": 55, "content": "  int t = 1;", "is_target": false}, {"number": 56, "content": "  int c = 1;", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  // constructor:", "is_target": false}, {"number": 59, "content": "  // - give handle for ODE and OSG stuff", "is_target": false}, {"number": 60, "content": "  Hexapod::Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 61, "content": "                   const HexapodConf& c, const std::string& name)", "is_target": false}, {"number": 62, "content": "    : OdeRobot(odeHandle, osgHandle, name, \"HexaPod 0.9\"), conf(c)", "is_target": false}, {"number": 63, "content": "  {", "is_target": false}, {"number": 64, "content": "    // robot is not created till now", "is_target": false}, {"number": 65, "content": "    pos1d = new double[3];", "is_target": false}]}, "2068": {"lines": [{"number": 231, "content": "void Sox::learn(){", "is_target": false}, {"number": 232, "content": "", "is_target": false}, {"number": 233, "content": "", "is_target": false}, {"number": 234, "content": "  // the effective x/y is (actual-steps4delay) element of buffer", "is_target": false}, {"number": 235, "content": "  s4delay = ::clip(s4delay,1,buffersize-1);", "is_target": false}, {"number": 236, "content": "  const Matrix& x = x_buffer[(t - max(s4delay,1) + buffersize) % buffersize];", "is_target": true}, {"number": 237, "content": "  const Matrix& y_creat = y_buffer[(t - max(s4delay,1) + buffersize) % buffersize];", "is_target": false}, {"number": 238, "content": "  const Matrix& x_fut   = x_buffer[t% buffersize]; // future sensor (with respect to x,y)", "is_target": false}, {"number": 239, "content": "", "is_target": false}, {"number": 240, "content": "  const Matrix& xi = x_fut  - (A * y_creat + b + S * x); // here we use creativity", "is_target": false}, {"number": 241, "content": "", "is_target": false}]}, "2069": {"lines": [{"number": 296, "content": "};//Ende Sox learn", "is_target": false}, {"number": 297, "content": "", "is_target": false}, {"number": 298, "content": "", "is_target": false}, {"number": 299, "content": "void Sox::dreamingStep() {", "is_target": false}, {"number": 300, "content": "  // like normal learning step but with a random input x_t and the same x_{t+1}", "is_target": false}, {"number": 301, "content": "  Matrix x(number_sensors,1);", "is_target": true}, {"number": 302, "content": "  x = x.map(random_minusone_to_one) * 1.2;", "is_target": false}, {"number": 303, "content": "", "is_target": false}, {"number": 304, "content": "  const Matrix& z    = (C * (x) + h); // here no creativity", "is_target": false}, {"number": 305, "content": "  const Matrix& y    = z.map(g);", "is_target": false}, {"number": 306, "content": "  const Matrix& g_prime = z.map(g_s);", "is_target": false}]}, "2070": {"lines": [{"number": 65, "content": "Sox::~Sox(){", "is_target": false}, {"number": 66, "content": "}", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "void Sox::init(int sensornumber, int motornumber, RandGen* randGen){", "is_target": false}, {"number": 70, "content": "  if(!randGen) randGen = new RandGen(); // this gives a small memory leak", "is_target": true}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "  number_sensors= sensornumber;", "is_target": false}, {"number": 73, "content": "  number_motors = motornumber;", "is_target": false}, {"number": 74, "content": "  A.set(number_sensors, number_motors);", "is_target": false}, {"number": 75, "content": "  S.set(number_sensors, number_sensors);", "is_target": false}]}, "2071": {"lines": [{"number": 372, "content": "    }", "is_target": false}, {"number": 373, "content": "", "is_target": false}, {"number": 374, "content": "    odeHandle.createNewSimpleSpace(parentspace,false);", "is_target": false}, {"number": 375, "content": "    // color of joint axis and whiskers", "is_target": false}, {"number": 376, "content": "    OsgHandle osgHandleJ = osgHandle.changeColor(Color(72./255.,16./255.,16./255.));", "is_target": false}, {"number": 377, "content": "    TwoAxisServo* servo;", "is_target": true}, {"number": 378, "content": "    OneAxisServo* spring;", "is_target": false}, {"number": 379, "content": "    FixedJoint* fixedJoint;", "is_target": false}, {"number": 380, "content": "", "is_target": false}, {"number": 381, "content": "    // create body", "is_target": false}, {"number": 382, "content": "    double twidth = conf.size * conf.width ;// 1/1.5;", "is_target": false}]}, "2072": {"lines": [{"number": 374, "content": "    odeHandle.createNewSimpleSpace(parentspace,false);", "is_target": false}, {"number": 375, "content": "    // color of joint axis and whiskers", "is_target": false}, {"number": 376, "content": "    OsgHandle osgHandleJ = osgHandle.changeColor(Color(72./255.,16./255.,16./255.));", "is_target": false}, {"number": 377, "content": "    TwoAxisServo* servo;", "is_target": false}, {"number": 378, "content": "    OneAxisServo* spring;", "is_target": false}, {"number": 379, "content": "    FixedJoint* fixedJoint;", "is_target": true}, {"number": 380, "content": "", "is_target": false}, {"number": 381, "content": "    // create body", "is_target": false}, {"number": 382, "content": "    double twidth = conf.size * conf.width ;// 1/1.5;", "is_target": false}, {"number": 383, "content": "    double theight = conf.size * conf.height; // 1/4;", "is_target": false}, {"number": 384, "content": "    trunk = new Box(conf.size, twidth, theight);", "is_target": false}]}, "2073": {"lines": [{"number": 67, "content": "    pos2 = new dReal();", "is_target": false}, {"number": 68, "content": "    t = 0;", "is_target": false}, {"number": 69, "content": "    massOfobject = new dMass();", "is_target": false}, {"number": 70, "content": "    getPos1 = true;", "is_target": false}, {"number": 71, "content": "    timeCounter = conf.T;", "is_target": false}, {"number": 72, "content": "    energyOneStep = new double[1];", "is_target": true}, {"number": 73, "content": "    energyOneStep[0] =  0.0;", "is_target": false}, {"number": 74, "content": "    costOfTran = 0.0;", "is_target": false}, {"number": 75, "content": "    created=false;", "is_target": false}, {"number": 76, "content": "    check = false;", "is_target": false}, {"number": 77, "content": "    recordGait=false;", "is_target": false}]}, "2074": {"lines": [{"number": 67, "content": "    pos2 = new dReal();", "is_target": false}, {"number": 68, "content": "    t = 0;", "is_target": false}, {"number": 69, "content": "    massOfobject = new dMass();", "is_target": false}, {"number": 70, "content": "    getPos1 = true;", "is_target": false}, {"number": 71, "content": "    timeCounter = conf.T;", "is_target": false}, {"number": 72, "content": "    energyOneStep = new double[1];", "is_target": true}, {"number": 73, "content": "    energyOneStep[0] =  0.0;", "is_target": false}, {"number": 74, "content": "    costOfTran = 0.0;", "is_target": false}, {"number": 75, "content": "    created=false;", "is_target": false}, {"number": 76, "content": "    check = false;", "is_target": false}, {"number": 77, "content": "    recordGait=false;", "is_target": false}]}, "2075": {"lines": [{"number": 187, "content": "    assert(created); // robot must exist", "is_target": false}, {"number": 188, "content": "", "is_target": false}, {"number": 189, "content": "    for (vector<Primitive*>::iterator i = objects.begin(); i!= objects.end(); ++i) override {", "is_target": false}, {"number": 190, "content": "      if(*i) (*i)->update();", "is_target": false}, {"number": 191, "content": "    }", "is_target": false}, {"number": 192, "content": "    for (vector<Joint*>::iterator i = joints.begin(); i!= joints.end(); ++i) override {", "is_target": true}, {"number": 193, "content": "      if(*i) (*i)->update();", "is_target": false}, {"number": 194, "content": "    }", "is_target": false}, {"number": 195, "content": "", "is_target": false}, {"number": 196, "content": "    irSensorBank.update();", "is_target": false}, {"number": 197, "content": "  };", "is_target": false}]}, "2076": {"lines": [{"number": 643, "content": "        if(*i) delete *i;", "is_target": false}, {"number": 644, "content": "      }", "is_target": false}, {"number": 645, "content": "      whiskersprings.clear();", "is_target": false}, {"number": 646, "content": "", "is_target": false}, {"number": 647, "content": "", "is_target": false}, {"number": 648, "content": "      for (vector<Joint*>::iterator i = joints.begin(); i!= joints.end(); ++i) override {", "is_target": true}, {"number": 649, "content": "        if(*i) delete *i;", "is_target": false}, {"number": 650, "content": "      }", "is_target": false}, {"number": 651, "content": "      joints.clear();", "is_target": false}, {"number": 652, "content": "      for (vector<Primitive*>::iterator i = objects.begin(); i!= objects.end(); ++i) override {", "is_target": false}, {"number": 653, "content": "        if(*i) delete *i;", "is_target": false}]}, "2077": {"lines": [{"number": 647, "content": "", "is_target": false}, {"number": 648, "content": "      for (vector<Joint*>::iterator i = joints.begin(); i!= joints.end(); ++i) override {", "is_target": false}, {"number": 649, "content": "        if(*i) delete *i;", "is_target": false}, {"number": 650, "content": "      }", "is_target": false}, {"number": 651, "content": "      joints.clear();", "is_target": false}, {"number": 652, "content": "      for (vector<Primitive*>::iterator i = objects.begin(); i!= objects.end(); ++i) override {", "is_target": true}, {"number": 653, "content": "        if(*i) delete *i;", "is_target": false}, {"number": 654, "content": "      }", "is_target": false}, {"number": 655, "content": "      objects.clear();", "is_target": false}, {"number": 656, "content": "", "is_target": false}, {"number": 657, "content": "      odeHandle.deleteSpace();", "is_target": false}]}, "2078": {"lines": [{"number": 424, "content": "    controller->restore(file);", "is_target": false}, {"number": 425, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 426, "content": "  }", "is_target": false}, {"number": 427, "content": "", "is_target": false}, {"number": 428, "content": "", "is_target": false}, {"number": 429, "content": "};", "is_target": true}, {"number": 430, "content": "", "is_target": false}, {"number": 431, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 432, "content": "//", "is_target": false}, {"number": 433, "content": "//", "is_target": false}, {"number": 434, "content": "// }", "is_target": false}]}, "2079": {"lines": [{"number": 372, "content": "    }", "is_target": false}, {"number": 373, "content": "", "is_target": false}, {"number": 374, "content": "    odeHandle.createNewSimpleSpace(parentspace,false);", "is_target": false}, {"number": 375, "content": "    // color of joint axis and whiskers", "is_target": false}, {"number": 376, "content": "    OsgHandle osgHandleJ = osgHandle.changeColor(Color(72./255.,16./255.,16./255.));", "is_target": false}, {"number": 377, "content": "    TwoAxisServo* servo;", "is_target": true}, {"number": 378, "content": "    OneAxisServo* spring;", "is_target": false}, {"number": 379, "content": "    FixedJoint* fixedJoint;", "is_target": false}, {"number": 380, "content": "", "is_target": false}, {"number": 381, "content": "    // create body", "is_target": false}, {"number": 382, "content": "    double twidth = conf.size * conf.width ;// 1/1.5;", "is_target": false}]}, "2080": {"lines": [{"number": 374, "content": "    odeHandle.createNewSimpleSpace(parentspace,false);", "is_target": false}, {"number": 375, "content": "    // color of joint axis and whiskers", "is_target": false}, {"number": 376, "content": "    OsgHandle osgHandleJ = osgHandle.changeColor(Color(72./255.,16./255.,16./255.));", "is_target": false}, {"number": 377, "content": "    TwoAxisServo* servo;", "is_target": false}, {"number": 378, "content": "    OneAxisServo* spring;", "is_target": false}, {"number": 379, "content": "    FixedJoint* fixedJoint;", "is_target": true}, {"number": 380, "content": "", "is_target": false}, {"number": 381, "content": "    // create body", "is_target": false}, {"number": 382, "content": "    double twidth = conf.size * conf.width ;// 1/1.5;", "is_target": false}, {"number": 383, "content": "    double theight = conf.size * conf.height; // 1/4;", "is_target": false}, {"number": 384, "content": "    trunk = new Box(conf.size, twidth, theight);", "is_target": false}]}, "2081": {"lines": [{"number": 424, "content": "    controller->restore(file);", "is_target": false}, {"number": 425, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 426, "content": "  }", "is_target": false}, {"number": 427, "content": "", "is_target": false}, {"number": 428, "content": "", "is_target": false}, {"number": 429, "content": "};", "is_target": true}, {"number": 430, "content": "", "is_target": false}, {"number": 431, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 432, "content": "//", "is_target": false}, {"number": 433, "content": "//", "is_target": false}, {"number": 434, "content": "// }", "is_target": false}]}, "2082": {"lines": [{"number": 187, "content": "    assert(created); // robot must exist", "is_target": false}, {"number": 188, "content": "", "is_target": false}, {"number": 189, "content": "    for (vector<Primitive*>::iterator i = objects.begin(); i!= objects.end(); ++i) override {", "is_target": false}, {"number": 190, "content": "      if(*i) (*i)->update();", "is_target": false}, {"number": 191, "content": "    }", "is_target": false}, {"number": 192, "content": "    for (vector<Joint*>::iterator i = joints.begin(); i!= joints.end(); ++i) override {", "is_target": true}, {"number": 193, "content": "      if(*i) (*i)->update();", "is_target": false}, {"number": 194, "content": "    }", "is_target": false}, {"number": 195, "content": "", "is_target": false}, {"number": 196, "content": "    irSensorBank.update();", "is_target": false}, {"number": 197, "content": "  };", "is_target": false}]}, "2083": {"lines": [{"number": 643, "content": "        if(*i) delete *i;", "is_target": false}, {"number": 644, "content": "      }", "is_target": false}, {"number": 645, "content": "      whiskersprings.clear();", "is_target": false}, {"number": 646, "content": "", "is_target": false}, {"number": 647, "content": "", "is_target": false}, {"number": 648, "content": "      for (vector<Joint*>::iterator i = joints.begin(); i!= joints.end(); ++i) override {", "is_target": true}, {"number": 649, "content": "        if(*i) delete *i;", "is_target": false}, {"number": 650, "content": "      }", "is_target": false}, {"number": 651, "content": "      joints.clear();", "is_target": false}, {"number": 652, "content": "      for (vector<Primitive*>::iterator i = objects.begin(); i!= objects.end(); ++i) override {", "is_target": false}, {"number": 653, "content": "        if(*i) delete *i;", "is_target": false}]}, "2084": {"lines": [{"number": 647, "content": "", "is_target": false}, {"number": 648, "content": "      for (vector<Joint*>::iterator i = joints.begin(); i!= joints.end(); ++i) override {", "is_target": false}, {"number": 649, "content": "        if(*i) delete *i;", "is_target": false}, {"number": 650, "content": "      }", "is_target": false}, {"number": 651, "content": "      joints.clear();", "is_target": false}, {"number": 652, "content": "      for (vector<Primitive*>::iterator i = objects.begin(); i!= objects.end(); ++i) override {", "is_target": true}, {"number": 653, "content": "        if(*i) delete *i;", "is_target": false}, {"number": 654, "content": "      }", "is_target": false}, {"number": 655, "content": "      objects.clear();", "is_target": false}, {"number": 656, "content": "", "is_target": false}, {"number": 657, "content": "      odeHandle.deleteSpace();", "is_target": false}]}, "2085": {"lines": [{"number": 424, "content": "    controller->restore(file);", "is_target": false}, {"number": 425, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 426, "content": "  }", "is_target": false}, {"number": 427, "content": "", "is_target": false}, {"number": 428, "content": "", "is_target": false}, {"number": 429, "content": "};", "is_target": true}, {"number": 430, "content": "", "is_target": false}, {"number": 431, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 432, "content": "//", "is_target": false}, {"number": 433, "content": "//", "is_target": false}, {"number": 434, "content": "// }", "is_target": false}]}, "2086": {"lines": [{"number": 424, "content": "    controller->restore(file);", "is_target": false}, {"number": 425, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 426, "content": "  }", "is_target": false}, {"number": 427, "content": "", "is_target": false}, {"number": 428, "content": "", "is_target": false}, {"number": 429, "content": "};", "is_target": true}, {"number": 430, "content": "", "is_target": false}, {"number": 431, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 432, "content": "//", "is_target": false}, {"number": 433, "content": "//", "is_target": false}, {"number": 434, "content": "// }", "is_target": false}]}, "2087": {"lines": [{"number": 424, "content": "    controller->restore(file);", "is_target": false}, {"number": 425, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 426, "content": "  }", "is_target": false}, {"number": 427, "content": "", "is_target": false}, {"number": 428, "content": "", "is_target": false}, {"number": 429, "content": "};", "is_target": true}, {"number": 430, "content": "", "is_target": false}, {"number": 431, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 432, "content": "//", "is_target": false}, {"number": 433, "content": "//", "is_target": false}, {"number": 434, "content": "// }", "is_target": false}]}, "2088": {"lines": [{"number": 424, "content": "    controller->restore(file);", "is_target": false}, {"number": 425, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 426, "content": "  }", "is_target": false}, {"number": 427, "content": "", "is_target": false}, {"number": 428, "content": "", "is_target": false}, {"number": 429, "content": "};", "is_target": true}, {"number": 430, "content": "", "is_target": false}, {"number": 431, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 432, "content": "//", "is_target": false}, {"number": 433, "content": "//", "is_target": false}, {"number": 434, "content": "// }", "is_target": false}]}, "2089": {"lines": [{"number": 156, "content": "", "is_target": false}, {"number": 157, "content": "      c.calculateEnergy = false;", "is_target": false}, {"number": 158, "content": "", "is_target": false}, {"number": 159, "content": "      c.useContactSensors  = false;", "is_target": false}, {"number": 160, "content": "      c.legContacts.resize(6);", "is_target": false}, {"number": 161, "content": "      c.irSensors          = false;", "is_target": true}, {"number": 162, "content": "      c.irFront            = false;", "is_target": false}, {"number": 163, "content": "      c.irBack             = false;", "is_target": false}, {"number": 164, "content": "      c.irLeft             = false;", "is_target": false}, {"number": 165, "content": "      c.irRight            = false;", "is_target": false}, {"number": 166, "content": "      c.irRangeFront       = 3;", "is_target": false}]}, "2090": {"lines": [{"number": 424, "content": "    controller->restore(file);", "is_target": false}, {"number": 425, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 426, "content": "  }", "is_target": false}, {"number": 427, "content": "", "is_target": false}, {"number": 428, "content": "", "is_target": false}, {"number": 429, "content": "};", "is_target": true}, {"number": 430, "content": "", "is_target": false}, {"number": 431, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 432, "content": "//", "is_target": false}, {"number": 433, "content": "//", "is_target": false}, {"number": 434, "content": "// }", "is_target": false}]}, "2091": {"lines": [{"number": 424, "content": "    controller->restore(file);", "is_target": false}, {"number": 425, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 426, "content": "  }", "is_target": false}, {"number": 427, "content": "", "is_target": false}, {"number": 428, "content": "", "is_target": false}, {"number": 429, "content": "};", "is_target": true}, {"number": 430, "content": "", "is_target": false}, {"number": 431, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 432, "content": "//", "is_target": false}, {"number": 433, "content": "//", "is_target": false}, {"number": 434, "content": "// }", "is_target": false}]}, "2092": {"lines": [{"number": 220, "content": "    */", "is_target": false}, {"number": 221, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "    /** destroys vehicle and space", "is_target": false}, {"number": 224, "content": "     */", "is_target": false}, {"number": 225, "content": "    virtual void destroy();", "is_target": true}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "public:", "is_target": false}, {"number": 228, "content": "    HexapodConf conf;", "is_target": false}, {"number": 229, "content": "    double legmass = 0;    // leg mass", "is_target": false}, {"number": 230, "content": "    bool created = false;      // true if robot was created", "is_target": false}]}, "2093": {"lines": [{"number": 74, "content": "  /**", "is_target": false}, {"number": 75, "content": "     An Operator for lifting up a robot from time to time.", "is_target": false}, {"number": 76, "content": "   */", "is_target": false}, {"number": 77, "content": "  class LiftUpOperator : public Operator {", "is_target": false}, {"number": 78, "content": "  public:", "is_target": false}, {"number": 79, "content": "    LiftUpOperator(const LiftUpOperatorConf conf = getDefaultConf())", "is_target": true}, {"number": 80, "content": "      : Operator(\"LiftUpOperator\",\"0.8\"), conf(conf)", "is_target": false}, {"number": 81, "content": "    {", "is_target": false}, {"number": 82, "content": "      currentforce = conf.force;", "is_target": false}, {"number": 83, "content": "      addParameter(\"force\",    &this->conf.force,   0, 100, \"lift up force\");", "is_target": false}, {"number": 84, "content": "      addParameter(\"height\",   &this->conf.height,  0, 100, \"lift up height\");", "is_target": false}]}, "2094": {"lines": [{"number": 43, "content": "        maxAngle(maxAngle), force(force), minAngle(minAngle),", "is_target": false}, {"number": 44, "content": "        currentforce(force), active(false) {", "is_target": false}, {"number": 45, "content": "      if(this->minAngle<0) this->minAngle=maxAngle/2;", "is_target": false}, {"number": 46, "content": "    }", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "    virtual ManipType observe(OdeAgent* agent, const GlobalData& global, const ManipDescr& descr);", "is_target": true}, {"number": 49, "content": "  protected:", "is_target": false}, {"number": 50, "content": "    Axis robotAxis;", "is_target": false}, {"number": 51, "content": "    Axis globalAxis;", "is_target": false}, {"number": 52, "content": "    double maxAngle = 0;", "is_target": false}, {"number": 53, "content": "    double force = 0;", "is_target": false}]}, "2095": {"lines": [{"number": 100, "content": "      c.force              = 1;", "is_target": false}, {"number": 101, "content": "      c.visualHeight       = 0.5;", "is_target": false}, {"number": 102, "content": "      return c;", "is_target": false}, {"number": 103, "content": "    }", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "    virtual ManipType observe(OdeAgent* agent, const GlobalData& global, const ManipDescr& descr);", "is_target": true}, {"number": 106, "content": "  protected:", "is_target": false}, {"number": 107, "content": "    LiftUpOperatorConf conf;", "is_target": false}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "    double currentforce = 0;", "is_target": false}, {"number": 110, "content": "  };", "is_target": false}]}, "2096": {"lines": [{"number": 143, "content": "        if(dim & Z)", "is_target": false}, {"number": 144, "content": "          addParameterDef(\"point_z\", &pz, point.z(), -100, 100,\"pull to point z position\");", "is_target": false}, {"number": 145, "content": "      }", "is_target": false}, {"number": 146, "content": "    }", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "    virtual ManipType observe(OdeAgent* agent, const GlobalData& global, const ManipDescr& descr);", "is_target": true}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "  protected:", "is_target": false}, {"number": 153, "content": "    Pos point;", "is_target": false}]}, "2097": {"lines": [{"number": 179, "content": "                   \"force of the boxring to keep robots inside\");", "is_target": false}, {"number": 180, "content": "      addParameter(\"boxringsize\", &this->size,   .5, 100,", "is_target": false}, {"number": 181, "content": "                   \"size of boxring/spherical arena (in radius or half-length)\");", "is_target": false}, {"number": 182, "content": "    }", "is_target": false}, {"number": 183, "content": "", "is_target": false}, {"number": 184, "content": "    virtual ManipType observe(OdeAgent* agent, const GlobalData& global, const ManipDescr& descr);", "is_target": true}, {"number": 185, "content": "", "is_target": false}, {"number": 186, "content": "  protected:", "is_target": false}, {"number": 187, "content": "", "is_target": false}, {"number": 188, "content": "    Pos center;", "is_target": false}, {"number": 189, "content": "    double size = 0;", "is_target": false}]}, "2098": {"lines": [{"number": 64, "content": "    c.useS = false;", "is_target": false}, {"number": 65, "content": "    c.initUnitMatrix = true;", "is_target": false}, {"number": 66, "content": "    return c;", "is_target": false}, {"number": 67, "content": "  }", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": true}, {"number": 70, "content": "", "is_target": false}, {"number": 71, "content": "  virtual ~SoML();", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 74, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "2099": {"lines": [{"number": 66, "content": "    return c;", "is_target": false}, {"number": 67, "content": "  }", "is_target": false}, {"number": 68, "content": "", "is_target": false}, {"number": 69, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 70, "content": "", "is_target": false}, {"number": 71, "content": "  virtual ~SoML();", "is_target": true}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 74, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 75, "content": "    return number_sensors;", "is_target": false}, {"number": 76, "content": "  }", "is_target": false}]}, "2100": {"lines": [{"number": 79, "content": "    return number_motors;", "is_target": false}, {"number": 80, "content": "  }", "is_target": false}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 83, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 84, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 85, "content": "", "is_target": false}, {"number": 86, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 87, "content": "  virtual void stepNoLearning(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "  // motor babbling: learn the basic relations from observed sensors/motors", "is_target": false}]}, "2101": {"lines": [{"number": 82, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 83, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 84, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 85, "content": "", "is_target": false}, {"number": 86, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 87, "content": "  virtual void stepNoLearning(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "  // motor babbling: learn the basic relations from observed sensors/motors", "is_target": false}, {"number": 90, "content": "  virtual void motorBabblingStep(const sensor*,", "is_target": false}, {"number": 91, "content": "                                 int number_sensors,", "is_target": false}, {"number": 92, "content": "                                 const motor*,", "is_target": false}]}, "2102": {"lines": [{"number": 85, "content": "", "is_target": false}, {"number": 86, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 87, "content": "  virtual void stepNoLearning(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "  // motor babbling: learn the basic relations from observed sensors/motors", "is_target": false}, {"number": 90, "content": "  virtual void motorBabblingStep(const sensor*,", "is_target": true}, {"number": 91, "content": "                                 int number_sensors,", "is_target": false}, {"number": 92, "content": "                                 const motor*,", "is_target": false}, {"number": 93, "content": "                                 int number_motors);", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  /***** STOREABLE ****/", "is_target": false}]}, "2103": {"lines": [{"number": 45, "content": " */", "is_target": false}, {"number": 46, "content": "class DerInf : public InvertMotorController, public Storeable {", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "public:", "is_target": false}, {"number": 49, "content": "  explicit DerInf(const DerInfConf& conf = getDefaultConf());", "is_target": false}, {"number": 50, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randg);", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  virtual ~DerInf();", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 55, "content": "  virtual int getSensorNumber() const override {", "is_target": false}]}, "2104": {"lines": [{"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "public:", "is_target": false}, {"number": 49, "content": "  explicit DerInf(const DerInfConf& conf = getDefaultConf());", "is_target": false}, {"number": 50, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randg);", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  virtual ~DerInf();", "is_target": true}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "  /// returns the number of sensors the controller was initialised with or 0 if not initialised", "is_target": false}, {"number": 55, "content": "  virtual int getSensorNumber() const override {", "is_target": false}, {"number": 56, "content": "    return number_sensors;", "is_target": false}, {"number": 57, "content": "  }", "is_target": false}]}, "2105": {"lines": [{"number": 60, "content": "    return number_motors;", "is_target": false}, {"number": 61, "content": "  }", "is_target": false}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 64, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 65, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": true}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 68, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": false}, {"number": 69, "content": "                              int number_sensors,", "is_target": false}, {"number": 70, "content": "                              motor*,", "is_target": false}]}, "2106": {"lines": [{"number": 63, "content": "  /// performs one step (includes learning).", "is_target": false}, {"number": 64, "content": "  /// Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 65, "content": "  virtual void step(const sensor*, int number_sensors, motor*, int number_motors);", "is_target": false}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "  /// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}, {"number": 68, "content": "  virtual void stepNoLearning(const sensor*,", "is_target": true}, {"number": 69, "content": "                              int number_sensors,", "is_target": false}, {"number": 70, "content": "                              motor*,", "is_target": false}, {"number": 71, "content": "                              int number_motors);", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  /**************  STOREABLE **********************************/", "is_target": false}]}, "2107": {"lines": [{"number": 70, "content": "                              motor*,", "is_target": false}, {"number": 71, "content": "                              int number_motors);", "is_target": false}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 74, "content": "  /** stores the controller values to a given file. */", "is_target": false}, {"number": 75, "content": "  virtual bool store(FILE* f)  const;", "is_target": true}, {"number": 76, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 77, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 80, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}]}, "2108": {"lines": [{"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "  /**************  STOREABLE **********************************/", "is_target": false}, {"number": 74, "content": "  /** stores the controller values to a given file. */", "is_target": false}, {"number": 75, "content": "  virtual bool store(FILE* f)  const;", "is_target": false}, {"number": 76, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 77, "content": "  virtual bool restore(FILE* f);", "is_target": true}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 80, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 81, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 82, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}]}, "2109": {"lines": [{"number": 75, "content": "  virtual bool store(FILE* f)  const;", "is_target": false}, {"number": 76, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 77, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 80, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": true}, {"number": 81, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 82, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 83, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  static DerInfConf getDefaultConf() {", "is_target": false}]}, "2110": {"lines": [{"number": 76, "content": "  /** loads the controller values from a given file. */", "is_target": false}, {"number": 77, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 80, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 81, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": true}, {"number": 82, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 83, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  static DerInfConf getDefaultConf() {", "is_target": false}, {"number": 86, "content": "    DerInfConf c;", "is_target": false}]}, "2111": {"lines": [{"number": 77, "content": "  virtual bool restore(FILE* f);", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 80, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 81, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 82, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": true}, {"number": 83, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": false}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  static DerInfConf getDefaultConf() {", "is_target": false}, {"number": 86, "content": "    DerInfConf c;", "is_target": false}, {"number": 87, "content": "    c.buffersize = 50;", "is_target": false}]}, "2112": {"lines": [{"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  /************** INSPECTABLE ********************************/", "is_target": false}, {"number": 80, "content": "  virtual std::list<iparamkey> getInternalParamNames()  const;", "is_target": false}, {"number": 81, "content": "  virtual std::list<iparamval> getInternalParams()  const;", "is_target": false}, {"number": 82, "content": "  virtual std::list<ILayer> getStructuralLayers()  const;", "is_target": false}, {"number": 83, "content": "  virtual std::list<IConnection> getStructuralConnections()  const;", "is_target": true}, {"number": 84, "content": "", "is_target": false}, {"number": 85, "content": "  static DerInfConf getDefaultConf() {", "is_target": false}, {"number": 86, "content": "    DerInfConf c;", "is_target": false}, {"number": 87, "content": "    c.buffersize = 50;", "is_target": false}, {"number": 88, "content": "    c.cInit = 1.05;", "is_target": false}]}, "2113": {"lines": [{"number": 112, "content": "     * @param conf configuration object", "is_target": false}, {"number": 113, "content": "     */", "is_target": false}, {"number": 114, "content": "    Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle, const HexapodConf& conf,", "is_target": false}, {"number": 115, "content": "               const std::string& name);", "is_target": false}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "    virtual ~Hexapod() { destroy(); }", "is_target": true}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "    static HexapodConf getDefaultConf() {", "is_target": false}, {"number": 120, "content": "      HexapodConf c;", "is_target": false}, {"number": 121, "content": "      c.size               = 1;", "is_target": false}, {"number": 122, "content": "      c.width              = 1.0/3.0; //1.0/1.5", "is_target": false}]}, "2114": {"lines": [{"number": 173, "content": "", "is_target": false}, {"number": 174, "content": "", "is_target": false}, {"number": 175, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 176, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 177, "content": "    */", "is_target": false}, {"number": 178, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 179, "content": "", "is_target": false}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "    /** this function is called in each timestep. It should perform robot-internal checks,", "is_target": false}, {"number": 182, "content": "        like space-internal collision detection, sensor resets/update etc.", "is_target": false}, {"number": 183, "content": "        @param globalData structure that contains global data from the simulation environment", "is_target": false}]}, "2115": {"lines": [{"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "    /** this function is called in each timestep. It should perform robot-internal checks,", "is_target": false}, {"number": 182, "content": "        like space-internal collision detection, sensor resets/update etc.", "is_target": false}, {"number": 183, "content": "        @param globalData structure that contains global data from the simulation environment", "is_target": false}, {"number": 184, "content": "    */", "is_target": false}, {"number": 185, "content": "    virtual void doInternalStuff(const GlobalData& globalData);", "is_target": true}, {"number": 186, "content": "", "is_target": false}, {"number": 187, "content": "", "is_target": false}, {"number": 188, "content": "    /**", "is_target": false}, {"number": 189, "content": "     * calculates the total energy consumption of all servos.", "is_target": false}, {"number": 190, "content": "     */", "is_target": false}]}, "2116": {"lines": [{"number": 203, "content": "    [[nodiscard]] virtual Position getPosition() const override {", "is_target": false}, {"number": 204, "content": "            return Position(position[0], position[1], position[2]);", "is_target": false}, {"number": 205, "content": "    }", "is_target": false}, {"number": 206, "content": "", "is_target": false}, {"number": 207, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 208, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 209, "content": "", "is_target": false}, {"number": 210, "content": "    virtual void resetMotorPower(double power);", "is_target": false}, {"number": 211, "content": "", "is_target": false}, {"number": 212, "content": "    virtual double getPower() const;", "is_target": false}, {"number": 213, "content": "", "is_target": false}]}, "2117": {"lines": [{"number": 210, "content": "    virtual void resetMotorPower(double power);", "is_target": false}, {"number": 211, "content": "", "is_target": false}, {"number": 212, "content": "    virtual double getPower() const;", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "    /** the main object of the robot, which is used for position and speed tracking */", "is_target": false}, {"number": 215, "content": "    virtual const Primitive* getMainPrimitive() const { return objects[0]; }", "is_target": true}, {"number": 216, "content": "  protected:", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "    /** creates vehicle at desired pose", "is_target": false}, {"number": 219, "content": "        @param pose 4x4 pose matrix", "is_target": false}, {"number": 220, "content": "    */", "is_target": false}]}, "2118": {"lines": [{"number": 424, "content": "    controller->restore(file);", "is_target": false}, {"number": 425, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 426, "content": "  }", "is_target": false}, {"number": 427, "content": "", "is_target": false}, {"number": 428, "content": "", "is_target": false}, {"number": 429, "content": "};", "is_target": true}, {"number": 430, "content": "", "is_target": false}, {"number": 431, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 432, "content": "//", "is_target": false}, {"number": 433, "content": "//", "is_target": false}, {"number": 434, "content": "// }", "is_target": false}]}, "2119": {"lines": [{"number": 83, "content": "                                               int number_steps_for_averaging_) {", "is_target": false}, {"number": 84, "content": "    // number_steps_for_averaging_ must not be larger than buffersize", "is_target": false}, {"number": 85, "content": "    assert(static_cast<int>(number_steps_for_averaging_) <= buffersize);", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "    matrix::Matrix result(buffer[t % buffersize]);", "is_target": false}, {"number": 88, "content": "    for (int k = 1; k < number_steps_for_averaging_; ++k) {", "is_target": true}, {"number": 89, "content": "      result += buffer[(t - k + buffersize) % buffersize];", "is_target": false}, {"number": 90, "content": "    }", "is_target": false}, {"number": 91, "content": "    result *= 1 / (static_cast<double>(number_steps_for_averaging_)); // scalar multiplication", "is_target": false}, {"number": 92, "content": "    return result;", "is_target": false}, {"number": 93, "content": "  };", "is_target": false}]}, "2120": {"lines": [{"number": 272, "content": "  matrix::Matrix calculateSmoothValuesVec(const std::vector<matrix::Matrix>& buffer, int number_steps_for_averaging_) {", "is_target": false}, {"number": 273, "content": "    // number_steps_for_averaging_ must not be larger than buffersize", "is_target": false}, {"number": 274, "content": "    assert(static_cast<unsigned>(number_steps_for_averaging_) <= buffersize);", "is_target": false}, {"number": 275, "content": "    ", "is_target": false}, {"number": 276, "content": "    matrix::Matrix result(buffer[t % buffersize]);", "is_target": false}, {"number": 277, "content": "    for (int k = 1; k < number_steps_for_averaging_; ++k) {", "is_target": true}, {"number": 278, "content": "      result += buffer[(t - k + buffersize) % buffersize];", "is_target": false}, {"number": 279, "content": "    }", "is_target": false}, {"number": 280, "content": "    result *= 1 / (static_cast<double>(number_steps_for_averaging_)); // scalar multiplication", "is_target": false}, {"number": 281, "content": "    return result;", "is_target": false}, {"number": 282, "content": "  }", "is_target": false}]}, "2121": {"lines": [{"number": 214, "content": "  matrix::Matrix calculateSmoothValuesVec(const std::vector<matrix::Matrix>& buffer, int number_steps_for_averaging_) {", "is_target": false}, {"number": 215, "content": "    // number_steps_for_averaging_ must not be larger than buffersize", "is_target": false}, {"number": 216, "content": "    assert(static_cast<unsigned>(number_steps_for_averaging_) <= buffersize);", "is_target": false}, {"number": 217, "content": "    ", "is_target": false}, {"number": 218, "content": "    matrix::Matrix result(buffer[t % buffersize]);", "is_target": false}, {"number": 219, "content": "    for (int k = 1; k < number_steps_for_averaging_; ++k) {", "is_target": true}, {"number": 220, "content": "      result += buffer[(t - k + buffersize) % buffersize];", "is_target": false}, {"number": 221, "content": "    }", "is_target": false}, {"number": 222, "content": "    result *= 1 / (static_cast<double>(number_steps_for_averaging_)); // scalar multiplication", "is_target": false}, {"number": 223, "content": "    return result;", "is_target": false}, {"number": 224, "content": "  }", "is_target": false}]}, "2122": {"lines": [{"number": 36, "content": "  return tanh(z);", "is_target": false}, {"number": 37, "content": "};", "is_target": false}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "/// first dervative", "is_target": false}, {"number": 40, "content": "inline static double g_s(double z) {", "is_target": false}, {"number": 41, "content": "  double k = tanh(z);", "is_target": true}, {"number": 42, "content": "  return 1.025 - k * k;", "is_target": false}, {"number": 43, "content": "  //  return 1/((1+0.5 * z*z)*(1+0.5 * z*z));    // softer", "is_target": false}, {"number": 44, "content": "  // return 1/(1+log(1+z*z)); // even softer", "is_target": false}, {"number": 45, "content": "};", "is_target": false}, {"number": 46, "content": "", "is_target": false}]}, "2123": {"lines": [{"number": 49, "content": "  return 1 / ((1 + 0.5 * z * z) * (1 + 0.5 * z * z));", "is_target": false}, {"number": 50, "content": "};", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "/// inverse of the first derivative", "is_target": false}, {"number": 53, "content": "inline double g_s_inv(double z) {", "is_target": false}, {"number": 54, "content": "  double k = tanh(z);", "is_target": true}, {"number": 55, "content": "  return 1 / (1.025 - k * k);", "is_target": false}, {"number": 56, "content": "  // return 1+z*z; // softer", "is_target": false}, {"number": 57, "content": "  // return 1+log(1+z*z); // even softer", "is_target": false}, {"number": 58, "content": "};", "is_target": false}, {"number": 59, "content": "", "is_target": false}]}, "2124": {"lines": [{"number": 58, "content": "};", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "/** \\f[ g'(z+xsi) = 1-(tanh(z+xsi))^2 \\f] with additional clipping */", "is_target": false}, {"number": 61, "content": "double inline g_s(double z, double xsi) {", "is_target": false}, {"number": 62, "content": "  double Z = clip(z, -3.0, 3.0) + clip(xsi, -1.0, 1.0);", "is_target": false}, {"number": 63, "content": "  double k = tanh(Z); // approximation with Mittelwertsatz", "is_target": true}, {"number": 64, "content": "  return 1 - k * k;", "is_target": false}, {"number": 65, "content": "};", "is_target": false}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "/** soft version: \\f[ g'(z+xsi) = 1/(1+(z+xsi)^2 \\f] with additional clipping */", "is_target": false}, {"number": 68, "content": "double inline g_s_soft(double z, double xsi) {", "is_target": false}]}, "2125": {"lines": [{"number": 89, "content": "    \\f[\\frac{\\partial}{\\partial z} \\frac{1}{g'(Z)} = \\frac{g''}{g'^2} \\f]", "is_target": false}, {"number": 90, "content": "    again with clipped Z", "is_target": false}, {"number": 91, "content": " */", "is_target": false}, {"number": 92, "content": "double inline derive_g_s_inv_exact_clip(double z, double xsi) {", "is_target": false}, {"number": 93, "content": "  double Z = clip(z, -3.0, 3.0) + clip(xsi, -1.0, 1.0);", "is_target": false}, {"number": 94, "content": "  double k = tanh(Z); // approximation with Mittelwertsatz", "is_target": true}, {"number": 95, "content": "  return -2 * k / (1 - k * k);", "is_target": false}, {"number": 96, "content": "}", "is_target": false}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "/** \\f[ g'(z) = 1-(z+\\xi)^2 \\f] which is the series expansion to the second order", "is_target": false}, {"number": 99, "content": " */", "is_target": false}]}, "2126": {"lines": [{"number": 240, "content": "  matrix::Matrix calculateSmoothValuesVec(const std::vector<matrix::Matrix>& buffer, int number_steps_for_averaging_) {", "is_target": false}, {"number": 241, "content": "    // number_steps_for_averaging_ must not be larger than buffersize", "is_target": false}, {"number": 242, "content": "    assert(static_cast<unsigned>(number_steps_for_averaging_) <= buffersize);", "is_target": false}, {"number": 243, "content": "    ", "is_target": false}, {"number": 244, "content": "    matrix::Matrix result(buffer[t % buffersize]);", "is_target": false}, {"number": 245, "content": "    for (int k = 1; k < number_steps_for_averaging_; ++k) {", "is_target": true}, {"number": 246, "content": "      result += buffer[(t - k + buffersize) % buffersize];", "is_target": false}, {"number": 247, "content": "    }", "is_target": false}, {"number": 248, "content": "    result *= 1 / (static_cast<double>(number_steps_for_averaging_)); // scalar multiplication", "is_target": false}, {"number": 249, "content": "    return result;", "is_target": false}, {"number": 250, "content": "  }", "is_target": false}]}, "2127": {"lines": [{"number": 74, "content": "  /**", "is_target": false}, {"number": 75, "content": "     An Operator for lifting up a robot from time to time.", "is_target": false}, {"number": 76, "content": "   */", "is_target": false}, {"number": 77, "content": "  class LiftUpOperator : public Operator {", "is_target": false}, {"number": 78, "content": "  public:", "is_target": false}, {"number": 79, "content": "    LiftUpOperator(const LiftUpOperatorConf conf = getDefaultConf())", "is_target": true}, {"number": 80, "content": "      : Operator(\"LiftUpOperator\",\"0.8\"), conf(conf)", "is_target": false}, {"number": 81, "content": "    {", "is_target": false}, {"number": 82, "content": "      currentforce = conf.force;", "is_target": false}, {"number": 83, "content": "      addParameter(\"force\",    &this->conf.force,   0, 100, \"lift up force\");", "is_target": false}, {"number": 84, "content": "      addParameter(\"height\",   &this->conf.height,  0, 100, \"lift up height\");", "is_target": false}]}, "2128": {"lines": [{"number": 387, "content": "    controller->restore(file);", "is_target": false}, {"number": 388, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 389, "content": "  }", "is_target": false}, {"number": 390, "content": "", "is_target": false}, {"number": 391, "content": "", "is_target": false}, {"number": 392, "content": "};", "is_target": true}, {"number": 393, "content": "", "is_target": false}, {"number": 394, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 395, "content": "//", "is_target": false}, {"number": 396, "content": "//", "is_target": false}, {"number": 397, "content": "// }", "is_target": false}]}, "2129": {"lines": [{"number": 387, "content": "    controller->restore(file);", "is_target": false}, {"number": 388, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 389, "content": "  }", "is_target": false}, {"number": 390, "content": "", "is_target": false}, {"number": 391, "content": "", "is_target": false}, {"number": 392, "content": "};", "is_target": true}, {"number": 393, "content": "", "is_target": false}, {"number": 394, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 395, "content": "//", "is_target": false}, {"number": 396, "content": "//", "is_target": false}, {"number": 397, "content": "// }", "is_target": false}]}, "2130": {"lines": [{"number": 387, "content": "    controller->restore(file);", "is_target": false}, {"number": 388, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 389, "content": "  }", "is_target": false}, {"number": 390, "content": "", "is_target": false}, {"number": 391, "content": "", "is_target": false}, {"number": 392, "content": "};", "is_target": true}, {"number": 393, "content": "", "is_target": false}, {"number": 394, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 395, "content": "//", "is_target": false}, {"number": 396, "content": "//", "is_target": false}, {"number": 397, "content": "// }", "is_target": false}]}, "2131": {"lines": [{"number": 387, "content": "    controller->restore(file);", "is_target": false}, {"number": 388, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 389, "content": "  }", "is_target": false}, {"number": 390, "content": "", "is_target": false}, {"number": 391, "content": "", "is_target": false}, {"number": 392, "content": "};", "is_target": true}, {"number": 393, "content": "", "is_target": false}, {"number": 394, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 395, "content": "//", "is_target": false}, {"number": 396, "content": "//", "is_target": false}, {"number": 397, "content": "// }", "is_target": false}]}, "2132": {"lines": [{"number": 387, "content": "    controller->restore(file);", "is_target": false}, {"number": 388, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 389, "content": "  }", "is_target": false}, {"number": 390, "content": "", "is_target": false}, {"number": 391, "content": "", "is_target": false}, {"number": 392, "content": "};", "is_target": true}, {"number": 393, "content": "", "is_target": false}, {"number": 394, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 395, "content": "//", "is_target": false}, {"number": 396, "content": "//", "is_target": false}, {"number": 397, "content": "// }", "is_target": false}]}, "2133": {"lines": [{"number": 387, "content": "    controller->restore(file);", "is_target": false}, {"number": 388, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 389, "content": "  }", "is_target": false}, {"number": 390, "content": "", "is_target": false}, {"number": 391, "content": "", "is_target": false}, {"number": 392, "content": "};", "is_target": true}, {"number": 393, "content": "", "is_target": false}, {"number": 394, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 395, "content": "//", "is_target": false}, {"number": 396, "content": "//", "is_target": false}, {"number": 397, "content": "// }", "is_target": false}]}, "2134": {"lines": [{"number": 387, "content": "    controller->restore(file);", "is_target": false}, {"number": 388, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 389, "content": "  }", "is_target": false}, {"number": 390, "content": "", "is_target": false}, {"number": 391, "content": "", "is_target": false}, {"number": 392, "content": "};", "is_target": true}, {"number": 393, "content": "", "is_target": false}, {"number": 394, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 395, "content": "//", "is_target": false}, {"number": 396, "content": "//", "is_target": false}, {"number": 397, "content": "// }", "is_target": false}]}, "2135": {"lines": [{"number": 387, "content": "    controller->restore(file);", "is_target": false}, {"number": 388, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 389, "content": "  }", "is_target": false}, {"number": 390, "content": "", "is_target": false}, {"number": 391, "content": "", "is_target": false}, {"number": 392, "content": "};", "is_target": true}, {"number": 393, "content": "", "is_target": false}, {"number": 394, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 395, "content": "//", "is_target": false}, {"number": 396, "content": "//", "is_target": false}, {"number": 397, "content": "// }", "is_target": false}]}, "2136": {"lines": [{"number": 387, "content": "    controller->restore(file);", "is_target": false}, {"number": 388, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 389, "content": "  }", "is_target": false}, {"number": 390, "content": "", "is_target": false}, {"number": 391, "content": "", "is_target": false}, {"number": 392, "content": "};", "is_target": true}, {"number": 393, "content": "", "is_target": false}, {"number": 394, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 395, "content": "//", "is_target": false}, {"number": 396, "content": "//", "is_target": false}, {"number": 397, "content": "// }", "is_target": false}]}, "2137": {"lines": [{"number": 424, "content": "    controller->restore(file);", "is_target": false}, {"number": 425, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 426, "content": "  }", "is_target": false}, {"number": 427, "content": "", "is_target": false}, {"number": 428, "content": "", "is_target": false}, {"number": 429, "content": "};", "is_target": true}, {"number": 430, "content": "", "is_target": false}, {"number": 431, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 432, "content": "//", "is_target": false}, {"number": 433, "content": "//", "is_target": false}, {"number": 434, "content": "// }", "is_target": false}]}, "2138": {"lines": [{"number": 424, "content": "    controller->restore(file);", "is_target": false}, {"number": 425, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 426, "content": "  }", "is_target": false}, {"number": 427, "content": "", "is_target": false}, {"number": 428, "content": "", "is_target": false}, {"number": 429, "content": "};", "is_target": true}, {"number": 430, "content": "", "is_target": false}, {"number": 431, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 432, "content": "//", "is_target": false}, {"number": 433, "content": "//", "is_target": false}, {"number": 434, "content": "// }", "is_target": false}]}, "2139": {"lines": [{"number": 424, "content": "    controller->restore(file);", "is_target": false}, {"number": 425, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 426, "content": "  }", "is_target": false}, {"number": 427, "content": "", "is_target": false}, {"number": 428, "content": "", "is_target": false}, {"number": 429, "content": "};", "is_target": true}, {"number": 430, "content": "", "is_target": false}, {"number": 431, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 432, "content": "//", "is_target": false}, {"number": 433, "content": "//", "is_target": false}, {"number": 434, "content": "// }", "is_target": false}]}, "2140": {"lines": [{"number": 424, "content": "    controller->restore(file);", "is_target": false}, {"number": 425, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 426, "content": "  }", "is_target": false}, {"number": 427, "content": "", "is_target": false}, {"number": 428, "content": "", "is_target": false}, {"number": 429, "content": "};", "is_target": true}, {"number": 430, "content": "", "is_target": false}, {"number": 431, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 432, "content": "//", "is_target": false}, {"number": 433, "content": "//", "is_target": false}, {"number": 434, "content": "// }", "is_target": false}]}, "2141": {"lines": [{"number": 424, "content": "    controller->restore(file);", "is_target": false}, {"number": 425, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 426, "content": "  }", "is_target": false}, {"number": 427, "content": "", "is_target": false}, {"number": 428, "content": "", "is_target": false}, {"number": 429, "content": "};", "is_target": true}, {"number": 430, "content": "", "is_target": false}, {"number": 431, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 432, "content": "//", "is_target": false}, {"number": 433, "content": "//", "is_target": false}, {"number": 434, "content": "// }", "is_target": false}]}, "2142": {"lines": [{"number": 424, "content": "    controller->restore(file);", "is_target": false}, {"number": 425, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 426, "content": "  }", "is_target": false}, {"number": 427, "content": "", "is_target": false}, {"number": 428, "content": "", "is_target": false}, {"number": 429, "content": "};", "is_target": true}, {"number": 430, "content": "", "is_target": false}, {"number": 431, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 432, "content": "//", "is_target": false}, {"number": 433, "content": "//", "is_target": false}, {"number": 434, "content": "// }", "is_target": false}]}, "2143": {"lines": [{"number": 424, "content": "    controller->restore(file);", "is_target": false}, {"number": 425, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 426, "content": "  }", "is_target": false}, {"number": 427, "content": "", "is_target": false}, {"number": 428, "content": "", "is_target": false}, {"number": 429, "content": "};", "is_target": true}, {"number": 430, "content": "", "is_target": false}, {"number": 431, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 432, "content": "//", "is_target": false}, {"number": 433, "content": "//", "is_target": false}, {"number": 434, "content": "// }", "is_target": false}]}, "2144": {"lines": [{"number": 424, "content": "    controller->restore(file);", "is_target": false}, {"number": 425, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 426, "content": "  }", "is_target": false}, {"number": 427, "content": "", "is_target": false}, {"number": 428, "content": "", "is_target": false}, {"number": 429, "content": "};", "is_target": true}, {"number": 430, "content": "", "is_target": false}, {"number": 431, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 432, "content": "//", "is_target": false}, {"number": 433, "content": "//", "is_target": false}, {"number": 434, "content": "// }", "is_target": false}]}, "2145": {"lines": [{"number": 274, "content": "", "is_target": false}, {"number": 275, "content": "  /// calculates the city block distance static_cast<abs>(norm) of the matrix. (abs sum of absolutes / size of matrix)", "is_target": false}, {"number": 276, "content": "     virtual double calcMatrixNorm(const matrix::Matrix& m);", "is_target": false}, {"number": 277, "content": "", "is_target": false}, {"number": 278, "content": "", "is_target": false}, {"number": 279, "content": "};", "is_target": true}, {"number": 280, "content": "", "is_target": false}, {"number": 281, "content": "#endif", "is_target": false}]}, "2146": {"lines": [{"number": 424, "content": "    controller->restore(file);", "is_target": false}, {"number": 425, "content": "    if(file) fclose(file);", "is_target": false}, {"number": 426, "content": "  }", "is_target": false}, {"number": 427, "content": "", "is_target": false}, {"number": 428, "content": "", "is_target": false}, {"number": 429, "content": "};", "is_target": true}, {"number": 430, "content": "", "is_target": false}, {"number": 431, "content": "// class ThisTrackRobot{  // eine Idee, aber void addCallback (siehe oben sollte besser sein!)", "is_target": false}, {"number": 432, "content": "//", "is_target": false}, {"number": 433, "content": "//", "is_target": false}, {"number": 434, "content": "// }", "is_target": false}]}, "2147": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "2148": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "2149": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "2150": {"lines": [{"number": 1015, "content": "          break;", "is_target": false}, {"number": 1016, "content": "        }", "is_target": false}, {"number": 1017, "content": "    }", "is_target": false}, {"number": 1018, "content": "    return false;", "is_target": false}, {"number": 1019, "content": "  }", "is_target": false}, {"number": 1020, "content": "};", "is_target": true}, {"number": 1021, "content": "", "is_target": false}, {"number": 1022, "content": "", "is_target": false}, {"number": 1023, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 1024, "content": "{", "is_target": false}, {"number": 1025, "content": "  ThisSim sim;", "is_target": false}]}, "2151": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "2152": {"lines": [{"number": 1015, "content": "          break;", "is_target": false}, {"number": 1016, "content": "        }", "is_target": false}, {"number": 1017, "content": "    }", "is_target": false}, {"number": 1018, "content": "    return false;", "is_target": false}, {"number": 1019, "content": "  }", "is_target": false}, {"number": 1020, "content": "};", "is_target": true}, {"number": 1021, "content": "", "is_target": false}, {"number": 1022, "content": "", "is_target": false}, {"number": 1023, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 1024, "content": "{", "is_target": false}, {"number": 1025, "content": "  ThisSim sim;", "is_target": false}]}, "2153": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "2154": {"lines": [{"number": 1015, "content": "          break;", "is_target": false}, {"number": 1016, "content": "        }", "is_target": false}, {"number": 1017, "content": "    }", "is_target": false}, {"number": 1018, "content": "    return false;", "is_target": false}, {"number": 1019, "content": "  }", "is_target": false}, {"number": 1020, "content": "};", "is_target": true}, {"number": 1021, "content": "", "is_target": false}, {"number": 1022, "content": "", "is_target": false}, {"number": 1023, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 1024, "content": "{", "is_target": false}, {"number": 1025, "content": "  ThisSim sim;", "is_target": false}]}, "2155": {"lines": [{"number": 1015, "content": "          break;", "is_target": false}, {"number": 1016, "content": "        }", "is_target": false}, {"number": 1017, "content": "    }", "is_target": false}, {"number": 1018, "content": "    return false;", "is_target": false}, {"number": 1019, "content": "  }", "is_target": false}, {"number": 1020, "content": "};", "is_target": true}, {"number": 1021, "content": "", "is_target": false}, {"number": 1022, "content": "", "is_target": false}, {"number": 1023, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 1024, "content": "{", "is_target": false}, {"number": 1025, "content": "  ThisSim sim;", "is_target": false}]}, "2156": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "2157": {"lines": [{"number": 1015, "content": "          break;", "is_target": false}, {"number": 1016, "content": "        }", "is_target": false}, {"number": 1017, "content": "    }", "is_target": false}, {"number": 1018, "content": "    return false;", "is_target": false}, {"number": 1019, "content": "  }", "is_target": false}, {"number": 1020, "content": "};", "is_target": true}, {"number": 1021, "content": "", "is_target": false}, {"number": 1022, "content": "", "is_target": false}, {"number": 1023, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 1024, "content": "{", "is_target": false}, {"number": 1025, "content": "  ThisSim sim;", "is_target": false}]}, "2158": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "2159": {"lines": [{"number": 1015, "content": "          break;", "is_target": false}, {"number": 1016, "content": "        }", "is_target": false}, {"number": 1017, "content": "    }", "is_target": false}, {"number": 1018, "content": "    return false;", "is_target": false}, {"number": 1019, "content": "  }", "is_target": false}, {"number": 1020, "content": "};", "is_target": true}, {"number": 1021, "content": "", "is_target": false}, {"number": 1022, "content": "", "is_target": false}, {"number": 1023, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 1024, "content": "{", "is_target": false}, {"number": 1025, "content": "  ThisSim sim;", "is_target": false}]}, "2160": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "2161": {"lines": [{"number": 1015, "content": "          break;", "is_target": false}, {"number": 1016, "content": "        }", "is_target": false}, {"number": 1017, "content": "    }", "is_target": false}, {"number": 1018, "content": "    return false;", "is_target": false}, {"number": 1019, "content": "  }", "is_target": false}, {"number": 1020, "content": "};", "is_target": true}, {"number": 1021, "content": "", "is_target": false}, {"number": 1022, "content": "", "is_target": false}, {"number": 1023, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 1024, "content": "{", "is_target": false}, {"number": 1025, "content": "  ThisSim sim;", "is_target": false}]}, "2162": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "2163": {"lines": [{"number": 1015, "content": "          break;", "is_target": false}, {"number": 1016, "content": "        }", "is_target": false}, {"number": 1017, "content": "    }", "is_target": false}, {"number": 1018, "content": "    return false;", "is_target": false}, {"number": 1019, "content": "  }", "is_target": false}, {"number": 1020, "content": "};", "is_target": true}, {"number": 1021, "content": "", "is_target": false}, {"number": 1022, "content": "", "is_target": false}, {"number": 1023, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 1024, "content": "{", "is_target": false}, {"number": 1025, "content": "  ThisSim sim;", "is_target": false}]}, "2164": {"lines": [{"number": 1015, "content": "          break;", "is_target": false}, {"number": 1016, "content": "        }", "is_target": false}, {"number": 1017, "content": "    }", "is_target": false}, {"number": 1018, "content": "    return false;", "is_target": false}, {"number": 1019, "content": "  }", "is_target": false}, {"number": 1020, "content": "};", "is_target": true}, {"number": 1021, "content": "", "is_target": false}, {"number": 1022, "content": "", "is_target": false}, {"number": 1023, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 1024, "content": "{", "is_target": false}, {"number": 1025, "content": "  ThisSim sim;", "is_target": false}]}, "2165": {"lines": [{"number": 773, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 774, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 775, "content": "", "is_target": false}, {"number": 776, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 777, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 778, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 779, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 780, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 781, "content": "", "is_target": false}, {"number": 782, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 783, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.1, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2166": {"lines": [{"number": 773, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 774, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 775, "content": "", "is_target": false}, {"number": 776, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 777, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 778, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 779, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 780, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 781, "content": "", "is_target": false}, {"number": 782, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 783, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.1, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2167": {"lines": [{"number": 773, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 774, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 775, "content": "", "is_target": false}, {"number": 776, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 777, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 778, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 779, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 780, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 781, "content": "", "is_target": false}, {"number": 782, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 783, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.1, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2168": {"lines": [{"number": 193, "content": "   * updates the osg notes", "is_target": false}, {"number": 194, "content": "   */", "is_target": false}, {"number": 195, "content": "  void ZweiBeiner::update(){", "is_target": false}, {"number": 196, "content": "    assert(created); // robot must exist", "is_target": false}, {"number": 197, "content": "", "is_target": false}, {"number": 198, "content": "    for (vector<Primitive*>::iterator i = objects.begin(); i!= objects.end(); ++i) override {", "is_target": true}, {"number": 199, "content": "      if(*i) (*i)->update();", "is_target": false}, {"number": 200, "content": "    }", "is_target": false}, {"number": 201, "content": "    for (vector<Joint*>::iterator i = joints.begin(); i!= joints.end(); ++i) override {", "is_target": false}, {"number": 202, "content": "      if(*i) (*i)->update();", "is_target": false}, {"number": 203, "content": "    }", "is_target": false}]}, "2169": {"lines": [{"number": 773, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 774, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 775, "content": "", "is_target": false}, {"number": 776, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 777, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 778, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 779, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 780, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 781, "content": "", "is_target": false}, {"number": 782, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 783, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.1, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2170": {"lines": [{"number": 773, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 774, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 775, "content": "", "is_target": false}, {"number": 776, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 777, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 778, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 779, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 780, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 781, "content": "", "is_target": false}, {"number": 782, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 783, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.1, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2171": {"lines": [{"number": 773, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 774, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 775, "content": "", "is_target": false}, {"number": 776, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 777, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 778, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 779, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 780, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 781, "content": "", "is_target": false}, {"number": 782, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 783, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.1, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2172": {"lines": [{"number": 40, "content": "    }else setName(\"DelaySensor\");", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "  }", "is_target": false}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "  virtual ~DelaySensor() {", "is_target": false}, {"number": 45, "content": "    for(int k=0; k<buffer.getBufferSize(); ++k) override {", "is_target": true}, {"number": 46, "content": "      if(buffer[k]) delete[] buffer[k];", "is_target": false}, {"number": 47, "content": "    }", "is_target": false}, {"number": 48, "content": "  }", "is_target": false}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "  virtual void init(Primitive* own, Joint* joint = nullptr) override {", "is_target": false}]}, "2173": {"lines": [{"number": 773, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 774, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 775, "content": "", "is_target": false}, {"number": 776, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 777, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 778, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 779, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 780, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 781, "content": "", "is_target": false}, {"number": 782, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 783, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.1, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2174": {"lines": [{"number": 773, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 774, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 775, "content": "", "is_target": false}, {"number": 776, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 777, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 778, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 779, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 780, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 781, "content": "", "is_target": false}, {"number": 782, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 783, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.1, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2175": {"lines": [{"number": 773, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 774, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 775, "content": "", "is_target": false}, {"number": 776, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 777, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 778, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 779, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 780, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 781, "content": "", "is_target": false}, {"number": 782, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 783, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.1, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2176": {"lines": [{"number": 20, "content": "#include \"randomdyn.h\"", "is_target": false}, {"number": 21, "content": "", "is_target": false}, {"number": 22, "content": "using namespace matrix;", "is_target": false}, {"number": 23, "content": "using namespace std;", "is_target": false}, {"number": 24, "content": "", "is_target": false}, {"number": 25, "content": "RandomDyn::RandomDyn(const RandomDynConf& conf_)", "is_target": true}, {"number": 26, "content": "  : AbstractController(\"RandomDyn\", \"0.2\"),", "is_target": false}, {"number": 27, "content": "    conf(conf_), t(0)", "is_target": false}, {"number": 28, "content": "{", "is_target": false}, {"number": 29, "content": "", "is_target": false}, {"number": 30, "content": "  addParameterDef(\"sigmaC\", &sigmaC, 0.001, 0,5, \"standard dev. for diagonal elements update\");", "is_target": false}]}, "2177": {"lines": [{"number": 20, "content": "#include \"randomdyn.h\"", "is_target": false}, {"number": 21, "content": "", "is_target": false}, {"number": 22, "content": "using namespace matrix;", "is_target": false}, {"number": 23, "content": "using namespace std;", "is_target": false}, {"number": 24, "content": "", "is_target": false}, {"number": 25, "content": "RandomDyn::RandomDyn(const RandomDynConf& conf_)", "is_target": true}, {"number": 26, "content": "  : AbstractController(\"RandomDyn\", \"0.2\"),", "is_target": false}, {"number": 27, "content": "    conf(conf_), t(0)", "is_target": false}, {"number": 28, "content": "{", "is_target": false}, {"number": 29, "content": "", "is_target": false}, {"number": 30, "content": "  addParameterDef(\"sigmaC\", &sigmaC, 0.001, 0,5, \"standard dev. for diagonal elements update\");", "is_target": false}]}, "2178": {"lines": [{"number": 42, "content": " */", "is_target": false}, {"number": 43, "content": "class RandomDyn{", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "public:", "is_target": false}, {"number": 46, "content": "  /// constructor", "is_target": false}, {"number": 47, "content": "  RandomDyn(const RandomDynConf& conf = getDefaultConf());", "is_target": true}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "  virtual ~RandomDyn();", "is_target": false}, {"number": 52, "content": "", "is_target": false}]}, "2179": {"lines": [{"number": 745, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 746, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 747, "content": "", "is_target": false}, {"number": 748, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 749, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 750, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 751, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 752, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 753, "content": "", "is_target": false}, {"number": 754, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 755, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -DONT, DONT, DONT, -DONT, DONT, DONT,", "is_target": false}]}, "2180": {"lines": [{"number": 745, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 746, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 747, "content": "", "is_target": false}, {"number": 748, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 749, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 750, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 751, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 752, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 753, "content": "", "is_target": false}, {"number": 754, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 755, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -DONT, DONT, DONT, -DONT, DONT, DONT,", "is_target": false}]}, "2181": {"lines": [{"number": 378, "content": "          break;", "is_target": false}, {"number": 379, "content": "        }", "is_target": false}, {"number": 380, "content": "    }", "is_target": false}, {"number": 381, "content": "    return false;", "is_target": false}, {"number": 382, "content": "  }", "is_target": false}, {"number": 383, "content": "};", "is_target": true}, {"number": 384, "content": "", "is_target": false}, {"number": 385, "content": "", "is_target": false}, {"number": 386, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 387, "content": "{", "is_target": false}, {"number": 388, "content": "  ThisSim sim;", "is_target": false}]}, "2182": {"lines": [{"number": 378, "content": "          break;", "is_target": false}, {"number": 379, "content": "        }", "is_target": false}, {"number": 380, "content": "    }", "is_target": false}, {"number": 381, "content": "    return false;", "is_target": false}, {"number": 382, "content": "  }", "is_target": false}, {"number": 383, "content": "};", "is_target": true}, {"number": 384, "content": "", "is_target": false}, {"number": 385, "content": "", "is_target": false}, {"number": 386, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 387, "content": "{", "is_target": false}, {"number": 388, "content": "  ThisSim sim;", "is_target": false}]}, "2183": {"lines": [{"number": 745, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 746, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 747, "content": "", "is_target": false}, {"number": 748, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 749, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 750, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 751, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 752, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 753, "content": "", "is_target": false}, {"number": 754, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 755, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -DONT, DONT, DONT, -DONT, DONT, DONT,", "is_target": false}]}, "2184": {"lines": [{"number": 378, "content": "          break;", "is_target": false}, {"number": 379, "content": "        }", "is_target": false}, {"number": 380, "content": "    }", "is_target": false}, {"number": 381, "content": "    return false;", "is_target": false}, {"number": 382, "content": "  }", "is_target": false}, {"number": 383, "content": "};", "is_target": true}, {"number": 384, "content": "", "is_target": false}, {"number": 385, "content": "", "is_target": false}, {"number": 386, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 387, "content": "{", "is_target": false}, {"number": 388, "content": "  ThisSim sim;", "is_target": false}]}, "2185": {"lines": [{"number": 745, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 746, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 747, "content": "", "is_target": false}, {"number": 748, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 749, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 750, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 751, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 752, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 753, "content": "", "is_target": false}, {"number": 754, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 755, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -DONT, DONT, DONT, -DONT, DONT, DONT,", "is_target": false}]}, "2186": {"lines": [{"number": 378, "content": "          break;", "is_target": false}, {"number": 379, "content": "        }", "is_target": false}, {"number": 380, "content": "    }", "is_target": false}, {"number": 381, "content": "    return false;", "is_target": false}, {"number": 382, "content": "  }", "is_target": false}, {"number": 383, "content": "};", "is_target": true}, {"number": 384, "content": "", "is_target": false}, {"number": 385, "content": "", "is_target": false}, {"number": 386, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 387, "content": "{", "is_target": false}, {"number": 388, "content": "  ThisSim sim;", "is_target": false}]}, "2187": {"lines": [{"number": 200, "content": "   * updates the osg notes", "is_target": false}, {"number": 201, "content": "   */", "is_target": false}, {"number": 202, "content": "  void VierBeiner::update(){", "is_target": false}, {"number": 203, "content": "    assert(created); // robot must exist", "is_target": false}, {"number": 204, "content": "", "is_target": false}, {"number": 205, "content": "    for (vector<Primitive*>::iterator i = objects.begin(); i!= objects.end(); ++i) override {", "is_target": true}, {"number": 206, "content": "      if(*i) (*i)->update();", "is_target": false}, {"number": 207, "content": "    }", "is_target": false}, {"number": 208, "content": "    for (vector<Joint*>::iterator i = joints.begin(); i!= joints.end(); ++i) override {", "is_target": false}, {"number": 209, "content": "      if(*i) (*i)->update();", "is_target": false}, {"number": 210, "content": "    }", "is_target": false}]}, "2188": {"lines": [{"number": 378, "content": "          break;", "is_target": false}, {"number": 379, "content": "        }", "is_target": false}, {"number": 380, "content": "    }", "is_target": false}, {"number": 381, "content": "    return false;", "is_target": false}, {"number": 382, "content": "  }", "is_target": false}, {"number": 383, "content": "};", "is_target": true}, {"number": 384, "content": "", "is_target": false}, {"number": 385, "content": "", "is_target": false}, {"number": 386, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 387, "content": "{", "is_target": false}, {"number": 388, "content": "  ThisSim sim;", "is_target": false}]}, "2190": {"lines": [{"number": 745, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 746, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 747, "content": "", "is_target": false}, {"number": 748, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 749, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 750, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 751, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 752, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 753, "content": "", "is_target": false}, {"number": 754, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 755, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -DONT, DONT, DONT, -DONT, DONT, DONT,", "is_target": false}]}, "2191": {"lines": [{"number": 378, "content": "          break;", "is_target": false}, {"number": 379, "content": "        }", "is_target": false}, {"number": 380, "content": "    }", "is_target": false}, {"number": 381, "content": "    return false;", "is_target": false}, {"number": 382, "content": "  }", "is_target": false}, {"number": 383, "content": "};", "is_target": true}, {"number": 384, "content": "", "is_target": false}, {"number": 385, "content": "", "is_target": false}, {"number": 386, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 387, "content": "{", "is_target": false}, {"number": 388, "content": "  ThisSim sim;", "is_target": false}]}, "2192": {"lines": [{"number": 67, "content": "  // Horse Walk from wikipedia", "is_target": false}, {"number": 68, "content": "  /* The walk is a four-beat gait that averages about 4 mph.", "is_target": false}, {"number": 69, "content": "     When walking, a horse's legs follow this sequence:", "is_target": false}, {"number": 70, "content": "     left hind leg, left front leg, right hind leg, right front leg,", "is_target": false}, {"number": 71, "content": "     in a regular 1-2-3-4 beat. .... */", "is_target": false}, {"number": 72, "content": "  double phases[4]= { w + 2*(M_PI/2),", "is_target": true}, {"number": 73, "content": "                      w + 0*(M_PI/2),", "is_target": false}, {"number": 74, "content": "                      w + 3*(M_PI/2),", "is_target": false}, {"number": 75, "content": "                      w + 1*(M_PI/2) };", "is_target": false}, {"number": 76, "content": "", "is_target": false}, {"number": 77, "content": "  motors[0] = sin(phases[0]+2)*0.8;", "is_target": false}]}, "2193": {"lines": [{"number": 745, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 746, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 747, "content": "", "is_target": false}, {"number": 748, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 749, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 750, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 751, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 752, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 753, "content": "", "is_target": false}, {"number": 754, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 755, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -DONT, DONT, DONT, -DONT, DONT, DONT,", "is_target": false}]}, "2194": {"lines": [{"number": 378, "content": "          break;", "is_target": false}, {"number": 379, "content": "        }", "is_target": false}, {"number": 380, "content": "    }", "is_target": false}, {"number": 381, "content": "    return false;", "is_target": false}, {"number": 382, "content": "  }", "is_target": false}, {"number": 383, "content": "};", "is_target": true}, {"number": 384, "content": "", "is_target": false}, {"number": 385, "content": "", "is_target": false}, {"number": 386, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 387, "content": "{", "is_target": false}, {"number": 388, "content": "  ThisSim sim;", "is_target": false}]}, "2195": {"lines": [{"number": 378, "content": "          break;", "is_target": false}, {"number": 379, "content": "        }", "is_target": false}, {"number": 380, "content": "    }", "is_target": false}, {"number": 381, "content": "    return false;", "is_target": false}, {"number": 382, "content": "  }", "is_target": false}, {"number": 383, "content": "};", "is_target": true}, {"number": 384, "content": "", "is_target": false}, {"number": 385, "content": "", "is_target": false}, {"number": 386, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 387, "content": "{", "is_target": false}, {"number": 388, "content": "  ThisSim sim;", "is_target": false}]}, "2196": {"lines": [{"number": 745, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 746, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 747, "content": "", "is_target": false}, {"number": 748, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 749, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 750, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 751, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 752, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 753, "content": "", "is_target": false}, {"number": 754, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 755, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -DONT, DONT, DONT, -DONT, DONT, DONT,", "is_target": false}]}, "2197": {"lines": [{"number": 378, "content": "          break;", "is_target": false}, {"number": 379, "content": "        }", "is_target": false}, {"number": 380, "content": "    }", "is_target": false}, {"number": 381, "content": "    return false;", "is_target": false}, {"number": 382, "content": "  }", "is_target": false}, {"number": 383, "content": "};", "is_target": true}, {"number": 384, "content": "", "is_target": false}, {"number": 385, "content": "", "is_target": false}, {"number": 386, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 387, "content": "{", "is_target": false}, {"number": 388, "content": "  ThisSim sim;", "is_target": false}]}, "2198": {"lines": [{"number": 745, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 746, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 747, "content": "", "is_target": false}, {"number": 748, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 749, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 750, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 751, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 752, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 753, "content": "", "is_target": false}, {"number": 754, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 755, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -DONT, DONT, DONT, -DONT, DONT, DONT,", "is_target": false}]}, "2199": {"lines": [{"number": 745, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 746, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 747, "content": "", "is_target": false}, {"number": 748, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 749, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 750, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 751, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 752, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 753, "content": "", "is_target": false}, {"number": 754, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 755, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -DONT, DONT, DONT, -DONT, DONT, DONT,", "is_target": false}]}, "2200": {"lines": [{"number": 165, "content": "    return false;", "is_target": false}, {"number": 166, "content": "  }", "is_target": false}, {"number": 167, "content": "", "is_target": false}, {"number": 168, "content": "", "is_target": false}, {"number": 169, "content": "", "is_target": false}, {"number": 170, "content": "};", "is_target": true}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 174, "content": "{", "is_target": false}, {"number": 175, "content": "  ThisSim sim;", "is_target": false}]}, "2201": {"lines": [{"number": 165, "content": "    return false;", "is_target": false}, {"number": 166, "content": "  }", "is_target": false}, {"number": 167, "content": "", "is_target": false}, {"number": 168, "content": "", "is_target": false}, {"number": 169, "content": "", "is_target": false}, {"number": 170, "content": "};", "is_target": true}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 174, "content": "{", "is_target": false}, {"number": 175, "content": "  ThisSim sim;", "is_target": false}]}, "2202": {"lines": [{"number": 165, "content": "    return false;", "is_target": false}, {"number": 166, "content": "  }", "is_target": false}, {"number": 167, "content": "", "is_target": false}, {"number": 168, "content": "", "is_target": false}, {"number": 169, "content": "", "is_target": false}, {"number": 170, "content": "};", "is_target": true}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 174, "content": "{", "is_target": false}, {"number": 175, "content": "  ThisSim sim;", "is_target": false}]}, "2203": {"lines": [{"number": 165, "content": "    return false;", "is_target": false}, {"number": 166, "content": "  }", "is_target": false}, {"number": 167, "content": "", "is_target": false}, {"number": 168, "content": "", "is_target": false}, {"number": 169, "content": "", "is_target": false}, {"number": 170, "content": "};", "is_target": true}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 174, "content": "{", "is_target": false}, {"number": 175, "content": "  ThisSim sim;", "is_target": false}]}, "2204": {"lines": [{"number": 165, "content": "    return false;", "is_target": false}, {"number": 166, "content": "  }", "is_target": false}, {"number": 167, "content": "", "is_target": false}, {"number": 168, "content": "", "is_target": false}, {"number": 169, "content": "", "is_target": false}, {"number": 170, "content": "};", "is_target": true}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 174, "content": "{", "is_target": false}, {"number": 175, "content": "  ThisSim sim;", "is_target": false}]}, "2205": {"lines": [{"number": 165, "content": "    return false;", "is_target": false}, {"number": 166, "content": "  }", "is_target": false}, {"number": 167, "content": "", "is_target": false}, {"number": 168, "content": "", "is_target": false}, {"number": 169, "content": "", "is_target": false}, {"number": 170, "content": "};", "is_target": true}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 174, "content": "{", "is_target": false}, {"number": 175, "content": "  ThisSim sim;", "is_target": false}]}, "2206": {"lines": [{"number": 38, "content": "#include \"tristateiafcontroller.h\"", "is_target": false}, {"number": 39, "content": "", "is_target": false}, {"number": 40, "content": "#include <selforg/matrix.h>", "is_target": false}, {"number": 41, "content": "#include <selforg/controller_misc.h>", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "TristateIAFController::TristateIAFController(const TristateIAFControllerConf& conf)", "is_target": true}, {"number": 44, "content": "    : AbstractController(\"TristateIAFController\", \"$Id$\"), conf(conf), range(1.0) {", "is_target": false}, {"number": 45, "content": "      addParameter(\"leakI\", conf.leakI);", "is_target": false}, {"number": 46, "content": "      addParameter(\"leakO\", conf.leakO);", "is_target": false}, {"number": 47, "content": "      addParameter(\"thresholdI\", conf.thresholdI);", "is_target": false}, {"number": 48, "content": "      addParameter(\"thresholdO\", conf.thresholdO);", "is_target": false}]}, "2207": {"lines": [{"number": 95, "content": " * like leakI and leakO (input and output layer)", "is_target": false}, {"number": 96, "content": " */", "is_target": false}, {"number": 97, "content": "class TristateIAFController{", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "public:", "is_target": false}, {"number": 100, "content": "  TristateIAFController(const TristateIAFControllerConf& conf = getDefaultConf());", "is_target": true}, {"number": 101, "content": "", "is_target": false}, {"number": 102, "content": "  virtual ~TristateIAFController() {}", "is_target": false}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "  static TristateIAFControllerConf getDefaultConf() const {", "is_target": false}]}, "2208": {"lines": [{"number": 165, "content": "    return false;", "is_target": false}, {"number": 166, "content": "  }", "is_target": false}, {"number": 167, "content": "", "is_target": false}, {"number": 168, "content": "", "is_target": false}, {"number": 169, "content": "", "is_target": false}, {"number": 170, "content": "};", "is_target": true}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 174, "content": "{", "is_target": false}, {"number": 175, "content": "  ThisSim sim;", "is_target": false}]}, "2209": {"lines": [{"number": 165, "content": "    return false;", "is_target": false}, {"number": 166, "content": "  }", "is_target": false}, {"number": 167, "content": "", "is_target": false}, {"number": 168, "content": "", "is_target": false}, {"number": 169, "content": "", "is_target": false}, {"number": 170, "content": "};", "is_target": true}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 174, "content": "{", "is_target": false}, {"number": 175, "content": "  ThisSim sim;", "is_target": false}]}, "2210": {"lines": [{"number": 200, "content": "  }", "is_target": false}, {"number": 201, "content": "", "is_target": false}, {"number": 202, "content": "  // add own key handling stuff here, just insert some case values", "is_target": false}, {"number": 203, "content": "virtual bool command(const OdeHandle&, const OsgHandle&, GlobalData& globalData, int key, bool down) override {", "is_target": false}, {"number": 204, "content": "    if (down) { // only when key is pressed, not when released", "is_target": false}, {"number": 205, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 206, "content": "        {", "is_target": false}, {"number": 207, "content": "        default:", "is_target": false}, {"number": 208, "content": "          return false;", "is_target": false}, {"number": 209, "content": "          break;", "is_target": false}, {"number": 210, "content": "        }", "is_target": false}]}, "2211": {"lines": [{"number": 256, "content": "  vector<Matrix> ds;", "is_target": false}, {"number": 257, "content": "  ds.resize(tau+1);", "is_target": false}, {"number": 258, "content": "  //semantic: ds[l] == \\delta s_{t-l} ", "is_target": false}, {"number": 259, "content": "  // this means the array of ds is expands backwards in time", "is_target": false}, {"number": 260, "content": "  ds[tau].set(number_sensors,1); // vector of zeros;", "is_target": false}, {"number": 261, "content": "  for(...; --l) {", "is_target": true}, {"number": 262, "content": "    ds[l] = (L_buffer[(t-(l+1))%buffersize]*ds[l+1] + xi_buffer[(t-l)%buffersize]", "is_target": false}, {"number": 263, "content": "             );//.mapP(0.2,clip); //TEST clipping outside the loop ", "is_target": false}, {"number": 264, "content": "  }", "is_target": false}, {"number": 265, "content": "  ds[0] = ds[0].mapP(0.1,clip);", "is_target": false}, {"number": 266, "content": "  Sigma                += (ds[0].multMT()-Sigma)*epsSigma;", "is_target": false}]}, "2212": {"lines": [{"number": 165, "content": "    return false;", "is_target": false}, {"number": 166, "content": "  }", "is_target": false}, {"number": 167, "content": "", "is_target": false}, {"number": 168, "content": "", "is_target": false}, {"number": 169, "content": "", "is_target": false}, {"number": 170, "content": "};", "is_target": true}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 174, "content": "{", "is_target": false}, {"number": 175, "content": "  ThisSim sim;", "is_target": false}]}, "2213": {"lines": [{"number": 140, "content": "// include simulation environment stuff", "is_target": false}, {"number": 141, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "// include agent (class for{", "is_target": false}, {"number": 144, "content": "  success", "is_target": false}, {"number": 145, "content": "}", "is_target": true}, {"number": 146, "content": "*/", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "class ThisSim{", "is_target": false}, {"number": 149, "content": "public:", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "2214": {"lines": [{"number": 140, "content": "// include simulation environment stuff", "is_target": false}, {"number": 141, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "// include agent (class for{", "is_target": false}, {"number": 144, "content": "  success", "is_target": false}, {"number": 145, "content": "}", "is_target": true}, {"number": 146, "content": "*/", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "class ThisSim{", "is_target": false}, {"number": 149, "content": "public:", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "2215": {"lines": [{"number": 140, "content": "// include simulation environment stuff", "is_target": false}, {"number": 141, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "// include agent (class for{", "is_target": false}, {"number": 144, "content": "  success", "is_target": false}, {"number": 145, "content": "}", "is_target": true}, {"number": 146, "content": "*/", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "class ThisSim{", "is_target": false}, {"number": 149, "content": "public:", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "2216": {"lines": [{"number": 221, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 222, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 223, "content": "  */", "is_target": false}, {"number": 224, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "};", "is_target": true}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "#endif", "is_target": false}]}, "2217": {"lines": [{"number": 140, "content": "// include simulation environment stuff", "is_target": false}, {"number": 141, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "// include agent (class for{", "is_target": false}, {"number": 144, "content": "  success", "is_target": false}, {"number": 145, "content": "}", "is_target": true}, {"number": 146, "content": "*/", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "class ThisSim{", "is_target": false}, {"number": 149, "content": "public:", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "2218": {"lines": [{"number": 140, "content": "// include simulation environment stuff", "is_target": false}, {"number": 141, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "// include agent (class for{", "is_target": false}, {"number": 144, "content": "  success", "is_target": false}, {"number": 145, "content": "}", "is_target": true}, {"number": 146, "content": "*/", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "class ThisSim{", "is_target": false}, {"number": 149, "content": "public:", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "2219": {"lines": [{"number": 140, "content": "// include simulation environment stuff", "is_target": false}, {"number": 141, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "// include agent (class for{", "is_target": false}, {"number": 144, "content": "  success", "is_target": false}, {"number": 145, "content": "}", "is_target": true}, {"number": 146, "content": "*/", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "class ThisSim{", "is_target": false}, {"number": 149, "content": "public:", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "2220": {"lines": [{"number": 179, "content": "", "is_target": false}, {"number": 180, "content": "  //Funktion die eingegebene Befehle/kommandos verarbeitet", "is_target": false}, {"number": 181, "content": "  virtual bool command(const OdeHandle&, const OsgHandle&, GlobalData& globalData, int key, bool down) override {", "is_target": false}, {"number": 182, "content": "    char filename[1024];", "is_target": false}, {"number": 183, "content": "    if (down) { // only when key is pressed, not when released", "is_target": false}, {"number": 184, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 185, "content": "        {", "is_target": false}, {"number": 186, "content": "        case 'n' :", "is_target": false}, {"number": 187, "content": "          std::cout << \"Please type a filename stem:\";", "is_target": false}, {"number": 188, "content": "          std::cin >> filename;", "is_target": false}, {"number": 189, "content": "          if(multisat) multisat->storeSats(filename);", "is_target": false}]}, "2221": {"lines": [{"number": 140, "content": "// include simulation environment stuff", "is_target": false}, {"number": 141, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "// include agent (class for{", "is_target": false}, {"number": 144, "content": "  success", "is_target": false}, {"number": 145, "content": "}", "is_target": true}, {"number": 146, "content": "*/", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "class ThisSim{", "is_target": false}, {"number": 149, "content": "public:", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "2222": {"lines": [{"number": 140, "content": "// include simulation environment stuff", "is_target": false}, {"number": 141, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "// include agent (class for{", "is_target": false}, {"number": 144, "content": "  success", "is_target": false}, {"number": 145, "content": "}", "is_target": true}, {"number": 146, "content": "*/", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "class ThisSim{", "is_target": false}, {"number": 149, "content": "public:", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "2223": {"lines": [{"number": 140, "content": "// include simulation environment stuff", "is_target": false}, {"number": 141, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "// include agent (class for{", "is_target": false}, {"number": 144, "content": "  success", "is_target": false}, {"number": 145, "content": "}", "is_target": true}, {"number": 146, "content": "*/", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "class ThisSim{", "is_target": false}, {"number": 149, "content": "public:", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "2224": {"lines": [{"number": 224, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 225, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 226, "content": "  */", "is_target": false}, {"number": 227, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 228, "content": "", "is_target": false}, {"number": 229, "content": "};", "is_target": true}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "#endif", "is_target": false}]}, "2225": {"lines": [{"number": 224, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 225, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 226, "content": "  */", "is_target": false}, {"number": 227, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 228, "content": "", "is_target": false}, {"number": 229, "content": "};", "is_target": true}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "#endif", "is_target": false}]}, "2226": {"lines": [{"number": 224, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 225, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 226, "content": "  */", "is_target": false}, {"number": 227, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 228, "content": "", "is_target": false}, {"number": 229, "content": "};", "is_target": true}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "#endif", "is_target": false}]}, "2227": {"lines": [{"number": 416, "content": "", "is_target": false}, {"number": 417, "content": "  // add own key handling stuff here, just insert some case values", "is_target": false}, {"number": 418, "content": "  virtual bool command(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 419, "content": "                       GlobalData& global, int key, bool down) override {", "is_target": false}, {"number": 420, "content": "    if (down) { // only when key is pressed, not when released", "is_target": false}, {"number": 421, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 422, "content": "        {", "is_target": false}, {"number": 423, "content": "        case 'X':", "is_target": false}, {"number": 424, "content": "        case 'x':", "is_target": false}, {"number": 425, "content": "          if(fixator) delete fixator;", "is_target": false}, {"number": 426, "content": "          fixator=0;", "is_target": false}]}, "2228": {"lines": [{"number": 224, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 225, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 226, "content": "  */", "is_target": false}, {"number": 227, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 228, "content": "", "is_target": false}, {"number": 229, "content": "};", "is_target": true}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "#endif", "is_target": false}]}, "2229": {"lines": [{"number": 230, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 231, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 232, "content": "  */", "is_target": false}, {"number": 233, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "};", "is_target": true}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "#endif", "is_target": false}]}, "2230": {"lines": [{"number": 224, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 225, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 226, "content": "  */", "is_target": false}, {"number": 227, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 228, "content": "", "is_target": false}, {"number": 229, "content": "};", "is_target": true}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "#endif", "is_target": false}]}, "2231": {"lines": [{"number": 224, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 225, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 226, "content": "  */", "is_target": false}, {"number": 227, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 228, "content": "", "is_target": false}, {"number": 229, "content": "};", "is_target": true}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "#endif", "is_target": false}]}, "2232": {"lines": [{"number": 224, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 225, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 226, "content": "  */", "is_target": false}, {"number": 227, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 228, "content": "", "is_target": false}, {"number": 229, "content": "};", "is_target": true}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "#endif", "is_target": false}]}, "2233": {"lines": [{"number": 230, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 231, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 232, "content": "  */", "is_target": false}, {"number": 233, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "};", "is_target": true}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "#endif", "is_target": false}]}, "2234": {"lines": [{"number": 224, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 225, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 226, "content": "  */", "is_target": false}, {"number": 227, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 228, "content": "", "is_target": false}, {"number": 229, "content": "};", "is_target": true}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "#endif", "is_target": false}]}, "2235": {"lines": [{"number": 230, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 231, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 232, "content": "  */", "is_target": false}, {"number": 233, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "};", "is_target": true}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "#endif", "is_target": false}]}, "2236": {"lines": [{"number": 224, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 225, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 226, "content": "  */", "is_target": false}, {"number": 227, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 228, "content": "", "is_target": false}, {"number": 229, "content": "};", "is_target": true}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "#endif", "is_target": false}]}, "2237": {"lines": [{"number": 230, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 231, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 232, "content": "  */", "is_target": false}, {"number": 233, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "};", "is_target": true}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "#endif", "is_target": false}]}, "2238": {"lines": [{"number": 224, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 225, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 226, "content": "  */", "is_target": false}, {"number": 227, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 228, "content": "", "is_target": false}, {"number": 229, "content": "};", "is_target": true}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "#endif", "is_target": false}]}, "2239": {"lines": [{"number": 230, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 231, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 232, "content": "  */", "is_target": false}, {"number": 233, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "};", "is_target": true}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "#endif", "is_target": false}]}, "2240": {"lines": [{"number": 230, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 231, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 232, "content": "  */", "is_target": false}, {"number": 233, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "};", "is_target": true}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "#endif", "is_target": false}]}, "2241": {"lines": [{"number": 230, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 231, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 232, "content": "  */", "is_target": false}, {"number": 233, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "};", "is_target": true}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "#endif", "is_target": false}]}, "2242": {"lines": [{"number": 230, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 231, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 232, "content": "  */", "is_target": false}, {"number": 233, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "};", "is_target": true}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "#endif", "is_target": false}]}, "2243": {"lines": [{"number": 230, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 231, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 232, "content": "  */", "is_target": false}, {"number": 233, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "};", "is_target": true}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "#endif", "is_target": false}]}, "2244": {"lines": [{"number": 51, "content": "    FILE* f = fopen(argv[1],\"rb\");", "is_target": false}, {"number": 52, "content": "    if(!f){", "is_target": false}, {"number": 53, "content": "      fprintf(stderr, \"cannot open file: %s\\n\", argv[1]);", "is_target": false}, {"number": 54, "content": "      exit(1);", "is_target": false}, {"number": 55, "content": "    }", "is_target": false}, {"number": 56, "content": "    assert(net->restore(f));", "is_target": true}, {"number": 57, "content": "    fclose(f);", "is_target": false}, {"number": 58, "content": "    unsigned int ls=net->getLayerNum();", "is_target": false}, {"number": 59, "content": "    char buffer[1024];", "is_target": false}, {"number": 60, "content": "    for(unsigned int i=0; i<ls;++i) {", "is_target": false}, {"number": 61, "content": "      const Matrix& m = net->getWeights(i);", "is_target": false}]}, "2245": {"lines": [{"number": 230, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 231, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 232, "content": "  */", "is_target": false}, {"number": 233, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "};", "is_target": true}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "#endif", "is_target": false}]}, "2246": {"lines": [{"number": 209, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 210, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 211, "content": "  */", "is_target": false}, {"number": 212, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "};", "is_target": true}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "#endif", "is_target": false}]}, "2247": {"lines": [{"number": 209, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 210, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 211, "content": "  */", "is_target": false}, {"number": 212, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "};", "is_target": true}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "#endif", "is_target": false}]}, "2248": {"lines": [{"number": 211, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 212, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 213, "content": "  */", "is_target": false}, {"number": 214, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "};", "is_target": true}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "#endif", "is_target": false}]}, "2249": {"lines": [{"number": 209, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 210, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 211, "content": "  */", "is_target": false}, {"number": 212, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "};", "is_target": true}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "#endif", "is_target": false}]}, "2250": {"lines": [{"number": 211, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 212, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 213, "content": "  */", "is_target": false}, {"number": 214, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "};", "is_target": true}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "#endif", "is_target": false}]}, "2251": {"lines": [{"number": 209, "content": "  }", "is_target": false}, {"number": 210, "content": "", "is_target": false}, {"number": 211, "content": "  // add own key handling stuff here, just insert some case values", "is_target": false}, {"number": 212, "content": "  virtual bool command(const OdeHandle&, const OsgHandle&, GlobalData& globalData, int key, bool down) override {", "is_target": false}, {"number": 213, "content": "    if (down) { // only when key is pressed, not when released", "is_target": false}, {"number": 214, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 215, "content": "        {", "is_target": false}, {"number": 216, "content": "        case 'y' : dBodyAddForce ( sphere1->getMainPrimitive()->getBody() , 30 ,0 , 0 ); break;", "is_target": false}, {"number": 217, "content": "        case 'Y' : dBodyAddForce ( sphere1->getMainPrimitive()->getBody() , -30 , 0 , 0 ); break;", "is_target": false}, {"number": 218, "content": "        case 'x' : dBodyAddTorque ( sphere1->getMainPrimitive()->getBody() , 0 , 10 , 0 ); break;", "is_target": false}, {"number": 219, "content": "        case 'X' : dBodyAddTorque ( sphere1->getMainPrimitive()->getBody() , 0 , -10 , 0 ); break;", "is_target": false}]}, "2252": {"lines": [{"number": 209, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 210, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 211, "content": "  */", "is_target": false}, {"number": 212, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "};", "is_target": true}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "#endif", "is_target": false}]}, "2253": {"lines": [{"number": 211, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 212, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 213, "content": "  */", "is_target": false}, {"number": 214, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "};", "is_target": true}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "#endif", "is_target": false}]}, "2254": {"lines": [{"number": 209, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 210, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 211, "content": "  */", "is_target": false}, {"number": 212, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "};", "is_target": true}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "#endif", "is_target": false}]}, "2255": {"lines": [{"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "  using namespace std;", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  // this function is called if the ray has a collision. In the userdata we get the", "is_target": false}, {"number": 53, "content": "  //  irsensor and the depth is in the contact information", "is_target": false}, {"number": 54, "content": "  int irwallCollCallback(dSurfaceParameters& params, GlobalData& globaldata, void *userdata,", "is_target": true}, {"number": 55, "content": "                         dContact* contacts, int numContacts,", "is_target": false}, {"number": 56, "content": "                         dGeomID o1, dGeomID o2, const Substance& s1, const Substance& s2){", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "    IRSensorWall* sensor = static_cast<IRSensorWall*>(userdata);", "is_target": false}, {"number": 59, "content": "    list<dGeomID>::iterator result = find(sensor->avoid s.begin(),sensor->avoid s.end(),o2);", "is_target": false}]}, "2256": {"lines": [{"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "  using namespace std;", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  // this function is called if the ray has a collision. In the userdata we get the", "is_target": false}, {"number": 53, "content": "  //  irsensor and the depth is in the contact information", "is_target": false}, {"number": 54, "content": "  int irwallCollCallback(dSurfaceParameters& params, GlobalData& globaldata, void *userdata,", "is_target": true}, {"number": 55, "content": "                         dContact* contacts, int numContacts,", "is_target": false}, {"number": 56, "content": "                         dGeomID o1, dGeomID o2, const Substance& s1, const Substance& s2){", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "    IRSensorWall* sensor = static_cast<IRSensorWall*>(userdata);", "is_target": false}, {"number": 59, "content": "    list<dGeomID>::iterator result = find(sensor->avoid s.begin(),sensor->avoid s.end(),o2);", "is_target": false}]}, "2257": {"lines": [{"number": 211, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 212, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 213, "content": "  */", "is_target": false}, {"number": 214, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "};", "is_target": true}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "#endif", "is_target": false}]}, "2258": {"lines": [{"number": 179, "content": "    for(int p=0; p < 3; ++p) {", "is_target": false}, {"number": 180, "content": "      //      stepsize=M_PI/(6.0*(p+1.0));  // 663 initial condictions", "is_target": false}, {"number": 181, "content": "      stepsize=M_PI/(3.0*(p+1.0));  // 172 initial conditions", "is_target": false}, {"number": 182, "content": "      for(double theta=-M_PI/2; theta < M_PI/2; theta +=stepsize) {", "is_target": false}, {"number": 183, "content": "        //       { double omega=0;", "is_target": false}, {"number": 184, "content": "        for(double omega=-M_PI; omega < M_PI; omega += (stepsize/cos(theta)) ) override {", "is_target": true}, {"number": 185, "content": "          Matrix m(3,1);", "is_target": false}, {"number": 186, "content": "          m.val(0,0)=theta;", "is_target": false}, {"number": 187, "content": "          m.val(1,0)=omega;", "is_target": false}, {"number": 188, "content": "          m.val(2,0)=powers[p];", "is_target": false}, {"number": 189, "content": "          startAngles.push_back(m);", "is_target": false}]}, "2259": {"lines": [{"number": 209, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 210, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 211, "content": "  */", "is_target": false}, {"number": 212, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "};", "is_target": true}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "#endif", "is_target": false}]}, "2260": {"lines": [{"number": 211, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 212, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 213, "content": "  */", "is_target": false}, {"number": 214, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "};", "is_target": true}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "#endif", "is_target": false}]}, "2261": {"lines": [{"number": 221, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 222, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 223, "content": "  */", "is_target": false}, {"number": 224, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "};", "is_target": true}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "#endif", "is_target": false}]}, "2262": {"lines": [{"number": 209, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 210, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 211, "content": "  */", "is_target": false}, {"number": 212, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "};", "is_target": true}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "#endif", "is_target": false}]}, "2263": {"lines": [{"number": 211, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 212, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 213, "content": "  */", "is_target": false}, {"number": 214, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "};", "is_target": true}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "#endif", "is_target": false}]}, "2264": {"lines": [{"number": 221, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 222, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 223, "content": "  */", "is_target": false}, {"number": 224, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "};", "is_target": true}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "#endif", "is_target": false}]}, "2265": {"lines": [{"number": 211, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 212, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 213, "content": "  */", "is_target": false}, {"number": 214, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "};", "is_target": true}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "#endif", "is_target": false}]}, "2266": {"lines": [{"number": 221, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 222, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 223, "content": "  */", "is_target": false}, {"number": 224, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "};", "is_target": true}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "#endif", "is_target": false}]}, "2267": {"lines": [{"number": 209, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 210, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 211, "content": "  */", "is_target": false}, {"number": 212, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "};", "is_target": true}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "#endif", "is_target": false}]}, "2268": {"lines": [{"number": 221, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 222, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 223, "content": "  */", "is_target": false}, {"number": 224, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "};", "is_target": true}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "#endif", "is_target": false}]}, "2269": {"lines": [{"number": 211, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 212, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 213, "content": "  */", "is_target": false}, {"number": 214, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "};", "is_target": true}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "#endif", "is_target": false}]}, "2270": {"lines": [{"number": 209, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 210, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 211, "content": "  */", "is_target": false}, {"number": 212, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "};", "is_target": true}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "#endif", "is_target": false}]}, "2271": {"lines": [{"number": 221, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 222, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 223, "content": "  */", "is_target": false}, {"number": 224, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "};", "is_target": true}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "#endif", "is_target": false}]}, "2272": {"lines": [{"number": 211, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 212, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 213, "content": "  */", "is_target": false}, {"number": 214, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "};", "is_target": true}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "#endif", "is_target": false}]}, "2273": {"lines": [{"number": 221, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 222, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 223, "content": "  */", "is_target": false}, {"number": 224, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "};", "is_target": true}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "#endif", "is_target": false}]}, "2274": {"lines": [{"number": 209, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 210, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 211, "content": "  */", "is_target": false}, {"number": 212, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "};", "is_target": true}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "#endif", "is_target": false}]}, "2275": {"lines": [{"number": 211, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 212, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 213, "content": "  */", "is_target": false}, {"number": 214, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "};", "is_target": true}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "#endif", "is_target": false}]}, "2276": {"lines": [{"number": 221, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 222, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 223, "content": "  */", "is_target": false}, {"number": 224, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "};", "is_target": true}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "#endif", "is_target": false}]}, "2277": {"lines": [{"number": 221, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 222, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 223, "content": "  */", "is_target": false}, {"number": 224, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "};", "is_target": true}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "#endif", "is_target": false}]}, "2278": {"lines": [{"number": 221, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 222, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 223, "content": "  */", "is_target": false}, {"number": 224, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "};", "is_target": true}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "#endif", "is_target": false}]}, "2279": {"lines": [{"number": 241, "content": "  //         }", "is_target": false}, {"number": 242, "content": "  //     }", "is_target": false}, {"number": 243, "content": "  //     return false;", "is_target": false}, {"number": 244, "content": "  //   }", "is_target": false}, {"number": 245, "content": "", "is_target": false}, {"number": 246, "content": "};", "is_target": true}, {"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 249, "content": "{", "is_target": false}, {"number": 250, "content": "  ThisSim sim;", "is_target": false}, {"number": 251, "content": "  // run simulation", "is_target": false}]}, "2280": {"lines": [{"number": 241, "content": "  //         }", "is_target": false}, {"number": 242, "content": "  //     }", "is_target": false}, {"number": 243, "content": "  //     return false;", "is_target": false}, {"number": 244, "content": "  //   }", "is_target": false}, {"number": 245, "content": "", "is_target": false}, {"number": 246, "content": "};", "is_target": true}, {"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 249, "content": "{", "is_target": false}, {"number": 250, "content": "  ThisSim sim;", "is_target": false}, {"number": 251, "content": "  // run simulation", "is_target": false}]}, "2281": {"lines": [{"number": 221, "content": "      \\f[ f''(x) = f(x) - 2f(x-1) + f(x-2) \\f]", "is_target": false}, {"number": 222, "content": "      where we have to go into the past because we do not have f(x+1). The scaling can be neglegted.", "is_target": false}, {"number": 223, "content": "  */", "is_target": false}, {"number": 224, "content": "  matrix::Matrix calcDerivatives(const matrix::Matrix* buffer, int delay);", "is_target": false}, {"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "};", "is_target": true}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "#endif", "is_target": false}]}, "2282": {"lines": [{"number": 241, "content": "  //         }", "is_target": false}, {"number": 242, "content": "  //     }", "is_target": false}, {"number": 243, "content": "  //     return false;", "is_target": false}, {"number": 244, "content": "  //   }", "is_target": false}, {"number": 245, "content": "", "is_target": false}, {"number": 246, "content": "};", "is_target": true}, {"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 249, "content": "{", "is_target": false}, {"number": 250, "content": "  ThisSim sim;", "is_target": false}, {"number": 251, "content": "  // run simulation", "is_target": false}]}, "2283": {"lines": [{"number": 241, "content": "  //         }", "is_target": false}, {"number": 242, "content": "  //     }", "is_target": false}, {"number": 243, "content": "  //     return false;", "is_target": false}, {"number": 244, "content": "  //   }", "is_target": false}, {"number": 245, "content": "", "is_target": false}, {"number": 246, "content": "};", "is_target": true}, {"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 249, "content": "{", "is_target": false}, {"number": 250, "content": "  ThisSim sim;", "is_target": false}, {"number": 251, "content": "  // run simulation", "is_target": false}]}, "2284": {"lines": [{"number": 241, "content": "  //         }", "is_target": false}, {"number": 242, "content": "  //     }", "is_target": false}, {"number": 243, "content": "  //     return false;", "is_target": false}, {"number": 244, "content": "  //   }", "is_target": false}, {"number": 245, "content": "", "is_target": false}, {"number": 246, "content": "};", "is_target": true}, {"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 249, "content": "{", "is_target": false}, {"number": 250, "content": "  ThisSim sim;", "is_target": false}, {"number": 251, "content": "  // run simulation", "is_target": false}]}, "2285": {"lines": [{"number": 241, "content": "  //         }", "is_target": false}, {"number": 242, "content": "  //     }", "is_target": false}, {"number": 243, "content": "  //     return false;", "is_target": false}, {"number": 244, "content": "  //   }", "is_target": false}, {"number": 245, "content": "", "is_target": false}, {"number": 246, "content": "};", "is_target": true}, {"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 249, "content": "{", "is_target": false}, {"number": 250, "content": "  ThisSim sim;", "is_target": false}, {"number": 251, "content": "  // run simulation", "is_target": false}]}, "2286": {"lines": [{"number": 241, "content": "  //         }", "is_target": false}, {"number": 242, "content": "  //     }", "is_target": false}, {"number": 243, "content": "  //     return false;", "is_target": false}, {"number": 244, "content": "  //   }", "is_target": false}, {"number": 245, "content": "", "is_target": false}, {"number": 246, "content": "};", "is_target": true}, {"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 249, "content": "{", "is_target": false}, {"number": 250, "content": "  ThisSim sim;", "is_target": false}, {"number": 251, "content": "  // run simulation", "is_target": false}]}, "2287": {"lines": [{"number": 241, "content": "  //         }", "is_target": false}, {"number": 242, "content": "  //     }", "is_target": false}, {"number": 243, "content": "  //     return false;", "is_target": false}, {"number": 244, "content": "  //   }", "is_target": false}, {"number": 245, "content": "", "is_target": false}, {"number": 246, "content": "};", "is_target": true}, {"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 249, "content": "{", "is_target": false}, {"number": 250, "content": "  ThisSim sim;", "is_target": false}, {"number": 251, "content": "  // run simulation", "is_target": false}]}, "2288": {"lines": [{"number": 241, "content": "  //         }", "is_target": false}, {"number": 242, "content": "  //     }", "is_target": false}, {"number": 243, "content": "  //     return false;", "is_target": false}, {"number": 244, "content": "  //   }", "is_target": false}, {"number": 245, "content": "", "is_target": false}, {"number": 246, "content": "};", "is_target": true}, {"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 249, "content": "{", "is_target": false}, {"number": 250, "content": "  ThisSim sim;", "is_target": false}, {"number": 251, "content": "  // run simulation", "is_target": false}]}, "2289": {"lines": [{"number": 822, "content": "  }", "is_target": false}, {"number": 823, "content": "", "is_target": false}, {"number": 824, "content": "  // add own key handling stuff here, just insert some case values", "is_target": false}, {"number": 825, "content": "  virtual bool command(const OdeHandle&, const OsgHandle&, GlobalData& globalData, int key, bool down) override {", "is_target": false}, {"number": 826, "content": "    if (down) { // only when key is pressed, not when released", "is_target": false}, {"number": 827, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 828, "content": "        {", "is_target": false}, {"number": 829, "content": "        default:", "is_target": false}, {"number": 830, "content": "          return false;", "is_target": false}, {"number": 831, "content": "          break;", "is_target": false}, {"number": 832, "content": "        }", "is_target": false}]}, "2290": {"lines": [{"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "  //  virtual double calculateE_(const matrix::Matrix& x_delay, const matrix::Matrix& y_delay);", "is_target": false}, {"number": 174, "content": "  virtual void learn(const matrix::Matrix& x_delay, const matrix::Matrix& y_delay);", "is_target": false}, {"number": 175, "content": "", "is_target": false}, {"number": 176, "content": "};", "is_target": true}, {"number": 177, "content": "", "is_target": false}, {"number": 178, "content": "#endif", "is_target": false}, {"number": 179, "content": "", "is_target": false}]}, "2292": {"lines": [{"number": 84, "content": "      sensors[i]=x_[i];", "is_target": false}, {"number": 85, "content": "    }", "is_target": false}, {"number": 86, "content": "    all_sensors[i]=x_[i];", "is_target": false}, {"number": 87, "content": "  }", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "  InvertNChannelController::step(sensors,number_motors,y_, number_motors);", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "};", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "", "is_target": false}, {"number": 94, "content": "/// performs one step without learning. Calulates motor commands from sensor inputs.", "is_target": false}]}, "2293": {"lines": [{"number": 100, "content": "      sensors[i]=x_[i];", "is_target": false}, {"number": 101, "content": "    }", "is_target": false}, {"number": 102, "content": "    all_sensors[i]=x_[i];", "is_target": false}, {"number": 103, "content": "  }", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "  InvertNChannelController::stepNoLearning(sensors,number_motors,y_, number_motors);", "is_target": true}, {"number": 106, "content": "};", "is_target": false}, {"number": 107, "content": "", "is_target": false}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "Matrix InvertNChannelControllerHebbXsi::hebb(const Matrix& xsi, sensor* sensors){", "is_target": false}, {"number": 110, "content": "", "is_target": false}]}, "2294": {"lines": [{"number": 252, "content": "    return false;", "is_target": false}, {"number": 253, "content": "  }", "is_target": false}, {"number": 254, "content": "", "is_target": false}, {"number": 255, "content": "", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "};", "is_target": true}, {"number": 258, "content": "", "is_target": false}, {"number": 259, "content": "", "is_target": false}, {"number": 260, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 261, "content": "{", "is_target": false}, {"number": 262, "content": "  ThisSim sim;", "is_target": false}]}, "2295": {"lines": [{"number": 252, "content": "    return false;", "is_target": false}, {"number": 253, "content": "  }", "is_target": false}, {"number": 254, "content": "", "is_target": false}, {"number": 255, "content": "", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "};", "is_target": true}, {"number": 258, "content": "", "is_target": false}, {"number": 259, "content": "", "is_target": false}, {"number": 260, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 261, "content": "{", "is_target": false}, {"number": 262, "content": "  ThisSim sim;", "is_target": false}]}, "2296": {"lines": [{"number": 252, "content": "    return false;", "is_target": false}, {"number": 253, "content": "  }", "is_target": false}, {"number": 254, "content": "", "is_target": false}, {"number": 255, "content": "", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "};", "is_target": true}, {"number": 258, "content": "", "is_target": false}, {"number": 259, "content": "", "is_target": false}, {"number": 260, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 261, "content": "{", "is_target": false}, {"number": 262, "content": "  ThisSim sim;", "is_target": false}]}, "2297": {"lines": [{"number": 252, "content": "    return false;", "is_target": false}, {"number": 253, "content": "  }", "is_target": false}, {"number": 254, "content": "", "is_target": false}, {"number": 255, "content": "", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "};", "is_target": true}, {"number": 258, "content": "", "is_target": false}, {"number": 259, "content": "", "is_target": false}, {"number": 260, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 261, "content": "{", "is_target": false}, {"number": 262, "content": "  ThisSim sim;", "is_target": false}]}, "2298": {"lines": [{"number": 252, "content": "    return false;", "is_target": false}, {"number": 253, "content": "  }", "is_target": false}, {"number": 254, "content": "", "is_target": false}, {"number": 255, "content": "", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "};", "is_target": true}, {"number": 258, "content": "", "is_target": false}, {"number": 259, "content": "", "is_target": false}, {"number": 260, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 261, "content": "{", "is_target": false}, {"number": 262, "content": "  ThisSim sim;", "is_target": false}]}, "2299": {"lines": [{"number": 252, "content": "    return false;", "is_target": false}, {"number": 253, "content": "  }", "is_target": false}, {"number": 254, "content": "", "is_target": false}, {"number": 255, "content": "", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "};", "is_target": true}, {"number": 258, "content": "", "is_target": false}, {"number": 259, "content": "", "is_target": false}, {"number": 260, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 261, "content": "{", "is_target": false}, {"number": 262, "content": "  ThisSim sim;", "is_target": false}]}, "2300": {"lines": [{"number": 252, "content": "    return false;", "is_target": false}, {"number": 253, "content": "  }", "is_target": false}, {"number": 254, "content": "", "is_target": false}, {"number": 255, "content": "", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "};", "is_target": true}, {"number": 258, "content": "", "is_target": false}, {"number": 259, "content": "", "is_target": false}, {"number": 260, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 261, "content": "{", "is_target": false}, {"number": 262, "content": "  ThisSim sim;", "is_target": false}]}, "2301": {"lines": [{"number": 252, "content": "    return false;", "is_target": false}, {"number": 253, "content": "  }", "is_target": false}, {"number": 254, "content": "", "is_target": false}, {"number": 255, "content": "", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "};", "is_target": true}, {"number": 258, "content": "", "is_target": false}, {"number": 259, "content": "", "is_target": false}, {"number": 260, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 261, "content": "{", "is_target": false}, {"number": 262, "content": "  ThisSim sim;", "is_target": false}]}, "2303": {"lines": [{"number": 252, "content": "    return false;", "is_target": false}, {"number": 253, "content": "  }", "is_target": false}, {"number": 254, "content": "", "is_target": false}, {"number": 255, "content": "", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "};", "is_target": true}, {"number": 258, "content": "", "is_target": false}, {"number": 259, "content": "", "is_target": false}, {"number": 260, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 261, "content": "{", "is_target": false}, {"number": 262, "content": "  ThisSim sim;", "is_target": false}]}, "2304": {"lines": [{"number": 169, "content": "     * choose if and how to limit H", "is_target": false}, {"number": 170, "content": "     */", "is_target": false}, {"number": 171, "content": "    bool cutAt0_80=false;", "is_target": false}, {"number": 172, "content": "    bool useTanhForH=true;", "is_target": false}, {"number": 173, "content": "", "is_target": false}, {"number": 174, "content": "    if (cutAt0_80) {", "is_target": true}, {"number": 175, "content": "      // h should not be larger than 0.8", "is_target": false}, {"number": 176, "content": "      for (unsigned int i = 0; i < number_motors; ++i) {", "is_target": false}, {"number": 177, "content": "        if (h.val(i,0)>0.8){", "is_target": false}, {"number": 178, "content": "          h.val(i,0)=0.8;", "is_target": false}, {"number": 179, "content": "        }", "is_target": false}]}, "2305": {"lines": [{"number": 181, "content": "          h.val(i,0)=-0.8;", "is_target": false}, {"number": 182, "content": "        }", "is_target": false}, {"number": 183, "content": "      }", "is_target": false}, {"number": 184, "content": "    }", "is_target": false}, {"number": 185, "content": "", "is_target": false}, {"number": 186, "content": "    if (useTanhForH){", "is_target": true}, {"number": 187, "content": "      for (unsigned int i = 0; i < number_motors; ++i) {", "is_target": false}, {"number": 188, "content": "        h.val(i,0)=tanh(h.val(i,0));", "is_target": false}, {"number": 189, "content": "      }", "is_target": false}, {"number": 190, "content": "    }", "is_target": false}, {"number": 191, "content": "", "is_target": false}]}, "2306": {"lines": [{"number": 132, "content": "  // step conter", "is_target": false}, {"number": 133, "content": "  int t = 0;", "is_target": false}, {"number": 134, "content": "", "is_target": false}, {"number": 135, "content": "", "is_target": false}, {"number": 136, "content": "", "is_target": false}, {"number": 137, "content": "};", "is_target": true}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "#endif", "is_target": false}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "", "is_target": false}]}, "2307": {"lines": [{"number": 142, "content": "        handled = true; break;", "is_target": false}, {"number": 143, "content": "      case 'l' :", "is_target": false}, {"number": 144, "content": "        f=fopen(\"controller\",\"rb\");", "is_target": false}, {"number": 145, "content": "        controller->restore(f) && printf(\"Controller loaded\\n\");", "is_target": false}, {"number": 146, "content": "        handled = true; break;", "is_target": false}, {"number": 147, "content": "        fclose(f);", "is_target": true}, {"number": 148, "content": "      }", "is_target": false}, {"number": 149, "content": "    fflush(stdout);", "is_target": false}, {"number": 150, "content": "    return handled;", "is_target": false}, {"number": 151, "content": "  }", "is_target": false}, {"number": 152, "content": "", "is_target": false}]}, "2308": {"lines": [{"number": 211, "content": "        handled = true; break;", "is_target": false}, {"number": 212, "content": "      case 'l' :", "is_target": false}, {"number": 213, "content": "        f=fopen(\"controller\",\"rb\");", "is_target": false}, {"number": 214, "content": "        controller->restore(f) && printf(\"Controller loaded\\n\");", "is_target": false}, {"number": 215, "content": "        handled = true; break;", "is_target": false}, {"number": 216, "content": "        fclose(f);", "is_target": true}, {"number": 217, "content": "      }", "is_target": false}, {"number": 218, "content": "    fflush(stdout);", "is_target": false}, {"number": 219, "content": "    return handled;", "is_target": false}, {"number": 220, "content": "  }", "is_target": false}, {"number": 221, "content": "", "is_target": false}]}, "2309": {"lines": [{"number": 253, "content": "    return false;", "is_target": false}, {"number": 254, "content": "  }", "is_target": false}, {"number": 255, "content": "", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "", "is_target": false}, {"number": 258, "content": "};", "is_target": true}, {"number": 259, "content": "", "is_target": false}, {"number": 260, "content": "", "is_target": false}, {"number": 261, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 262, "content": "{", "is_target": false}, {"number": 263, "content": "  ThisSim sim;", "is_target": false}]}, "2310": {"lines": [{"number": 144, "content": "    return false;", "is_target": false}, {"number": 145, "content": "  }", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "};", "is_target": true}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 153, "content": "{", "is_target": false}, {"number": 154, "content": "  ThisSim sim;", "is_target": false}]}, "2311": {"lines": [{"number": 253, "content": "    return false;", "is_target": false}, {"number": 254, "content": "  }", "is_target": false}, {"number": 255, "content": "", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "", "is_target": false}, {"number": 258, "content": "};", "is_target": true}, {"number": 259, "content": "", "is_target": false}, {"number": 260, "content": "", "is_target": false}, {"number": 261, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 262, "content": "{", "is_target": false}, {"number": 263, "content": "  ThisSim sim;", "is_target": false}]}, "2312": {"lines": [{"number": 253, "content": "    return false;", "is_target": false}, {"number": 254, "content": "  }", "is_target": false}, {"number": 255, "content": "", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "", "is_target": false}, {"number": 258, "content": "};", "is_target": true}, {"number": 259, "content": "", "is_target": false}, {"number": 260, "content": "", "is_target": false}, {"number": 261, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 262, "content": "{", "is_target": false}, {"number": 263, "content": "  ThisSim sim;", "is_target": false}]}, "2313": {"lines": [{"number": 144, "content": "    return false;", "is_target": false}, {"number": 145, "content": "  }", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "};", "is_target": true}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 153, "content": "{", "is_target": false}, {"number": 154, "content": "  ThisSim sim;", "is_target": false}]}, "2314": {"lines": [{"number": 253, "content": "    return false;", "is_target": false}, {"number": 254, "content": "  }", "is_target": false}, {"number": 255, "content": "", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "", "is_target": false}, {"number": 258, "content": "};", "is_target": true}, {"number": 259, "content": "", "is_target": false}, {"number": 260, "content": "", "is_target": false}, {"number": 261, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 262, "content": "{", "is_target": false}, {"number": 263, "content": "  ThisSim sim;", "is_target": false}]}, "2315": {"lines": [{"number": 144, "content": "    return false;", "is_target": false}, {"number": 145, "content": "  }", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "};", "is_target": true}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 153, "content": "{", "is_target": false}, {"number": 154, "content": "  ThisSim sim;", "is_target": false}]}, "2316": {"lines": [{"number": 144, "content": "    return false;", "is_target": false}, {"number": 145, "content": "  }", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "};", "is_target": true}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 153, "content": "{", "is_target": false}, {"number": 154, "content": "  ThisSim sim;", "is_target": false}]}, "2317": {"lines": [{"number": 253, "content": "    return false;", "is_target": false}, {"number": 254, "content": "  }", "is_target": false}, {"number": 255, "content": "", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "", "is_target": false}, {"number": 258, "content": "};", "is_target": true}, {"number": 259, "content": "", "is_target": false}, {"number": 260, "content": "", "is_target": false}, {"number": 261, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 262, "content": "{", "is_target": false}, {"number": 263, "content": "  ThisSim sim;", "is_target": false}]}, "2318": {"lines": [{"number": 144, "content": "    return false;", "is_target": false}, {"number": 145, "content": "  }", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "};", "is_target": true}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 153, "content": "{", "is_target": false}, {"number": 154, "content": "  ThisSim sim;", "is_target": false}]}, "2319": {"lines": [{"number": 253, "content": "    return false;", "is_target": false}, {"number": 254, "content": "  }", "is_target": false}, {"number": 255, "content": "", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "", "is_target": false}, {"number": 258, "content": "};", "is_target": true}, {"number": 259, "content": "", "is_target": false}, {"number": 260, "content": "", "is_target": false}, {"number": 261, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 262, "content": "{", "is_target": false}, {"number": 263, "content": "  ThisSim sim;", "is_target": false}]}, "2320": {"lines": [{"number": 144, "content": "    return false;", "is_target": false}, {"number": 145, "content": "  }", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "};", "is_target": true}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 153, "content": "{", "is_target": false}, {"number": 154, "content": "  ThisSim sim;", "is_target": false}]}, "2321": {"lines": [{"number": 253, "content": "    return false;", "is_target": false}, {"number": 254, "content": "  }", "is_target": false}, {"number": 255, "content": "", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "", "is_target": false}, {"number": 258, "content": "};", "is_target": true}, {"number": 259, "content": "", "is_target": false}, {"number": 260, "content": "", "is_target": false}, {"number": 261, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 262, "content": "{", "is_target": false}, {"number": 263, "content": "  ThisSim sim;", "is_target": false}]}, "2322": {"lines": [{"number": 174, "content": "    }", "is_target": false}, {"number": 175, "content": "    return false;", "is_target": false}, {"number": 176, "content": "", "is_target": false}, {"number": 177, "content": "  }", "is_target": false}, {"number": 178, "content": "", "is_target": false}, {"number": 179, "content": "};", "is_target": true}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "", "is_target": false}, {"number": 182, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 183, "content": "{", "is_target": false}, {"number": 184, "content": "  ThisSim sim;", "is_target": false}]}, "2323": {"lines": [{"number": 253, "content": "    return false;", "is_target": false}, {"number": 254, "content": "  }", "is_target": false}, {"number": 255, "content": "", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "", "is_target": false}, {"number": 258, "content": "};", "is_target": true}, {"number": 259, "content": "", "is_target": false}, {"number": 260, "content": "", "is_target": false}, {"number": 261, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 262, "content": "{", "is_target": false}, {"number": 263, "content": "  ThisSim sim;", "is_target": false}]}, "2324": {"lines": [{"number": 144, "content": "    return false;", "is_target": false}, {"number": 145, "content": "  }", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "};", "is_target": true}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 153, "content": "{", "is_target": false}, {"number": 154, "content": "  ThisSim sim;", "is_target": false}]}, "2325": {"lines": [{"number": 174, "content": "    }", "is_target": false}, {"number": 175, "content": "    return false;", "is_target": false}, {"number": 176, "content": "", "is_target": false}, {"number": 177, "content": "  }", "is_target": false}, {"number": 178, "content": "", "is_target": false}, {"number": 179, "content": "};", "is_target": true}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "", "is_target": false}, {"number": 182, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 183, "content": "{", "is_target": false}, {"number": 184, "content": "  ThisSim sim;", "is_target": false}]}, "2326": {"lines": [{"number": 253, "content": "    return false;", "is_target": false}, {"number": 254, "content": "  }", "is_target": false}, {"number": 255, "content": "", "is_target": false}, {"number": 256, "content": "", "is_target": false}, {"number": 257, "content": "", "is_target": false}, {"number": 258, "content": "};", "is_target": true}, {"number": 259, "content": "", "is_target": false}, {"number": 260, "content": "", "is_target": false}, {"number": 261, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 262, "content": "{", "is_target": false}, {"number": 263, "content": "  ThisSim sim;", "is_target": false}]}, "2327": {"lines": [{"number": 144, "content": "    return false;", "is_target": false}, {"number": 145, "content": "  }", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "};", "is_target": true}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 153, "content": "{", "is_target": false}, {"number": 154, "content": "  ThisSim sim;", "is_target": false}]}, "2328": {"lines": [{"number": 145, "content": "   * updates the osg notes", "is_target": false}, {"number": 146, "content": "   */", "is_target": false}, {"number": 147, "content": "  void Octopus::update(){", "is_target": false}, {"number": 148, "content": "    assert(created); // robot must exist", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "    for (vector<Primitive*>::iterator i = objects.begin(); i!= objects.end(); ++i) override {", "is_target": true}, {"number": 151, "content": "      if(*i) (*i)->update();", "is_target": false}, {"number": 152, "content": "    }", "is_target": false}, {"number": 153, "content": "    for (vector<Joint*>::iterator i = joints.begin(); i!= joints.end(); ++i) override {", "is_target": false}, {"number": 154, "content": "      if(*i) (*i)->update();", "is_target": false}, {"number": 155, "content": "    }", "is_target": false}]}, "2329": {"lines": [{"number": 174, "content": "    }", "is_target": false}, {"number": 175, "content": "    return false;", "is_target": false}, {"number": 176, "content": "", "is_target": false}, {"number": 177, "content": "  }", "is_target": false}, {"number": 178, "content": "", "is_target": false}, {"number": 179, "content": "};", "is_target": true}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "", "is_target": false}, {"number": 182, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 183, "content": "{", "is_target": false}, {"number": 184, "content": "  ThisSim sim;", "is_target": false}]}, "2330": {"lines": [{"number": 174, "content": "    }", "is_target": false}, {"number": 175, "content": "    return false;", "is_target": false}, {"number": 176, "content": "", "is_target": false}, {"number": 177, "content": "  }", "is_target": false}, {"number": 178, "content": "", "is_target": false}, {"number": 179, "content": "};", "is_target": true}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "", "is_target": false}, {"number": 182, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 183, "content": "{", "is_target": false}, {"number": 184, "content": "  ThisSim sim;", "is_target": false}]}, "2331": {"lines": [{"number": 144, "content": "    return false;", "is_target": false}, {"number": 145, "content": "  }", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "};", "is_target": true}, {"number": 150, "content": "", "is_target": false}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 153, "content": "{", "is_target": false}, {"number": 154, "content": "  ThisSim sim;", "is_target": false}]}, "2332": {"lines": [{"number": 174, "content": "    }", "is_target": false}, {"number": 175, "content": "    return false;", "is_target": false}, {"number": 176, "content": "", "is_target": false}, {"number": 177, "content": "  }", "is_target": false}, {"number": 178, "content": "", "is_target": false}, {"number": 179, "content": "};", "is_target": true}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "", "is_target": false}, {"number": 182, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 183, "content": "{", "is_target": false}, {"number": 184, "content": "  ThisSim sim;", "is_target": false}]}, "2333": {"lines": [{"number": 174, "content": "    }", "is_target": false}, {"number": 175, "content": "    return false;", "is_target": false}, {"number": 176, "content": "", "is_target": false}, {"number": 177, "content": "  }", "is_target": false}, {"number": 178, "content": "", "is_target": false}, {"number": 179, "content": "};", "is_target": true}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "", "is_target": false}, {"number": 182, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 183, "content": "{", "is_target": false}, {"number": 184, "content": "  ThisSim sim;", "is_target": false}]}, "2334": {"lines": [{"number": 174, "content": "    }", "is_target": false}, {"number": 175, "content": "    return false;", "is_target": false}, {"number": 176, "content": "", "is_target": false}, {"number": 177, "content": "  }", "is_target": false}, {"number": 178, "content": "", "is_target": false}, {"number": 179, "content": "};", "is_target": true}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "", "is_target": false}, {"number": 182, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 183, "content": "{", "is_target": false}, {"number": 184, "content": "  ThisSim sim;", "is_target": false}]}, "2335": {"lines": [{"number": 174, "content": "    }", "is_target": false}, {"number": 175, "content": "    return false;", "is_target": false}, {"number": 176, "content": "", "is_target": false}, {"number": 177, "content": "  }", "is_target": false}, {"number": 178, "content": "", "is_target": false}, {"number": 179, "content": "};", "is_target": true}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "", "is_target": false}, {"number": 182, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 183, "content": "{", "is_target": false}, {"number": 184, "content": "  ThisSim sim;", "is_target": false}]}, "2336": {"lines": [{"number": 174, "content": "    }", "is_target": false}, {"number": 175, "content": "    return false;", "is_target": false}, {"number": 176, "content": "", "is_target": false}, {"number": 177, "content": "  }", "is_target": false}, {"number": 178, "content": "", "is_target": false}, {"number": 179, "content": "};", "is_target": true}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "", "is_target": false}, {"number": 182, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 183, "content": "{", "is_target": false}, {"number": 184, "content": "  ThisSim sim;", "is_target": false}]}, "2337": {"lines": [{"number": 213, "content": "", "is_target": false}, {"number": 214, "content": "  // Harmony", "is_target": false}, {"number": 215, "content": "  if(harmony!= nullptr){", "is_target": false}, {"number": 216, "content": "    Matrices delta;", "is_target": false}, {"number": 217, "content": "    cNet->backpropagation(chi, 0, &delta);", "is_target": false}, {"number": 218, "content": "    for(unsigned int l = 0; l<cNet->getLayerNum(); ++l) override {", "is_target": true}, {"number": 219, "content": "      const Matrix& ylm1 = l==0 ? x : cNet->getLayerOutput(l-1);", "is_target": false}, {"number": 220, "content": "      cNet->getWeights(l) += ((delta[l] * (ylm1^T)) * harmony * epsC).mapP(0.03, clip);", "is_target": false}, {"number": 221, "content": "      cNet->getBias(l)    += (delta[l] * harmony * epsC).mapP(0.03, clip);", "is_target": false}, {"number": 222, "content": "    } ", "is_target": false}, {"number": 223, "content": "  }", "is_target": false}]}, "2338": {"lines": [{"number": 788, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 789, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 790, "content": "", "is_target": false}, {"number": 791, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 792, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 793, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 794, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 795, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 796, "content": "", "is_target": false}, {"number": 797, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 798, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -DONT, DONT, DONT, -DONT, DONT, DONT,", "is_target": false}]}, "2339": {"lines": [{"number": 788, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 789, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 790, "content": "", "is_target": false}, {"number": 791, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 792, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 793, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 794, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 795, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 796, "content": "", "is_target": false}, {"number": 797, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 798, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -DONT, DONT, DONT, -DONT, DONT, DONT,", "is_target": false}]}, "2340": {"lines": [{"number": 788, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 789, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 790, "content": "", "is_target": false}, {"number": 791, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 792, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 793, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 794, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 795, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 796, "content": "", "is_target": false}, {"number": 797, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 798, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -DONT, DONT, DONT, -DONT, DONT, DONT,", "is_target": false}]}, "2341": {"lines": [{"number": 370, "content": "  }", "is_target": false}, {"number": 371, "content": "", "is_target": false}, {"number": 372, "content": "  // add own key handling stuff here, just insert some case values", "is_target": false}, {"number": 373, "content": "  virtual bool command(const OdeHandle&, const OsgHandle&, GlobalData& globalData, int key, bool down) override {", "is_target": false}, {"number": 374, "content": "    if (down) { // only when key is pressed, not when released", "is_target": false}, {"number": 375, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 376, "content": "        {", "is_target": false}, {"number": 377, "content": "        case 'y' : dBodyAddTorque ( robot1->getMainPrimitive()->getBody() , 30 ,0 , 0 ); break;", "is_target": false}, {"number": 378, "content": "        case 'Y' : dBodyAddTorque ( robot1->getMainPrimitive()->getBody() , -30 , 0 , 0 ); break;", "is_target": false}, {"number": 379, "content": "        case 'x' : dBodyAddTorque ( robot1->getMainPrimitive()->getBody() , 0 , 10 , 0 ); break;", "is_target": false}, {"number": 380, "content": "        case 'X' : dBodyAddTorque ( robot1->getMainPrimitive()->getBody() , 0 , -10 , 0 ); break;", "is_target": false}]}, "2342": {"lines": [{"number": 253, "content": "", "is_target": false}, {"number": 254, "content": "  // add own key handling stuff here, just insert some case values", "is_target": false}, {"number": 255, "content": "  virtual bool command(const OdeHandle&, const OsgHandle&, GlobalData& globalData, int key, bool down) override {", "is_target": false}, {"number": 256, "content": "    Substance s;", "is_target": false}, {"number": 257, "content": "    if (down) { // only when key is pressed, not when released", "is_target": false}, {"number": 258, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 259, "content": "        {", "is_target": false}, {"number": 260, "content": "        case 'x':", "is_target": false}, {"number": 261, "content": "          if(fixator) delete fixator;", "is_target": false}, {"number": 262, "content": "          fixator=0;", "is_target": false}, {"number": 263, "content": "          return true;", "is_target": false}]}, "2343": {"lines": [{"number": 788, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 789, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 790, "content": "", "is_target": false}, {"number": 791, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 792, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 793, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 794, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 795, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 796, "content": "", "is_target": false}, {"number": 797, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 798, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -DONT, DONT, DONT, -DONT, DONT, DONT,", "is_target": false}]}, "2344": {"lines": [{"number": 90, "content": "    */", "is_target": false}, {"number": 91, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "    /** destroys vehicle and space", "is_target": false}, {"number": 94, "content": "     */", "is_target": false}, {"number": 95, "content": "    virtual void destroy();", "is_target": true}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "    /** additional things for collision handling can be done here", "is_target": false}, {"number": 98, "content": "     */", "is_target": false}, {"number": 99, "content": "    static void mycallback(void *data, dGeomID o1, dGeomID o2);", "is_target": false}, {"number": 100, "content": "", "is_target": false}]}, "2345": {"lines": [{"number": 788, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 789, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 790, "content": "", "is_target": false}, {"number": 791, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 792, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 793, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 794, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 795, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 796, "content": "", "is_target": false}, {"number": 797, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 798, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -DONT, DONT, DONT, -DONT, DONT, DONT,", "is_target": false}]}, "2346": {"lines": [{"number": 41, "content": "     * @param sphereWheels switches between spheres and  'normal' wheels", "is_target": false}, {"number": 42, "content": "     */", "is_target": false}, {"number": 43, "content": "    Nimm4(const OdeHandle& odeHandle, const OsgHandle& osgHandle, const std::string& name,", "is_target": false}, {"number": 44, "content": "          double size=1, double force=3, double speed=15, bool sphereWheels=true);", "is_target": false}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    virtual ~Nimm4() {", "is_target": true}, {"number": 47, "content": "      destroy();", "is_target": false}, {"number": 48, "content": "    };", "is_target": false}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    /**", "is_target": false}, {"number": 51, "content": "     * updates the OSG nodes of the vehicle", "is_target": false}]}, "2347": {"lines": [{"number": 48, "content": "    };", "is_target": false}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    /**", "is_target": false}, {"number": 51, "content": "     * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 52, "content": "     */", "is_target": false}, {"number": 53, "content": "    virtual void update();", "is_target": true}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 57, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 58, "content": "    */", "is_target": false}]}, "2348": {"lines": [{"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 57, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 58, "content": "    */", "is_target": false}, {"number": 59, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 62, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 63, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 64, "content": "        @return number of actually written sensors", "is_target": false}]}, "2349": {"lines": [{"number": 61, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 62, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 63, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 64, "content": "        @return number of actually written sensors", "is_target": false}, {"number": 65, "content": "    */", "is_target": false}, {"number": 66, "content": "    virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": true}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 69, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 70, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 71, "content": "    */", "is_target": false}]}, "2350": {"lines": [{"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 69, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 70, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 71, "content": "    */", "is_target": false}, {"number": 72, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "    /** returns number of sensors", "is_target": false}, {"number": 75, "content": "     */", "is_target": false}, {"number": 76, "content": "    virtual int getSensorNumberIntern() const override {", "is_target": false}, {"number": 77, "content": "      return sensorno;", "is_target": false}]}, "2351": {"lines": [{"number": 788, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 789, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 790, "content": "", "is_target": false}, {"number": 791, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 792, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 793, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 794, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 795, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 796, "content": "", "is_target": false}, {"number": 797, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 798, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -DONT, DONT, DONT, -DONT, DONT, DONT,", "is_target": false}]}, "2352": {"lines": [{"number": 788, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 789, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 790, "content": "", "is_target": false}, {"number": 791, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 792, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 793, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 794, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 795, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 796, "content": "", "is_target": false}, {"number": 797, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 798, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -DONT, DONT, DONT, -DONT, DONT, DONT,", "is_target": false}]}, "2353": {"lines": [{"number": 788, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 789, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 790, "content": "", "is_target": false}, {"number": 791, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 792, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 793, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 794, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 795, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 796, "content": "", "is_target": false}, {"number": 797, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 798, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -DONT, DONT, DONT, -DONT, DONT, DONT,", "is_target": false}]}, "2354": {"lines": [{"number": 788, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 789, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 790, "content": "", "is_target": false}, {"number": 791, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 792, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 793, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 794, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 795, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 796, "content": "", "is_target": false}, {"number": 797, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 798, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -DONT, DONT, DONT, -DONT, DONT, DONT,", "is_target": false}]}, "2355": {"lines": [{"number": 178, "content": "      agent = new OdeAgent (global);", "is_target": false}, {"number": 179, "content": "    }", "is_target": false}, {"number": 180, "content": "    else", "is_target": false}, {"number": 181, "content": "      agent = new OdeAgent (global, PlotOption(NoPlot));", "is_target": false}, {"number": 182, "content": "", "is_target": false}, {"number": 183, "content": "    agent->init ( controller , sphere , wiring );", "is_target": true}, {"number": 184, "content": "    if(agent) agent->setTrackOptions(TrackRobot(true,false,false,false,\"\",2));", "is_target": false}, {"number": 185, "content": "", "is_target": false}, {"number": 186, "content": "    global.agents.push_back ( agent );", "is_target": false}, {"number": 187, "content": "    global.configs.push_back ( controller );", "is_target": false}, {"number": 188, "content": "    global.configs.push_back ( sphere);", "is_target": false}]}, "2356": {"lines": [{"number": 69, "content": "  int number_motors = 0;", "is_target": false}, {"number": 70, "content": "  bool gotmotor = false;", "is_target": false}, {"number": 71, "content": "  ros::Publisher sensor_pub;", "is_target": false}, {"number": 72, "content": "  ros::Subscriber motor_sub;", "is_target": false}, {"number": 73, "content": "  motor* motorValues;", "is_target": false}, {"number": 74, "content": "};", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "#endif", "is_target": false}]}, "2357": {"lines": [{"number": 69, "content": "  int number_motors = 0;", "is_target": false}, {"number": 70, "content": "  bool gotmotor = false;", "is_target": false}, {"number": 71, "content": "  ros::Publisher sensor_pub;", "is_target": false}, {"number": 72, "content": "  ros::Subscriber motor_sub;", "is_target": false}, {"number": 73, "content": "  motor* motorValues;", "is_target": false}, {"number": 74, "content": "};", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "#endif", "is_target": false}]}, "2358": {"lines": [{"number": 69, "content": "  int number_motors = 0;", "is_target": false}, {"number": 70, "content": "  bool gotmotor = false;", "is_target": false}, {"number": 71, "content": "  ros::Publisher sensor_pub;", "is_target": false}, {"number": 72, "content": "  ros::Subscriber motor_sub;", "is_target": false}, {"number": 73, "content": "  motor* motorValues;", "is_target": false}, {"number": 74, "content": "};", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "#endif", "is_target": false}]}, "2359": {"lines": [{"number": 69, "content": "  int number_motors = 0;", "is_target": false}, {"number": 70, "content": "  bool gotmotor = false;", "is_target": false}, {"number": 71, "content": "  ros::Publisher sensor_pub;", "is_target": false}, {"number": 72, "content": "  ros::Subscriber motor_sub;", "is_target": false}, {"number": 73, "content": "  motor* motorValues;", "is_target": false}, {"number": 74, "content": "};", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "#endif", "is_target": false}]}, "2360": {"lines": [{"number": 69, "content": "  int number_motors = 0;", "is_target": false}, {"number": 70, "content": "  bool gotmotor = false;", "is_target": false}, {"number": 71, "content": "  ros::Publisher sensor_pub;", "is_target": false}, {"number": 72, "content": "  ros::Subscriber motor_sub;", "is_target": false}, {"number": 73, "content": "  motor* motorValues;", "is_target": false}, {"number": 74, "content": "};", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "#endif", "is_target": false}]}, "2361": {"lines": [{"number": 69, "content": "  int number_motors = 0;", "is_target": false}, {"number": 70, "content": "  bool gotmotor = false;", "is_target": false}, {"number": 71, "content": "  ros::Publisher sensor_pub;", "is_target": false}, {"number": 72, "content": "  ros::Subscriber motor_sub;", "is_target": false}, {"number": 73, "content": "  motor* motorValues;", "is_target": false}, {"number": 74, "content": "};", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "#endif", "is_target": false}]}, "2362": {"lines": [{"number": 69, "content": "  int number_motors = 0;", "is_target": false}, {"number": 70, "content": "  bool gotmotor = false;", "is_target": false}, {"number": 71, "content": "  ros::Publisher sensor_pub;", "is_target": false}, {"number": 72, "content": "  ros::Subscriber motor_sub;", "is_target": false}, {"number": 73, "content": "  motor* motorValues;", "is_target": false}, {"number": 74, "content": "};", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "#endif", "is_target": false}]}, "2363": {"lines": [{"number": 69, "content": "  int number_motors = 0;", "is_target": false}, {"number": 70, "content": "  bool gotmotor = false;", "is_target": false}, {"number": 71, "content": "  ros::Publisher sensor_pub;", "is_target": false}, {"number": 72, "content": "  ros::Subscriber motor_sub;", "is_target": false}, {"number": 73, "content": "  motor* motorValues;", "is_target": false}, {"number": 74, "content": "};", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "#endif", "is_target": false}]}, "2364": {"lines": [{"number": 69, "content": "  int number_motors = 0;", "is_target": false}, {"number": 70, "content": "  bool gotmotor = false;", "is_target": false}, {"number": 71, "content": "  ros::Publisher sensor_pub;", "is_target": false}, {"number": 72, "content": "  ros::Subscriber motor_sub;", "is_target": false}, {"number": 73, "content": "  motor* motorValues;", "is_target": false}, {"number": 74, "content": "};", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "#endif", "is_target": false}]}, "2365": {"lines": [{"number": 165, "content": "  {", "is_target": false}, {"number": 166, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 167, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 168, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 169, "content": "  };", "is_target": false}, {"number": 170, "content": "};", "is_target": true}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "#endif", "is_target": false}, {"number": 173, "content": "", "is_target": false}, {"number": 174, "content": "", "is_target": false}]}, "2366": {"lines": [{"number": 69, "content": "  int number_motors = 0;", "is_target": false}, {"number": 70, "content": "  bool gotmotor = false;", "is_target": false}, {"number": 71, "content": "  ros::Publisher sensor_pub;", "is_target": false}, {"number": 72, "content": "  ros::Subscriber motor_sub;", "is_target": false}, {"number": 73, "content": "  motor* motorValues;", "is_target": false}, {"number": 74, "content": "};", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "#endif", "is_target": false}]}, "2367": {"lines": [{"number": 186, "content": "  {", "is_target": false}, {"number": 187, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 188, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 189, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 190, "content": "  };", "is_target": false}, {"number": 191, "content": "};", "is_target": true}, {"number": 192, "content": "", "is_target": false}, {"number": 193, "content": "#endif", "is_target": false}, {"number": 194, "content": "", "is_target": false}, {"number": 195, "content": "", "is_target": false}]}, "2368": {"lines": [{"number": 186, "content": "  {", "is_target": false}, {"number": 187, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 188, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 189, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 190, "content": "  };", "is_target": false}, {"number": 191, "content": "};", "is_target": true}, {"number": 192, "content": "", "is_target": false}, {"number": 193, "content": "#endif", "is_target": false}, {"number": 194, "content": "", "is_target": false}, {"number": 195, "content": "", "is_target": false}]}, "2369": {"lines": [{"number": 186, "content": "  {", "is_target": false}, {"number": 187, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 188, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 189, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 190, "content": "  };", "is_target": false}, {"number": 191, "content": "};", "is_target": true}, {"number": 192, "content": "", "is_target": false}, {"number": 193, "content": "#endif", "is_target": false}, {"number": 194, "content": "", "is_target": false}, {"number": 195, "content": "", "is_target": false}]}, "2370": {"lines": [{"number": 186, "content": "  {", "is_target": false}, {"number": 187, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 188, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 189, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 190, "content": "  };", "is_target": false}, {"number": 191, "content": "};", "is_target": true}, {"number": 192, "content": "", "is_target": false}, {"number": 193, "content": "#endif", "is_target": false}, {"number": 194, "content": "", "is_target": false}, {"number": 195, "content": "", "is_target": false}]}, "2371": {"lines": [{"number": 186, "content": "  {", "is_target": false}, {"number": 187, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 188, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 189, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 190, "content": "  };", "is_target": false}, {"number": 191, "content": "};", "is_target": true}, {"number": 192, "content": "", "is_target": false}, {"number": 193, "content": "#endif", "is_target": false}, {"number": 194, "content": "", "is_target": false}, {"number": 195, "content": "", "is_target": false}]}, "2372": {"lines": [{"number": 186, "content": "  {", "is_target": false}, {"number": 187, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 188, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 189, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 190, "content": "  };", "is_target": false}, {"number": 191, "content": "};", "is_target": true}, {"number": 192, "content": "", "is_target": false}, {"number": 193, "content": "#endif", "is_target": false}, {"number": 194, "content": "", "is_target": false}, {"number": 195, "content": "", "is_target": false}]}, "2373": {"lines": [{"number": 186, "content": "  {", "is_target": false}, {"number": 187, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 188, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 189, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 190, "content": "  };", "is_target": false}, {"number": 191, "content": "};", "is_target": true}, {"number": 192, "content": "", "is_target": false}, {"number": 193, "content": "#endif", "is_target": false}, {"number": 194, "content": "", "is_target": false}, {"number": 195, "content": "", "is_target": false}]}, "2374": {"lines": [{"number": 186, "content": "  {", "is_target": false}, {"number": 187, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 188, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 189, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 190, "content": "  };", "is_target": false}, {"number": 191, "content": "};", "is_target": true}, {"number": 192, "content": "", "is_target": false}, {"number": 193, "content": "#endif", "is_target": false}, {"number": 194, "content": "", "is_target": false}, {"number": 195, "content": "", "is_target": false}]}, "2375": {"lines": [{"number": 186, "content": "  {", "is_target": false}, {"number": 187, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 188, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 189, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 190, "content": "  };", "is_target": false}, {"number": 191, "content": "};", "is_target": true}, {"number": 192, "content": "", "is_target": false}, {"number": 193, "content": "#endif", "is_target": false}, {"number": 194, "content": "", "is_target": false}, {"number": 195, "content": "", "is_target": false}]}, "2376": {"lines": [{"number": 186, "content": "  {", "is_target": false}, {"number": 187, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 188, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 189, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 190, "content": "  };", "is_target": false}, {"number": 191, "content": "};", "is_target": true}, {"number": 192, "content": "", "is_target": false}, {"number": 193, "content": "#endif", "is_target": false}, {"number": 194, "content": "", "is_target": false}, {"number": 195, "content": "", "is_target": false}]}, "2377": {"lines": [{"number": 49, "content": "    SchlangeServo2 ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 50, "content": "                     const SchlangeConf& conf,", "is_target": false}, {"number": 51, "content": "                     const std::string& name,", "is_target": false}, {"number": 52, "content": "                     const std::string& revision = \"\" );", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual ~SchlangeServo2();", "is_target": true}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    /**", "is_target": false}, {"number": 57, "content": "     *Reads the actual motor commands from an array,", "is_target": false}, {"number": 58, "content": "     *an sets all motors of the snake to this values.", "is_target": false}, {"number": 59, "content": "     *It is an linear allocation.", "is_target": false}]}, "2378": {"lines": [{"number": 58, "content": "     *an sets all motors of the snake to this values.", "is_target": false}, {"number": 59, "content": "     *It is an linear allocation.", "is_target": false}, {"number": 60, "content": "     *@param motors pointer to the array, motor values are scaled to [-1,1]", "is_target": false}, {"number": 61, "content": "     *@param motornumber length of the motor array", "is_target": false}, {"number": 62, "content": "     **/", "is_target": false}, {"number": 63, "content": "    virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": true}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "    /**", "is_target": false}, {"number": 66, "content": "     *Writes the sensor values to an array in the memory.", "is_target": false}, {"number": 67, "content": "     *@param sensors pointer to the array", "is_target": false}, {"number": 68, "content": "     *@param sensornumber length of the sensor array", "is_target": false}]}, "2379": {"lines": [{"number": 66, "content": "     *Writes the sensor values to an array in the memory.", "is_target": false}, {"number": 67, "content": "     *@param sensors pointer to the array", "is_target": false}, {"number": 68, "content": "     *@param sensornumber length of the sensor array", "is_target": false}, {"number": 69, "content": "     *@return number of actually written sensors", "is_target": false}, {"number": 70, "content": "     **/", "is_target": false}, {"number": 71, "content": "    virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": true}, {"number": 72, "content": "", "is_target": false}, {"number": 73, "content": "    /** returns number of sensors", "is_target": false}, {"number": 74, "content": "     */", "is_target": false}, {"number": 75, "content": "    virtual int getSensorNumberIntern() const override { assert(created); return 2*servos.size(); }", "is_target": false}, {"number": 76, "content": "", "is_target": false}]}, "2380": {"lines": [{"number": 77, "content": "    /** returns number of motors", "is_target": false}, {"number": 78, "content": "     */", "is_target": false}, {"number": 79, "content": "    virtual int getMotorNumberIntern() const override { assert(created); return 2*servos.size(); }", "is_target": false}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 82, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": true}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  private:", "is_target": false}, {"number": 85, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 86, "content": "    virtual void destroy();", "is_target": false}, {"number": 87, "content": "  };", "is_target": false}]}, "2381": {"lines": [{"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 82, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  private:", "is_target": false}, {"number": 85, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": true}, {"number": 86, "content": "    virtual void destroy();", "is_target": false}, {"number": 87, "content": "  };", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "}", "is_target": false}, {"number": 90, "content": "", "is_target": false}]}, "2382": {"lines": [{"number": 81, "content": "    /******** CONFIGURABLE ***********/", "is_target": false}, {"number": 82, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  private:", "is_target": false}, {"number": 85, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 86, "content": "    virtual void destroy();", "is_target": true}, {"number": 87, "content": "  };", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "}", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "#endif", "is_target": false}]}, "2383": {"lines": [{"number": 145, "content": "    return false;", "is_target": false}, {"number": 146, "content": "  }", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "};", "is_target": true}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "", "is_target": false}, {"number": 154, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 155, "content": "{", "is_target": false}]}, "2384": {"lines": [{"number": 180, "content": "    //     cc.cInit=0.8;", "is_target": false}, {"number": 181, "content": "    //     cc.useS=false;", "is_target": false}, {"number": 182, "content": "    //     AbstractController *controller = new DerController(cc);", "is_target": false}, {"number": 183, "content": "", "is_target": false}, {"number": 184, "content": "    SoMLConf sc = SoML::getDefaultConf();", "is_target": false}, {"number": 185, "content": "    SoML* controller = new SoML(sc);", "is_target": true}, {"number": 186, "content": "", "is_target": false}, {"number": 187, "content": "", "is_target": false}, {"number": 188, "content": "    // AbstractWiring* wiring = new One2OneWiring(new ColorUniformNoise(0.1));", "is_target": false}, {"number": 189, "content": "    AbstractWiring* wiring = new One2OneWiring(new WhiteUniformNoise());", "is_target": false}, {"number": 190, "content": "    //   DerivativeWiringConf c = DerivativeWiring::getDefaultConf();", "is_target": false}]}, "2385": {"lines": [{"number": 145, "content": "    return false;", "is_target": false}, {"number": 146, "content": "  }", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "};", "is_target": true}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "", "is_target": false}, {"number": 154, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 155, "content": "{", "is_target": false}]}, "2386": {"lines": [{"number": 145, "content": "    return false;", "is_target": false}, {"number": 146, "content": "  }", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "};", "is_target": true}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "", "is_target": false}, {"number": 154, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 155, "content": "{", "is_target": false}]}, "2387": {"lines": [{"number": 145, "content": "    return false;", "is_target": false}, {"number": 146, "content": "  }", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "};", "is_target": true}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "", "is_target": false}, {"number": 154, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 155, "content": "{", "is_target": false}]}, "2388": {"lines": [{"number": 145, "content": "    return false;", "is_target": false}, {"number": 146, "content": "  }", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "};", "is_target": true}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "", "is_target": false}, {"number": 154, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 155, "content": "{", "is_target": false}]}, "2389": {"lines": [{"number": 145, "content": "    return false;", "is_target": false}, {"number": 146, "content": "  }", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "};", "is_target": true}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "", "is_target": false}, {"number": 154, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 155, "content": "{", "is_target": false}]}, "2390": {"lines": [{"number": 57, "content": "    motorno  = motornumber;", "is_target": false}, {"number": 58, "content": "    motors = static_cast<motor*>(malloc(motorno * sizeof(motor)));", "is_target": false}, {"number": 59, "content": "    for(int i=0; i < motorno; ++i) {", "is_target": false}, {"number": 60, "content": "      motors[i]=0.0;", "is_target": false}, {"number": 61, "content": "    }", "is_target": false}, {"number": 62, "content": "    dummy = new DummyPrimitive();", "is_target": true}, {"number": 63, "content": "    dummy->init(odeHandle,0, osgHandle);", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "    a.set(sensornumber, 1);", "is_target": false}, {"number": 66, "content": "    W.set(sensornumber, sensornumber);", "is_target": false}, {"number": 67, "content": "    theta.set(sensornumber, 1);", "is_target": false}]}, "2391": {"lines": [{"number": 57, "content": "    motorno  = motornumber;", "is_target": false}, {"number": 58, "content": "    motors = static_cast<motor*>(malloc(motorno * sizeof(motor)));", "is_target": false}, {"number": 59, "content": "    for(int i=0; i < motorno; ++i) {", "is_target": false}, {"number": 60, "content": "      motors[i]=0.0;", "is_target": false}, {"number": 61, "content": "    }", "is_target": false}, {"number": 62, "content": "    dummy = new DummyPrimitive();", "is_target": true}, {"number": 63, "content": "    dummy->init(odeHandle,0, osgHandle);", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "    a.set(sensornumber, 1);", "is_target": false}, {"number": 66, "content": "    W.set(sensornumber, sensornumber);", "is_target": false}, {"number": 67, "content": "    theta.set(sensornumber, 1);", "is_target": false}]}, "2392": {"lines": [{"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "  protected:", "is_target": false}, {"number": 81, "content": "    DummyPrimitive *dummy;", "is_target": false}, {"number": 82, "content": "    int sensorno = 0;      //number of sensors", "is_target": false}, {"number": 83, "content": "    int motorno = 0;       // number of motors", "is_target": false}, {"number": 84, "content": "    double* motors;", "is_target": true}, {"number": 85, "content": "  } ;", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "}", "is_target": false}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "#endif", "is_target": false}]}, "2393": {"lines": [{"number": 145, "content": "    return false;", "is_target": false}, {"number": 146, "content": "  }", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "};", "is_target": true}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "", "is_target": false}, {"number": 154, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 155, "content": "{", "is_target": false}]}, "2394": {"lines": [{"number": 145, "content": "    return false;", "is_target": false}, {"number": 146, "content": "  }", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "};", "is_target": true}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "", "is_target": false}, {"number": 154, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 155, "content": "{", "is_target": false}]}, "2395": {"lines": [{"number": 35, "content": "   */", "is_target": false}, {"number": 36, "content": "  class ShortCircuit : public OdeRobot {", "is_target": false}, {"number": 37, "content": "  public:", "is_target": false}, {"number": 38, "content": "    ShortCircuit(const OdeHandle& odeHandle, const OsgHandle& osgHandle, int sensornumber, int motornumber);", "is_target": false}, {"number": 39, "content": "", "is_target": false}, {"number": 40, "content": "    virtual ~ShortCircuit();", "is_target": true}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 45, "content": "        @param pose desired 4x4 pose matrix", "is_target": false}]}, "2396": {"lines": [{"number": 49, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 50, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 51, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 52, "content": "        @return number of actually written sensors", "is_target": false}, {"number": 53, "content": "    */", "is_target": false}, {"number": 54, "content": "    virtual int getSensorsIntern(sensor* sensors, int sensornumber);", "is_target": true}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 57, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 58, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 59, "content": "    */", "is_target": false}]}, "2397": {"lines": [{"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 57, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 58, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 59, "content": "    */", "is_target": false}, {"number": 60, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "    /** returns number of sensors", "is_target": false}, {"number": 63, "content": "     */", "is_target": false}, {"number": 64, "content": "    virtual int getSensorNumberIntern() const override {return sensorno; }", "is_target": false}, {"number": 65, "content": "", "is_target": false}]}, "2398": {"lines": [{"number": 73, "content": "    */", "is_target": false}, {"number": 74, "content": "    virtual void doInternalStuff(const GlobalData& globalData) override {}", "is_target": false}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "  protected:", "is_target": false}, {"number": 77, "content": "    /** the main object of the robot, which is used for position and speed tracking */", "is_target": false}, {"number": 78, "content": "    virtual Primitive* getMainPrimitive() const { return dummy; }", "is_target": true}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "  protected:", "is_target": false}, {"number": 81, "content": "    DummyPrimitive *dummy;", "is_target": false}, {"number": 82, "content": "    int sensorno = 0;      //number of sensors", "is_target": false}, {"number": 83, "content": "    int motorno = 0;       // number of motors", "is_target": false}]}, "2399": {"lines": [{"number": 145, "content": "    return false;", "is_target": false}, {"number": 146, "content": "  }", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "};", "is_target": true}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "", "is_target": false}, {"number": 153, "content": "", "is_target": false}, {"number": 154, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 155, "content": "{", "is_target": false}]}, "2400": {"lines": [{"number": 170, "content": "", "is_target": false}, {"number": 171, "content": "  }", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "", "is_target": false}, {"number": 174, "content": "", "is_target": false}, {"number": 175, "content": "  void command(const OdeHandle& odeHandle, GlobalData& global, int key){", "is_target": true}, {"number": 176, "content": "    switch (key){", "is_target": false}, {"number": 177, "content": "    case '>': omega+=0.05;", "is_target": false}, {"number": 178, "content": "      break;", "is_target": false}, {"number": 179, "content": "    case '<': omega-=0.05;", "is_target": false}, {"number": 180, "content": "      break;", "is_target": false}]}, "2401": {"lines": [{"number": 122, "content": "  bool dteaching = false;", "is_target": false}, {"number": 123, "content": "  double* teachingSignal = nullptr;", "is_target": false}, {"number": 124, "content": "  int teachingLen = 0;", "is_target": false}, {"number": 125, "content": "  double* dteachingSignal = nullptr;", "is_target": false}, {"number": 126, "content": "  int dteachingLen = 0;", "is_target": false}, {"number": 127, "content": "  double sineRate = 0;", "is_target": true}, {"number": 128, "content": "  double phaseShift = 0;", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "  ThisSim : fixator(nullptr), controller(nullptr), teaching(false), dteaching(false), teachingSignal(nullptr), teachingLen(0), dteachingSignal(nullptr), dteachingLen(0), sineRate(0), phaseShift(0) {", "is_target": false}, {"number": 131, "content": "    addParameterDef(\"sinerate\",   &sineRate,   20);", "is_target": false}, {"number": 132, "content": "    addParameterDef(\"phaseshift\", &phaseShift, 0.65);", "is_target": false}]}, "2402": {"lines": [{"number": 123, "content": "  double* teachingSignal = nullptr;", "is_target": false}, {"number": 124, "content": "  int teachingLen = 0;", "is_target": false}, {"number": 125, "content": "  double* dteachingSignal = nullptr;", "is_target": false}, {"number": 126, "content": "  int dteachingLen = 0;", "is_target": false}, {"number": 127, "content": "  double sineRate = 0;", "is_target": false}, {"number": 128, "content": "  double phaseShift = 0;", "is_target": true}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "  ThisSim : fixator(nullptr), controller(nullptr), teaching(false), dteaching(false), teachingSignal(nullptr), teachingLen(0), dteachingSignal(nullptr), dteachingLen(0), sineRate(0), phaseShift(0) {", "is_target": false}, {"number": 131, "content": "    addParameterDef(\"sinerate\",   &sineRate,   20);", "is_target": false}, {"number": 132, "content": "    addParameterDef(\"phaseshift\", &phaseShift, 0.65);", "is_target": false}, {"number": 133, "content": "  }", "is_target": false}]}, "2403": {"lines": [{"number": 134, "content": "", "is_target": false}, {"number": 135, "content": "  /// start() is called at the start and should create all the object (obstacles, agents...).", "is_target": false}, {"number": 136, "content": "  virtual void start(const OdeHandle& odeHandle, const OsgHandle& osgHandle, GlobalData& global) override {", "is_target": false}, {"number": 137, "content": "    setCameraHomePos(Pos(-19.7951, -12.3665, 16.4319),  Pos(-51.7826, -26.772, 0));", "is_target": false}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "    bool schlange=true;", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "    global.odeConfig.setParam(\"controlinterval\",4);", "is_target": false}, {"number": 142, "content": "    global.odeConfig.setParam(\"gravity\", -1);", "is_target": false}, {"number": 143, "content": "    global.odeConfig.setParam(\"realtimefactor\",4);", "is_target": false}, {"number": 144, "content": "    global.odeConfig.setParam(\"noise\",0.05);", "is_target": false}]}, "2404": {"lines": [{"number": 747, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 748, "content": "", "is_target": false}, {"number": 749, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 750, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 751, "content": "                            //                            Axis(0,0,1) * pose, Axis(0,1,0) * pose); // old version", "is_target": false}, {"number": 752, "content": "                            Axis(1,0,0) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 753, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 754, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 755, "content": "", "is_target": false}, {"number": 756, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 757, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2405": {"lines": [{"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "  // Harmony", "is_target": false}, {"number": 217, "content": "  if(harmony!= nullptr){", "is_target": false}, {"number": 218, "content": "    Matrices delta;", "is_target": false}, {"number": 219, "content": "    cNet->backpropagation(chi, 0, &delta);", "is_target": false}, {"number": 220, "content": "    for(unsigned int l = 0; l<cNet->getLayerNum(); ++l) override {", "is_target": true}, {"number": 221, "content": "      const Matrix& ylm1 = l==0 ? x : cNet->getLayerOutput(l-1);", "is_target": false}, {"number": 222, "content": "      cNet->getWeights(l) += ((delta[l] * (ylm1^T)) * harmony * epsC).mapP(0.03, clip);", "is_target": false}, {"number": 223, "content": "      cNet->getBias(l)    += (delta[l] * harmony * epsC).mapP(0.03, clip);", "is_target": false}, {"number": 224, "content": "    } ", "is_target": false}, {"number": 225, "content": "  }", "is_target": false}]}, "2406": {"lines": [{"number": 747, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 748, "content": "", "is_target": false}, {"number": 749, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 750, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 751, "content": "                            //                            Axis(0,0,1) * pose, Axis(0,1,0) * pose); // old version", "is_target": false}, {"number": 752, "content": "                            Axis(1,0,0) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 753, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 754, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 755, "content": "", "is_target": false}, {"number": 756, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 757, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2407": {"lines": [{"number": 747, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 748, "content": "", "is_target": false}, {"number": 749, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 750, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 751, "content": "                            //                            Axis(0,0,1) * pose, Axis(0,1,0) * pose); // old version", "is_target": false}, {"number": 752, "content": "                            Axis(1,0,0) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 753, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 754, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 755, "content": "", "is_target": false}, {"number": 756, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 757, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2408": {"lines": [{"number": 44, "content": "  };", "is_target": false}, {"number": 45, "content": "  return true;", "is_target": false}, {"number": 46, "content": "}", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "void writeVecElemNames(ostream& str, const string& name, const Matrix& m){", "is_target": false}, {"number": 49, "content": "  for(int i=0; i < m.getM(); ++i) override {", "is_target": true}, {"number": 50, "content": "    str << name << '[' << i << ']' << ' ';", "is_target": false}, {"number": 51, "content": "  }", "is_target": false}, {"number": 52, "content": "}", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "", "is_target": false}]}, "2409": {"lines": [{"number": 747, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 748, "content": "", "is_target": false}, {"number": 749, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 750, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 751, "content": "                            //                            Axis(0,0,1) * pose, Axis(0,1,0) * pose); // old version", "is_target": false}, {"number": 752, "content": "                            Axis(1,0,0) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 753, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 754, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 755, "content": "", "is_target": false}, {"number": 756, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 757, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2410": {"lines": [{"number": 747, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 748, "content": "", "is_target": false}, {"number": 749, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 750, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 751, "content": "                            //                            Axis(0,0,1) * pose, Axis(0,1,0) * pose); // old version", "is_target": false}, {"number": 752, "content": "                            Axis(1,0,0) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 753, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 754, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 755, "content": "", "is_target": false}, {"number": 756, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 757, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2411": {"lines": [{"number": 169, "content": "  {", "is_target": false}, {"number": 170, "content": "    return clip(z,-0.1,0.1);", "is_target": false}, {"number": 171, "content": "    //    return z < -0.1 ? -0.1 : ( z > 0.1 ? 0.1 : z );", "is_target": false}, {"number": 172, "content": "    //return 0.1 * tanh(10.0 * z);", "is_target": false}, {"number": 173, "content": "  };", "is_target": false}, {"number": 174, "content": "};", "is_target": true}, {"number": 175, "content": "", "is_target": false}, {"number": 176, "content": "#endif", "is_target": false}, {"number": 177, "content": "", "is_target": false}, {"number": 178, "content": "", "is_target": false}]}, "2412": {"lines": [{"number": 613, "content": "", "is_target": false}, {"number": 614, "content": "  // add own key handling stuff here, just insert some case values", "is_target": false}, {"number": 615, "content": "  virtual bool command(const OdeHandle&, const OsgHandle&, GlobalData& globalData, int key, bool down) override {", "is_target": false}, {"number": 616, "content": "    Substance s;", "is_target": false}, {"number": 617, "content": "    if (down) { // only when key is pressed, not when released", "is_target": false}, {"number": 618, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 619, "content": "        {", "is_target": false}, {"number": 620, "content": "        case 'x':", "is_target": false}, {"number": 621, "content": "          if(fixator) delete fixator;", "is_target": false}, {"number": 622, "content": "          fixator=0;", "is_target": false}, {"number": 623, "content": "          return true;", "is_target": false}]}, "2413": {"lines": [{"number": 747, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 748, "content": "", "is_target": false}, {"number": 749, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 750, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 751, "content": "                            //                            Axis(0,0,1) * pose, Axis(0,1,0) * pose); // old version", "is_target": false}, {"number": 752, "content": "                            Axis(1,0,0) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 753, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 754, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 755, "content": "", "is_target": false}, {"number": 756, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 757, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2414": {"lines": [{"number": 747, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 748, "content": "", "is_target": false}, {"number": 749, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 750, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 751, "content": "                            //                            Axis(0,0,1) * pose, Axis(0,1,0) * pose); // old version", "is_target": false}, {"number": 752, "content": "                            Axis(1,0,0) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 753, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 754, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 755, "content": "", "is_target": false}, {"number": 756, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 757, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2415": {"lines": [{"number": 747, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 748, "content": "", "is_target": false}, {"number": 749, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 750, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 751, "content": "                            //                            Axis(0,0,1) * pose, Axis(0,1,0) * pose); // old version", "is_target": false}, {"number": 752, "content": "                            Axis(1,0,0) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 753, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 754, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 755, "content": "", "is_target": false}, {"number": 756, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 757, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2416": {"lines": [{"number": 747, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 748, "content": "", "is_target": false}, {"number": 749, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 750, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 751, "content": "                            //                            Axis(0,0,1) * pose, Axis(0,1,0) * pose); // old version", "is_target": false}, {"number": 752, "content": "                            Axis(1,0,0) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 753, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 754, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 755, "content": "", "is_target": false}, {"number": 756, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 757, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2418": {"lines": [{"number": 55, "content": "  int t = 1;", "is_target": false}, {"number": 56, "content": "  int c = 1;", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  // constructor:", "is_target": false}, {"number": 59, "content": "  // - give handle for ODE and OSG stuff", "is_target": false}, {"number": 60, "content": "  Hexapod::Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 61, "content": "                   const HexapodConf& c, const std::string& name)", "is_target": false}, {"number": 62, "content": "    : OdeRobot(odeHandle, osgHandle, name, \"HexaPod 0.9\"), Inspectable(name), conf(c)", "is_target": false}, {"number": 63, "content": "  {", "is_target": false}, {"number": 64, "content": "    // robot is not created till now", "is_target": false}, {"number": 65, "content": "    t = 0;", "is_target": false}]}, "2419": {"lines": [{"number": 55, "content": "  int t = 1;", "is_target": false}, {"number": 56, "content": "  int c = 1;", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  // constructor:", "is_target": false}, {"number": 59, "content": "  // - give handle for ODE and OSG stuff", "is_target": false}, {"number": 60, "content": "  Hexapod::Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 61, "content": "                   const HexapodConf& c, const std::string& name)", "is_target": false}, {"number": 62, "content": "    : OdeRobot(odeHandle, osgHandle, name, \"HexaPod 0.9\"), Inspectable(name), conf(c)", "is_target": false}, {"number": 63, "content": "  {", "is_target": false}, {"number": 64, "content": "    // robot is not created till now", "is_target": false}, {"number": 65, "content": "    t = 0;", "is_target": false}]}, "2420": {"lines": [{"number": 55, "content": "  int t = 1;", "is_target": false}, {"number": 56, "content": "  int c = 1;", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  // constructor:", "is_target": false}, {"number": 59, "content": "  // - give handle for ODE and OSG stuff", "is_target": false}, {"number": 60, "content": "  Hexapod::Hexapod(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": true}, {"number": 61, "content": "                   const HexapodConf& c, const std::string& name)", "is_target": false}, {"number": 62, "content": "    : OdeRobot(odeHandle, osgHandle, name, \"HexaPod 0.9\"), Inspectable(name), conf(c)", "is_target": false}, {"number": 63, "content": "  {", "is_target": false}, {"number": 64, "content": "    // robot is not created till now", "is_target": false}, {"number": 65, "content": "    t = 0;", "is_target": false}]}, "2421": {"lines": [{"number": 493, "content": "  }", "is_target": false}, {"number": 494, "content": "", "is_target": false}, {"number": 495, "content": "  // add own key handling stuff here, just insert some case values", "is_target": false}, {"number": 496, "content": "  virtual bool command(const OdeHandle&, const OsgHandle&, GlobalData& globalData, int key, bool down) override {", "is_target": false}, {"number": 497, "content": "    if (down) { // only when key is pressed, not when released", "is_target": false}, {"number": 498, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 499, "content": "        {", "is_target": false}, {"number": 500, "content": "        case 'y' : dBodyAddForce ( sphere1->getMainPrimitive()->getBody() , 30 ,0 , 0 ); break;", "is_target": false}, {"number": 501, "content": "        case 'Y' : dBodyAddForce ( sphere1->getMainPrimitive()->getBody() , -30 , 0 , 0 ); break;", "is_target": false}, {"number": 502, "content": "        case 'x' : dBodyAddTorque ( sphere1->getMainPrimitive()->getBody() , 0 , 10 , 0 ); break;", "is_target": false}, {"number": 503, "content": "        case 'X' : dBodyAddTorque ( sphere1->getMainPrimitive()->getBody() , 0 , -10 , 0 ); break;", "is_target": false}]}, "2422": {"lines": [{"number": 64, "content": "    // robot is not created till now", "is_target": false}, {"number": 65, "content": "    t = 0;", "is_target": false}, {"number": 66, "content": "    massOfobject = new dMass();", "is_target": false}, {"number": 67, "content": "    getPos1 = true;", "is_target": false}, {"number": 68, "content": "    timeCounter = conf.T;", "is_target": false}, {"number": 69, "content": "    energyOneStep = new double[1];", "is_target": true}, {"number": 70, "content": "    energyOneStep[0] =  0.0;", "is_target": false}, {"number": 71, "content": "    costOfTran = 0.0;", "is_target": false}, {"number": 72, "content": "    created=false;", "is_target": false}, {"number": 73, "content": "    check = false;", "is_target": false}, {"number": 74, "content": "    recordGait=false;", "is_target": false}]}, "2423": {"lines": [{"number": 64, "content": "    // robot is not created till now", "is_target": false}, {"number": 65, "content": "    t = 0;", "is_target": false}, {"number": 66, "content": "    massOfobject = new dMass();", "is_target": false}, {"number": 67, "content": "    getPos1 = true;", "is_target": false}, {"number": 68, "content": "    timeCounter = conf.T;", "is_target": false}, {"number": 69, "content": "    energyOneStep = new double[1];", "is_target": true}, {"number": 70, "content": "    energyOneStep[0] =  0.0;", "is_target": false}, {"number": 71, "content": "    costOfTran = 0.0;", "is_target": false}, {"number": 72, "content": "    created=false;", "is_target": false}, {"number": 73, "content": "    check = false;", "is_target": false}, {"number": 74, "content": "    recordGait=false;", "is_target": false}]}, "2424": {"lines": [{"number": 217, "content": "    */", "is_target": false}, {"number": 218, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 219, "content": "", "is_target": false}, {"number": 220, "content": "    /** destroys vehicle and space", "is_target": false}, {"number": 221, "content": "     */", "is_target": false}, {"number": 222, "content": "    virtual void destroy();", "is_target": true}, {"number": 223, "content": "", "is_target": false}, {"number": 224, "content": "public:", "is_target": false}, {"number": 225, "content": "    HexapodConf conf;", "is_target": false}, {"number": 226, "content": "    double legmass = 0;    // leg mass", "is_target": false}, {"number": 227, "content": "    bool created = false;      // true if robot was created", "is_target": false}]}, "2425": {"lines": [{"number": 230, "content": "      }", "is_target": false}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "", "is_target": false}, {"number": 233, "content": "      for(unsigned int i = 0; i < 6; ++i) {", "is_target": false}, {"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "        const dReal *position = dBodyGetPosition(legContactArray[i].bodyID);", "is_target": true}, {"number": 236, "content": "", "is_target": false}, {"number": 237, "content": "        // cout<< dJointGetUniversalAngle1(joints[0]->getJoint()) * 180/M_PI  << endl;", "is_target": false}, {"number": 238, "content": "        // cout<< dJointGetUniversalAngle2(joints[0]->getJoint())  * 180/M_PI<< endl;", "is_target": false}, {"number": 239, "content": "        //  cout << dJointGetUniversalAngle1(legContactArray[i].joint) * 180/M_PI << endl;", "is_target": false}, {"number": 240, "content": "        //  cout << dJointGetUniversalAngle2(legContactArray[i].joint) * 180/M_PI << endl;", "is_target": false}]}, "2426": {"lines": [{"number": 469, "content": "        // springy knee joint", "is_target": false}, {"number": 470, "content": "        HingeJoint* k = new HingeJoint(coxaThorax, tibia, Pos(0,0,-len1/2) * m1,", "is_target": false}, {"number": 471, "content": "                                       Axis(n%2==0 ? -1 : 1,0,0) * m1);", "is_target": false}, {"number": 472, "content": "        k->init(odeHandle, osgHandleJ, true, rad1 * 2.1);", "is_target": false}, {"number": 473, "content": "        // servo used as a spring", "is_target": false}, {"number": 474, "content": "        auto servo = std::make_shared<HingeServo>(k, -1, 1, 1, 0.01,0); // parameters are set later", "is_target": true}, {"number": 475, "content": "        tebiaservos.push_back(servo);", "is_target": false}, {"number": 476, "content": "        if(conf.useTebiaMotors){", "is_target": false}, {"number": 477, "content": "          servo->setBaseName(\"leg pair \" + itos(n/2) + (n%2==0 ? \" right \" : \" left \") + \"tebia (knee)\");", "is_target": false}, {"number": 478, "content": "          addSensor(servo);", "is_target": false}, {"number": 479, "content": "          addMotor(servo);", "is_target": false}]}, "2427": {"lines": [{"number": 528, "content": "          // springy joint", "is_target": false}, {"number": 529, "content": "          HingeJoint* k = new HingeJoint(tibia, tarsus, Pos(0,0,-len2/2) * m2,", "is_target": false}, {"number": 530, "content": "                                         Axis(n%2==0 ? -1 : 1,0,0) * m2);", "is_target": false}, {"number": 531, "content": "          k->init(odeHandle, osgHandleJ, true, rad2 * 2.1);", "is_target": false}, {"number": 532, "content": "          // servo used as a spring", "is_target": false}, {"number": 533, "content": "          auto servo = std::make_shared<OneAxisServoVel>(odeHandle,k, -1, 1, 1, 0.01); // parameters are set later", "is_target": true}, {"number": 534, "content": "          joints.push_back(k);", "is_target": false}, {"number": 535, "content": "          auto spring = std::make_shared<ConstantMotor>(servo, 0.0);", "is_target": false}, {"number": 536, "content": "          tarsussprings.push_back(servo);", "is_target": false}, {"number": 537, "content": "          addMotor(spring);", "is_target": false}, {"number": 538, "content": "", "is_target": false}]}, "2428": {"lines": [{"number": 213, "content": "      */", "is_target": false}, {"number": 214, "content": "", "is_target": false}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "      if(floor(global.time) == timeCounter){", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "        dReal *position_1 = pos_record.front();", "is_target": true}, {"number": 219, "content": "        dReal *position_2 = pos_record.back();", "is_target": false}, {"number": 220, "content": "        double distance = sqrt(pow((position_2[0] - position_1[0]),2) + pow((position_2[1] - position_1[1]),2) );//+ pow((position_2[2] - position_1[2]),2));", "is_target": false}, {"number": 221, "content": "        conf.v[0] = distance/conf.T;", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "", "is_target": false}]}, "2429": {"lines": [{"number": 214, "content": "", "is_target": false}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "      if(floor(global.time) == timeCounter){", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "        dReal *position_1 = pos_record.front();", "is_target": false}, {"number": 219, "content": "        dReal *position_2 = pos_record.back();", "is_target": true}, {"number": 220, "content": "        double distance = sqrt(pow((position_2[0] - position_1[0]),2) + pow((position_2[1] - position_1[1]),2) );//+ pow((position_2[2] - position_1[2]),2));", "is_target": false}, {"number": 221, "content": "        conf.v[0] = distance/conf.T;", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "", "is_target": false}, {"number": 224, "content": "        costOfTran = costOfTransport(E_t,getMassOfRobot(),conf.v[0],conf.T);", "is_target": false}]}, "2430": {"lines": [{"number": 284, "content": "", "is_target": false}, {"number": 285, "content": "  // add own key handling stuff here, just insert some case values", "is_target": false}, {"number": 286, "content": "  virtual bool command(const OdeHandle&, const OsgHandle&, GlobalData& globalData, int key, bool down) override {", "is_target": false}, {"number": 287, "content": "    Substance s;", "is_target": false}, {"number": 288, "content": "    if (down) { // only when key is pressed, not when released", "is_target": false}, {"number": 289, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 290, "content": "        {", "is_target": false}, {"number": 291, "content": "        case 'x':", "is_target": false}, {"number": 292, "content": "          if(fixator) delete fixator;", "is_target": false}, {"number": 293, "content": "          fixator=0;", "is_target": false}, {"number": 294, "content": "          return true;", "is_target": false}]}, "2431": {"lines": [{"number": 814, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 815, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 816, "content": "", "is_target": false}, {"number": 817, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 818, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 819, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 820, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 821, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 822, "content": "", "is_target": false}, {"number": 823, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 824, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2432": {"lines": [{"number": 814, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 815, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 816, "content": "", "is_target": false}, {"number": 817, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 818, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 819, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 820, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 821, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 822, "content": "", "is_target": false}, {"number": 823, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 824, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2433": {"lines": [{"number": 814, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 815, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 816, "content": "", "is_target": false}, {"number": 817, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 818, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 819, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 820, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 821, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 822, "content": "", "is_target": false}, {"number": 823, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 824, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2434": {"lines": [{"number": 814, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 815, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 816, "content": "", "is_target": false}, {"number": 817, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 818, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 819, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 820, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 821, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 822, "content": "", "is_target": false}, {"number": 823, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 824, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2435": {"lines": [{"number": 814, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 815, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 816, "content": "", "is_target": false}, {"number": 817, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 818, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 819, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 820, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 821, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 822, "content": "", "is_target": false}, {"number": 823, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 824, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2436": {"lines": [{"number": 814, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 815, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 816, "content": "", "is_target": false}, {"number": 817, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 818, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 819, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 820, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 821, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 822, "content": "", "is_target": false}, {"number": 823, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 824, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2437": {"lines": [{"number": 814, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 815, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 816, "content": "", "is_target": false}, {"number": 817, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 818, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 819, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 820, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 821, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 822, "content": "", "is_target": false}, {"number": 823, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 824, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2438": {"lines": [{"number": 814, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 815, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 816, "content": "", "is_target": false}, {"number": 817, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 818, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 819, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 820, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 821, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 822, "content": "", "is_target": false}, {"number": 823, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 824, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2439": {"lines": [{"number": 814, "content": "//     fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 815, "content": "//     joints.push_back(fj);", "is_target": false}, {"number": 816, "content": "", "is_target": false}, {"number": 817, "content": "    // Thorax and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Thorax], objects[Left_Shoulder],", "is_target": false}, {"number": 818, "content": "                            Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 819, "content": "                            Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 820, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 821, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 822, "content": "", "is_target": false}, {"number": 823, "content": "    servo2 =  conf.useVelocityServos", "is_target": false}, {"number": 824, "content": "      ? new TwoAxisServoVel(odeHandle, uj, -conf.armJointLimit*.2, conf.armJointLimit, conf.armPower,", "is_target": false}]}, "2440": {"lines": [{"number": 180, "content": "     * where length,width and the height value are combined to a osg::Vec3", "is_target": false}, {"number": 181, "content": "     * @param node the parent node which contains the position node", "is_target": false}, {"number": 182, "content": "     * @return the geometry vector (containing length,width,heigth)", "is_target": false}, {"number": 183, "content": "     */", "is_target": false}, {"number": 184, "content": "    static const osg::Vec3 getGeometry(const XERCESC::DOMNode* node);", "is_target": false}, {"number": 185, "content": "};", "is_target": true}, {"number": 186, "content": "", "is_target": false}, {"number": 187, "content": "#define X(str) XString(str).unicodeForm()", "is_target": false}, {"number": 188, "content": "#define C(str) XString(str).charForm()", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "#define VALOFNODE(node,value) XMLHelper::getNodeAtt(node,value)", "is_target": false}]}, "2441": {"lines": [{"number": 48, "content": "#include <xercesc/dom/DOM.hpp>", "is_target": false}, {"number": 49, "content": "#include <xercesc/parsers/XercesDOMParser.hpp>", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "#include \"XMLPrimitiveFactory.h\"", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "namespace lpzrobots {", "is_target": true}, {"number": 54, "content": "  class XMLSimulation{", "is_target": false}, {"number": 55, "content": "  public:", "is_target": false}, {"number": 56, "content": "    XMLParserEngine(lpzrobots::GlobalData& globalData, const lpzrobots::OdeHandle& odeHandle, const lpzrobots::OsgHandle& osgHandle, lpzrobots::XMLSimulation* simulation);", "is_target": false}, {"number": 57, "content": "    virtual ~XMLParserEngine();", "is_target": false}, {"number": 58, "content": "", "is_target": false}]}, "2442": {"lines": [{"number": 48, "content": "#include <xercesc/dom/DOM.hpp>", "is_target": false}, {"number": 49, "content": "#include <xercesc/parsers/XercesDOMParser.hpp>", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "#include \"XMLPrimitiveFactory.h\"", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "namespace lpzrobots {", "is_target": true}, {"number": 54, "content": "  class XMLSimulation{", "is_target": false}, {"number": 55, "content": "  public:", "is_target": false}, {"number": 56, "content": "    XMLParserEngine(lpzrobots::GlobalData& globalData, const lpzrobots::OdeHandle& odeHandle, const lpzrobots::OsgHandle& osgHandle, lpzrobots::XMLSimulation* simulation);", "is_target": false}, {"number": 57, "content": "    virtual ~XMLParserEngine();", "is_target": false}, {"number": 58, "content": "", "is_target": false}]}, "2443": {"lines": [{"number": 48, "content": "#include <xercesc/dom/DOM.hpp>", "is_target": false}, {"number": 49, "content": "#include <xercesc/parsers/XercesDOMParser.hpp>", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "#include \"XMLPrimitiveFactory.h\"", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "namespace lpzrobots {", "is_target": true}, {"number": 54, "content": "  class XMLSimulation{", "is_target": false}, {"number": 55, "content": "  public:", "is_target": false}, {"number": 56, "content": "    XMLParserEngine(lpzrobots::GlobalData& globalData, const lpzrobots::OdeHandle& odeHandle, const lpzrobots::OsgHandle& osgHandle, lpzrobots::XMLSimulation* simulation);", "is_target": false}, {"number": 57, "content": "    virtual ~XMLParserEngine();", "is_target": false}, {"number": 58, "content": "", "is_target": false}]}, "2444": {"lines": [{"number": 48, "content": "#include <xercesc/dom/DOM.hpp>", "is_target": false}, {"number": 49, "content": "#include <xercesc/parsers/XercesDOMParser.hpp>", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "#include \"XMLPrimitiveFactory.h\"", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "namespace lpzrobots {", "is_target": true}, {"number": 54, "content": "  class XMLSimulation{", "is_target": false}, {"number": 55, "content": "  public:", "is_target": false}, {"number": 56, "content": "    XMLParserEngine(lpzrobots::GlobalData& globalData, const lpzrobots::OdeHandle& odeHandle, const lpzrobots::OsgHandle& osgHandle, lpzrobots::XMLSimulation* simulation);", "is_target": false}, {"number": 57, "content": "    virtual ~XMLParserEngine();", "is_target": false}, {"number": 58, "content": "", "is_target": false}]}, "2445": {"lines": [{"number": 48, "content": "#include <xercesc/dom/DOM.hpp>", "is_target": false}, {"number": 49, "content": "#include <xercesc/parsers/XercesDOMParser.hpp>", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "#include \"XMLPrimitiveFactory.h\"", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "namespace lpzrobots {", "is_target": true}, {"number": 54, "content": "  class XMLSimulation{", "is_target": false}, {"number": 55, "content": "  public:", "is_target": false}, {"number": 56, "content": "    XMLParserEngine(lpzrobots::GlobalData& globalData, const lpzrobots::OdeHandle& odeHandle, const lpzrobots::OsgHandle& osgHandle, lpzrobots::XMLSimulation* simulation);", "is_target": false}, {"number": 57, "content": "    virtual ~XMLParserEngine();", "is_target": false}, {"number": 58, "content": "", "is_target": false}]}, "2446": {"lines": [{"number": 48, "content": "#include <xercesc/dom/DOM.hpp>", "is_target": false}, {"number": 49, "content": "#include <xercesc/parsers/XercesDOMParser.hpp>", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "#include \"XMLPrimitiveFactory.h\"", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "namespace lpzrobots {", "is_target": true}, {"number": 54, "content": "  class XMLSimulation{", "is_target": false}, {"number": 55, "content": "  public:", "is_target": false}, {"number": 56, "content": "    XMLParserEngine(lpzrobots::GlobalData& globalData, const lpzrobots::OdeHandle& odeHandle, const lpzrobots::OsgHandle& osgHandle, lpzrobots::XMLSimulation* simulation);", "is_target": false}, {"number": 57, "content": "    virtual ~XMLParserEngine();", "is_target": false}, {"number": 58, "content": "", "is_target": false}]}, "2447": {"lines": [{"number": 48, "content": "#include <xercesc/dom/DOM.hpp>", "is_target": false}, {"number": 49, "content": "#include <xercesc/parsers/XercesDOMParser.hpp>", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "#include \"XMLPrimitiveFactory.h\"", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "namespace lpzrobots {", "is_target": true}, {"number": 54, "content": "  class XMLSimulation{", "is_target": false}, {"number": 55, "content": "  public:", "is_target": false}, {"number": 56, "content": "    XMLParserEngine(lpzrobots::GlobalData& globalData, const lpzrobots::OdeHandle& odeHandle, const lpzrobots::OsgHandle& osgHandle, lpzrobots::XMLSimulation* simulation);", "is_target": false}, {"number": 57, "content": "    virtual ~XMLParserEngine();", "is_target": false}, {"number": 58, "content": "", "is_target": false}]}, "2448": {"lines": [{"number": 48, "content": "#include <xercesc/dom/DOM.hpp>", "is_target": false}, {"number": 49, "content": "#include <xercesc/parsers/XercesDOMParser.hpp>", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "#include \"XMLPrimitiveFactory.h\"", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "namespace lpzrobots {", "is_target": true}, {"number": 54, "content": "  class XMLSimulation{", "is_target": false}, {"number": 55, "content": "  public:", "is_target": false}, {"number": 56, "content": "    XMLParserEngine(lpzrobots::GlobalData& globalData, const lpzrobots::OdeHandle& odeHandle, const lpzrobots::OsgHandle& osgHandle, lpzrobots::XMLSimulation* simulation);", "is_target": false}, {"number": 57, "content": "    virtual ~XMLParserEngine();", "is_target": false}, {"number": 58, "content": "", "is_target": false}]}, "2449": {"lines": [{"number": 48, "content": "#include <xercesc/dom/DOM.hpp>", "is_target": false}, {"number": 49, "content": "#include <xercesc/parsers/XercesDOMParser.hpp>", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "#include \"XMLPrimitiveFactory.h\"", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "namespace lpzrobots {", "is_target": true}, {"number": 54, "content": "  class XMLSimulation{", "is_target": false}, {"number": 55, "content": "  public:", "is_target": false}, {"number": 56, "content": "    XMLParserEngine(lpzrobots::GlobalData& globalData, const lpzrobots::OdeHandle& odeHandle, const lpzrobots::OsgHandle& osgHandle, lpzrobots::XMLSimulation* simulation);", "is_target": false}, {"number": 57, "content": "    virtual ~XMLParserEngine();", "is_target": false}, {"number": 58, "content": "", "is_target": false}]}, "2450": {"lines": [{"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "  // set our own error reporter", "is_target": false}, {"number": 104, "content": "  // so later you can do filtering, forward and so on", "is_target": false}, {"number": 105, "content": "  XMLErrorHelper* errReporter = new XMLErrorHelper();", "is_target": false}, {"number": 106, "content": "  parser->setErrorHandler(errReporter);", "is_target": false}, {"number": 107, "content": "}", "is_target": true}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "XMLParserEngine::~XMLParserEngine() {", "is_target": false}, {"number": 110, "content": "  XMLPlatformUtils::Terminate();", "is_target": false}, {"number": 111, "content": "}", "is_target": false}, {"number": 112, "content": "", "is_target": false}]}, "2451": {"lines": [{"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "  // set our own error reporter", "is_target": false}, {"number": 104, "content": "  // so later you can do filtering, forward and so on", "is_target": false}, {"number": 105, "content": "  XMLErrorHelper* errReporter = new XMLErrorHelper();", "is_target": false}, {"number": 106, "content": "  parser->setErrorHandler(errReporter);", "is_target": false}, {"number": 107, "content": "}", "is_target": true}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "XMLParserEngine::~XMLParserEngine() {", "is_target": false}, {"number": 110, "content": "  XMLPlatformUtils::Terminate();", "is_target": false}, {"number": 111, "content": "}", "is_target": false}, {"number": 112, "content": "", "is_target": false}]}, "2452": {"lines": [{"number": 87, "content": "     * Returns defaultValue if parsing was not successful (i.e. node is null).", "is_target": false}, {"number": 88, "content": "     * @param node to get the value from", "is_target": false}, {"number": 89, "content": "     * @param defaultValue the defaultValue if nodeValue cannot be read", "is_target": false}, {"number": 90, "content": "     * @return the value of the node", "is_target": false}, {"number": 91, "content": "     */", "is_target": false}, {"number": 92, "content": "    static std::string getNodeValueAsString(const XERCESC::DOMNode* node, const std::string defaultValue = \"\");", "is_target": true}, {"number": 93, "content": "", "is_target": false}, {"number": 94, "content": "    // implementation note: Yes I could have used a template function, but...who cares ;)", "is_target": false}, {"number": 95, "content": "    /**", "is_target": false}, {"number": 96, "content": "     * Returns the value of the childNode", "is_target": false}, {"number": 97, "content": "     * Returns defaultValue if parsing was not successful (i.e. not is not present).", "is_target": false}]}, "2453": {"lines": [{"number": 98, "content": "     * @param node to get the value from", "is_target": false}, {"number": 99, "content": "     * @param childNodeName the name of the childNode to get the value from", "is_target": false}, {"number": 100, "content": "     * @param defaultValue the defaultValue if nodeValue cannot be read", "is_target": false}, {"number": 101, "content": "     * @return the value of the node", "is_target": false}, {"number": 102, "content": "     */", "is_target": false}, {"number": 103, "content": "    static std::string getChildNodeValueAsString(const XERCESC::DOMNode* node, const std::string childNodeName, const std::string childValue, const std::string defaultValue = \"\");", "is_target": true}, {"number": 104, "content": "    static std::string getNodeAttAsString(const XERCESC::DOMNode* node, const std::string value, const std::string defaultValue = \"\");", "is_target": false}, {"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "    /**", "is_target": false}, {"number": 107, "content": "     * Returns the value of the node if it can be parsed into double", "is_target": false}, {"number": 108, "content": "     * Returns defaultValue if parsing was not successful", "is_target": false}]}, "2454": {"lines": [{"number": 98, "content": "     * @param node to get the value from", "is_target": false}, {"number": 99, "content": "     * @param childNodeName the name of the childNode to get the value from", "is_target": false}, {"number": 100, "content": "     * @param defaultValue the defaultValue if nodeValue cannot be read", "is_target": false}, {"number": 101, "content": "     * @return the value of the node", "is_target": false}, {"number": 102, "content": "     */", "is_target": false}, {"number": 103, "content": "    static std::string getChildNodeValueAsString(const XERCESC::DOMNode* node, const std::string childNodeName, const std::string childValue, const std::string defaultValue = \"\");", "is_target": true}, {"number": 104, "content": "    static std::string getNodeAttAsString(const XERCESC::DOMNode* node, const std::string value, const std::string defaultValue = \"\");", "is_target": false}, {"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "    /**", "is_target": false}, {"number": 107, "content": "     * Returns the value of the node if it can be parsed into double", "is_target": false}, {"number": 108, "content": "     * Returns defaultValue if parsing was not successful", "is_target": false}]}, "2455": {"lines": [{"number": 98, "content": "     * @param node to get the value from", "is_target": false}, {"number": 99, "content": "     * @param childNodeName the name of the childNode to get the value from", "is_target": false}, {"number": 100, "content": "     * @param defaultValue the defaultValue if nodeValue cannot be read", "is_target": false}, {"number": 101, "content": "     * @return the value of the node", "is_target": false}, {"number": 102, "content": "     */", "is_target": false}, {"number": 103, "content": "    static std::string getChildNodeValueAsString(const XERCESC::DOMNode* node, const std::string childNodeName, const std::string childValue, const std::string defaultValue = \"\");", "is_target": true}, {"number": 104, "content": "    static std::string getNodeAttAsString(const XERCESC::DOMNode* node, const std::string value, const std::string defaultValue = \"\");", "is_target": false}, {"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "    /**", "is_target": false}, {"number": 107, "content": "     * Returns the value of the node if it can be parsed into double", "is_target": false}, {"number": 108, "content": "     * Returns defaultValue if parsing was not successful", "is_target": false}]}, "2456": {"lines": [{"number": 99, "content": "     * @param childNodeName the name of the childNode to get the value from", "is_target": false}, {"number": 100, "content": "     * @param defaultValue the defaultValue if nodeValue cannot be read", "is_target": false}, {"number": 101, "content": "     * @return the value of the node", "is_target": false}, {"number": 102, "content": "     */", "is_target": false}, {"number": 103, "content": "    static std::string getChildNodeValueAsString(const XERCESC::DOMNode* node, const std::string childNodeName, const std::string childValue, const std::string defaultValue = \"\");", "is_target": false}, {"number": 104, "content": "    static std::string getNodeAttAsString(const XERCESC::DOMNode* node, const std::string value, const std::string defaultValue = \"\");", "is_target": true}, {"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "    /**", "is_target": false}, {"number": 107, "content": "     * Returns the value of the node if it can be parsed into double", "is_target": false}, {"number": 108, "content": "     * Returns defaultValue if parsing was not successful", "is_target": false}, {"number": 109, "content": "     * @param node to get the value from", "is_target": false}]}, "2457": {"lines": [{"number": 99, "content": "     * @param childNodeName the name of the childNode to get the value from", "is_target": false}, {"number": 100, "content": "     * @param defaultValue the defaultValue if nodeValue cannot be read", "is_target": false}, {"number": 101, "content": "     * @return the value of the node", "is_target": false}, {"number": 102, "content": "     */", "is_target": false}, {"number": 103, "content": "    static std::string getChildNodeValueAsString(const XERCESC::DOMNode* node, const std::string childNodeName, const std::string childValue, const std::string defaultValue = \"\");", "is_target": false}, {"number": 104, "content": "    static std::string getNodeAttAsString(const XERCESC::DOMNode* node, const std::string value, const std::string defaultValue = \"\");", "is_target": true}, {"number": 105, "content": "", "is_target": false}, {"number": 106, "content": "    /**", "is_target": false}, {"number": 107, "content": "     * Returns the value of the node if it can be parsed into double", "is_target": false}, {"number": 108, "content": "     * Returns defaultValue if parsing was not successful", "is_target": false}, {"number": 109, "content": "     * @param node to get the value from", "is_target": false}]}, "2458": {"lines": [{"number": 109, "content": "     * @param node to get the value from", "is_target": false}, {"number": 110, "content": "     * @param defaultValue the defaultValue if nodeValue cannot be read", "is_target": false}, {"number": 111, "content": "     * @return the value of the node", "is_target": false}, {"number": 112, "content": "     */", "is_target": false}, {"number": 113, "content": "    static double getNodeValue(const XERCESC::DOMNode* node, const double defaultValue = 0.0);", "is_target": false}, {"number": 114, "content": "    static double getNodeAtt(const XERCESC::DOMNode* node,  const std::string value, const double defaultValue = 0.0);", "is_target": true}, {"number": 115, "content": "        /**", "is_target": false}, {"number": 116, "content": "     * Returns the value of the childNode if it can be parsed into double", "is_target": false}, {"number": 117, "content": "     * Returns defaultValue if parsing was not successful.", "is_target": false}, {"number": 118, "content": "     * @param node to get the value from", "is_target": false}, {"number": 119, "content": "     * @param childNodeName the name of the childNode to get the value from", "is_target": false}]}, "2459": {"lines": [{"number": 118, "content": "     * @param node to get the value from", "is_target": false}, {"number": 119, "content": "     * @param childNodeName the name of the childNode to get the value from", "is_target": false}, {"number": 120, "content": "     * @param defaultValue the defaultValue if nodeValue cannot be read", "is_target": false}, {"number": 121, "content": "     * @return the value of the node", "is_target": false}, {"number": 122, "content": "     */", "is_target": false}, {"number": 123, "content": "    static double getChildNodeValue(const XERCESC::DOMNode* node, const std::string childNodeName, const std::string childValue, const double defaultValue = 0.0);", "is_target": true}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "    /**", "is_target": false}, {"number": 126, "content": "     * Returns the first childNode of the node with the given childNodeName.", "is_target": false}, {"number": 127, "content": "     * @param node the parent node of the childNode", "is_target": false}, {"number": 128, "content": "     * @param childNodeName the name of the childNode to get", "is_target": false}]}, "2460": {"lines": [{"number": 118, "content": "     * @param node to get the value from", "is_target": false}, {"number": 119, "content": "     * @param childNodeName the name of the childNode to get the value from", "is_target": false}, {"number": 120, "content": "     * @param defaultValue the defaultValue if nodeValue cannot be read", "is_target": false}, {"number": 121, "content": "     * @return the value of the node", "is_target": false}, {"number": 122, "content": "     */", "is_target": false}, {"number": 123, "content": "    static double getChildNodeValue(const XERCESC::DOMNode* node, const std::string childNodeName, const std::string childValue, const double defaultValue = 0.0);", "is_target": true}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "    /**", "is_target": false}, {"number": 126, "content": "     * Returns the first childNode of the node with the given childNodeName.", "is_target": false}, {"number": 127, "content": "     * @param node the parent node of the childNode", "is_target": false}, {"number": 128, "content": "     * @param childNodeName the name of the childNode to get", "is_target": false}]}, "2461": {"lines": [{"number": 126, "content": "     * Returns the first childNode of the node with the given childNodeName.", "is_target": false}, {"number": 127, "content": "     * @param node the parent node of the childNode", "is_target": false}, {"number": 128, "content": "     * @param childNodeName the name of the childNode to get", "is_target": false}, {"number": 129, "content": "     * @return the first childNode of the node with the given childNodeName, 0 if not found", "is_target": false}, {"number": 130, "content": "     */", "is_target": false}, {"number": 131, "content": "    static const XERCESC::DOMNode* getChildNode(const XERCESC::DOMNode* node, const std::string childNodeName);", "is_target": true}, {"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "", "is_target": false}, {"number": 134, "content": "    /**", "is_target": false}, {"number": 135, "content": "     * Returns the position information of the given static_cast<parent>(node).", "is_target": false}, {"number": 136, "content": "     * The position is encoded by:", "is_target": false}]}, "2462": {"lines": [{"number": 57, "content": "using namespace XERCESC;", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "using namespace lpzrobots;", "is_target": false}, {"number": 60, "content": "using namespace osg;", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "XMLBoundingShape::XMLBoundingShape(const DOMNode* boundingBoxNode, XMLParserEngine& engine, lpzrobots::Mesh* parent)", "is_target": true}, {"number": 63, "content": ": BoundingShape(\"\", parent), XMLObject(xmlEngine), boundingBoxNode(boundingBoxNode) {", "is_target": false}, {"number": 64, "content": "  // TODO Auto-generated constructor stub", "is_target": false}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "}", "is_target": false}, {"number": 67, "content": "", "is_target": false}]}, "2463": {"lines": [{"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "  // set our own error reporter", "is_target": false}, {"number": 104, "content": "  // so later you can do filtering, forward and so on", "is_target": false}, {"number": 105, "content": "  XMLErrorHelper* errReporter = new XMLErrorHelper();", "is_target": false}, {"number": 106, "content": "  parser->setErrorHandler(errReporter);", "is_target": false}, {"number": 107, "content": "}", "is_target": true}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "XMLParserEngine::~XMLParserEngine() {", "is_target": false}, {"number": 110, "content": "  XMLPlatformUtils::Terminate();", "is_target": false}, {"number": 111, "content": "}", "is_target": false}, {"number": 112, "content": "", "is_target": false}]}, "2464": {"lines": [{"number": 126, "content": "    Playground* playground = new Playground(odeHandle, osgHandle, osg::Vec3(100, 0.2, 1), 2);", "is_target": false}, {"number": 127, "content": "    // playground->setColor(Color(0,0,0,0.8));", "is_target": false}, {"number": 128, "content": "    playground->setPosition(osg::Vec3(0,0,0.05)); // playground positionieren und generieren", "is_target": false}, {"number": 129, "content": "    global.obstacles.push_back(playground);", "is_target": false}, {"number": 130, "content": "", "is_target": false}, {"number": 131, "content": "    for(int i=0; i<0; ++i){ //20", "is_target": true}, {"number": 132, "content": "      PassiveSphere* s = new PassiveSphere(odeHandle, osgHandle.changeColor(Color(0.0,1.0,0.0)), 0.5,10);", "is_target": false}, {"number": 133, "content": "      s->setPosition(osg::Vec3(-4+2*(i/5),-4+2*(i%5),2));", "is_target": false}, {"number": 134, "content": "      global.obstacles.push_back(s);", "is_target": false}, {"number": 135, "content": "    }", "is_target": false}, {"number": 136, "content": "", "is_target": false}]}, "2465": {"lines": [{"number": 134, "content": "      global.obstacles.push_back(s);", "is_target": false}, {"number": 135, "content": "    }", "is_target": false}, {"number": 136, "content": "", "is_target": false}, {"number": 137, "content": "    Nimm2Conf c = Nimm2::getDefaultConf();", "is_target": false}, {"number": 138, "content": "    c.sphereWheels=false;", "is_target": false}, {"number": 139, "content": "    c.sphereWheels=false;", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "    vehicle = new Nimm2(odeHandle, osgHandle, c, \"Nimm2\");", "is_target": false}, {"number": 142, "content": "    //OdeRobot* vehicle = new Nimm4(odeHandle, osgHandle);", "is_target": false}, {"number": 143, "content": "    vehicle->place(Pos(0,0,0.6));", "is_target": false}, {"number": 144, "content": "", "is_target": false}]}, "2466": {"lines": [{"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "  // set our own error reporter", "is_target": false}, {"number": 104, "content": "  // so later you can do filtering, forward and so on", "is_target": false}, {"number": 105, "content": "  XMLErrorHelper* errReporter = new XMLErrorHelper();", "is_target": false}, {"number": 106, "content": "  parser->setErrorHandler(errReporter);", "is_target": false}, {"number": 107, "content": "}", "is_target": true}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "XMLParserEngine::~XMLParserEngine() {", "is_target": false}, {"number": 110, "content": "  XMLPlatformUtils::Terminate();", "is_target": false}, {"number": 111, "content": "}", "is_target": false}, {"number": 112, "content": "", "is_target": false}]}, "2467": {"lines": [{"number": 33, "content": "", "is_target": false}, {"number": 34, "content": "", "is_target": false}, {"number": 35, "content": "", "is_target": false}, {"number": 36, "content": "void XMLPassiveObject::create()", "is_target": false}, {"number": 37, "content": "{", "is_target": false}, {"number": 38, "content": "        if static_cast<obstacle_exists>(destroy)();", "is_target": true}, {"number": 39, "content": "        this->obst.push_back(this->xmlEngine.getPrimitiveFactory()->createPrimitive(passiveObjectNode));", "is_target": false}, {"number": 40, "content": "        obstacle_exists = true;", "is_target": false}, {"number": 41, "content": "}", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "", "is_target": false}]}, "2468": {"lines": [{"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "  // set our own error reporter", "is_target": false}, {"number": 104, "content": "  // so later you can do filtering, forward and so on", "is_target": false}, {"number": 105, "content": "  XMLErrorHelper* errReporter = new XMLErrorHelper();", "is_target": false}, {"number": 106, "content": "  parser->setErrorHandler(errReporter);", "is_target": false}, {"number": 107, "content": "}", "is_target": true}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "XMLParserEngine::~XMLParserEngine() {", "is_target": false}, {"number": 110, "content": "  XMLPlatformUtils::Terminate();", "is_target": false}, {"number": 111, "content": "}", "is_target": false}, {"number": 112, "content": "", "is_target": false}]}, "2469": {"lines": [{"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "  // set our own error reporter", "is_target": false}, {"number": 104, "content": "  // so later you can do filtering, forward and so on", "is_target": false}, {"number": 105, "content": "  XMLErrorHelper* errReporter = new XMLErrorHelper();", "is_target": false}, {"number": 106, "content": "  parser->setErrorHandler(errReporter);", "is_target": false}, {"number": 107, "content": "}", "is_target": true}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "XMLParserEngine::~XMLParserEngine() {", "is_target": false}, {"number": 110, "content": "  XMLPlatformUtils::Terminate();", "is_target": false}, {"number": 111, "content": "}", "is_target": false}, {"number": 112, "content": "", "is_target": false}]}, "2470": {"lines": [{"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "  // set our own error reporter", "is_target": false}, {"number": 104, "content": "  // so later you can do filtering, forward and so on", "is_target": false}, {"number": 105, "content": "  XMLErrorHelper* errReporter = new XMLErrorHelper();", "is_target": false}, {"number": 106, "content": "  parser->setErrorHandler(errReporter);", "is_target": false}, {"number": 107, "content": "}", "is_target": true}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "XMLParserEngine::~XMLParserEngine() {", "is_target": false}, {"number": 110, "content": "  XMLPlatformUtils::Terminate();", "is_target": false}, {"number": 111, "content": "}", "is_target": false}, {"number": 112, "content": "", "is_target": false}]}, "2471": {"lines": [{"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "  // set our own error reporter", "is_target": false}, {"number": 104, "content": "  // so later you can do filtering, forward and so on", "is_target": false}, {"number": 105, "content": "  XMLErrorHelper* errReporter = new XMLErrorHelper();", "is_target": false}, {"number": 106, "content": "  parser->setErrorHandler(errReporter);", "is_target": false}, {"number": 107, "content": "}", "is_target": true}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "XMLParserEngine::~XMLParserEngine() {", "is_target": false}, {"number": 110, "content": "  XMLPlatformUtils::Terminate();", "is_target": false}, {"number": 111, "content": "}", "is_target": false}, {"number": 112, "content": "", "is_target": false}]}, "2472": {"lines": [{"number": 180, "content": "     * where length,width and the height value are combined to a osg::Vec3", "is_target": false}, {"number": 181, "content": "     * @param node the parent node which contains the position node", "is_target": false}, {"number": 182, "content": "     * @return the geometry vector (containing length,width,heigth)", "is_target": false}, {"number": 183, "content": "     */", "is_target": false}, {"number": 184, "content": "    static const osg::Vec3 getGeometry(const XERCESC::DOMNode* node);", "is_target": false}, {"number": 185, "content": "};", "is_target": true}, {"number": 186, "content": "", "is_target": false}, {"number": 187, "content": "#define X(str) XString(str).unicodeForm()", "is_target": false}, {"number": 188, "content": "#define C(str) XString(str).charForm()", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "#define VALOFNODE(node,value) XMLHelper::getNodeAtt(node,value)", "is_target": false}]}, "2473": {"lines": [{"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "  // set our own error reporter", "is_target": false}, {"number": 104, "content": "  // so later you can do filtering, forward and so on", "is_target": false}, {"number": 105, "content": "  XMLErrorHelper* errReporter = new XMLErrorHelper();", "is_target": false}, {"number": 106, "content": "  parser->setErrorHandler(errReporter);", "is_target": false}, {"number": 107, "content": "}", "is_target": true}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "XMLParserEngine::~XMLParserEngine() {", "is_target": false}, {"number": 110, "content": "  XMLPlatformUtils::Terminate();", "is_target": false}, {"number": 111, "content": "}", "is_target": false}, {"number": 112, "content": "", "is_target": false}]}, "2474": {"lines": [{"number": 180, "content": "     * where length,width and the height value are combined to a osg::Vec3", "is_target": false}, {"number": 181, "content": "     * @param node the parent node which contains the position node", "is_target": false}, {"number": 182, "content": "     * @return the geometry vector (containing length,width,heigth)", "is_target": false}, {"number": 183, "content": "     */", "is_target": false}, {"number": 184, "content": "    static const osg::Vec3 getGeometry(const XERCESC::DOMNode* node);", "is_target": false}, {"number": 185, "content": "};", "is_target": true}, {"number": 186, "content": "", "is_target": false}, {"number": 187, "content": "#define X(str) XString(str).unicodeForm()", "is_target": false}, {"number": 188, "content": "#define C(str) XString(str).charForm()", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "#define VALOFNODE(node,value) XMLHelper::getNodeAtt(node,value)", "is_target": false}]}, "2475": {"lines": [{"number": 180, "content": "     * where length,width and the height value are combined to a osg::Vec3", "is_target": false}, {"number": 181, "content": "     * @param node the parent node which contains the position node", "is_target": false}, {"number": 182, "content": "     * @return the geometry vector (containing length,width,heigth)", "is_target": false}, {"number": 183, "content": "     */", "is_target": false}, {"number": 184, "content": "    static const osg::Vec3 getGeometry(const XERCESC::DOMNode* node);", "is_target": false}, {"number": 185, "content": "};", "is_target": true}, {"number": 186, "content": "", "is_target": false}, {"number": 187, "content": "#define X(str) XString(str).unicodeForm()", "is_target": false}, {"number": 188, "content": "#define C(str) XString(str).charForm()", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "#define VALOFNODE(node,value) XMLHelper::getNodeAtt(node,value)", "is_target": false}]}, "2476": {"lines": [{"number": 180, "content": "     * where length,width and the height value are combined to a osg::Vec3", "is_target": false}, {"number": 181, "content": "     * @param node the parent node which contains the position node", "is_target": false}, {"number": 182, "content": "     * @return the geometry vector (containing length,width,heigth)", "is_target": false}, {"number": 183, "content": "     */", "is_target": false}, {"number": 184, "content": "    static const osg::Vec3 getGeometry(const XERCESC::DOMNode* node);", "is_target": false}, {"number": 185, "content": "};", "is_target": true}, {"number": 186, "content": "", "is_target": false}, {"number": 187, "content": "#define X(str) XString(str).unicodeForm()", "is_target": false}, {"number": 188, "content": "#define C(str) XString(str).charForm()", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "#define VALOFNODE(node,value) XMLHelper::getNodeAtt(node,value)", "is_target": false}]}, "2477": {"lines": [{"number": 180, "content": "     * where length,width and the height value are combined to a osg::Vec3", "is_target": false}, {"number": 181, "content": "     * @param node the parent node which contains the position node", "is_target": false}, {"number": 182, "content": "     * @return the geometry vector (containing length,width,heigth)", "is_target": false}, {"number": 183, "content": "     */", "is_target": false}, {"number": 184, "content": "    static const osg::Vec3 getGeometry(const XERCESC::DOMNode* node);", "is_target": false}, {"number": 185, "content": "};", "is_target": true}, {"number": 186, "content": "", "is_target": false}, {"number": 187, "content": "#define X(str) XString(str).unicodeForm()", "is_target": false}, {"number": 188, "content": "#define C(str) XString(str).charForm()", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "#define VALOFNODE(node,value) XMLHelper::getNodeAtt(node,value)", "is_target": false}]}, "2478": {"lines": [{"number": 180, "content": "     * where length,width and the height value are combined to a osg::Vec3", "is_target": false}, {"number": 181, "content": "     * @param node the parent node which contains the position node", "is_target": false}, {"number": 182, "content": "     * @return the geometry vector (containing length,width,heigth)", "is_target": false}, {"number": 183, "content": "     */", "is_target": false}, {"number": 184, "content": "    static const osg::Vec3 getGeometry(const XERCESC::DOMNode* node);", "is_target": false}, {"number": 185, "content": "};", "is_target": true}, {"number": 186, "content": "", "is_target": false}, {"number": 187, "content": "#define X(str) XString(str).unicodeForm()", "is_target": false}, {"number": 188, "content": "#define C(str) XString(str).charForm()", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "#define VALOFNODE(node,value) XMLHelper::getNodeAtt(node,value)", "is_target": false}]}, "2479": {"lines": [{"number": 30, "content": "            /** this function is called in each timestep after control. It", "is_target": false}, {"number": 31, "content": "                should perform robot-internal checks and actions,", "is_target": false}, {"number": 32, "content": "                like acting and sensing of internal motors/sensors etc.", "is_target": false}, {"number": 33, "content": "                @param globalData structure that contains global data from the simulation environment", "is_target": false}, {"number": 34, "content": "            */", "is_target": false}, {"number": 35, "content": "            virtual void doInternalStuff(lpzrobots::const GlobalData& globalData);", "is_target": true}, {"number": 36, "content": "", "is_target": false}, {"number": 37, "content": "            /// return the primitive of the robot that is used for tracking and camera following", "is_target": false}, {"number": 38, "content": "            virtual lpzrobots::Primitive* getMainPrimitive()  const;", "is_target": false}, {"number": 39, "content": "", "is_target": false}, {"number": 40, "content": "};", "is_target": false}]}, "2480": {"lines": [{"number": 180, "content": "     * where length,width and the height value are combined to a osg::Vec3", "is_target": false}, {"number": 181, "content": "     * @param node the parent node which contains the position node", "is_target": false}, {"number": 182, "content": "     * @return the geometry vector (containing length,width,heigth)", "is_target": false}, {"number": 183, "content": "     */", "is_target": false}, {"number": 184, "content": "    static const osg::Vec3 getGeometry(const XERCESC::DOMNode* node);", "is_target": false}, {"number": 185, "content": "};", "is_target": true}, {"number": 186, "content": "", "is_target": false}, {"number": 187, "content": "#define X(str) XString(str).unicodeForm()", "is_target": false}, {"number": 188, "content": "#define C(str) XString(str).charForm()", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "#define VALOFNODE(node,value) XMLHelper::getNodeAtt(node,value)", "is_target": false}]}, "2481": {"lines": [{"number": 180, "content": "     * where length,width and the height value are combined to a osg::Vec3", "is_target": false}, {"number": 181, "content": "     * @param node the parent node which contains the position node", "is_target": false}, {"number": 182, "content": "     * @return the geometry vector (containing length,width,heigth)", "is_target": false}, {"number": 183, "content": "     */", "is_target": false}, {"number": 184, "content": "    static const osg::Vec3 getGeometry(const XERCESC::DOMNode* node);", "is_target": false}, {"number": 185, "content": "};", "is_target": true}, {"number": 186, "content": "", "is_target": false}, {"number": 187, "content": "#define X(str) XString(str).unicodeForm()", "is_target": false}, {"number": 188, "content": "#define C(str) XString(str).charForm()", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "#define VALOFNODE(node,value) XMLHelper::getNodeAtt(node,value)", "is_target": false}]}, "2482": {"lines": [{"number": 180, "content": "     * where length,width and the height value are combined to a osg::Vec3", "is_target": false}, {"number": 181, "content": "     * @param node the parent node which contains the position node", "is_target": false}, {"number": 182, "content": "     * @return the geometry vector (containing length,width,heigth)", "is_target": false}, {"number": 183, "content": "     */", "is_target": false}, {"number": 184, "content": "    static const osg::Vec3 getGeometry(const XERCESC::DOMNode* node);", "is_target": false}, {"number": 185, "content": "};", "is_target": true}, {"number": 186, "content": "", "is_target": false}, {"number": 187, "content": "#define X(str) XString(str).unicodeForm()", "is_target": false}, {"number": 188, "content": "#define C(str) XString(str).charForm()", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "#define VALOFNODE(node,value) XMLHelper::getNodeAtt(node,value)", "is_target": false}]}, "2483": {"lines": [{"number": 154, "content": "// include simulation environment stuff", "is_target": false}, {"number": 155, "content": "#include \"XMLSimulation.h\"", "is_target": false}, {"number": 156, "content": "", "is_target": false}, {"number": 157, "content": "// include agent (class for{", "is_target": false}, {"number": 158, "content": "  success", "is_target": false}, {"number": 159, "content": "}", "is_target": true}, {"number": 160, "content": "*/", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "class ThisSim{", "is_target": false}, {"number": 163, "content": "public:", "is_target": false}, {"number": 164, "content": "", "is_target": false}]}, "2484": {"lines": [{"number": 154, "content": "// include simulation environment stuff", "is_target": false}, {"number": 155, "content": "#include \"XMLSimulation.h\"", "is_target": false}, {"number": 156, "content": "", "is_target": false}, {"number": 157, "content": "// include agent (class for{", "is_target": false}, {"number": 158, "content": "  success", "is_target": false}, {"number": 159, "content": "}", "is_target": true}, {"number": 160, "content": "*/", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "class ThisSim{", "is_target": false}, {"number": 163, "content": "public:", "is_target": false}, {"number": 164, "content": "", "is_target": false}]}, "2485": {"lines": [{"number": 140, "content": "// include simulation environment stuff", "is_target": false}, {"number": 141, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "// include agent (class for{", "is_target": false}, {"number": 144, "content": "  success", "is_target": false}, {"number": 145, "content": "}", "is_target": true}, {"number": 146, "content": "*/", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "class ThisSim{", "is_target": false}, {"number": 149, "content": "public:", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "2486": {"lines": [{"number": 154, "content": "// include simulation environment stuff", "is_target": false}, {"number": 155, "content": "#include \"XMLSimulation.h\"", "is_target": false}, {"number": 156, "content": "", "is_target": false}, {"number": 157, "content": "// include agent (class for{", "is_target": false}, {"number": 158, "content": "  success", "is_target": false}, {"number": 159, "content": "}", "is_target": true}, {"number": 160, "content": "*/", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "class ThisSim{", "is_target": false}, {"number": 163, "content": "public:", "is_target": false}, {"number": 164, "content": "", "is_target": false}]}, "2487": {"lines": [{"number": 140, "content": "// include simulation environment stuff", "is_target": false}, {"number": 141, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "// include agent (class for{", "is_target": false}, {"number": 144, "content": "  success", "is_target": false}, {"number": 145, "content": "}", "is_target": true}, {"number": 146, "content": "*/", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "class ThisSim{", "is_target": false}, {"number": 149, "content": "public:", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "2488": {"lines": [{"number": 154, "content": "// include simulation environment stuff", "is_target": false}, {"number": 155, "content": "#include \"XMLSimulation.h\"", "is_target": false}, {"number": 156, "content": "", "is_target": false}, {"number": 157, "content": "// include agent (class for{", "is_target": false}, {"number": 158, "content": "  success", "is_target": false}, {"number": 159, "content": "}", "is_target": true}, {"number": 160, "content": "*/", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "class ThisSim{", "is_target": false}, {"number": 163, "content": "public:", "is_target": false}, {"number": 164, "content": "", "is_target": false}]}, "2489": {"lines": [{"number": 154, "content": "// include simulation environment stuff", "is_target": false}, {"number": 155, "content": "#include \"XMLSimulation.h\"", "is_target": false}, {"number": 156, "content": "", "is_target": false}, {"number": 157, "content": "// include agent (class for{", "is_target": false}, {"number": 158, "content": "  success", "is_target": false}, {"number": 159, "content": "}", "is_target": true}, {"number": 160, "content": "*/", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "class ThisSim{", "is_target": false}, {"number": 163, "content": "public:", "is_target": false}, {"number": 164, "content": "", "is_target": false}]}, "2490": {"lines": [{"number": 154, "content": "// include simulation environment stuff", "is_target": false}, {"number": 155, "content": "#include \"XMLSimulation.h\"", "is_target": false}, {"number": 156, "content": "", "is_target": false}, {"number": 157, "content": "// include agent (class for{", "is_target": false}, {"number": 158, "content": "  success", "is_target": false}, {"number": 159, "content": "}", "is_target": true}, {"number": 160, "content": "*/", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "class ThisSim{", "is_target": false}, {"number": 163, "content": "public:", "is_target": false}, {"number": 164, "content": "", "is_target": false}]}, "2491": {"lines": [{"number": 140, "content": "// include simulation environment stuff", "is_target": false}, {"number": 141, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "// include agent (class for{", "is_target": false}, {"number": 144, "content": "  success", "is_target": false}, {"number": 145, "content": "}", "is_target": true}, {"number": 146, "content": "*/", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "class ThisSim{", "is_target": false}, {"number": 149, "content": "public:", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "2492": {"lines": [{"number": 140, "content": "// include simulation environment stuff", "is_target": false}, {"number": 141, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "// include agent (class for{", "is_target": false}, {"number": 144, "content": "  success", "is_target": false}, {"number": 145, "content": "}", "is_target": true}, {"number": 146, "content": "*/", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "class ThisSim{", "is_target": false}, {"number": 149, "content": "public:", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "2493": {"lines": [{"number": 134, "content": "    }", "is_target": false}, {"number": 135, "content": "  protected:", "is_target": false}, {"number": 136, "content": "    lpzrobots::Joint* robotfixator;", "is_target": false}, {"number": 137, "content": "    AbstractController* controller;", "is_target": false}, {"number": 138, "content": "    lpzrobots::AmosII* amos;", "is_target": false}, {"number": 139, "content": "};", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "int main(int argc, char **argv)", "is_target": false}, {"number": 142, "content": "    {", "is_target": false}, {"number": 143, "content": "  ThisSim sim;", "is_target": false}, {"number": 144, "content": "  sim.setGroundTexture(\"Images/greenground.rgb\");", "is_target": false}]}, "2494": {"lines": [{"number": 154, "content": "// include simulation environment stuff", "is_target": false}, {"number": 155, "content": "#include \"XMLSimulation.h\"", "is_target": false}, {"number": 156, "content": "", "is_target": false}, {"number": 157, "content": "// include agent (class for{", "is_target": false}, {"number": 158, "content": "  success", "is_target": false}, {"number": 159, "content": "}", "is_target": true}, {"number": 160, "content": "*/", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "class ThisSim{", "is_target": false}, {"number": 163, "content": "public:", "is_target": false}, {"number": 164, "content": "", "is_target": false}]}, "2495": {"lines": [{"number": 134, "content": "    }", "is_target": false}, {"number": 135, "content": "  protected:", "is_target": false}, {"number": 136, "content": "    lpzrobots::Joint* robotfixator;", "is_target": false}, {"number": 137, "content": "    AbstractController* controller;", "is_target": false}, {"number": 138, "content": "    lpzrobots::AmosII* amos;", "is_target": false}, {"number": 139, "content": "};", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "int main(int argc, char **argv)", "is_target": false}, {"number": 142, "content": "    {", "is_target": false}, {"number": 143, "content": "  ThisSim sim;", "is_target": false}, {"number": 144, "content": "  sim.setGroundTexture(\"Images/greenground.rgb\");", "is_target": false}]}, "2496": {"lines": [{"number": 154, "content": "// include simulation environment stuff", "is_target": false}, {"number": 155, "content": "#include \"XMLSimulation.h\"", "is_target": false}, {"number": 156, "content": "", "is_target": false}, {"number": 157, "content": "// include agent (class for{", "is_target": false}, {"number": 158, "content": "  success", "is_target": false}, {"number": 159, "content": "}", "is_target": true}, {"number": 160, "content": "*/", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "class ThisSim{", "is_target": false}, {"number": 163, "content": "public:", "is_target": false}, {"number": 164, "content": "", "is_target": false}]}, "2497": {"lines": [{"number": 140, "content": "// include simulation environment stuff", "is_target": false}, {"number": 141, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "// include agent (class for{", "is_target": false}, {"number": 144, "content": "  success", "is_target": false}, {"number": 145, "content": "}", "is_target": true}, {"number": 146, "content": "*/", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "class ThisSim{", "is_target": false}, {"number": 149, "content": "public:", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "2498": {"lines": [{"number": 134, "content": "    }", "is_target": false}, {"number": 135, "content": "  protected:", "is_target": false}, {"number": 136, "content": "    lpzrobots::Joint* robotfixator;", "is_target": false}, {"number": 137, "content": "    AbstractController* controller;", "is_target": false}, {"number": 138, "content": "    lpzrobots::AmosII* amos;", "is_target": false}, {"number": 139, "content": "};", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "int main(int argc, char **argv)", "is_target": false}, {"number": 142, "content": "    {", "is_target": false}, {"number": 143, "content": "  ThisSim sim;", "is_target": false}, {"number": 144, "content": "  sim.setGroundTexture(\"Images/greenground.rgb\");", "is_target": false}]}, "2499": {"lines": [{"number": 140, "content": "// include simulation environment stuff", "is_target": false}, {"number": 141, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "// include agent (class for{", "is_target": false}, {"number": 144, "content": "  success", "is_target": false}, {"number": 145, "content": "}", "is_target": true}, {"number": 146, "content": "*/", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "class ThisSim{", "is_target": false}, {"number": 149, "content": "public:", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "2500": {"lines": [{"number": 154, "content": "// include simulation environment stuff", "is_target": false}, {"number": 155, "content": "#include \"XMLSimulation.h\"", "is_target": false}, {"number": 156, "content": "", "is_target": false}, {"number": 157, "content": "// include agent (class for{", "is_target": false}, {"number": 158, "content": "  success", "is_target": false}, {"number": 159, "content": "}", "is_target": true}, {"number": 160, "content": "*/", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "class ThisSim{", "is_target": false}, {"number": 163, "content": "public:", "is_target": false}, {"number": 164, "content": "", "is_target": false}]}, "2501": {"lines": [{"number": 134, "content": "    }", "is_target": false}, {"number": 135, "content": "  protected:", "is_target": false}, {"number": 136, "content": "    lpzrobots::Joint* robotfixator;", "is_target": false}, {"number": 137, "content": "    AbstractController* controller;", "is_target": false}, {"number": 138, "content": "    lpzrobots::AmosII* amos;", "is_target": false}, {"number": 139, "content": "};", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "int main(int argc, char **argv)", "is_target": false}, {"number": 142, "content": "    {", "is_target": false}, {"number": 143, "content": "  ThisSim sim;", "is_target": false}, {"number": 144, "content": "  sim.setGroundTexture(\"Images/greenground.rgb\");", "is_target": false}]}, "2502": {"lines": [{"number": 140, "content": "// include simulation environment stuff", "is_target": false}, {"number": 141, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "// include agent (class for{", "is_target": false}, {"number": 144, "content": "  success", "is_target": false}, {"number": 145, "content": "}", "is_target": true}, {"number": 146, "content": "*/", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "class ThisSim{", "is_target": false}, {"number": 149, "content": "public:", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "2503": {"lines": [{"number": 134, "content": "    }", "is_target": false}, {"number": 135, "content": "  protected:", "is_target": false}, {"number": 136, "content": "    lpzrobots::Joint* robotfixator;", "is_target": false}, {"number": 137, "content": "    AbstractController* controller;", "is_target": false}, {"number": 138, "content": "    lpzrobots::AmosII* amos;", "is_target": false}, {"number": 139, "content": "};", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "int main(int argc, char **argv)", "is_target": false}, {"number": 142, "content": "    {", "is_target": false}, {"number": 143, "content": "  ThisSim sim;", "is_target": false}, {"number": 144, "content": "  sim.setGroundTexture(\"Images/greenground.rgb\");", "is_target": false}]}, "2504": {"lines": [{"number": 140, "content": "// include simulation environment stuff", "is_target": false}, {"number": 141, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "// include agent (class for{", "is_target": false}, {"number": 144, "content": "  success", "is_target": false}, {"number": 145, "content": "}", "is_target": true}, {"number": 146, "content": "*/", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "class ThisSim{", "is_target": false}, {"number": 149, "content": "public:", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "2505": {"lines": [{"number": 134, "content": "    }", "is_target": false}, {"number": 135, "content": "  protected:", "is_target": false}, {"number": 136, "content": "    lpzrobots::Joint* robotfixator;", "is_target": false}, {"number": 137, "content": "    AbstractController* controller;", "is_target": false}, {"number": 138, "content": "    lpzrobots::AmosII* amos;", "is_target": false}, {"number": 139, "content": "};", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "int main(int argc, char **argv)", "is_target": false}, {"number": 142, "content": "    {", "is_target": false}, {"number": 143, "content": "  ThisSim sim;", "is_target": false}, {"number": 144, "content": "  sim.setGroundTexture(\"Images/greenground.rgb\");", "is_target": false}]}, "2506": {"lines": [{"number": 164, "content": "          std::pair<paramkey, paramval>(\"direction\", conf.direction));", "is_target": false}, {"number": 165, "content": "      list.push_back(", "is_target": false}, {"number": 166, "content": "          std::pair<paramkey, paramval>(\"bias\", conf.bias));", "is_target": false}, {"number": 167, "content": "      return list;", "is_target": false}, {"number": 168, "content": "    }", "is_target": false}, {"number": 169, "content": "};", "is_target": true}, {"number": 170, "content": "", "is_target": false}, {"number": 171, "content": "#endif", "is_target": false}, {"number": 172, "content": "", "is_target": false}]}, "2507": {"lines": [{"number": 140, "content": "// include simulation environment stuff", "is_target": false}, {"number": 141, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 142, "content": "", "is_target": false}, {"number": 143, "content": "// include agent (class for{", "is_target": false}, {"number": 144, "content": "  success", "is_target": false}, {"number": 145, "content": "}", "is_target": true}, {"number": 146, "content": "*/", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "class ThisSim{", "is_target": false}, {"number": 149, "content": "public:", "is_target": false}, {"number": 150, "content": "", "is_target": false}]}, "2508": {"lines": [{"number": 134, "content": "    }", "is_target": false}, {"number": 135, "content": "  protected:", "is_target": false}, {"number": 136, "content": "    lpzrobots::Joint* robotfixator;", "is_target": false}, {"number": 137, "content": "    AbstractController* controller;", "is_target": false}, {"number": 138, "content": "    lpzrobots::AmosII* amos;", "is_target": false}, {"number": 139, "content": "};", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "int main(int argc, char **argv)", "is_target": false}, {"number": 142, "content": "    {", "is_target": false}, {"number": 143, "content": "  ThisSim sim;", "is_target": false}, {"number": 144, "content": "  sim.setGroundTexture(\"Images/greenground.rgb\");", "is_target": false}]}, "2509": {"lines": [{"number": 134, "content": "    }", "is_target": false}, {"number": 135, "content": "  protected:", "is_target": false}, {"number": 136, "content": "    lpzrobots::Joint* robotfixator;", "is_target": false}, {"number": 137, "content": "    AbstractController* controller;", "is_target": false}, {"number": 138, "content": "    lpzrobots::AmosII* amos;", "is_target": false}, {"number": 139, "content": "};", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "int main(int argc, char **argv)", "is_target": false}, {"number": 142, "content": "    {", "is_target": false}, {"number": 143, "content": "  ThisSim sim;", "is_target": false}, {"number": 144, "content": "  sim.setGroundTexture(\"Images/greenground.rgb\");", "is_target": false}]}, "2510": {"lines": [{"number": 121, "content": "//  virtual void bindingDescription(osg::ApplicationUsage & au) const {", "is_target": false}, {"number": 122, "content": "//    au.addKeyboardMouseBinding(__PLACEHOLDER_10__,__PLACEHOLDER_11__);", "is_target": false}, {"number": 123, "content": "//    au.addKeyboardMouseBinding(__PLACEHOLDER_12__,__PLACEHOLDER_13__);", "is_target": false}, {"number": 124, "content": "//  }", "is_target": false}, {"number": 125, "content": "", "is_target": false}, {"number": 126, "content": "};", "is_target": true}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 129, "content": "{", "is_target": false}, {"number": 130, "content": "  ThisSim sim;", "is_target": false}, {"number": 131, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "2511": {"lines": [{"number": 134, "content": "    }", "is_target": false}, {"number": 135, "content": "  protected:", "is_target": false}, {"number": 136, "content": "    lpzrobots::Joint* robotfixator;", "is_target": false}, {"number": 137, "content": "    AbstractController* controller;", "is_target": false}, {"number": 138, "content": "    lpzrobots::AmosII* amos;", "is_target": false}, {"number": 139, "content": "};", "is_target": true}, {"number": 140, "content": "", "is_target": false}, {"number": 141, "content": "int main(int argc, char **argv)", "is_target": false}, {"number": 142, "content": "    {", "is_target": false}, {"number": 143, "content": "  ThisSim sim;", "is_target": false}, {"number": 144, "content": "  sim.setGroundTexture(\"Images/greenground.rgb\");", "is_target": false}]}, "2512": {"lines": [{"number": 121, "content": "//  virtual void bindingDescription(osg::ApplicationUsage & au) const {", "is_target": false}, {"number": 122, "content": "//    au.addKeyboardMouseBinding(__PLACEHOLDER_10__,__PLACEHOLDER_11__);", "is_target": false}, {"number": 123, "content": "//    au.addKeyboardMouseBinding(__PLACEHOLDER_12__,__PLACEHOLDER_13__);", "is_target": false}, {"number": 124, "content": "//  }", "is_target": false}, {"number": 125, "content": "", "is_target": false}, {"number": 126, "content": "};", "is_target": true}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 129, "content": "{", "is_target": false}, {"number": 130, "content": "  ThisSim sim;", "is_target": false}, {"number": 131, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "2513": {"lines": [{"number": 215, "content": "  virtual void addCallback(const GlobalData& globalData, bool draw, bool pause, bool control) override {", "is_target": false}, {"number": 216, "content": "  }", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "  virtual void end(const GlobalData& globalData) override {", "is_target": false}, {"number": 219, "content": "  }", "is_target": false}, {"number": 220, "content": "};", "is_target": true}, {"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 224, "content": "{", "is_target": false}, {"number": 225, "content": "  ThisSim sim;", "is_target": false}]}, "2514": {"lines": [{"number": 121, "content": "//  virtual void bindingDescription(osg::ApplicationUsage & au) const {", "is_target": false}, {"number": 122, "content": "//    au.addKeyboardMouseBinding(__PLACEHOLDER_10__,__PLACEHOLDER_11__);", "is_target": false}, {"number": 123, "content": "//    au.addKeyboardMouseBinding(__PLACEHOLDER_12__,__PLACEHOLDER_13__);", "is_target": false}, {"number": 124, "content": "//  }", "is_target": false}, {"number": 125, "content": "", "is_target": false}, {"number": 126, "content": "};", "is_target": true}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 129, "content": "{", "is_target": false}, {"number": 130, "content": "  ThisSim sim;", "is_target": false}, {"number": 131, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "2515": {"lines": [{"number": 215, "content": "  virtual void addCallback(const GlobalData& globalData, bool draw, bool pause, bool control) override {", "is_target": false}, {"number": 216, "content": "  }", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "  virtual void end(const GlobalData& globalData) override {", "is_target": false}, {"number": 219, "content": "  }", "is_target": false}, {"number": 220, "content": "};", "is_target": true}, {"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 224, "content": "{", "is_target": false}, {"number": 225, "content": "  ThisSim sim;", "is_target": false}]}, "2516": {"lines": [{"number": 121, "content": "//  virtual void bindingDescription(osg::ApplicationUsage & au) const {", "is_target": false}, {"number": 122, "content": "//    au.addKeyboardMouseBinding(__PLACEHOLDER_10__,__PLACEHOLDER_11__);", "is_target": false}, {"number": 123, "content": "//    au.addKeyboardMouseBinding(__PLACEHOLDER_12__,__PLACEHOLDER_13__);", "is_target": false}, {"number": 124, "content": "//  }", "is_target": false}, {"number": 125, "content": "", "is_target": false}, {"number": 126, "content": "};", "is_target": true}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 129, "content": "{", "is_target": false}, {"number": 130, "content": "  ThisSim sim;", "is_target": false}, {"number": 131, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "2517": {"lines": [{"number": 121, "content": "//  virtual void bindingDescription(osg::ApplicationUsage & au) const {", "is_target": false}, {"number": 122, "content": "//    au.addKeyboardMouseBinding(__PLACEHOLDER_10__,__PLACEHOLDER_11__);", "is_target": false}, {"number": 123, "content": "//    au.addKeyboardMouseBinding(__PLACEHOLDER_12__,__PLACEHOLDER_13__);", "is_target": false}, {"number": 124, "content": "//  }", "is_target": false}, {"number": 125, "content": "", "is_target": false}, {"number": 126, "content": "};", "is_target": true}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 129, "content": "{", "is_target": false}, {"number": 130, "content": "  ThisSim sim;", "is_target": false}, {"number": 131, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "2518": {"lines": [{"number": 215, "content": "  virtual void addCallback(const GlobalData& globalData, bool draw, bool pause, bool control) override {", "is_target": false}, {"number": 216, "content": "  }", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "  virtual void end(const GlobalData& globalData) override {", "is_target": false}, {"number": 219, "content": "  }", "is_target": false}, {"number": 220, "content": "};", "is_target": true}, {"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 224, "content": "{", "is_target": false}, {"number": 225, "content": "  ThisSim sim;", "is_target": false}]}, "2519": {"lines": [{"number": 121, "content": "//  virtual void bindingDescription(osg::ApplicationUsage & au) const {", "is_target": false}, {"number": 122, "content": "//    au.addKeyboardMouseBinding(__PLACEHOLDER_10__,__PLACEHOLDER_11__);", "is_target": false}, {"number": 123, "content": "//    au.addKeyboardMouseBinding(__PLACEHOLDER_12__,__PLACEHOLDER_13__);", "is_target": false}, {"number": 124, "content": "//  }", "is_target": false}, {"number": 125, "content": "", "is_target": false}, {"number": 126, "content": "};", "is_target": true}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 129, "content": "{", "is_target": false}, {"number": 130, "content": "  ThisSim sim;", "is_target": false}, {"number": 131, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "2520": {"lines": [{"number": 215, "content": "  virtual void addCallback(const GlobalData& globalData, bool draw, bool pause, bool control) override {", "is_target": false}, {"number": 216, "content": "  }", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "  virtual void end(const GlobalData& globalData) override {", "is_target": false}, {"number": 219, "content": "  }", "is_target": false}, {"number": 220, "content": "};", "is_target": true}, {"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 224, "content": "{", "is_target": false}, {"number": 225, "content": "  ThisSim sim;", "is_target": false}]}, "2521": {"lines": [{"number": 224, "content": "    return false;", "is_target": false}, {"number": 225, "content": "  }", "is_target": false}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "", "is_target": false}, {"number": 229, "content": "};", "is_target": true}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 233, "content": "{", "is_target": false}, {"number": 234, "content": "  ThisSim sim;", "is_target": false}]}, "2522": {"lines": [{"number": 215, "content": "  virtual void addCallback(const GlobalData& globalData, bool draw, bool pause, bool control) override {", "is_target": false}, {"number": 216, "content": "  }", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "  virtual void end(const GlobalData& globalData) override {", "is_target": false}, {"number": 219, "content": "  }", "is_target": false}, {"number": 220, "content": "};", "is_target": true}, {"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 224, "content": "{", "is_target": false}, {"number": 225, "content": "  ThisSim sim;", "is_target": false}]}, "2523": {"lines": [{"number": 121, "content": "//  virtual void bindingDescription(osg::ApplicationUsage & au) const {", "is_target": false}, {"number": 122, "content": "//    au.addKeyboardMouseBinding(__PLACEHOLDER_10__,__PLACEHOLDER_11__);", "is_target": false}, {"number": 123, "content": "//    au.addKeyboardMouseBinding(__PLACEHOLDER_12__,__PLACEHOLDER_13__);", "is_target": false}, {"number": 124, "content": "//  }", "is_target": false}, {"number": 125, "content": "", "is_target": false}, {"number": 126, "content": "};", "is_target": true}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 129, "content": "{", "is_target": false}, {"number": 130, "content": "  ThisSim sim;", "is_target": false}, {"number": 131, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "2524": {"lines": [{"number": 224, "content": "    return false;", "is_target": false}, {"number": 225, "content": "  }", "is_target": false}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "", "is_target": false}, {"number": 229, "content": "};", "is_target": true}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 233, "content": "{", "is_target": false}, {"number": 234, "content": "  ThisSim sim;", "is_target": false}]}, "2525": {"lines": [{"number": 224, "content": "    return false;", "is_target": false}, {"number": 225, "content": "  }", "is_target": false}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "", "is_target": false}, {"number": 229, "content": "};", "is_target": true}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 233, "content": "{", "is_target": false}, {"number": 234, "content": "  ThisSim sim;", "is_target": false}]}, "2526": {"lines": [{"number": 215, "content": "  virtual void addCallback(const GlobalData& globalData, bool draw, bool pause, bool control) override {", "is_target": false}, {"number": 216, "content": "  }", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "  virtual void end(const GlobalData& globalData) override {", "is_target": false}, {"number": 219, "content": "  }", "is_target": false}, {"number": 220, "content": "};", "is_target": true}, {"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 224, "content": "{", "is_target": false}, {"number": 225, "content": "  ThisSim sim;", "is_target": false}]}, "2527": {"lines": [{"number": 121, "content": "//  virtual void bindingDescription(osg::ApplicationUsage & au) const {", "is_target": false}, {"number": 122, "content": "//    au.addKeyboardMouseBinding(__PLACEHOLDER_10__,__PLACEHOLDER_11__);", "is_target": false}, {"number": 123, "content": "//    au.addKeyboardMouseBinding(__PLACEHOLDER_12__,__PLACEHOLDER_13__);", "is_target": false}, {"number": 124, "content": "//  }", "is_target": false}, {"number": 125, "content": "", "is_target": false}, {"number": 126, "content": "};", "is_target": true}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 129, "content": "{", "is_target": false}, {"number": 130, "content": "  ThisSim sim;", "is_target": false}, {"number": 131, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "2528": {"lines": [{"number": 224, "content": "    return false;", "is_target": false}, {"number": 225, "content": "  }", "is_target": false}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "", "is_target": false}, {"number": 229, "content": "};", "is_target": true}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 233, "content": "{", "is_target": false}, {"number": 234, "content": "  ThisSim sim;", "is_target": false}]}, "2529": {"lines": [{"number": 121, "content": "//  virtual void bindingDescription(osg::ApplicationUsage & au) const {", "is_target": false}, {"number": 122, "content": "//    au.addKeyboardMouseBinding(__PLACEHOLDER_10__,__PLACEHOLDER_11__);", "is_target": false}, {"number": 123, "content": "//    au.addKeyboardMouseBinding(__PLACEHOLDER_12__,__PLACEHOLDER_13__);", "is_target": false}, {"number": 124, "content": "//  }", "is_target": false}, {"number": 125, "content": "", "is_target": false}, {"number": 126, "content": "};", "is_target": true}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 129, "content": "{", "is_target": false}, {"number": 130, "content": "  ThisSim sim;", "is_target": false}, {"number": 131, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "2530": {"lines": [{"number": 224, "content": "    return false;", "is_target": false}, {"number": 225, "content": "  }", "is_target": false}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "", "is_target": false}, {"number": 229, "content": "};", "is_target": true}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 233, "content": "{", "is_target": false}, {"number": 234, "content": "  ThisSim sim;", "is_target": false}]}, "2531": {"lines": [{"number": 167, "content": "  virtual void bindingDescription(osg::ApplicationUsage & au) const {", "is_target": false}, {"number": 168, "content": "    au.addKeyboardMouseBinding(\"Simulation: x\",\"Delete fixation joint (hand will fall down)\");", "is_target": false}, {"number": 169, "content": "    au.addKeyboardMouseBinding(\"Simulation: c\",\"Create Capsule in hand\");", "is_target": false}, {"number": 170, "content": "  }", "is_target": false}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "};", "is_target": true}, {"number": 173, "content": "", "is_target": false}, {"number": 174, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 175, "content": "{", "is_target": false}, {"number": 176, "content": "  ThisSim sim;", "is_target": false}, {"number": 177, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "2532": {"lines": [{"number": 215, "content": "  virtual void addCallback(const GlobalData& globalData, bool draw, bool pause, bool control) override {", "is_target": false}, {"number": 216, "content": "  }", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "  virtual void end(const GlobalData& globalData) override {", "is_target": false}, {"number": 219, "content": "  }", "is_target": false}, {"number": 220, "content": "};", "is_target": true}, {"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 224, "content": "{", "is_target": false}, {"number": 225, "content": "  ThisSim sim;", "is_target": false}]}, "2533": {"lines": [{"number": 167, "content": "  virtual void bindingDescription(osg::ApplicationUsage & au) const {", "is_target": false}, {"number": 168, "content": "    au.addKeyboardMouseBinding(\"Simulation: x\",\"Delete fixation joint (hand will fall down)\");", "is_target": false}, {"number": 169, "content": "    au.addKeyboardMouseBinding(\"Simulation: c\",\"Create Capsule in hand\");", "is_target": false}, {"number": 170, "content": "  }", "is_target": false}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "};", "is_target": true}, {"number": 173, "content": "", "is_target": false}, {"number": 174, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 175, "content": "{", "is_target": false}, {"number": 176, "content": "  ThisSim sim;", "is_target": false}, {"number": 177, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "2534": {"lines": [{"number": 224, "content": "    return false;", "is_target": false}, {"number": 225, "content": "  }", "is_target": false}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "", "is_target": false}, {"number": 229, "content": "};", "is_target": true}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 233, "content": "{", "is_target": false}, {"number": 234, "content": "  ThisSim sim;", "is_target": false}]}, "2535": {"lines": [{"number": 167, "content": "  virtual void bindingDescription(osg::ApplicationUsage & au) const {", "is_target": false}, {"number": 168, "content": "    au.addKeyboardMouseBinding(\"Simulation: x\",\"Delete fixation joint (hand will fall down)\");", "is_target": false}, {"number": 169, "content": "    au.addKeyboardMouseBinding(\"Simulation: c\",\"Create Capsule in hand\");", "is_target": false}, {"number": 170, "content": "  }", "is_target": false}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "};", "is_target": true}, {"number": 173, "content": "", "is_target": false}, {"number": 174, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 175, "content": "{", "is_target": false}, {"number": 176, "content": "  ThisSim sim;", "is_target": false}, {"number": 177, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "2536": {"lines": [{"number": 224, "content": "    return false;", "is_target": false}, {"number": 225, "content": "  }", "is_target": false}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "", "is_target": false}, {"number": 229, "content": "};", "is_target": true}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 233, "content": "{", "is_target": false}, {"number": 234, "content": "  ThisSim sim;", "is_target": false}]}, "2537": {"lines": [{"number": 215, "content": "  virtual void addCallback(const GlobalData& globalData, bool draw, bool pause, bool control) override {", "is_target": false}, {"number": 216, "content": "  }", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "  virtual void end(const GlobalData& globalData) override {", "is_target": false}, {"number": 219, "content": "  }", "is_target": false}, {"number": 220, "content": "};", "is_target": true}, {"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 224, "content": "{", "is_target": false}, {"number": 225, "content": "  ThisSim sim;", "is_target": false}]}, "2538": {"lines": [{"number": 167, "content": "  virtual void bindingDescription(osg::ApplicationUsage & au) const {", "is_target": false}, {"number": 168, "content": "    au.addKeyboardMouseBinding(\"Simulation: x\",\"Delete fixation joint (hand will fall down)\");", "is_target": false}, {"number": 169, "content": "    au.addKeyboardMouseBinding(\"Simulation: c\",\"Create Capsule in hand\");", "is_target": false}, {"number": 170, "content": "  }", "is_target": false}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "};", "is_target": true}, {"number": 173, "content": "", "is_target": false}, {"number": 174, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 175, "content": "{", "is_target": false}, {"number": 176, "content": "  ThisSim sim;", "is_target": false}, {"number": 177, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "2539": {"lines": [{"number": 224, "content": "    return false;", "is_target": false}, {"number": 225, "content": "  }", "is_target": false}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "", "is_target": false}, {"number": 229, "content": "};", "is_target": true}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 233, "content": "{", "is_target": false}, {"number": 234, "content": "  ThisSim sim;", "is_target": false}]}, "2540": {"lines": [{"number": 215, "content": "  virtual void addCallback(const GlobalData& globalData, bool draw, bool pause, bool control) override {", "is_target": false}, {"number": 216, "content": "  }", "is_target": false}, {"number": 217, "content": "", "is_target": false}, {"number": 218, "content": "  virtual void end(const GlobalData& globalData) override {", "is_target": false}, {"number": 219, "content": "  }", "is_target": false}, {"number": 220, "content": "};", "is_target": true}, {"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 224, "content": "{", "is_target": false}, {"number": 225, "content": "  ThisSim sim;", "is_target": false}]}, "2541": {"lines": [{"number": 167, "content": "  virtual void bindingDescription(osg::ApplicationUsage & au) const {", "is_target": false}, {"number": 168, "content": "    au.addKeyboardMouseBinding(\"Simulation: x\",\"Delete fixation joint (hand will fall down)\");", "is_target": false}, {"number": 169, "content": "    au.addKeyboardMouseBinding(\"Simulation: c\",\"Create Capsule in hand\");", "is_target": false}, {"number": 170, "content": "  }", "is_target": false}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "};", "is_target": true}, {"number": 173, "content": "", "is_target": false}, {"number": 174, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 175, "content": "{", "is_target": false}, {"number": 176, "content": "  ThisSim sim;", "is_target": false}, {"number": 177, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "2542": {"lines": [{"number": 224, "content": "    return false;", "is_target": false}, {"number": 225, "content": "  }", "is_target": false}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "", "is_target": false}, {"number": 229, "content": "};", "is_target": true}, {"number": 230, "content": "", "is_target": false}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 233, "content": "{", "is_target": false}, {"number": 234, "content": "  ThisSim sim;", "is_target": false}]}, "2543": {"lines": [{"number": 167, "content": "  virtual void bindingDescription(osg::ApplicationUsage & au) const {", "is_target": false}, {"number": 168, "content": "    au.addKeyboardMouseBinding(\"Simulation: x\",\"Delete fixation joint (hand will fall down)\");", "is_target": false}, {"number": 169, "content": "    au.addKeyboardMouseBinding(\"Simulation: c\",\"Create Capsule in hand\");", "is_target": false}, {"number": 170, "content": "  }", "is_target": false}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "};", "is_target": true}, {"number": 173, "content": "", "is_target": false}, {"number": 174, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 175, "content": "{", "is_target": false}, {"number": 176, "content": "  ThisSim sim;", "is_target": false}, {"number": 177, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "2544": {"lines": [{"number": 125, "content": "    }", "is_target": false}, {"number": 126, "content": "  protected:", "is_target": false}, {"number": 127, "content": "    lpzrobots::Joint* robotfixator;", "is_target": false}, {"number": 128, "content": "    AbstractController* controller;", "is_target": false}, {"number": 129, "content": "    lpzrobots::Hexabot* hexabot;", "is_target": false}, {"number": 130, "content": "};", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "int main(int argc, char **argv)", "is_target": false}, {"number": 133, "content": "    {", "is_target": false}, {"number": 134, "content": "  ThisSim sim;", "is_target": false}, {"number": 135, "content": "  sim.setGroundTexture(\"Images/greenground.rgb\");", "is_target": false}]}, "2545": {"lines": [{"number": 167, "content": "  virtual void bindingDescription(osg::ApplicationUsage & au) const {", "is_target": false}, {"number": 168, "content": "    au.addKeyboardMouseBinding(\"Simulation: x\",\"Delete fixation joint (hand will fall down)\");", "is_target": false}, {"number": 169, "content": "    au.addKeyboardMouseBinding(\"Simulation: c\",\"Create Capsule in hand\");", "is_target": false}, {"number": 170, "content": "  }", "is_target": false}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "};", "is_target": true}, {"number": 173, "content": "", "is_target": false}, {"number": 174, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 175, "content": "{", "is_target": false}, {"number": 176, "content": "  ThisSim sim;", "is_target": false}, {"number": 177, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "2546": {"lines": [{"number": 125, "content": "    }", "is_target": false}, {"number": 126, "content": "  protected:", "is_target": false}, {"number": 127, "content": "    lpzrobots::Joint* robotfixator;", "is_target": false}, {"number": 128, "content": "    AbstractController* controller;", "is_target": false}, {"number": 129, "content": "    lpzrobots::Hexabot* hexabot;", "is_target": false}, {"number": 130, "content": "};", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "int main(int argc, char **argv)", "is_target": false}, {"number": 133, "content": "    {", "is_target": false}, {"number": 134, "content": "  ThisSim sim;", "is_target": false}, {"number": 135, "content": "  sim.setGroundTexture(\"Images/greenground.rgb\");", "is_target": false}]}, "2547": {"lines": [{"number": 164, "content": "          std::pair<paramkey, paramval>(\"direction\", conf.direction));", "is_target": false}, {"number": 165, "content": "      list.push_back(", "is_target": false}, {"number": 166, "content": "          std::pair<paramkey, paramval>(\"bias\", conf.bias));", "is_target": false}, {"number": 167, "content": "      return list;", "is_target": false}, {"number": 168, "content": "    }", "is_target": false}, {"number": 169, "content": "};", "is_target": true}, {"number": 170, "content": "", "is_target": false}, {"number": 171, "content": "#endif", "is_target": false}, {"number": 172, "content": "", "is_target": false}]}, "2548": {"lines": [{"number": 167, "content": "  virtual void bindingDescription(osg::ApplicationUsage & au) const {", "is_target": false}, {"number": 168, "content": "    au.addKeyboardMouseBinding(\"Simulation: x\",\"Delete fixation joint (hand will fall down)\");", "is_target": false}, {"number": 169, "content": "    au.addKeyboardMouseBinding(\"Simulation: c\",\"Create Capsule in hand\");", "is_target": false}, {"number": 170, "content": "  }", "is_target": false}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "};", "is_target": true}, {"number": 173, "content": "", "is_target": false}, {"number": 174, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 175, "content": "{", "is_target": false}, {"number": 176, "content": "  ThisSim sim;", "is_target": false}, {"number": 177, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "2549": {"lines": [{"number": 125, "content": "    }", "is_target": false}, {"number": 126, "content": "  protected:", "is_target": false}, {"number": 127, "content": "    lpzrobots::Joint* robotfixator;", "is_target": false}, {"number": 128, "content": "    AbstractController* controller;", "is_target": false}, {"number": 129, "content": "    lpzrobots::Hexabot* hexabot;", "is_target": false}, {"number": 130, "content": "};", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "int main(int argc, char **argv)", "is_target": false}, {"number": 133, "content": "    {", "is_target": false}, {"number": 134, "content": "  ThisSim sim;", "is_target": false}, {"number": 135, "content": "  sim.setGroundTexture(\"Images/greenground.rgb\");", "is_target": false}]}, "2550": {"lines": [{"number": 167, "content": "  virtual void bindingDescription(osg::ApplicationUsage & au) const {", "is_target": false}, {"number": 168, "content": "    au.addKeyboardMouseBinding(\"Simulation: x\",\"Delete fixation joint (hand will fall down)\");", "is_target": false}, {"number": 169, "content": "    au.addKeyboardMouseBinding(\"Simulation: c\",\"Create Capsule in hand\");", "is_target": false}, {"number": 170, "content": "  }", "is_target": false}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "};", "is_target": true}, {"number": 173, "content": "", "is_target": false}, {"number": 174, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 175, "content": "{", "is_target": false}, {"number": 176, "content": "  ThisSim sim;", "is_target": false}, {"number": 177, "content": "  return sim.run(argc, argv) ? 0 : 1;", "is_target": false}]}, "2551": {"lines": [{"number": 125, "content": "    }", "is_target": false}, {"number": 126, "content": "  protected:", "is_target": false}, {"number": 127, "content": "    lpzrobots::Joint* robotfixator;", "is_target": false}, {"number": 128, "content": "    AbstractController* controller;", "is_target": false}, {"number": 129, "content": "    lpzrobots::Hexabot* hexabot;", "is_target": false}, {"number": 130, "content": "};", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "int main(int argc, char **argv)", "is_target": false}, {"number": 133, "content": "    {", "is_target": false}, {"number": 134, "content": "  ThisSim sim;", "is_target": false}, {"number": 135, "content": "  sim.setGroundTexture(\"Images/greenground.rgb\");", "is_target": false}]}, "2552": {"lines": [{"number": 125, "content": "    }", "is_target": false}, {"number": 126, "content": "  protected:", "is_target": false}, {"number": 127, "content": "    lpzrobots::Joint* robotfixator;", "is_target": false}, {"number": 128, "content": "    AbstractController* controller;", "is_target": false}, {"number": 129, "content": "    lpzrobots::Hexabot* hexabot;", "is_target": false}, {"number": 130, "content": "};", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "int main(int argc, char **argv)", "is_target": false}, {"number": 133, "content": "    {", "is_target": false}, {"number": 134, "content": "  ThisSim sim;", "is_target": false}, {"number": 135, "content": "  sim.setGroundTexture(\"Images/greenground.rgb\");", "is_target": false}]}, "2553": {"lines": [{"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "    }", "is_target": false}, {"number": 227, "content": "}", "is_target": false}, {"number": 228, "content": "return false;", "is_target": false}, {"number": 229, "content": "}", "is_target": false}, {"number": 230, "content": "};", "is_target": true}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "", "is_target": false}, {"number": 233, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 234, "content": "{", "is_target": false}, {"number": 235, "content": "  ThisSim sim;", "is_target": false}]}, "2554": {"lines": [{"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "  protected:", "is_target": false}, {"number": 99, "content": "    unsigned short number_channels = 0;", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "  public:", "is_target": false}, {"number": 102, "content": "};", "is_target": true}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "class ThisSim{", "is_target": false}, {"number": 106, "content": "  public:", "is_target": false}, {"number": 107, "content": "", "is_target": false}]}, "2555": {"lines": [{"number": 125, "content": "    }", "is_target": false}, {"number": 126, "content": "  protected:", "is_target": false}, {"number": 127, "content": "    lpzrobots::Joint* robotfixator;", "is_target": false}, {"number": 128, "content": "    AbstractController* controller;", "is_target": false}, {"number": 129, "content": "    lpzrobots::Hexabot* hexabot;", "is_target": false}, {"number": 130, "content": "};", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "int main(int argc, char **argv)", "is_target": false}, {"number": 133, "content": "    {", "is_target": false}, {"number": 134, "content": "  ThisSim sim;", "is_target": false}, {"number": 135, "content": "  sim.setGroundTexture(\"Images/greenground.rgb\");", "is_target": false}]}, "2556": {"lines": [{"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "  protected:", "is_target": false}, {"number": 99, "content": "    unsigned short number_channels = 0;", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "  public:", "is_target": false}, {"number": 102, "content": "};", "is_target": true}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "class ThisSim{", "is_target": false}, {"number": 106, "content": "  public:", "is_target": false}, {"number": 107, "content": "", "is_target": false}]}, "2557": {"lines": [{"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "    }", "is_target": false}, {"number": 227, "content": "}", "is_target": false}, {"number": 228, "content": "return false;", "is_target": false}, {"number": 229, "content": "}", "is_target": false}, {"number": 230, "content": "};", "is_target": true}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "", "is_target": false}, {"number": 233, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 234, "content": "{", "is_target": false}, {"number": 235, "content": "  ThisSim sim;", "is_target": false}]}, "2558": {"lines": [{"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "  protected:", "is_target": false}, {"number": 99, "content": "    unsigned short number_channels = 0;", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "  public:", "is_target": false}, {"number": 102, "content": "};", "is_target": true}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "class ThisSim{", "is_target": false}, {"number": 106, "content": "  public:", "is_target": false}, {"number": 107, "content": "", "is_target": false}]}, "2559": {"lines": [{"number": 125, "content": "    }", "is_target": false}, {"number": 126, "content": "  protected:", "is_target": false}, {"number": 127, "content": "    lpzrobots::Joint* robotfixator;", "is_target": false}, {"number": 128, "content": "    AbstractController* controller;", "is_target": false}, {"number": 129, "content": "    lpzrobots::Hexabot* hexabot;", "is_target": false}, {"number": 130, "content": "};", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "int main(int argc, char **argv)", "is_target": false}, {"number": 133, "content": "    {", "is_target": false}, {"number": 134, "content": "  ThisSim sim;", "is_target": false}, {"number": 135, "content": "  sim.setGroundTexture(\"Images/greenground.rgb\");", "is_target": false}]}, "2560": {"lines": [{"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "    }", "is_target": false}, {"number": 227, "content": "}", "is_target": false}, {"number": 228, "content": "return false;", "is_target": false}, {"number": 229, "content": "}", "is_target": false}, {"number": 230, "content": "};", "is_target": true}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "", "is_target": false}, {"number": 233, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 234, "content": "{", "is_target": false}, {"number": 235, "content": "  ThisSim sim;", "is_target": false}]}, "2561": {"lines": [{"number": 125, "content": "    }", "is_target": false}, {"number": 126, "content": "  protected:", "is_target": false}, {"number": 127, "content": "    lpzrobots::Joint* robotfixator;", "is_target": false}, {"number": 128, "content": "    AbstractController* controller;", "is_target": false}, {"number": 129, "content": "    lpzrobots::Hexabot* hexabot;", "is_target": false}, {"number": 130, "content": "};", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "int main(int argc, char **argv)", "is_target": false}, {"number": 133, "content": "    {", "is_target": false}, {"number": 134, "content": "  ThisSim sim;", "is_target": false}, {"number": 135, "content": "  sim.setGroundTexture(\"Images/greenground.rgb\");", "is_target": false}]}, "2562": {"lines": [{"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "    }", "is_target": false}, {"number": 227, "content": "}", "is_target": false}, {"number": 228, "content": "return false;", "is_target": false}, {"number": 229, "content": "}", "is_target": false}, {"number": 230, "content": "};", "is_target": true}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "", "is_target": false}, {"number": 233, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 234, "content": "{", "is_target": false}, {"number": 235, "content": "  ThisSim sim;", "is_target": false}]}, "2563": {"lines": [{"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "  protected:", "is_target": false}, {"number": 99, "content": "    unsigned short number_channels = 0;", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "  public:", "is_target": false}, {"number": 102, "content": "};", "is_target": true}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "class ThisSim{", "is_target": false}, {"number": 106, "content": "  public:", "is_target": false}, {"number": 107, "content": "", "is_target": false}]}, "2564": {"lines": [{"number": 125, "content": "    }", "is_target": false}, {"number": 126, "content": "  protected:", "is_target": false}, {"number": 127, "content": "    lpzrobots::Joint* robotfixator;", "is_target": false}, {"number": 128, "content": "    AbstractController* controller;", "is_target": false}, {"number": 129, "content": "    lpzrobots::Hexabot* hexabot;", "is_target": false}, {"number": 130, "content": "};", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "int main(int argc, char **argv)", "is_target": false}, {"number": 133, "content": "    {", "is_target": false}, {"number": 134, "content": "  ThisSim sim;", "is_target": false}, {"number": 135, "content": "  sim.setGroundTexture(\"Images/greenground.rgb\");", "is_target": false}]}, "2565": {"lines": [{"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "    }", "is_target": false}, {"number": 227, "content": "}", "is_target": false}, {"number": 228, "content": "return false;", "is_target": false}, {"number": 229, "content": "}", "is_target": false}, {"number": 230, "content": "};", "is_target": true}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "", "is_target": false}, {"number": 233, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 234, "content": "{", "is_target": false}, {"number": 235, "content": "  ThisSim sim;", "is_target": false}]}, "2566": {"lines": [{"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "  protected:", "is_target": false}, {"number": 99, "content": "    unsigned short number_channels = 0;", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "  public:", "is_target": false}, {"number": 102, "content": "};", "is_target": true}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "class ThisSim{", "is_target": false}, {"number": 106, "content": "  public:", "is_target": false}, {"number": 107, "content": "", "is_target": false}]}, "2567": {"lines": [{"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "  protected:", "is_target": false}, {"number": 99, "content": "    unsigned short number_channels = 0;", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "  public:", "is_target": false}, {"number": 102, "content": "};", "is_target": true}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "class ThisSim{", "is_target": false}, {"number": 106, "content": "  public:", "is_target": false}, {"number": 107, "content": "", "is_target": false}]}, "2568": {"lines": [{"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "    }", "is_target": false}, {"number": 227, "content": "}", "is_target": false}, {"number": 228, "content": "return false;", "is_target": false}, {"number": 229, "content": "}", "is_target": false}, {"number": 230, "content": "};", "is_target": true}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "", "is_target": false}, {"number": 233, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 234, "content": "{", "is_target": false}, {"number": 235, "content": "  ThisSim sim;", "is_target": false}]}, "2569": {"lines": [{"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "    }", "is_target": false}, {"number": 227, "content": "}", "is_target": false}, {"number": 228, "content": "return false;", "is_target": false}, {"number": 229, "content": "}", "is_target": false}, {"number": 230, "content": "};", "is_target": true}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "", "is_target": false}, {"number": 233, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 234, "content": "{", "is_target": false}, {"number": 235, "content": "  ThisSim sim;", "is_target": false}]}, "2570": {"lines": [{"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "  protected:", "is_target": false}, {"number": 99, "content": "    unsigned short number_channels = 0;", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "  public:", "is_target": false}, {"number": 102, "content": "};", "is_target": true}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "class ThisSim{", "is_target": false}, {"number": 106, "content": "  public:", "is_target": false}, {"number": 107, "content": "", "is_target": false}]}, "2571": {"lines": [{"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "    }", "is_target": false}, {"number": 227, "content": "}", "is_target": false}, {"number": 228, "content": "return false;", "is_target": false}, {"number": 229, "content": "}", "is_target": false}, {"number": 230, "content": "};", "is_target": true}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "", "is_target": false}, {"number": 233, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 234, "content": "{", "is_target": false}, {"number": 235, "content": "  ThisSim sim;", "is_target": false}]}, "2572": {"lines": [{"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "  protected:", "is_target": false}, {"number": 99, "content": "    unsigned short number_channels = 0;", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "  public:", "is_target": false}, {"number": 102, "content": "};", "is_target": true}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "class ThisSim{", "is_target": false}, {"number": 106, "content": "  public:", "is_target": false}, {"number": 107, "content": "", "is_target": false}]}, "2573": {"lines": [{"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "  protected:", "is_target": false}, {"number": 99, "content": "    unsigned short number_channels = 0;", "is_target": false}, {"number": 100, "content": "", "is_target": false}, {"number": 101, "content": "  public:", "is_target": false}, {"number": 102, "content": "};", "is_target": true}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "class ThisSim{", "is_target": false}, {"number": 106, "content": "  public:", "is_target": false}, {"number": 107, "content": "", "is_target": false}]}, "2574": {"lines": [{"number": 225, "content": "", "is_target": false}, {"number": 226, "content": "    }", "is_target": false}, {"number": 227, "content": "}", "is_target": false}, {"number": 228, "content": "return false;", "is_target": false}, {"number": 229, "content": "}", "is_target": false}, {"number": 230, "content": "};", "is_target": true}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "", "is_target": false}, {"number": 233, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 234, "content": "{", "is_target": false}, {"number": 235, "content": "  ThisSim sim;", "is_target": false}]}, "2575": {"lines": [{"number": 84, "content": "// include some needed files for parallel task handling", "is_target": false}, {"number": 85, "content": "// class TaskedSimulation{", "is_target": false}, {"number": 86, "content": "  // add needed data here for access from the simulation", "is_target": false}, {"number": 87, "content": "  // example: position of robot in the simulation is stored in the list", "is_target": false}, {"number": 88, "content": "  std::vector<Position> positionList;", "is_target": false}, {"number": 89, "content": "};", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "/**", "is_target": false}, {"number": 92, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 93, "content": " *", "is_target": false}, {"number": 94, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2576": {"lines": [{"number": 196, "content": "  virtual void end(const GlobalData& globalData) override {", "is_target": false}, {"number": 197, "content": "    delete cam;", "is_target": false}, {"number": 198, "content": "    delete cam2;", "is_target": false}, {"number": 199, "content": "    delete b;", "is_target": false}, {"number": 200, "content": "  }", "is_target": false}, {"number": 201, "content": "};", "is_target": true}, {"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "", "is_target": false}, {"number": 204, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 205, "content": "{", "is_target": false}, {"number": 206, "content": "  ThisSim sim;", "is_target": false}]}, "2577": {"lines": [{"number": 196, "content": "  virtual void end(const GlobalData& globalData) override {", "is_target": false}, {"number": 197, "content": "    delete cam;", "is_target": false}, {"number": 198, "content": "    delete cam2;", "is_target": false}, {"number": 199, "content": "    delete b;", "is_target": false}, {"number": 200, "content": "  }", "is_target": false}, {"number": 201, "content": "};", "is_target": true}, {"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "", "is_target": false}, {"number": 204, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 205, "content": "{", "is_target": false}, {"number": 206, "content": "  ThisSim sim;", "is_target": false}]}, "2578": {"lines": [{"number": 84, "content": "// include some needed files for parallel task handling", "is_target": false}, {"number": 85, "content": "// class TaskedSimulation{", "is_target": false}, {"number": 86, "content": "  // add needed data here for access from the simulation", "is_target": false}, {"number": 87, "content": "  // example: position of robot in the simulation is stored in the list", "is_target": false}, {"number": 88, "content": "  std::vector<Position> positionList;", "is_target": false}, {"number": 89, "content": "};", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "/**", "is_target": false}, {"number": 92, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 93, "content": " *", "is_target": false}, {"number": 94, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2579": {"lines": [{"number": 196, "content": "  virtual void end(const GlobalData& globalData) override {", "is_target": false}, {"number": 197, "content": "    delete cam;", "is_target": false}, {"number": 198, "content": "    delete cam2;", "is_target": false}, {"number": 199, "content": "    delete b;", "is_target": false}, {"number": 200, "content": "  }", "is_target": false}, {"number": 201, "content": "};", "is_target": true}, {"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "", "is_target": false}, {"number": 204, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 205, "content": "{", "is_target": false}, {"number": 206, "content": "  ThisSim sim;", "is_target": false}]}, "2580": {"lines": [{"number": 84, "content": "// include some needed files for parallel task handling", "is_target": false}, {"number": 85, "content": "// class TaskedSimulation{", "is_target": false}, {"number": 86, "content": "  // add needed data here for access from the simulation", "is_target": false}, {"number": 87, "content": "  // example: position of robot in the simulation is stored in the list", "is_target": false}, {"number": 88, "content": "  std::vector<Position> positionList;", "is_target": false}, {"number": 89, "content": "};", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "/**", "is_target": false}, {"number": 92, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 93, "content": " *", "is_target": false}, {"number": 94, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2581": {"lines": [{"number": 84, "content": "// include some needed files for parallel task handling", "is_target": false}, {"number": 85, "content": "// class TaskedSimulation{", "is_target": false}, {"number": 86, "content": "  // add needed data here for access from the simulation", "is_target": false}, {"number": 87, "content": "  // example: position of robot in the simulation is stored in the list", "is_target": false}, {"number": 88, "content": "  std::vector<Position> positionList;", "is_target": false}, {"number": 89, "content": "};", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "/**", "is_target": false}, {"number": 92, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 93, "content": " *", "is_target": false}, {"number": 94, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2582": {"lines": [{"number": 196, "content": "  virtual void end(const GlobalData& globalData) override {", "is_target": false}, {"number": 197, "content": "    delete cam;", "is_target": false}, {"number": 198, "content": "    delete cam2;", "is_target": false}, {"number": 199, "content": "    delete b;", "is_target": false}, {"number": 200, "content": "  }", "is_target": false}, {"number": 201, "content": "};", "is_target": true}, {"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "", "is_target": false}, {"number": 204, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 205, "content": "{", "is_target": false}, {"number": 206, "content": "  ThisSim sim;", "is_target": false}]}, "2583": {"lines": [{"number": 196, "content": "  virtual void end(const GlobalData& globalData) override {", "is_target": false}, {"number": 197, "content": "    delete cam;", "is_target": false}, {"number": 198, "content": "    delete cam2;", "is_target": false}, {"number": 199, "content": "    delete b;", "is_target": false}, {"number": 200, "content": "  }", "is_target": false}, {"number": 201, "content": "};", "is_target": true}, {"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "", "is_target": false}, {"number": 204, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 205, "content": "{", "is_target": false}, {"number": 206, "content": "  ThisSim sim;", "is_target": false}]}, "2584": {"lines": [{"number": 90, "content": "    */", "is_target": false}, {"number": 91, "content": "    virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "    /** destroys vehicle and space", "is_target": false}, {"number": 94, "content": "     */", "is_target": false}, {"number": 95, "content": "    virtual void destroy();", "is_target": true}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "    /** additional things for collision handling can be done here", "is_target": false}, {"number": 98, "content": "     */", "is_target": false}, {"number": 99, "content": "    static void mycallback(void *data, dGeomID o1, dGeomID o2);", "is_target": false}, {"number": 100, "content": "", "is_target": false}]}, "2585": {"lines": [{"number": 84, "content": "// include some needed files for parallel task handling", "is_target": false}, {"number": 85, "content": "// class TaskedSimulation{", "is_target": false}, {"number": 86, "content": "  // add needed data here for access from the simulation", "is_target": false}, {"number": 87, "content": "  // example: position of robot in the simulation is stored in the list", "is_target": false}, {"number": 88, "content": "  std::vector<Position> positionList;", "is_target": false}, {"number": 89, "content": "};", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "/**", "is_target": false}, {"number": 92, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 93, "content": " *", "is_target": false}, {"number": 94, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2586": {"lines": [{"number": 100, "content": "    conf.boxWidth=1.0;", "is_target": false}, {"number": 101, "content": "    conf.wheelTexture=\"Images/tire.rgb\";", "is_target": false}, {"number": 102, "content": "    return conf;", "is_target": false}, {"number": 103, "content": "  }", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "  virtual ~Nimm2();", "is_target": true}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "  /**", "is_target": false}, {"number": 108, "content": "   * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 109, "content": "   */", "is_target": false}, {"number": 110, "content": "  virtual void update();", "is_target": false}]}, "2587": {"lines": [{"number": 105, "content": "  virtual ~Nimm2();", "is_target": false}, {"number": 106, "content": "", "is_target": false}, {"number": 107, "content": "  /**", "is_target": false}, {"number": 108, "content": "   * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 109, "content": "   */", "is_target": false}, {"number": 110, "content": "  virtual void update();", "is_target": true}, {"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "  /** sets the pose of the vehicle", "is_target": false}, {"number": 113, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 114, "content": "  */", "is_target": false}, {"number": 115, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": false}]}, "2588": {"lines": [{"number": 110, "content": "  virtual void update();", "is_target": false}, {"number": 111, "content": "", "is_target": false}, {"number": 112, "content": "  /** sets the pose of the vehicle", "is_target": false}, {"number": 113, "content": "      @param pose desired 4x4 pose matrix", "is_target": false}, {"number": 114, "content": "  */", "is_target": false}, {"number": 115, "content": "  virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 116, "content": "", "is_target": false}, {"number": 117, "content": "  /** returns actual sensorvalues", "is_target": false}, {"number": 118, "content": "      @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 119, "content": "      @param sensornumber length of the sensor array", "is_target": false}, {"number": 120, "content": "      @return number of actually written sensors", "is_target": false}]}, "2589": {"lines": [{"number": 117, "content": "  /** returns actual sensorvalues", "is_target": false}, {"number": 118, "content": "      @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 119, "content": "      @param sensornumber length of the sensor array", "is_target": false}, {"number": 120, "content": "      @return number of actually written sensors", "is_target": false}, {"number": 121, "content": "  */", "is_target": false}, {"number": 122, "content": "  virtual int getSensorsIntern(sensor* sensors, int sensornumber);", "is_target": true}, {"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "  /** sets actual motorcommands", "is_target": false}, {"number": 125, "content": "      @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 126, "content": "      @param motornumber length of the motor array", "is_target": false}, {"number": 127, "content": "  */", "is_target": false}]}, "2590": {"lines": [{"number": 123, "content": "", "is_target": false}, {"number": 124, "content": "  /** sets actual motorcommands", "is_target": false}, {"number": 125, "content": "      @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 126, "content": "      @param motornumber length of the motor array", "is_target": false}, {"number": 127, "content": "  */", "is_target": false}, {"number": 128, "content": "  virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "  /** returns number of sensors", "is_target": false}, {"number": 131, "content": "   */", "is_target": false}, {"number": 132, "content": "  virtual int getSensorNumberIntern() const override {", "is_target": false}, {"number": 133, "content": "    return sensorno;", "is_target": false}]}, "2591": {"lines": [{"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "    /** this function is called in each timestep. It should perform robot-internal checks,", "is_target": false}, {"number": 150, "content": "      like space-internal collision detection, sensor resets/update etc.", "is_target": false}, {"number": 151, "content": "      @param globalData structure that contains global data from the simulation environment", "is_target": false}, {"number": 152, "content": "   */", "is_target": false}, {"number": 153, "content": "  virtual void doInternalStuff(const GlobalData& globalData);", "is_target": true}, {"number": 154, "content": "", "is_target": false}, {"number": 155, "content": "        virtual double& getSumForce() { return sumForce; }", "is_target": false}, {"number": 156, "content": "", "is_target": false}, {"number": 157, "content": "        virtual double& getContactPoints() { return contactPoints; }", "is_target": false}, {"number": 158, "content": "", "is_target": false}]}, "2592": {"lines": [{"number": 41, "content": "     * @param sphereWheels switches between spheres and  'normal' wheels", "is_target": false}, {"number": 42, "content": "     */", "is_target": false}, {"number": 43, "content": "    Nimm4(const OdeHandle& odeHandle, const OsgHandle& osgHandle, const std::string& name,", "is_target": false}, {"number": 44, "content": "          double size=1, double force=3, double speed=15, bool sphereWheels=true);", "is_target": false}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "    virtual ~Nimm4() {", "is_target": true}, {"number": 47, "content": "      destroy();", "is_target": false}, {"number": 48, "content": "    };", "is_target": false}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    /**", "is_target": false}, {"number": 51, "content": "     * updates the OSG nodes of the vehicle", "is_target": false}]}, "2593": {"lines": [{"number": 48, "content": "    };", "is_target": false}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    /**", "is_target": false}, {"number": 51, "content": "     * updates the OSG nodes of the vehicle", "is_target": false}, {"number": 52, "content": "     */", "is_target": false}, {"number": 53, "content": "    virtual void update();", "is_target": true}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 57, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 58, "content": "    */", "is_target": false}]}, "2594": {"lines": [{"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "    /** sets the pose of the vehicle", "is_target": false}, {"number": 57, "content": "        @param pose desired pose matrix", "is_target": false}, {"number": 58, "content": "    */", "is_target": false}, {"number": 59, "content": "    virtual void placeIntern(const osg::Matrix& pose);", "is_target": true}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 62, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 63, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 64, "content": "        @return number of actually written sensors", "is_target": false}]}, "2595": {"lines": [{"number": 61, "content": "    /** returns actual sensorvalues", "is_target": false}, {"number": 62, "content": "        @param sensors sensors scaled to [-1,1]", "is_target": false}, {"number": 63, "content": "        @param sensornumber length of the sensor array", "is_target": false}, {"number": 64, "content": "        @return number of actually written sensors", "is_target": false}, {"number": 65, "content": "    */", "is_target": false}, {"number": 66, "content": "    virtual int getSensorsIntern(double* sensors, int sensornumber);", "is_target": true}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 69, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 70, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 71, "content": "    */", "is_target": false}]}, "2596": {"lines": [{"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "    /** sets actual motorcommands", "is_target": false}, {"number": 69, "content": "        @param motors motors scaled to [-1,1]", "is_target": false}, {"number": 70, "content": "        @param motornumber length of the motor array", "is_target": false}, {"number": 71, "content": "    */", "is_target": false}, {"number": 72, "content": "    virtual void setMotorsIntern(const double* motors, int motornumber);", "is_target": true}, {"number": 73, "content": "", "is_target": false}, {"number": 74, "content": "    /** returns number of sensors", "is_target": false}, {"number": 75, "content": "     */", "is_target": false}, {"number": 76, "content": "    virtual int getSensorNumberIntern() const override {", "is_target": false}, {"number": 77, "content": "      return sensorno;", "is_target": false}]}, "2597": {"lines": [{"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "class ThisSim : public Simulation {", "is_target": false}, {"number": 157, "content": "public:", "is_target": false}, {"number": 158, "content": "", "is_target": false}, {"number": 159, "content": "  // starting function (executed once at the beginning of the simulation loop)", "is_target": false}, {"number": 160, "content": "  void start(const OdeHandle& odeHandle, const OsgHandle& osgHandle, GlobalData& global)", "is_target": true}, {"number": 161, "content": "  {", "is_target": false}, {"number": 162, "content": "    // first: position(x,y,z) second: view(alpha,beta,gamma)", "is_target": false}, {"number": 163, "content": "    // gamma=0;", "is_target": false}, {"number": 164, "content": "    // alpha == horizontal angle", "is_target": false}, {"number": 165, "content": "    // beta == vertical angle", "is_target": false}]}, "2598": {"lines": [{"number": 188, "content": "    // - create pointer to sphere (with odehandle, osghandle and", "is_target": false}, {"number": 189, "content": "    //   optional parameters radius and mass,where the latter is not used here) )", "is_target": false}, {"number": 190, "content": "    // - set Pose(Position) of sphere", "is_target": false}, {"number": 191, "content": "    // - set a texture for the sphere", "is_target": false}, {"number": 192, "content": "    // - add sphere to list of obstacles", "is_target": false}, {"number": 193, "content": "    for (int i= 0; i < 0/*2*/; ++i) {", "is_target": true}, {"number": 194, "content": "      PassiveSphere* s1 = new PassiveSphere(odeHandle, osgHandle, 0.5);", "is_target": false}, {"number": 195, "content": "      s1->setPosition(osg::Vec3(-4.5+i*4.5,0,0));", "is_target": false}, {"number": 196, "content": "      s1->setTexture(\"Images/dusty.rgb\");", "is_target": false}, {"number": 197, "content": "      global.obstacles.push_back(s1);", "is_target": false}, {"number": 198, "content": "    }", "is_target": false}]}, "2599": {"lines": [{"number": 196, "content": "  virtual void end(const GlobalData& globalData) override {", "is_target": false}, {"number": 197, "content": "    delete cam;", "is_target": false}, {"number": 198, "content": "    delete cam2;", "is_target": false}, {"number": 199, "content": "    delete b;", "is_target": false}, {"number": 200, "content": "  }", "is_target": false}, {"number": 201, "content": "};", "is_target": true}, {"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "", "is_target": false}, {"number": 204, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 205, "content": "{", "is_target": false}, {"number": 206, "content": "  ThisSim sim;", "is_target": false}]}, "2600": {"lines": [{"number": 84, "content": "// include some needed files for parallel task handling", "is_target": false}, {"number": 85, "content": "// class TaskedSimulation{", "is_target": false}, {"number": 86, "content": "  // add needed data here for access from the simulation", "is_target": false}, {"number": 87, "content": "  // example: position of robot in the simulation is stored in the list", "is_target": false}, {"number": 88, "content": "  std::vector<Position> positionList;", "is_target": false}, {"number": 89, "content": "};", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "/**", "is_target": false}, {"number": 92, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 93, "content": " *", "is_target": false}, {"number": 94, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2601": {"lines": [{"number": 196, "content": "  virtual void end(const GlobalData& globalData) override {", "is_target": false}, {"number": 197, "content": "    delete cam;", "is_target": false}, {"number": 198, "content": "    delete cam2;", "is_target": false}, {"number": 199, "content": "    delete b;", "is_target": false}, {"number": 200, "content": "  }", "is_target": false}, {"number": 201, "content": "};", "is_target": true}, {"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "", "is_target": false}, {"number": 204, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 205, "content": "{", "is_target": false}, {"number": 206, "content": "  ThisSim sim;", "is_target": false}]}, "2602": {"lines": [{"number": 84, "content": "// include some needed files for parallel task handling", "is_target": false}, {"number": 85, "content": "// class TaskedSimulation{", "is_target": false}, {"number": 86, "content": "  // add needed data here for access from the simulation", "is_target": false}, {"number": 87, "content": "  // example: position of robot in the simulation is stored in the list", "is_target": false}, {"number": 88, "content": "  std::vector<Position> positionList;", "is_target": false}, {"number": 89, "content": "};", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "/**", "is_target": false}, {"number": 92, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 93, "content": " *", "is_target": false}, {"number": 94, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2603": {"lines": [{"number": 196, "content": "  virtual void end(const GlobalData& globalData) override {", "is_target": false}, {"number": 197, "content": "    delete cam;", "is_target": false}, {"number": 198, "content": "    delete cam2;", "is_target": false}, {"number": 199, "content": "    delete b;", "is_target": false}, {"number": 200, "content": "  }", "is_target": false}, {"number": 201, "content": "};", "is_target": true}, {"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "", "is_target": false}, {"number": 204, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 205, "content": "{", "is_target": false}, {"number": 206, "content": "  ThisSim sim;", "is_target": false}]}, "2604": {"lines": [{"number": 141, "content": "", "is_target": false}, {"number": 142, "content": "  // add own key handling stuff here, just insert some case values", "is_target": false}, {"number": 143, "content": "  virtual bool command(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 144, "content": "                       GlobalData& globalData, int key, bool down) override {", "is_target": false}, {"number": 145, "content": "    if (down) { // only when key is pressed, not when released", "is_target": false}, {"number": 146, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 147, "content": "        {", "is_target": false}, {"number": 148, "content": "        case 'b': addObject(odeHandle, osgHandle, globalData, OBox); break;", "is_target": false}, {"number": 149, "content": "        case 'k': addObject(odeHandle, osgHandle, globalData, OSphere); break;", "is_target": false}, {"number": 150, "content": "        case 'c': addObject(odeHandle, osgHandle, globalData, OCaps); break;", "is_target": false}, {"number": 151, "content": "        default:", "is_target": false}]}, "2605": {"lines": [{"number": 196, "content": "  virtual void end(const GlobalData& globalData) override {", "is_target": false}, {"number": 197, "content": "    delete cam;", "is_target": false}, {"number": 198, "content": "    delete cam2;", "is_target": false}, {"number": 199, "content": "    delete b;", "is_target": false}, {"number": 200, "content": "  }", "is_target": false}, {"number": 201, "content": "};", "is_target": true}, {"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "", "is_target": false}, {"number": 204, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 205, "content": "{", "is_target": false}, {"number": 206, "content": "  ThisSim sim;", "is_target": false}]}, "2606": {"lines": [{"number": 84, "content": "// include some needed files for parallel task handling", "is_target": false}, {"number": 85, "content": "// class TaskedSimulation{", "is_target": false}, {"number": 86, "content": "  // add needed data here for access from the simulation", "is_target": false}, {"number": 87, "content": "  // example: position of robot in the simulation is stored in the list", "is_target": false}, {"number": 88, "content": "  std::vector<Position> positionList;", "is_target": false}, {"number": 89, "content": "};", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "/**", "is_target": false}, {"number": 92, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 93, "content": " *", "is_target": false}, {"number": 94, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2607": {"lines": [{"number": 84, "content": "// include some needed files for parallel task handling", "is_target": false}, {"number": 85, "content": "// class TaskedSimulation{", "is_target": false}, {"number": 86, "content": "  // add needed data here for access from the simulation", "is_target": false}, {"number": 87, "content": "  // example: position of robot in the simulation is stored in the list", "is_target": false}, {"number": 88, "content": "  std::vector<Position> positionList;", "is_target": false}, {"number": 89, "content": "};", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "/**", "is_target": false}, {"number": 92, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 93, "content": " *", "is_target": false}, {"number": 94, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2608": {"lines": [{"number": 185, "content": "", "is_target": false}, {"number": 186, "content": "  // add own key handling stuff here, just insert some case values", "is_target": false}, {"number": 187, "content": "  virtual bool command(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 188, "content": "                       GlobalData& globalData, int key, bool down) override {", "is_target": false}, {"number": 189, "content": "    if (down) { // only when key is pressed, not when released", "is_target": false}, {"number": 190, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 191, "content": "        {", "is_target": false}, {"number": 192, "content": "        case 'b': addObject(odeHandle, osgHandle, globalData, OBox); break;", "is_target": false}, {"number": 193, "content": "        case 'k': addObject(odeHandle, osgHandle, globalData, OSphere); break;", "is_target": false}, {"number": 194, "content": "        case 'c': addObject(odeHandle, osgHandle, globalData, OCaps); break;", "is_target": false}, {"number": 195, "content": "        case 'r': addHumanoid(odeHandle, osgHandle, globalData); break;", "is_target": false}]}, "2609": {"lines": [{"number": 96, "content": "        printf(\"\\t%f\",val);", "is_target": false}, {"number": 97, "content": "      }", "is_target": false}, {"number": 98, "content": "      printf(\"\\n\");", "is_target": false}, {"number": 99, "content": "    }", "is_target": false}, {"number": 100, "content": "  };", "is_target": false}, {"number": 101, "content": "};", "is_target": true}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 105, "content": "{", "is_target": false}, {"number": 106, "content": "  ThisSim sim;", "is_target": false}]}, "2610": {"lines": [{"number": 96, "content": "        printf(\"\\t%f\",val);", "is_target": false}, {"number": 97, "content": "      }", "is_target": false}, {"number": 98, "content": "      printf(\"\\n\");", "is_target": false}, {"number": 99, "content": "    }", "is_target": false}, {"number": 100, "content": "  };", "is_target": false}, {"number": 101, "content": "};", "is_target": true}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 105, "content": "{", "is_target": false}, {"number": 106, "content": "  ThisSim sim;", "is_target": false}]}, "2611": {"lines": [{"number": 165, "content": "          break;", "is_target": false}, {"number": 166, "content": "        }", "is_target": false}, {"number": 167, "content": "    }", "is_target": false}, {"number": 168, "content": "    return false;", "is_target": false}, {"number": 169, "content": "  }", "is_target": false}, {"number": 170, "content": "};", "is_target": true}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 174, "content": "{", "is_target": false}, {"number": 175, "content": "  ThisSim sim;", "is_target": false}]}, "2612": {"lines": [{"number": 96, "content": "        printf(\"\\t%f\",val);", "is_target": false}, {"number": 97, "content": "      }", "is_target": false}, {"number": 98, "content": "      printf(\"\\n\");", "is_target": false}, {"number": 99, "content": "    }", "is_target": false}, {"number": 100, "content": "  };", "is_target": false}, {"number": 101, "content": "};", "is_target": true}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 105, "content": "{", "is_target": false}, {"number": 106, "content": "  ThisSim sim;", "is_target": false}]}, "2613": {"lines": [{"number": 165, "content": "          break;", "is_target": false}, {"number": 166, "content": "        }", "is_target": false}, {"number": 167, "content": "    }", "is_target": false}, {"number": 168, "content": "    return false;", "is_target": false}, {"number": 169, "content": "  }", "is_target": false}, {"number": 170, "content": "};", "is_target": true}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 174, "content": "{", "is_target": false}, {"number": 175, "content": "  ThisSim sim;", "is_target": false}]}, "2614": {"lines": [{"number": 96, "content": "        printf(\"\\t%f\",val);", "is_target": false}, {"number": 97, "content": "      }", "is_target": false}, {"number": 98, "content": "      printf(\"\\n\");", "is_target": false}, {"number": 99, "content": "    }", "is_target": false}, {"number": 100, "content": "  };", "is_target": false}, {"number": 101, "content": "};", "is_target": true}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 105, "content": "{", "is_target": false}, {"number": 106, "content": "  ThisSim sim;", "is_target": false}]}, "2615": {"lines": [{"number": 165, "content": "          break;", "is_target": false}, {"number": 166, "content": "        }", "is_target": false}, {"number": 167, "content": "    }", "is_target": false}, {"number": 168, "content": "    return false;", "is_target": false}, {"number": 169, "content": "  }", "is_target": false}, {"number": 170, "content": "};", "is_target": true}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 174, "content": "{", "is_target": false}, {"number": 175, "content": "  ThisSim sim;", "is_target": false}]}, "2616": {"lines": [{"number": 43, "content": "      SchlangeForce ( const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 44, "content": "                      const SchlangeConf& conf,", "is_target": false}, {"number": 45, "content": "                      const std::string& name, const std::string& revision);", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "      virtual ~SchlangeForce();", "is_target": true}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "      /**", "is_target": false}, {"number": 51, "content": "       *Reads the actual motor commands from an array,", "is_target": false}, {"number": 52, "content": "       *an sets all motors of the snake to this values.", "is_target": false}, {"number": 53, "content": "       *It is an linear allocation.", "is_target": false}]}, "2617": {"lines": [{"number": 52, "content": "       *an sets all motors of the snake to this values.", "is_target": false}, {"number": 53, "content": "       *It is an linear allocation.", "is_target": false}, {"number": 54, "content": "       *@param motors pointer to the array, motor values are scaled to [-1,1]", "is_target": false}, {"number": 55, "content": "       *@param motornumber length of the motor array", "is_target": false}, {"number": 56, "content": "       **/", "is_target": false}, {"number": 57, "content": "      virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": true}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "      /**", "is_target": false}, {"number": 60, "content": "       *Writes the sensor values to an array in the memory.", "is_target": false}, {"number": 61, "content": "       *@param sensors pointer to the array", "is_target": false}, {"number": 62, "content": "       *@param sensornumber length of the sensor array", "is_target": false}]}, "2618": {"lines": [{"number": 60, "content": "       *Writes the sensor values to an array in the memory.", "is_target": false}, {"number": 61, "content": "       *@param sensors pointer to the array", "is_target": false}, {"number": 62, "content": "       *@param sensornumber length of the sensor array", "is_target": false}, {"number": 63, "content": "       *@return number of actually written sensors", "is_target": false}, {"number": 64, "content": "       **/", "is_target": false}, {"number": 65, "content": "      virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": true}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "      /** returns number of sensors", "is_target": false}, {"number": 68, "content": "       */", "is_target": false}, {"number": 69, "content": "      virtual int getSensorNumberIntern() const override { assert(created); return joints.size() * 2; }", "is_target": false}, {"number": 70, "content": "", "is_target": false}]}, "2619": {"lines": [{"number": 71, "content": "      /** returns number of motors", "is_target": false}, {"number": 72, "content": "       */", "is_target": false}, {"number": 73, "content": "      virtual int getMotorNumberIntern() const override { assert(created); return joints.size() * 2; }", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "    private:", "is_target": false}, {"number": 76, "content": "      virtual void create(const osg::Matrix& pose);", "is_target": true}, {"number": 77, "content": "      virtual void destroy();", "is_target": false}, {"number": 78, "content": "    };", "is_target": false}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "}", "is_target": false}, {"number": 81, "content": "", "is_target": false}]}, "2620": {"lines": [{"number": 72, "content": "       */", "is_target": false}, {"number": 73, "content": "      virtual int getMotorNumberIntern() const override { assert(created); return joints.size() * 2; }", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "    private:", "is_target": false}, {"number": 76, "content": "      virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 77, "content": "      virtual void destroy();", "is_target": true}, {"number": 78, "content": "    };", "is_target": false}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "}", "is_target": false}, {"number": 81, "content": "", "is_target": false}, {"number": 82, "content": "#endif", "is_target": false}]}, "2621": {"lines": [{"number": 65, "content": "        conf.headColor = \"robot2\";", "is_target": false}, {"number": 66, "content": "        conf.bodyColor = \"robot1\";", "is_target": false}, {"number": 67, "content": "        return conf;", "is_target": false}, {"number": 68, "content": "      }", "is_target": false}, {"number": 69, "content": "", "is_target": false}, {"number": 70, "content": "      virtual ~SchlangeVelocity();", "is_target": true}, {"number": 71, "content": "", "is_target": false}, {"number": 72, "content": "      /**", "is_target": false}, {"number": 73, "content": "       *Reads the actual motor commands from an array,", "is_target": false}, {"number": 74, "content": "       *an sets all motors of the snake to this values.", "is_target": false}, {"number": 75, "content": "       *It is an linear allocation.", "is_target": false}]}, "2622": {"lines": [{"number": 74, "content": "       *an sets all motors of the snake to this values.", "is_target": false}, {"number": 75, "content": "       *It is an linear allocation.", "is_target": false}, {"number": 76, "content": "       *@param motors pointer to the array, motor values are scaled to [-1,1]", "is_target": false}, {"number": 77, "content": "       *@param motornumber length of the motor array", "is_target": false}, {"number": 78, "content": "       **/", "is_target": false}, {"number": 79, "content": "      virtual void setMotorsIntern( const double* motors, int motornumber );", "is_target": true}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "      /**", "is_target": false}, {"number": 82, "content": "       *Writes the sensor values to an array in the memory.", "is_target": false}, {"number": 83, "content": "       *@param sensors pointer to the array", "is_target": false}, {"number": 84, "content": "       *@param sensornumber length of the sensor array", "is_target": false}]}, "2623": {"lines": [{"number": 82, "content": "       *Writes the sensor values to an array in the memory.", "is_target": false}, {"number": 83, "content": "       *@param sensors pointer to the array", "is_target": false}, {"number": 84, "content": "       *@param sensornumber length of the sensor array", "is_target": false}, {"number": 85, "content": "       *@return number of actually written sensors", "is_target": false}, {"number": 86, "content": "       **/", "is_target": false}, {"number": 87, "content": "      virtual int getSensorsIntern( sensor* sensors, int sensornumber );", "is_target": true}, {"number": 88, "content": "", "is_target": false}, {"number": 89, "content": "      /** returns number of sensors", "is_target": false}, {"number": 90, "content": "       */", "is_target": false}, {"number": 91, "content": "      virtual int getSensorNumberIntern() const override { assert(created); return joints.size() * 2; }", "is_target": false}, {"number": 92, "content": "", "is_target": false}]}, "2624": {"lines": [{"number": 93, "content": "      /** returns number of motors", "is_target": false}, {"number": 94, "content": "       */", "is_target": false}, {"number": 95, "content": "      virtual int getMotorNumberIntern() const override { assert(created); return joints.size() * 2; }", "is_target": false}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "    private:", "is_target": false}, {"number": 98, "content": "      virtual void create(const osg::Matrix& pose);", "is_target": true}, {"number": 99, "content": "      virtual void destroy();", "is_target": false}, {"number": 100, "content": "    };", "is_target": false}, {"number": 101, "content": "", "is_target": false}, {"number": 102, "content": "}", "is_target": false}, {"number": 103, "content": "", "is_target": false}]}, "2625": {"lines": [{"number": 94, "content": "       */", "is_target": false}, {"number": 95, "content": "      virtual int getMotorNumberIntern() const override { assert(created); return joints.size() * 2; }", "is_target": false}, {"number": 96, "content": "", "is_target": false}, {"number": 97, "content": "    private:", "is_target": false}, {"number": 98, "content": "      virtual void create(const osg::Matrix& pose);", "is_target": false}, {"number": 99, "content": "      virtual void destroy();", "is_target": true}, {"number": 100, "content": "    };", "is_target": false}, {"number": 101, "content": "", "is_target": false}, {"number": 102, "content": "}", "is_target": false}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "#endif", "is_target": false}]}, "2626": {"lines": [{"number": 165, "content": "          break;", "is_target": false}, {"number": 166, "content": "        }", "is_target": false}, {"number": 167, "content": "    }", "is_target": false}, {"number": 168, "content": "    return false;", "is_target": false}, {"number": 169, "content": "  }", "is_target": false}, {"number": 170, "content": "};", "is_target": true}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 174, "content": "{", "is_target": false}, {"number": 175, "content": "  ThisSim sim;", "is_target": false}]}, "2627": {"lines": [{"number": 96, "content": "        printf(\"\\t%f\",val);", "is_target": false}, {"number": 97, "content": "      }", "is_target": false}, {"number": 98, "content": "      printf(\"\\n\");", "is_target": false}, {"number": 99, "content": "    }", "is_target": false}, {"number": 100, "content": "  };", "is_target": false}, {"number": 101, "content": "};", "is_target": true}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 105, "content": "{", "is_target": false}, {"number": 106, "content": "  ThisSim sim;", "is_target": false}]}, "2628": {"lines": [{"number": 96, "content": "        printf(\"\\t%f\",val);", "is_target": false}, {"number": 97, "content": "      }", "is_target": false}, {"number": 98, "content": "      printf(\"\\n\");", "is_target": false}, {"number": 99, "content": "    }", "is_target": false}, {"number": 100, "content": "  };", "is_target": false}, {"number": 101, "content": "};", "is_target": true}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 105, "content": "{", "is_target": false}, {"number": 106, "content": "  ThisSim sim;", "is_target": false}]}, "2629": {"lines": [{"number": 165, "content": "          break;", "is_target": false}, {"number": 166, "content": "        }", "is_target": false}, {"number": 167, "content": "    }", "is_target": false}, {"number": 168, "content": "    return false;", "is_target": false}, {"number": 169, "content": "  }", "is_target": false}, {"number": 170, "content": "};", "is_target": true}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 174, "content": "{", "is_target": false}, {"number": 175, "content": "  ThisSim sim;", "is_target": false}]}, "2630": {"lines": [{"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "    OsgHandle mh(osgHandle);", "is_target": false}, {"number": 61, "content": "    //mh.colorSchema()->print(cout);", "is_target": false}, {"number": 62, "content": "    // check loading of files", "is_target": false}, {"number": 63, "content": "    assert(mh.colorSchema()->existsColor(\"test1\"));", "is_target": true}, {"number": 64, "content": "    assert(mh.colorSchema()->existsColor(\"test2\"));", "is_target": false}, {"number": 65, "content": "    assert(mh.colorSchema()->existsColor(\"test3\"));", "is_target": false}, {"number": 66, "content": "    assert(mh.colorSchema()->existsColor(\"test4\"));", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "    mh.colorSchema()->color(\"test1\").print(cerr); cerr << endl;", "is_target": false}]}, "2631": {"lines": [{"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "    OsgHandle mh(osgHandle);", "is_target": false}, {"number": 61, "content": "    //mh.colorSchema()->print(cout);", "is_target": false}, {"number": 62, "content": "    // check loading of files", "is_target": false}, {"number": 63, "content": "    assert(mh.colorSchema()->existsColor(\"test1\"));", "is_target": false}, {"number": 64, "content": "    assert(mh.colorSchema()->existsColor(\"test2\"));", "is_target": true}, {"number": 65, "content": "    assert(mh.colorSchema()->existsColor(\"test3\"));", "is_target": false}, {"number": 66, "content": "    assert(mh.colorSchema()->existsColor(\"test4\"));", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "    mh.colorSchema()->color(\"test1\").print(cerr); cerr << endl;", "is_target": false}, {"number": 69, "content": "    assert(mh.colorSchema()->color(\"test1\")==Color::rgb255(200,0,0));", "is_target": false}]}, "2632": {"lines": [{"number": 60, "content": "    OsgHandle mh(osgHandle);", "is_target": false}, {"number": 61, "content": "    //mh.colorSchema()->print(cout);", "is_target": false}, {"number": 62, "content": "    // check loading of files", "is_target": false}, {"number": 63, "content": "    assert(mh.colorSchema()->existsColor(\"test1\"));", "is_target": false}, {"number": 64, "content": "    assert(mh.colorSchema()->existsColor(\"test2\"));", "is_target": false}, {"number": 65, "content": "    assert(mh.colorSchema()->existsColor(\"test3\"));", "is_target": true}, {"number": 66, "content": "    assert(mh.colorSchema()->existsColor(\"test4\"));", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "    mh.colorSchema()->color(\"test1\").print(cerr); cerr << endl;", "is_target": false}, {"number": 69, "content": "    assert(mh.colorSchema()->color(\"test1\")==Color::rgb255(200,0,0));", "is_target": false}, {"number": 70, "content": "    mh.colorSchema()->color(\"test2\").print(cerr); cerr << endl;", "is_target": false}]}, "2633": {"lines": [{"number": 61, "content": "    //mh.colorSchema()->print(cout);", "is_target": false}, {"number": 62, "content": "    // check loading of files", "is_target": false}, {"number": 63, "content": "    assert(mh.colorSchema()->existsColor(\"test1\"));", "is_target": false}, {"number": 64, "content": "    assert(mh.colorSchema()->existsColor(\"test2\"));", "is_target": false}, {"number": 65, "content": "    assert(mh.colorSchema()->existsColor(\"test3\"));", "is_target": false}, {"number": 66, "content": "    assert(mh.colorSchema()->existsColor(\"test4\"));", "is_target": true}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "    mh.colorSchema()->color(\"test1\").print(cerr); cerr << endl;", "is_target": false}, {"number": 69, "content": "    assert(mh.colorSchema()->color(\"test1\")==Color::rgb255(200,0,0));", "is_target": false}, {"number": 70, "content": "    mh.colorSchema()->color(\"test2\").print(cerr); cerr << endl;", "is_target": false}, {"number": 71, "content": "    assert(mh.colorSchema()->color(\"test2\")==Color::rgb255(0,200,0));", "is_target": false}]}, "2634": {"lines": [{"number": 64, "content": "    assert(mh.colorSchema()->existsColor(\"test2\"));", "is_target": false}, {"number": 65, "content": "    assert(mh.colorSchema()->existsColor(\"test3\"));", "is_target": false}, {"number": 66, "content": "    assert(mh.colorSchema()->existsColor(\"test4\"));", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "    mh.colorSchema()->color(\"test1\").print(cerr); cerr << endl;", "is_target": false}, {"number": 69, "content": "    assert(mh.colorSchema()->color(\"test1\")==Color::rgb255(200,0,0));", "is_target": true}, {"number": 70, "content": "    mh.colorSchema()->color(\"test2\").print(cerr); cerr << endl;", "is_target": false}, {"number": 71, "content": "    assert(mh.colorSchema()->color(\"test2\")==Color::rgb255(0,200,0));", "is_target": false}, {"number": 72, "content": "    mh.colorSchema()->color(\"test3\").print(cerr); cerr << endl;", "is_target": false}, {"number": 73, "content": "    assert(mh.colorSchema()->color(\"test3\")==Color::rgb255(0,0,200));", "is_target": false}, {"number": 74, "content": "    mh.colorSchema()->color(\"test4\").print(cerr); cerr << endl;", "is_target": false}]}, "2635": {"lines": [{"number": 66, "content": "    assert(mh.colorSchema()->existsColor(\"test4\"));", "is_target": false}, {"number": 67, "content": "", "is_target": false}, {"number": 68, "content": "    mh.colorSchema()->color(\"test1\").print(cerr); cerr << endl;", "is_target": false}, {"number": 69, "content": "    assert(mh.colorSchema()->color(\"test1\")==Color::rgb255(200,0,0));", "is_target": false}, {"number": 70, "content": "    mh.colorSchema()->color(\"test2\").print(cerr); cerr << endl;", "is_target": false}, {"number": 71, "content": "    assert(mh.colorSchema()->color(\"test2\")==Color::rgb255(0,200,0));", "is_target": true}, {"number": 72, "content": "    mh.colorSchema()->color(\"test3\").print(cerr); cerr << endl;", "is_target": false}, {"number": 73, "content": "    assert(mh.colorSchema()->color(\"test3\")==Color::rgb255(0,0,200));", "is_target": false}, {"number": 74, "content": "    mh.colorSchema()->color(\"test4\").print(cerr); cerr << endl;", "is_target": false}, {"number": 75, "content": "    assert(mh.colorSchema()->color(\"test4\")==Color::rgb255(200,200,0));", "is_target": false}, {"number": 76, "content": "    ", "is_target": false}]}, "2636": {"lines": [{"number": 68, "content": "    mh.colorSchema()->color(\"test1\").print(cerr); cerr << endl;", "is_target": false}, {"number": 69, "content": "    assert(mh.colorSchema()->color(\"test1\")==Color::rgb255(200,0,0));", "is_target": false}, {"number": 70, "content": "    mh.colorSchema()->color(\"test2\").print(cerr); cerr << endl;", "is_target": false}, {"number": 71, "content": "    assert(mh.colorSchema()->color(\"test2\")==Color::rgb255(0,200,0));", "is_target": false}, {"number": 72, "content": "    mh.colorSchema()->color(\"test3\").print(cerr); cerr << endl;", "is_target": false}, {"number": 73, "content": "    assert(mh.colorSchema()->color(\"test3\")==Color::rgb255(0,0,200));", "is_target": true}, {"number": 74, "content": "    mh.colorSchema()->color(\"test4\").print(cerr); cerr << endl;", "is_target": false}, {"number": 75, "content": "    assert(mh.colorSchema()->color(\"test4\")==Color::rgb255(200,200,0));", "is_target": false}, {"number": 76, "content": "    ", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "    Color c;", "is_target": false}]}, "2637": {"lines": [{"number": 70, "content": "    mh.colorSchema()->color(\"test2\").print(cerr); cerr << endl;", "is_target": false}, {"number": 71, "content": "    assert(mh.colorSchema()->color(\"test2\")==Color::rgb255(0,200,0));", "is_target": false}, {"number": 72, "content": "    mh.colorSchema()->color(\"test3\").print(cerr); cerr << endl;", "is_target": false}, {"number": 73, "content": "    assert(mh.colorSchema()->color(\"test3\")==Color::rgb255(0,0,200));", "is_target": false}, {"number": 74, "content": "    mh.colorSchema()->color(\"test4\").print(cerr); cerr << endl;", "is_target": false}, {"number": 75, "content": "    assert(mh.colorSchema()->color(\"test4\")==Color::rgb255(200,200,0));", "is_target": true}, {"number": 76, "content": "    ", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "    Color c;", "is_target": false}, {"number": 79, "content": "    // check alias loading", "is_target": false}, {"number": 80, "content": "    assert(mh.colorSchema()->color(c,\"alias1\"));", "is_target": false}]}, "2638": {"lines": [{"number": 75, "content": "    assert(mh.colorSchema()->color(\"test4\")==Color::rgb255(200,200,0));", "is_target": false}, {"number": 76, "content": "    ", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "    Color c;", "is_target": false}, {"number": 79, "content": "    // check alias loading", "is_target": false}, {"number": 80, "content": "    assert(mh.colorSchema()->color(c,\"alias1\"));", "is_target": true}, {"number": 81, "content": "    assert(mh.colorSchema()->color(c,\"alias2\",1));", "is_target": false}, {"number": 82, "content": "    // check alias semantics", "is_target": false}, {"number": 83, "content": "    ", "is_target": false}, {"number": 84, "content": "    cerr << \"Aliases\" << endl;", "is_target": false}, {"number": 85, "content": "    mh.colorSchema()->color(\"alias1\",0).print(cerr); cerr << endl;", "is_target": false}]}, "2639": {"lines": [{"number": 76, "content": "    ", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "    Color c;", "is_target": false}, {"number": 79, "content": "    // check alias loading", "is_target": false}, {"number": 80, "content": "    assert(mh.colorSchema()->color(c,\"alias1\"));", "is_target": false}, {"number": 81, "content": "    assert(mh.colorSchema()->color(c,\"alias2\",1));", "is_target": true}, {"number": 82, "content": "    // check alias semantics", "is_target": false}, {"number": 83, "content": "    ", "is_target": false}, {"number": 84, "content": "    cerr << \"Aliases\" << endl;", "is_target": false}, {"number": 85, "content": "    mh.colorSchema()->color(\"alias1\",0).print(cerr); cerr << endl;", "is_target": false}, {"number": 86, "content": "    assert(mh.colorSchema()->color(\"alias1\",0)==Color::rgb255(200,0,0));", "is_target": false}]}, "2640": {"lines": [{"number": 81, "content": "    assert(mh.colorSchema()->color(c,\"alias2\",1));", "is_target": false}, {"number": 82, "content": "    // check alias semantics", "is_target": false}, {"number": 83, "content": "    ", "is_target": false}, {"number": 84, "content": "    cerr << \"Aliases\" << endl;", "is_target": false}, {"number": 85, "content": "    mh.colorSchema()->color(\"alias1\",0).print(cerr); cerr << endl;", "is_target": false}, {"number": 86, "content": "    assert(mh.colorSchema()->color(\"alias1\",0)==Color::rgb255(200,0,0));", "is_target": true}, {"number": 87, "content": "    mh.colorSchema()->color(\"alias1\",3).print(cerr); cerr << endl;", "is_target": false}, {"number": 88, "content": "    assert(mh.colorSchema()->color(\"alias1\",3)", "is_target": false}, {"number": 89, "content": "           == mh.colorSchema()->color(\"alias1\",0));", "is_target": false}, {"number": 90, "content": "    mh.colorSchema()->color(\"alias2\",1).print(cerr); cerr << endl;", "is_target": false}, {"number": 91, "content": "    assert(mh.colorSchema()->color(\"alias2\",1)==Color::rgb255(0,0,200));", "is_target": false}]}, "2641": {"lines": [{"number": 83, "content": "    ", "is_target": false}, {"number": 84, "content": "    cerr << \"Aliases\" << endl;", "is_target": false}, {"number": 85, "content": "    mh.colorSchema()->color(\"alias1\",0).print(cerr); cerr << endl;", "is_target": false}, {"number": 86, "content": "    assert(mh.colorSchema()->color(\"alias1\",0)==Color::rgb255(200,0,0));", "is_target": false}, {"number": 87, "content": "    mh.colorSchema()->color(\"alias1\",3).print(cerr); cerr << endl;", "is_target": false}, {"number": 88, "content": "    assert(mh.colorSchema()->color(\"alias1\",3)", "is_target": true}, {"number": 89, "content": "           == mh.colorSchema()->color(\"alias1\",0));", "is_target": false}, {"number": 90, "content": "    mh.colorSchema()->color(\"alias2\",1).print(cerr); cerr << endl;", "is_target": false}, {"number": 91, "content": "    assert(mh.colorSchema()->color(\"alias2\",1)==Color::rgb255(0,0,200));", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "    mh.colorSchema()->color(\"alias2\",0).print(cerr); cerr << endl;", "is_target": false}]}, "2642": {"lines": [{"number": 84, "content": "    cerr << \"Aliases\" << endl;", "is_target": false}, {"number": 85, "content": "    mh.colorSchema()->color(\"alias1\",0).print(cerr); cerr << endl;", "is_target": false}, {"number": 86, "content": "    assert(mh.colorSchema()->color(\"alias1\",0)==Color::rgb255(200,0,0));", "is_target": false}, {"number": 87, "content": "    mh.colorSchema()->color(\"alias1\",3).print(cerr); cerr << endl;", "is_target": false}, {"number": 88, "content": "    assert(mh.colorSchema()->color(\"alias1\",3)", "is_target": false}, {"number": 89, "content": "           == mh.colorSchema()->color(\"alias1\",0));", "is_target": true}, {"number": 90, "content": "    mh.colorSchema()->color(\"alias2\",1).print(cerr); cerr << endl;", "is_target": false}, {"number": 91, "content": "    assert(mh.colorSchema()->color(\"alias2\",1)==Color::rgb255(0,0,200));", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "    mh.colorSchema()->color(\"alias2\",0).print(cerr); cerr << endl;", "is_target": false}, {"number": 94, "content": "    assert(mh.colorSchema()->color(\"alias2\",0)==mh.colorSchema()->getDefaultColor());", "is_target": false}]}, "2643": {"lines": [{"number": 86, "content": "    assert(mh.colorSchema()->color(\"alias1\",0)==Color::rgb255(200,0,0));", "is_target": false}, {"number": 87, "content": "    mh.colorSchema()->color(\"alias1\",3).print(cerr); cerr << endl;", "is_target": false}, {"number": 88, "content": "    assert(mh.colorSchema()->color(\"alias1\",3)", "is_target": false}, {"number": 89, "content": "           == mh.colorSchema()->color(\"alias1\",0));", "is_target": false}, {"number": 90, "content": "    mh.colorSchema()->color(\"alias2\",1).print(cerr); cerr << endl;", "is_target": false}, {"number": 91, "content": "    assert(mh.colorSchema()->color(\"alias2\",1)==Color::rgb255(0,0,200));", "is_target": true}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "    mh.colorSchema()->color(\"alias2\",0).print(cerr); cerr << endl;", "is_target": false}, {"number": 94, "content": "    assert(mh.colorSchema()->color(\"alias2\",0)==mh.colorSchema()->getDefaultColor());", "is_target": false}, {"number": 95, "content": "    ", "is_target": false}, {"number": 96, "content": "    exit(0);", "is_target": false}]}, "2644": {"lines": [{"number": 89, "content": "           == mh.colorSchema()->color(\"alias1\",0));", "is_target": false}, {"number": 90, "content": "    mh.colorSchema()->color(\"alias2\",1).print(cerr); cerr << endl;", "is_target": false}, {"number": 91, "content": "    assert(mh.colorSchema()->color(\"alias2\",1)==Color::rgb255(0,0,200));", "is_target": false}, {"number": 92, "content": "", "is_target": false}, {"number": 93, "content": "    mh.colorSchema()->color(\"alias2\",0).print(cerr); cerr << endl;", "is_target": false}, {"number": 94, "content": "    assert(mh.colorSchema()->color(\"alias2\",0)==mh.colorSchema()->getDefaultColor());", "is_target": true}, {"number": 95, "content": "    ", "is_target": false}, {"number": 96, "content": "    exit(0);", "is_target": false}, {"number": 97, "content": "  };", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "};", "is_target": false}]}, "2645": {"lines": [{"number": 105, "content": "public:", "is_target": false}, {"number": 106, "content": "  AbstractController* controller = nullptr;", "is_target": false}, {"number": 107, "content": "  Sphererobot3Masses* sphere1 = nullptr;", "is_target": false}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "  // starting function (executed once at the beginning of the simulation loop)", "is_target": false}, {"number": 110, "content": "  void start(const OdeHandle& odeHandle, const OsgHandle& osgHandle, GlobalData& global)", "is_target": true}, {"number": 111, "content": "  {", "is_target": false}, {"number": 112, "content": "    setCameraHomePos(Pos(5.2728, 7.2112, 3.31768), Pos(140.539, -13.1456, 0));", "is_target": false}, {"number": 113, "content": "    // initialization", "is_target": false}, {"number": 114, "content": "    // - set global noise to 0.1", "is_target": false}, {"number": 115, "content": "    global.odeConfig.setParam(\"noise\",0.1);", "is_target": false}]}, "2646": {"lines": [{"number": 206, "content": "      }", "is_target": false}, {"number": 207, "content": "      return true;", "is_target": false}, {"number": 208, "content": "    } else return false;", "is_target": false}, {"number": 209, "content": "  }", "is_target": false}, {"number": 210, "content": "", "is_target": false}, {"number": 211, "content": "  virtual void bindingDescription(osg::ApplicationUsage & au) const {", "is_target": true}, {"number": 212, "content": "    au.addKeyboardMouseBinding(\"Simulation: X\",\"Push robot to right (positive x)\");", "is_target": false}, {"number": 213, "content": "    au.addKeyboardMouseBinding(\"Simulation: x\",\"Push robot to left (negative x)\");", "is_target": false}, {"number": 214, "content": "    au.addKeyboardMouseBinding(\"Simulation: T\",\"Spin robot counter-clockwise\");", "is_target": false}, {"number": 215, "content": "    au.addKeyboardMouseBinding(\"Simulation: t\",\"Spin robot clockwise\");", "is_target": false}, {"number": 216, "content": "    //    au.addKeyboardMouseBinding(__PLACEHOLDER_25__,__PLACEHOLDER_26__);", "is_target": false}]}, "2647": {"lines": [{"number": 165, "content": "          break;", "is_target": false}, {"number": 166, "content": "        }", "is_target": false}, {"number": 167, "content": "    }", "is_target": false}, {"number": 168, "content": "    return false;", "is_target": false}, {"number": 169, "content": "  }", "is_target": false}, {"number": 170, "content": "};", "is_target": true}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 174, "content": "{", "is_target": false}, {"number": 175, "content": "  ThisSim sim;", "is_target": false}]}, "2648": {"lines": [{"number": 96, "content": "        printf(\"\\t%f\",val);", "is_target": false}, {"number": 97, "content": "      }", "is_target": false}, {"number": 98, "content": "      printf(\"\\n\");", "is_target": false}, {"number": 99, "content": "    }", "is_target": false}, {"number": 100, "content": "  };", "is_target": false}, {"number": 101, "content": "};", "is_target": true}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 105, "content": "{", "is_target": false}, {"number": 106, "content": "  ThisSim sim;", "is_target": false}]}, "2649": {"lines": [{"number": 342, "content": "        cout << \" \" << (*a)->getName() <<endl << \" new coupling matrix B:\" << endl;", "is_target": false}, {"number": 343, "content": "        OneControllerPerChannel* ocpc =", "is_target": false}, {"number": 344, "content": "          dynamic_cast<OneControllerPerChannel*>((*a)->getController());", "is_target": false}, {"number": 345, "content": "        if(ocpc){", "is_target": false}, {"number": 346, "content": "          vector<AbstractController*> cs = ocpc->getControllers();", "is_target": false}, {"number": 347, "content": "          for(unsigned int i=0; i< cs.size(); ++i) override {", "is_target": true}, {"number": 348, "content": "            SoxExpand* s = dynamic_cast<SoxExpand*>(cs[i]);", "is_target": false}, {"number": 349, "content": "            if(s){", "is_target": false}, {"number": 350, "content": "              matrix::Matrix CS = s->getContextC();", "is_target": false}, {"number": 351, "content": "              bool two = (CS.getN()== 4);", "is_target": false}, {"number": 352, "content": "", "is_target": false}]}, "2650": {"lines": [{"number": 165, "content": "          break;", "is_target": false}, {"number": 166, "content": "        }", "is_target": false}, {"number": 167, "content": "    }", "is_target": false}, {"number": 168, "content": "    return false;", "is_target": false}, {"number": 169, "content": "  }", "is_target": false}, {"number": 170, "content": "};", "is_target": true}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 174, "content": "{", "is_target": false}, {"number": 175, "content": "  ThisSim sim;", "is_target": false}]}, "2651": {"lines": [{"number": 96, "content": "        printf(\"\\t%f\",val);", "is_target": false}, {"number": 97, "content": "      }", "is_target": false}, {"number": 98, "content": "      printf(\"\\n\");", "is_target": false}, {"number": 99, "content": "    }", "is_target": false}, {"number": 100, "content": "  };", "is_target": false}, {"number": 101, "content": "};", "is_target": true}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 105, "content": "{", "is_target": false}, {"number": 106, "content": "  ThisSim sim;", "is_target": false}]}, "2652": {"lines": [{"number": 165, "content": "          break;", "is_target": false}, {"number": 166, "content": "        }", "is_target": false}, {"number": 167, "content": "    }", "is_target": false}, {"number": 168, "content": "    return false;", "is_target": false}, {"number": 169, "content": "  }", "is_target": false}, {"number": 170, "content": "};", "is_target": true}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 174, "content": "{", "is_target": false}, {"number": 175, "content": "  ThisSim sim;", "is_target": false}]}, "2653": {"lines": [{"number": 96, "content": "        printf(\"\\t%f\",val);", "is_target": false}, {"number": 97, "content": "      }", "is_target": false}, {"number": 98, "content": "      printf(\"\\n\");", "is_target": false}, {"number": 99, "content": "    }", "is_target": false}, {"number": 100, "content": "  };", "is_target": false}, {"number": 101, "content": "};", "is_target": true}, {"number": 102, "content": "", "is_target": false}, {"number": 103, "content": "", "is_target": false}, {"number": 104, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 105, "content": "{", "is_target": false}, {"number": 106, "content": "  ThisSim sim;", "is_target": false}]}, "2654": {"lines": [{"number": 165, "content": "          break;", "is_target": false}, {"number": 166, "content": "        }", "is_target": false}, {"number": 167, "content": "    }", "is_target": false}, {"number": 168, "content": "    return false;", "is_target": false}, {"number": 169, "content": "  }", "is_target": false}, {"number": 170, "content": "};", "is_target": true}, {"number": 171, "content": "", "is_target": false}, {"number": 172, "content": "", "is_target": false}, {"number": 173, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 174, "content": "{", "is_target": false}, {"number": 175, "content": "  ThisSim sim;", "is_target": false}]}, "2655": {"lines": [{"number": 111, "content": "    return false;", "is_target": false}, {"number": 112, "content": "  }", "is_target": false}, {"number": 113, "content": "", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "", "is_target": false}, {"number": 116, "content": "};", "is_target": true}, {"number": 117, "content": "", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 120, "content": "{", "is_target": false}, {"number": 121, "content": "  ThisSim sim;", "is_target": false}]}, "2656": {"lines": [{"number": 414, "content": "", "is_target": false}, {"number": 415, "content": "  // add own key handling stuff here, just insert some case values", "is_target": false}, {"number": 416, "content": "  virtual bool command(const OdeHandle&, const OsgHandle&, GlobalData& globalData, int key, bool down) override {", "is_target": false}, {"number": 417, "content": "    bool hdld=false;", "is_target": false}, {"number": 418, "content": "    if (down || 1) { // only when key is pressed, not when released", "is_target": false}, {"number": 419, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 420, "content": "        {", "is_target": false}, {"number": 421, "content": "        case 'a': slider->getMainPrimitive()->applyForce(5,0,0); hdld = true;  break;", "is_target": false}, {"number": 422, "content": "        case 'd': slider->getMainPrimitive()->applyForce(0,5,0); hdld = true;  break;", "is_target": false}, {"number": 423, "content": "        case 'i':", "is_target": false}, {"number": 424, "content": "          if(slider) slider->getMainPrimitive()->applyForce(200,0,0); hdld = true;  break;", "is_target": false}]}, "2657": {"lines": [{"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "  // add own key handling stuff here, just insert some case values", "is_target": false}, {"number": 146, "content": "  virtual bool command(const OdeHandle& odeHandle, const OsgHandle& osgHandle,", "is_target": false}, {"number": 147, "content": "                       GlobalData& globalData, int key, bool down) override {", "is_target": false}, {"number": 148, "content": "    if (down) { // only when key is pressed, not when released", "is_target": false}, {"number": 149, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 150, "content": "        {", "is_target": false}, {"number": 151, "content": "        default:", "is_target": false}, {"number": 152, "content": "          return false;", "is_target": false}, {"number": 153, "content": "          break;", "is_target": false}, {"number": 154, "content": "        }", "is_target": false}]}, "2658": {"lines": [{"number": 111, "content": "    return false;", "is_target": false}, {"number": 112, "content": "  }", "is_target": false}, {"number": 113, "content": "", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "", "is_target": false}, {"number": 116, "content": "};", "is_target": true}, {"number": 117, "content": "", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 120, "content": "{", "is_target": false}, {"number": 121, "content": "  ThisSim sim;", "is_target": false}]}, "2659": {"lines": [{"number": 111, "content": "    return false;", "is_target": false}, {"number": 112, "content": "  }", "is_target": false}, {"number": 113, "content": "", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "", "is_target": false}, {"number": 116, "content": "};", "is_target": true}, {"number": 117, "content": "", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 120, "content": "{", "is_target": false}, {"number": 121, "content": "  ThisSim sim;", "is_target": false}]}, "2660": {"lines": [{"number": 111, "content": "    return false;", "is_target": false}, {"number": 112, "content": "  }", "is_target": false}, {"number": 113, "content": "", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "", "is_target": false}, {"number": 116, "content": "};", "is_target": true}, {"number": 117, "content": "", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 120, "content": "{", "is_target": false}, {"number": 121, "content": "  ThisSim sim;", "is_target": false}]}, "2661": {"lines": [{"number": 125, "content": "      simulation_time_reached=true;", "is_target": false}, {"number": 126, "content": "    }", "is_target": false}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "  };", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "};", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 134, "content": "{", "is_target": false}, {"number": 135, "content": "  ThisSim sim;", "is_target": false}]}, "2662": {"lines": [{"number": 111, "content": "    return false;", "is_target": false}, {"number": 112, "content": "  }", "is_target": false}, {"number": 113, "content": "", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "", "is_target": false}, {"number": 116, "content": "};", "is_target": true}, {"number": 117, "content": "", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 120, "content": "{", "is_target": false}, {"number": 121, "content": "  ThisSim sim;", "is_target": false}]}, "2663": {"lines": [{"number": 111, "content": "    return false;", "is_target": false}, {"number": 112, "content": "  }", "is_target": false}, {"number": 113, "content": "", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "", "is_target": false}, {"number": 116, "content": "};", "is_target": true}, {"number": 117, "content": "", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 120, "content": "{", "is_target": false}, {"number": 121, "content": "  ThisSim sim;", "is_target": false}]}, "2664": {"lines": [{"number": 125, "content": "      simulation_time_reached=true;", "is_target": false}, {"number": 126, "content": "    }", "is_target": false}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "  };", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "};", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 134, "content": "{", "is_target": false}, {"number": 135, "content": "  ThisSim sim;", "is_target": false}]}, "2665": {"lines": [{"number": 125, "content": "      simulation_time_reached=true;", "is_target": false}, {"number": 126, "content": "    }", "is_target": false}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "  };", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "};", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 134, "content": "{", "is_target": false}, {"number": 135, "content": "  ThisSim sim;", "is_target": false}]}, "2666": {"lines": [{"number": 125, "content": "      simulation_time_reached=true;", "is_target": false}, {"number": 126, "content": "    }", "is_target": false}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "  };", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "};", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 134, "content": "{", "is_target": false}, {"number": 135, "content": "  ThisSim sim;", "is_target": false}]}, "2667": {"lines": [{"number": 111, "content": "    return false;", "is_target": false}, {"number": 112, "content": "  }", "is_target": false}, {"number": 113, "content": "", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "", "is_target": false}, {"number": 116, "content": "};", "is_target": true}, {"number": 117, "content": "", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 120, "content": "{", "is_target": false}, {"number": 121, "content": "  ThisSim sim;", "is_target": false}]}, "2668": {"lines": [{"number": 111, "content": "    return false;", "is_target": false}, {"number": 112, "content": "  }", "is_target": false}, {"number": 113, "content": "", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "", "is_target": false}, {"number": 116, "content": "};", "is_target": true}, {"number": 117, "content": "", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 120, "content": "{", "is_target": false}, {"number": 121, "content": "  ThisSim sim;", "is_target": false}]}, "2669": {"lines": [{"number": 125, "content": "      simulation_time_reached=true;", "is_target": false}, {"number": 126, "content": "    }", "is_target": false}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "  };", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "};", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 134, "content": "{", "is_target": false}, {"number": 135, "content": "  ThisSim sim;", "is_target": false}]}, "2670": {"lines": [{"number": 125, "content": "      simulation_time_reached=true;", "is_target": false}, {"number": 126, "content": "    }", "is_target": false}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "  };", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "};", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 134, "content": "{", "is_target": false}, {"number": 135, "content": "  ThisSim sim;", "is_target": false}]}, "2671": {"lines": [{"number": 111, "content": "    return false;", "is_target": false}, {"number": 112, "content": "  }", "is_target": false}, {"number": 113, "content": "", "is_target": false}, {"number": 114, "content": "", "is_target": false}, {"number": 115, "content": "", "is_target": false}, {"number": 116, "content": "};", "is_target": true}, {"number": 117, "content": "", "is_target": false}, {"number": 118, "content": "", "is_target": false}, {"number": 119, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 120, "content": "{", "is_target": false}, {"number": 121, "content": "  ThisSim sim;", "is_target": false}]}, "2672": {"lines": [{"number": 41, "content": "    ", "is_target": false}, {"number": 42, "content": "  AsyncRTTViewer(){", "is_target": false}, {"number": 43, "content": "    asyncRTTViewerConstructorInit();", "is_target": false}, {"number": 44, "content": "  }", "is_target": false}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "  AsyncRTTViewer(osg::const ArgumentParser& arguments)", "is_target": true}, {"number": 47, "content": "    : osgViewer::Viewer(arguments) {", "is_target": false}, {"number": 48, "content": "    asyncRTTViewerConstructorInit();", "is_target": false}, {"number": 49, "content": "  }", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "  AsyncRTTViewer(const osgViewer::Viewer& viewer, ", "is_target": false}]}, "2673": {"lines": [{"number": 10, "content": "class LPZViewer{", "is_target": false}, {"number": 11, "content": "public:", "is_target": false}, {"number": 12, "content": "  ", "is_target": false}, {"number": 13, "content": "  LPZViewer();", "is_target": false}, {"number": 14, "content": "", "is_target": false}, {"number": 15, "content": "  explicit LPZViewer(osg::const ArgumentParser& arguments);", "is_target": true}, {"number": 16, "content": "", "is_target": false}, {"number": 17, "content": "  LPZViewer(const osgViewer::Viewer& viewer, const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);", "is_target": false}, {"number": 18, "content": "", "is_target": false}, {"number": 19, "content": "  virtual ~LPZViewer();", "is_target": false}, {"number": 20, "content": "", "is_target": false}]}, "2675": {"lines": [{"number": 125, "content": "      simulation_time_reached=true;", "is_target": false}, {"number": 126, "content": "    }", "is_target": false}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "  };", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "};", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 134, "content": "{", "is_target": false}, {"number": 135, "content": "  ThisSim sim;", "is_target": false}]}, "2676": {"lines": [{"number": 87, "content": "        std::string pathfile;", "is_target": false}, {"number": 88, "content": "        char keyForAnimationPath = '5';", "is_target": false}, {"number": 89, "content": "        while (arguments.read(\"-p\",pathfile))", "is_target": false}, {"number": 90, "content": "        {", "is_target": false}, {"number": 91, "content": "            osgGA::AnimationPathManipulator* apm = new osgGA::AnimationPathManipulator(pathfile);", "is_target": false}, {"number": 92, "content": "            if (apm || !apm->valid()) ", "is_target": true}, {"number": 93, "content": "            {", "is_target": false}, {"number": 94, "content": "                unsigned int num = keyswitchManipulator->getNumMatrixManipulators();", "is_target": false}, {"number": 95, "content": "                keyswitchManipulator->addMatrixManipulator( keyForAnimationPath, \"Path\", apm );", "is_target": false}, {"number": 96, "content": "                keyswitchManipulator->selectMatrixManipulator(num);", "is_target": false}, {"number": 97, "content": "                ++keyForAnimationPath;", "is_target": false}]}, "2677": {"lines": [{"number": 125, "content": "      simulation_time_reached=true;", "is_target": false}, {"number": 126, "content": "    }", "is_target": false}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "  };", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "};", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 134, "content": "{", "is_target": false}, {"number": 135, "content": "  ThisSim sim;", "is_target": false}]}, "2678": {"lines": [{"number": 125, "content": "      simulation_time_reached=true;", "is_target": false}, {"number": 126, "content": "    }", "is_target": false}, {"number": 127, "content": "", "is_target": false}, {"number": 128, "content": "  };", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "};", "is_target": true}, {"number": 131, "content": "", "is_target": false}, {"number": 132, "content": "", "is_target": false}, {"number": 133, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 134, "content": "{", "is_target": false}, {"number": 135, "content": "  ThisSim sim;", "is_target": false}]}, "2679": {"lines": [{"number": 220, "content": "    return false;", "is_target": false}, {"number": 221, "content": "  }", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "", "is_target": false}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "};", "is_target": true}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 229, "content": "{", "is_target": false}, {"number": 230, "content": "  ThisSim sim;", "is_target": false}]}, "2680": {"lines": [{"number": 142, "content": "    return false;", "is_target": false}, {"number": 143, "content": "  }", "is_target": false}, {"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "};", "is_target": true}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 151, "content": "{", "is_target": false}, {"number": 152, "content": "  ThisSim sim;", "is_target": false}]}, "2681": {"lines": [{"number": 220, "content": "    return false;", "is_target": false}, {"number": 221, "content": "  }", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "", "is_target": false}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "};", "is_target": true}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 229, "content": "{", "is_target": false}, {"number": 230, "content": "  ThisSim sim;", "is_target": false}]}, "2682": {"lines": [{"number": 220, "content": "    return false;", "is_target": false}, {"number": 221, "content": "  }", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "", "is_target": false}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "};", "is_target": true}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 229, "content": "{", "is_target": false}, {"number": 230, "content": "  ThisSim sim;", "is_target": false}]}, "2684": {"lines": [{"number": 142, "content": "    return false;", "is_target": false}, {"number": 143, "content": "  }", "is_target": false}, {"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "};", "is_target": true}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 151, "content": "{", "is_target": false}, {"number": 152, "content": "  ThisSim sim;", "is_target": false}]}, "2685": {"lines": [{"number": 276, "content": "          break;", "is_target": false}, {"number": 277, "content": "        }", "is_target": false}, {"number": 278, "content": "    }", "is_target": false}, {"number": 279, "content": "    return false;", "is_target": false}, {"number": 280, "content": "  }", "is_target": false}, {"number": 281, "content": "};", "is_target": true}, {"number": 282, "content": "", "is_target": false}, {"number": 283, "content": "", "is_target": false}, {"number": 284, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 285, "content": "{", "is_target": false}, {"number": 286, "content": "  ThisSim sim;", "is_target": false}]}, "2686": {"lines": [{"number": 220, "content": "    return false;", "is_target": false}, {"number": 221, "content": "  }", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "", "is_target": false}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "};", "is_target": true}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 229, "content": "{", "is_target": false}, {"number": 230, "content": "  ThisSim sim;", "is_target": false}]}, "2687": {"lines": [{"number": 68, "content": "  // Horse Walk from wikipedia", "is_target": false}, {"number": 69, "content": "  /* The walk is a four-beat gait that averages about 4 mph.", "is_target": false}, {"number": 70, "content": "     When walking, a horse's legs follow this sequence:", "is_target": false}, {"number": 71, "content": "     left hind leg, left front leg, right hind leg, right front leg,", "is_target": false}, {"number": 72, "content": "     in a regular 1-2-3-4 beat. .... */", "is_target": false}, {"number": 73, "content": "  double phases[4]= { w + 2*(M_PI/2),", "is_target": true}, {"number": 74, "content": "                      w + 0*(M_PI/2),", "is_target": false}, {"number": 75, "content": "                      w + 3*(M_PI/2),", "is_target": false}, {"number": 76, "content": "                      w + 1*(M_PI/2) };", "is_target": false}, {"number": 77, "content": "", "is_target": false}, {"number": 78, "content": "  motors[0] = sin(phases[0]+2)*0.8;", "is_target": false}]}, "2688": {"lines": [{"number": 142, "content": "    return false;", "is_target": false}, {"number": 143, "content": "  }", "is_target": false}, {"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "};", "is_target": true}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 151, "content": "{", "is_target": false}, {"number": 152, "content": "  ThisSim sim;", "is_target": false}]}, "2689": {"lines": [{"number": 276, "content": "          break;", "is_target": false}, {"number": 277, "content": "        }", "is_target": false}, {"number": 278, "content": "    }", "is_target": false}, {"number": 279, "content": "    return false;", "is_target": false}, {"number": 280, "content": "  }", "is_target": false}, {"number": 281, "content": "};", "is_target": true}, {"number": 282, "content": "", "is_target": false}, {"number": 283, "content": "", "is_target": false}, {"number": 284, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 285, "content": "{", "is_target": false}, {"number": 286, "content": "  ThisSim sim;", "is_target": false}]}, "2690": {"lines": [{"number": 142, "content": "    return false;", "is_target": false}, {"number": 143, "content": "  }", "is_target": false}, {"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "};", "is_target": true}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 151, "content": "{", "is_target": false}, {"number": 152, "content": "  ThisSim sim;", "is_target": false}]}, "2691": {"lines": [{"number": 220, "content": "    return false;", "is_target": false}, {"number": 221, "content": "  }", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "", "is_target": false}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "};", "is_target": true}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 229, "content": "{", "is_target": false}, {"number": 230, "content": "  ThisSim sim;", "is_target": false}]}, "2692": {"lines": [{"number": 276, "content": "          break;", "is_target": false}, {"number": 277, "content": "        }", "is_target": false}, {"number": 278, "content": "    }", "is_target": false}, {"number": 279, "content": "    return false;", "is_target": false}, {"number": 280, "content": "  }", "is_target": false}, {"number": 281, "content": "};", "is_target": true}, {"number": 282, "content": "", "is_target": false}, {"number": 283, "content": "", "is_target": false}, {"number": 284, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 285, "content": "{", "is_target": false}, {"number": 286, "content": "  ThisSim sim;", "is_target": false}]}, "2693": {"lines": [{"number": 142, "content": "    return false;", "is_target": false}, {"number": 143, "content": "  }", "is_target": false}, {"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "};", "is_target": true}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 151, "content": "{", "is_target": false}, {"number": 152, "content": "  ThisSim sim;", "is_target": false}]}, "2694": {"lines": [{"number": 276, "content": "          break;", "is_target": false}, {"number": 277, "content": "        }", "is_target": false}, {"number": 278, "content": "    }", "is_target": false}, {"number": 279, "content": "    return false;", "is_target": false}, {"number": 280, "content": "  }", "is_target": false}, {"number": 281, "content": "};", "is_target": true}, {"number": 282, "content": "", "is_target": false}, {"number": 283, "content": "", "is_target": false}, {"number": 284, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 285, "content": "{", "is_target": false}, {"number": 286, "content": "  ThisSim sim;", "is_target": false}]}, "2695": {"lines": [{"number": 220, "content": "    return false;", "is_target": false}, {"number": 221, "content": "  }", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "", "is_target": false}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "};", "is_target": true}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 229, "content": "{", "is_target": false}, {"number": 230, "content": "  ThisSim sim;", "is_target": false}]}, "2696": {"lines": [{"number": 276, "content": "          break;", "is_target": false}, {"number": 277, "content": "        }", "is_target": false}, {"number": 278, "content": "    }", "is_target": false}, {"number": 279, "content": "    return false;", "is_target": false}, {"number": 280, "content": "  }", "is_target": false}, {"number": 281, "content": "};", "is_target": true}, {"number": 282, "content": "", "is_target": false}, {"number": 283, "content": "", "is_target": false}, {"number": 284, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 285, "content": "{", "is_target": false}, {"number": 286, "content": "  ThisSim sim;", "is_target": false}]}, "2697": {"lines": [{"number": 142, "content": "    return false;", "is_target": false}, {"number": 143, "content": "  }", "is_target": false}, {"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "};", "is_target": true}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 151, "content": "{", "is_target": false}, {"number": 152, "content": "  ThisSim sim;", "is_target": false}]}, "2698": {"lines": [{"number": 214, "content": "          break;", "is_target": false}, {"number": 215, "content": "        }", "is_target": false}, {"number": 216, "content": "    }", "is_target": false}, {"number": 217, "content": "    return false;", "is_target": false}, {"number": 218, "content": "  }", "is_target": false}, {"number": 219, "content": "};", "is_target": true}, {"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 223, "content": "{", "is_target": false}, {"number": 224, "content": "  ThisSim sim;", "is_target": false}]}, "2699": {"lines": [{"number": 220, "content": "    return false;", "is_target": false}, {"number": 221, "content": "  }", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "", "is_target": false}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "};", "is_target": true}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 229, "content": "{", "is_target": false}, {"number": 230, "content": "  ThisSim sim;", "is_target": false}]}, "2700": {"lines": [{"number": 276, "content": "          break;", "is_target": false}, {"number": 277, "content": "        }", "is_target": false}, {"number": 278, "content": "    }", "is_target": false}, {"number": 279, "content": "    return false;", "is_target": false}, {"number": 280, "content": "  }", "is_target": false}, {"number": 281, "content": "};", "is_target": true}, {"number": 282, "content": "", "is_target": false}, {"number": 283, "content": "", "is_target": false}, {"number": 284, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 285, "content": "{", "is_target": false}, {"number": 286, "content": "  ThisSim sim;", "is_target": false}]}, "2701": {"lines": [{"number": 214, "content": "          break;", "is_target": false}, {"number": 215, "content": "        }", "is_target": false}, {"number": 216, "content": "    }", "is_target": false}, {"number": 217, "content": "    return false;", "is_target": false}, {"number": 218, "content": "  }", "is_target": false}, {"number": 219, "content": "};", "is_target": true}, {"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 223, "content": "{", "is_target": false}, {"number": 224, "content": "  ThisSim sim;", "is_target": false}]}, "2702": {"lines": [{"number": 220, "content": "    return false;", "is_target": false}, {"number": 221, "content": "  }", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "", "is_target": false}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "};", "is_target": true}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 229, "content": "{", "is_target": false}, {"number": 230, "content": "  ThisSim sim;", "is_target": false}]}, "2703": {"lines": [{"number": 142, "content": "    return false;", "is_target": false}, {"number": 143, "content": "  }", "is_target": false}, {"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "};", "is_target": true}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 151, "content": "{", "is_target": false}, {"number": 152, "content": "  ThisSim sim;", "is_target": false}]}, "2704": {"lines": [{"number": 214, "content": "          break;", "is_target": false}, {"number": 215, "content": "        }", "is_target": false}, {"number": 216, "content": "    }", "is_target": false}, {"number": 217, "content": "    return false;", "is_target": false}, {"number": 218, "content": "  }", "is_target": false}, {"number": 219, "content": "};", "is_target": true}, {"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 223, "content": "{", "is_target": false}, {"number": 224, "content": "  ThisSim sim;", "is_target": false}]}, "2705": {"lines": [{"number": 276, "content": "          break;", "is_target": false}, {"number": 277, "content": "        }", "is_target": false}, {"number": 278, "content": "    }", "is_target": false}, {"number": 279, "content": "    return false;", "is_target": false}, {"number": 280, "content": "  }", "is_target": false}, {"number": 281, "content": "};", "is_target": true}, {"number": 282, "content": "", "is_target": false}, {"number": 283, "content": "", "is_target": false}, {"number": 284, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 285, "content": "{", "is_target": false}, {"number": 286, "content": "  ThisSim sim;", "is_target": false}]}, "2706": {"lines": [{"number": 142, "content": "    return false;", "is_target": false}, {"number": 143, "content": "  }", "is_target": false}, {"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "};", "is_target": true}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 151, "content": "{", "is_target": false}, {"number": 152, "content": "  ThisSim sim;", "is_target": false}]}, "2707": {"lines": [{"number": 214, "content": "          break;", "is_target": false}, {"number": 215, "content": "        }", "is_target": false}, {"number": 216, "content": "    }", "is_target": false}, {"number": 217, "content": "    return false;", "is_target": false}, {"number": 218, "content": "  }", "is_target": false}, {"number": 219, "content": "};", "is_target": true}, {"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 223, "content": "{", "is_target": false}, {"number": 224, "content": "  ThisSim sim;", "is_target": false}]}, "2708": {"lines": [{"number": 220, "content": "    return false;", "is_target": false}, {"number": 221, "content": "  }", "is_target": false}, {"number": 222, "content": "", "is_target": false}, {"number": 223, "content": "", "is_target": false}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "};", "is_target": true}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 229, "content": "{", "is_target": false}, {"number": 230, "content": "  ThisSim sim;", "is_target": false}]}, "2709": {"lines": [{"number": 276, "content": "          break;", "is_target": false}, {"number": 277, "content": "        }", "is_target": false}, {"number": 278, "content": "    }", "is_target": false}, {"number": 279, "content": "    return false;", "is_target": false}, {"number": 280, "content": "  }", "is_target": false}, {"number": 281, "content": "};", "is_target": true}, {"number": 282, "content": "", "is_target": false}, {"number": 283, "content": "", "is_target": false}, {"number": 284, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 285, "content": "{", "is_target": false}, {"number": 286, "content": "  ThisSim sim;", "is_target": false}]}, "2710": {"lines": [{"number": 214, "content": "          break;", "is_target": false}, {"number": 215, "content": "        }", "is_target": false}, {"number": 216, "content": "    }", "is_target": false}, {"number": 217, "content": "    return false;", "is_target": false}, {"number": 218, "content": "  }", "is_target": false}, {"number": 219, "content": "};", "is_target": true}, {"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 223, "content": "{", "is_target": false}, {"number": 224, "content": "  ThisSim sim;", "is_target": false}]}, "2711": {"lines": [{"number": 142, "content": "    return false;", "is_target": false}, {"number": 143, "content": "  }", "is_target": false}, {"number": 144, "content": "", "is_target": false}, {"number": 145, "content": "", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "};", "is_target": true}, {"number": 148, "content": "", "is_target": false}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 151, "content": "{", "is_target": false}, {"number": 152, "content": "  ThisSim sim;", "is_target": false}]}, "2712": {"lines": [{"number": 276, "content": "          break;", "is_target": false}, {"number": 277, "content": "        }", "is_target": false}, {"number": 278, "content": "    }", "is_target": false}, {"number": 279, "content": "    return false;", "is_target": false}, {"number": 280, "content": "  }", "is_target": false}, {"number": 281, "content": "};", "is_target": true}, {"number": 282, "content": "", "is_target": false}, {"number": 283, "content": "", "is_target": false}, {"number": 284, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 285, "content": "{", "is_target": false}, {"number": 286, "content": "  ThisSim sim;", "is_target": false}]}, "2713": {"lines": [{"number": 214, "content": "          break;", "is_target": false}, {"number": 215, "content": "        }", "is_target": false}, {"number": 216, "content": "    }", "is_target": false}, {"number": 217, "content": "    return false;", "is_target": false}, {"number": 218, "content": "  }", "is_target": false}, {"number": 219, "content": "};", "is_target": true}, {"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 223, "content": "{", "is_target": false}, {"number": 224, "content": "  ThisSim sim;", "is_target": false}]}, "2714": {"lines": [{"number": 214, "content": "          break;", "is_target": false}, {"number": 215, "content": "        }", "is_target": false}, {"number": 216, "content": "    }", "is_target": false}, {"number": 217, "content": "    return false;", "is_target": false}, {"number": 218, "content": "  }", "is_target": false}, {"number": 219, "content": "};", "is_target": true}, {"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 223, "content": "{", "is_target": false}, {"number": 224, "content": "  ThisSim sim;", "is_target": false}]}, "2715": {"lines": [{"number": 214, "content": "          break;", "is_target": false}, {"number": 215, "content": "        }", "is_target": false}, {"number": 216, "content": "    }", "is_target": false}, {"number": 217, "content": "    return false;", "is_target": false}, {"number": 218, "content": "  }", "is_target": false}, {"number": 219, "content": "};", "is_target": true}, {"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 223, "content": "{", "is_target": false}, {"number": 224, "content": "  ThisSim sim;", "is_target": false}]}, "2716": {"lines": [{"number": 214, "content": "          break;", "is_target": false}, {"number": 215, "content": "        }", "is_target": false}, {"number": 216, "content": "    }", "is_target": false}, {"number": 217, "content": "    return false;", "is_target": false}, {"number": 218, "content": "  }", "is_target": false}, {"number": 219, "content": "};", "is_target": true}, {"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "", "is_target": false}, {"number": 222, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 223, "content": "{", "is_target": false}, {"number": 224, "content": "  ThisSim sim;", "is_target": false}]}, "2717": {"lines": [{"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "    return lightS;", "is_target": false}, {"number": 249, "content": "  }", "is_target": false}, {"number": 250, "content": "", "is_target": false}, {"number": 251, "content": "  paramval attraction;", "is_target": false}, {"number": 252, "content": "};", "is_target": true}, {"number": 253, "content": "", "is_target": false}, {"number": 254, "content": "", "is_target": false}, {"number": 255, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 256, "content": "{", "is_target": false}, {"number": 257, "content": "  ThisSim sim;", "is_target": false}]}, "2718": {"lines": [{"number": 152, "content": "   * updates the osg notes", "is_target": false}, {"number": 153, "content": "   */", "is_target": false}, {"number": 154, "content": "  void VierBeinerOld::update(){", "is_target": false}, {"number": 155, "content": "    assert(created); // robot must exist", "is_target": false}, {"number": 156, "content": "", "is_target": false}, {"number": 157, "content": "    for (vector<Primitive*>::iterator i = objects.begin(); i!= objects.end(); ++i) override {", "is_target": true}, {"number": 158, "content": "      if(*i) (*i)->update();", "is_target": false}, {"number": 159, "content": "    }", "is_target": false}, {"number": 160, "content": "    for (vector<Joint*>::iterator i = joints.begin(); i!= joints.end(); ++i) override {", "is_target": false}, {"number": 161, "content": "      if(*i) (*i)->update();", "is_target": false}, {"number": 162, "content": "    }", "is_target": false}]}, "2719": {"lines": [{"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "    return lightS;", "is_target": false}, {"number": 249, "content": "  }", "is_target": false}, {"number": 250, "content": "", "is_target": false}, {"number": 251, "content": "  paramval attraction;", "is_target": false}, {"number": 252, "content": "};", "is_target": true}, {"number": 253, "content": "", "is_target": false}, {"number": 254, "content": "", "is_target": false}, {"number": 255, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 256, "content": "{", "is_target": false}, {"number": 257, "content": "  ThisSim sim;", "is_target": false}]}, "2720": {"lines": [{"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "    return lightS;", "is_target": false}, {"number": 249, "content": "  }", "is_target": false}, {"number": 250, "content": "", "is_target": false}, {"number": 251, "content": "  paramval attraction;", "is_target": false}, {"number": 252, "content": "};", "is_target": true}, {"number": 253, "content": "", "is_target": false}, {"number": 254, "content": "", "is_target": false}, {"number": 255, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 256, "content": "{", "is_target": false}, {"number": 257, "content": "  ThisSim sim;", "is_target": false}]}, "2721": {"lines": [{"number": 174, "content": "", "is_target": false}, {"number": 175, "content": "    return lightS;", "is_target": false}, {"number": 176, "content": "  }", "is_target": false}, {"number": 177, "content": "", "is_target": false}, {"number": 178, "content": "", "is_target": false}, {"number": 179, "content": "};", "is_target": true}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "", "is_target": false}, {"number": 182, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 183, "content": "{", "is_target": false}, {"number": 184, "content": "  ThisSim sim;", "is_target": false}]}, "2722": {"lines": [{"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "    return lightS;", "is_target": false}, {"number": 249, "content": "  }", "is_target": false}, {"number": 250, "content": "", "is_target": false}, {"number": 251, "content": "  paramval attraction;", "is_target": false}, {"number": 252, "content": "};", "is_target": true}, {"number": 253, "content": "", "is_target": false}, {"number": 254, "content": "", "is_target": false}, {"number": 255, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 256, "content": "{", "is_target": false}, {"number": 257, "content": "  ThisSim sim;", "is_target": false}]}, "2723": {"lines": [{"number": 39, "content": "// include simulation environment stuff", "is_target": false}, {"number": 40, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "// include agent (class for{", "is_target": false}, {"number": 43, "content": "  return std::vector<T>(v,v+len);", "is_target": false}, {"number": 44, "content": "}", "is_target": true}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "int id=0; // id of simulation  for logfile", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "// make sure you change also the strings below", "is_target": false}]}, "2724": {"lines": [{"number": 174, "content": "", "is_target": false}, {"number": 175, "content": "    return lightS;", "is_target": false}, {"number": 176, "content": "  }", "is_target": false}, {"number": 177, "content": "", "is_target": false}, {"number": 178, "content": "", "is_target": false}, {"number": 179, "content": "};", "is_target": true}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "", "is_target": false}, {"number": 182, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 183, "content": "{", "is_target": false}, {"number": 184, "content": "  ThisSim sim;", "is_target": false}]}, "2725": {"lines": [{"number": 39, "content": "// include simulation environment stuff", "is_target": false}, {"number": 40, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "// include agent (class for{", "is_target": false}, {"number": 43, "content": "  return std::vector<T>(v,v+len);", "is_target": false}, {"number": 44, "content": "}", "is_target": true}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "int id=0; // id of simulation  for logfile", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "// make sure you change also the strings below", "is_target": false}]}, "2726": {"lines": [{"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "    return lightS;", "is_target": false}, {"number": 249, "content": "  }", "is_target": false}, {"number": 250, "content": "", "is_target": false}, {"number": 251, "content": "  paramval attraction;", "is_target": false}, {"number": 252, "content": "};", "is_target": true}, {"number": 253, "content": "", "is_target": false}, {"number": 254, "content": "", "is_target": false}, {"number": 255, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 256, "content": "{", "is_target": false}, {"number": 257, "content": "  ThisSim sim;", "is_target": false}]}, "2727": {"lines": [{"number": 174, "content": "", "is_target": false}, {"number": 175, "content": "    return lightS;", "is_target": false}, {"number": 176, "content": "  }", "is_target": false}, {"number": 177, "content": "", "is_target": false}, {"number": 178, "content": "", "is_target": false}, {"number": 179, "content": "};", "is_target": true}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "", "is_target": false}, {"number": 182, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 183, "content": "{", "is_target": false}, {"number": 184, "content": "  ThisSim sim;", "is_target": false}]}, "2728": {"lines": [{"number": 358, "content": "    S *= 1 - dampModel * managementInterval;", "is_target": false}, {"number": 359, "content": "  }", "is_target": false}, {"number": 360, "content": "  if(dampController){", "is_target": false}, {"number": 361, "content": "    Matrix oldC = C;", "is_target": false}, {"number": 362, "content": "    C *= 1 - dampController * managementInterval;", "is_target": false}, {"number": 363, "content": "    for(unsigned int i=0; i< min(C.getM(),C.getN()); ++i) override {", "is_target": true}, {"number": 364, "content": "      C.val(i,i) = oldC.val(i,i);", "is_target": false}, {"number": 365, "content": "    }", "is_target": false}, {"number": 366, "content": "  }", "is_target": false}, {"number": 367, "content": "}", "is_target": false}, {"number": 368, "content": "", "is_target": false}]}, "2729": {"lines": [{"number": 39, "content": "// include simulation environment stuff", "is_target": false}, {"number": 40, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "// include agent (class for{", "is_target": false}, {"number": 43, "content": "  return std::vector<T>(v,v+len);", "is_target": false}, {"number": 44, "content": "}", "is_target": true}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "int id=0; // id of simulation  for logfile", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "// make sure you change also the strings below", "is_target": false}]}, "2730": {"lines": [{"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "    return lightS;", "is_target": false}, {"number": 249, "content": "  }", "is_target": false}, {"number": 250, "content": "", "is_target": false}, {"number": 251, "content": "  paramval attraction;", "is_target": false}, {"number": 252, "content": "};", "is_target": true}, {"number": 253, "content": "", "is_target": false}, {"number": 254, "content": "", "is_target": false}, {"number": 255, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 256, "content": "{", "is_target": false}, {"number": 257, "content": "  ThisSim sim;", "is_target": false}]}, "2731": {"lines": [{"number": 174, "content": "", "is_target": false}, {"number": 175, "content": "    return lightS;", "is_target": false}, {"number": 176, "content": "  }", "is_target": false}, {"number": 177, "content": "", "is_target": false}, {"number": 178, "content": "", "is_target": false}, {"number": 179, "content": "};", "is_target": true}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "", "is_target": false}, {"number": 182, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 183, "content": "{", "is_target": false}, {"number": 184, "content": "  ThisSim sim;", "is_target": false}]}, "2732": {"lines": [{"number": 39, "content": "// include simulation environment stuff", "is_target": false}, {"number": 40, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "// include agent (class for{", "is_target": false}, {"number": 43, "content": "  return std::vector<T>(v,v+len);", "is_target": false}, {"number": 44, "content": "}", "is_target": true}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "int id=0; // id of simulation  for logfile", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "// make sure you change also the strings below", "is_target": false}]}, "2733": {"lines": [{"number": 174, "content": "", "is_target": false}, {"number": 175, "content": "    return lightS;", "is_target": false}, {"number": 176, "content": "  }", "is_target": false}, {"number": 177, "content": "", "is_target": false}, {"number": 178, "content": "", "is_target": false}, {"number": 179, "content": "};", "is_target": true}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "", "is_target": false}, {"number": 182, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 183, "content": "{", "is_target": false}, {"number": 184, "content": "  ThisSim sim;", "is_target": false}]}, "2734": {"lines": [{"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "    return lightS;", "is_target": false}, {"number": 249, "content": "  }", "is_target": false}, {"number": 250, "content": "", "is_target": false}, {"number": 251, "content": "  paramval attraction;", "is_target": false}, {"number": 252, "content": "};", "is_target": true}, {"number": 253, "content": "", "is_target": false}, {"number": 254, "content": "", "is_target": false}, {"number": 255, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 256, "content": "{", "is_target": false}, {"number": 257, "content": "  ThisSim sim;", "is_target": false}]}, "2735": {"lines": [{"number": 39, "content": "// include simulation environment stuff", "is_target": false}, {"number": 40, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "// include agent (class for{", "is_target": false}, {"number": 43, "content": "  return std::vector<T>(v,v+len);", "is_target": false}, {"number": 44, "content": "}", "is_target": true}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "int id=0; // id of simulation  for logfile", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "// make sure you change also the strings below", "is_target": false}]}, "2736": {"lines": [{"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "    return lightS;", "is_target": false}, {"number": 249, "content": "  }", "is_target": false}, {"number": 250, "content": "", "is_target": false}, {"number": 251, "content": "  paramval attraction;", "is_target": false}, {"number": 252, "content": "};", "is_target": true}, {"number": 253, "content": "", "is_target": false}, {"number": 254, "content": "", "is_target": false}, {"number": 255, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 256, "content": "{", "is_target": false}, {"number": 257, "content": "  ThisSim sim;", "is_target": false}]}, "2737": {"lines": [{"number": 174, "content": "", "is_target": false}, {"number": 175, "content": "    return lightS;", "is_target": false}, {"number": 176, "content": "  }", "is_target": false}, {"number": 177, "content": "", "is_target": false}, {"number": 178, "content": "", "is_target": false}, {"number": 179, "content": "};", "is_target": true}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "", "is_target": false}, {"number": 182, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 183, "content": "{", "is_target": false}, {"number": 184, "content": "  ThisSim sim;", "is_target": false}]}, "2738": {"lines": [{"number": 39, "content": "// include simulation environment stuff", "is_target": false}, {"number": 40, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "// include agent (class for{", "is_target": false}, {"number": 43, "content": "  return std::vector<T>(v,v+len);", "is_target": false}, {"number": 44, "content": "}", "is_target": true}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "int id=0; // id of simulation  for logfile", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "// make sure you change also the strings below", "is_target": false}]}, "2739": {"lines": [{"number": 38, "content": "// include simulation environment stuff", "is_target": false}, {"number": 39, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "// include agent (class for{", "is_target": false}, {"number": 42, "content": "  return std::vector<T>(v,v+len);", "is_target": false}, {"number": 43, "content": "}", "is_target": true}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "int id=0; // id of simulation  for logfile", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "// make sure you change also the strings below", "is_target": false}]}, "2740": {"lines": [{"number": 247, "content": "", "is_target": false}, {"number": 248, "content": "    return lightS;", "is_target": false}, {"number": 249, "content": "  }", "is_target": false}, {"number": 250, "content": "", "is_target": false}, {"number": 251, "content": "  paramval attraction;", "is_target": false}, {"number": 252, "content": "};", "is_target": true}, {"number": 253, "content": "", "is_target": false}, {"number": 254, "content": "", "is_target": false}, {"number": 255, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 256, "content": "{", "is_target": false}, {"number": 257, "content": "  ThisSim sim;", "is_target": false}]}, "2741": {"lines": [{"number": 38, "content": "// include simulation environment stuff", "is_target": false}, {"number": 39, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "// include agent (class for{", "is_target": false}, {"number": 42, "content": "  return std::vector<T>(v,v+len);", "is_target": false}, {"number": 43, "content": "}", "is_target": true}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "int id=0; // id of simulation  for logfile", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "// make sure you change also the strings below", "is_target": false}]}, "2742": {"lines": [{"number": 174, "content": "", "is_target": false}, {"number": 175, "content": "    return lightS;", "is_target": false}, {"number": 176, "content": "  }", "is_target": false}, {"number": 177, "content": "", "is_target": false}, {"number": 178, "content": "", "is_target": false}, {"number": 179, "content": "};", "is_target": true}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "", "is_target": false}, {"number": 182, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 183, "content": "{", "is_target": false}, {"number": 184, "content": "  ThisSim sim;", "is_target": false}]}, "2743": {"lines": [{"number": 39, "content": "// include simulation environment stuff", "is_target": false}, {"number": 40, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "// include agent (class for{", "is_target": false}, {"number": 43, "content": "  return std::vector<T>(v,v+len);", "is_target": false}, {"number": 44, "content": "}", "is_target": true}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "int id=0; // id of simulation  for logfile", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "// make sure you change also the strings below", "is_target": false}]}, "2744": {"lines": [{"number": 174, "content": "", "is_target": false}, {"number": 175, "content": "    return lightS;", "is_target": false}, {"number": 176, "content": "  }", "is_target": false}, {"number": 177, "content": "", "is_target": false}, {"number": 178, "content": "", "is_target": false}, {"number": 179, "content": "};", "is_target": true}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "", "is_target": false}, {"number": 182, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 183, "content": "{", "is_target": false}, {"number": 184, "content": "  ThisSim sim;", "is_target": false}]}, "2745": {"lines": [{"number": 38, "content": "// include simulation environment stuff", "is_target": false}, {"number": 39, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "// include agent (class for{", "is_target": false}, {"number": 42, "content": "  return std::vector<T>(v,v+len);", "is_target": false}, {"number": 43, "content": "}", "is_target": true}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "int id=0; // id of simulation  for logfile", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "// make sure you change also the strings below", "is_target": false}]}, "2746": {"lines": [{"number": 39, "content": "// include simulation environment stuff", "is_target": false}, {"number": 40, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "// include agent (class for{", "is_target": false}, {"number": 43, "content": "  return std::vector<T>(v,v+len);", "is_target": false}, {"number": 44, "content": "}", "is_target": true}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "int id=0; // id of simulation  for logfile", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "// make sure you change also the strings below", "is_target": false}]}, "2747": {"lines": [{"number": 38, "content": "// include simulation environment stuff", "is_target": false}, {"number": 39, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "// include agent (class for{", "is_target": false}, {"number": 42, "content": "  return std::vector<T>(v,v+len);", "is_target": false}, {"number": 43, "content": "}", "is_target": true}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "int id=0; // id of simulation  for logfile", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "// make sure you change also the strings below", "is_target": false}]}, "2748": {"lines": [{"number": 174, "content": "", "is_target": false}, {"number": 175, "content": "    return lightS;", "is_target": false}, {"number": 176, "content": "  }", "is_target": false}, {"number": 177, "content": "", "is_target": false}, {"number": 178, "content": "", "is_target": false}, {"number": 179, "content": "};", "is_target": true}, {"number": 180, "content": "", "is_target": false}, {"number": 181, "content": "", "is_target": false}, {"number": 182, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 183, "content": "{", "is_target": false}, {"number": 184, "content": "  ThisSim sim;", "is_target": false}]}, "2749": {"lines": [{"number": 357, "content": "  }", "is_target": false}, {"number": 358, "content": "  if(dampController > 0){", "is_target": false}, {"number": 359, "content": "    Matrix oldC = C;", "is_target": false}, {"number": 360, "content": "    C *= 1 - dampController * managementInterval;", "is_target": false}, {"number": 361, "content": "    // restore diagonal", "is_target": false}, {"number": 362, "content": "    for(unsigned int i=0; i< min(C.getM(),C.getN()); ++i) override {", "is_target": true}, {"number": 363, "content": "      C.val(i,i) = oldC.val(i,i);", "is_target": false}, {"number": 364, "content": "    }", "is_target": false}, {"number": 365, "content": "  }", "is_target": false}, {"number": 366, "content": "}", "is_target": false}, {"number": 367, "content": "", "is_target": false}]}, "2750": {"lines": [{"number": 39, "content": "// include simulation environment stuff", "is_target": false}, {"number": 40, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "// include agent (class for{", "is_target": false}, {"number": 43, "content": "  return std::vector<T>(v,v+len);", "is_target": false}, {"number": 44, "content": "}", "is_target": true}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "int id=0; // id of simulation  for logfile", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "// make sure you change also the strings below", "is_target": false}]}, "2751": {"lines": [{"number": 38, "content": "// include simulation environment stuff", "is_target": false}, {"number": 39, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "// include agent (class for{", "is_target": false}, {"number": 42, "content": "  return std::vector<T>(v,v+len);", "is_target": false}, {"number": 43, "content": "}", "is_target": true}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "int id=0; // id of simulation  for logfile", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "// make sure you change also the strings below", "is_target": false}]}, "2752": {"lines": [{"number": 38, "content": "// include simulation environment stuff", "is_target": false}, {"number": 39, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "// include agent (class for{", "is_target": false}, {"number": 42, "content": "  return std::vector<T>(v,v+len);", "is_target": false}, {"number": 43, "content": "}", "is_target": true}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "int id=0; // id of simulation  for logfile", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "// make sure you change also the strings below", "is_target": false}]}, "2753": {"lines": [{"number": 38, "content": "// include simulation environment stuff", "is_target": false}, {"number": 39, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "// include agent (class for{", "is_target": false}, {"number": 42, "content": "  return std::vector<T>(v,v+len);", "is_target": false}, {"number": 43, "content": "}", "is_target": true}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "int id=0; // id of simulation  for logfile", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "// make sure you change also the strings below", "is_target": false}]}, "2755": {"lines": [{"number": 38, "content": "// include simulation environment stuff", "is_target": false}, {"number": 39, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "// include agent (class for{", "is_target": false}, {"number": 42, "content": "  return std::vector<T>(v,v+len);", "is_target": false}, {"number": 43, "content": "}", "is_target": true}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "int id=0; // id of simulation  for logfile", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "// make sure you change also the strings below", "is_target": false}]}, "2756": {"lines": [{"number": 38, "content": "// include simulation environment stuff", "is_target": false}, {"number": 39, "content": "#include <ode_robots/simulation.h>", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "// include agent (class for{", "is_target": false}, {"number": 42, "content": "  return std::vector<T>(v,v+len);", "is_target": false}, {"number": 43, "content": "}", "is_target": true}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "int id=0; // id of simulation  for logfile", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "// make sure you change also the strings below", "is_target": false}]}, "2757": {"lines": [{"number": 51, "content": " */", "is_target": false}, {"number": 52, "content": "class SoxIgnoreNull{", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "public:", "is_target": false}, {"number": 55, "content": "  /// constructor", "is_target": false}, {"number": 56, "content": "  SoxIgnoreNull(const SoxIgnoreNullConf& conf = getDefaultConf());", "is_target": true}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  /// constructor provided for convenience, use conf object to customize more", "is_target": false}, {"number": 59, "content": "  SoxIgnoreNull(double init_feedback_strength, bool useExtendedModel = true,", "is_target": false}, {"number": 60, "content": "      bool useTeaching = false );", "is_target": false}, {"number": 61, "content": "", "is_target": false}]}, "2758": {"lines": [{"number": 54, "content": "public:", "is_target": false}, {"number": 55, "content": "  /// constructor", "is_target": false}, {"number": 56, "content": "  SoxIgnoreNull(const SoxIgnoreNullConf& conf = getDefaultConf());", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  /// constructor provided for convenience, use conf object to customize more", "is_target": false}, {"number": 59, "content": "  SoxIgnoreNull(double init_feedback_strength, bool useExtendedModel = true,", "is_target": true}, {"number": 60, "content": "      bool useTeaching = false );", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "  virtual void init(int sensornumber, int motornumber, RandGen* randGen = nullptr);", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "  virtual ~SoxIgnoreNull();", "is_target": false}]}, "2759": {"lines": [{"number": 261, "content": "// learn values h,C,A,b,S", "is_target": false}, {"number": 262, "content": "void SoxIgnoreNull::learn(){", "is_target": false}, {"number": 263, "content": "", "is_target": false}, {"number": 264, "content": "  // the effective x/y is (actual-steps4delay) element of buffer  ", "is_target": false}, {"number": 265, "content": "  int s4delay = ::clip(conf.steps4Delay,1,buffersize-1);", "is_target": false}, {"number": 266, "content": "  const Matrix& x       = x_buffer[(t - max(s4delay,1) + buffersize) % buffersize];", "is_target": true}, {"number": 267, "content": "  const Matrix& y_creat = y_buffer[(t - max(s4delay,1) + buffersize) % buffersize];", "is_target": false}, {"number": 268, "content": "  const Matrix& x_fut   = x_buffer[t% buffersize]; // future sensor (with respect to x,y)", "is_target": false}, {"number": 269, "content": "", "is_target": false}, {"number": 270, "content": "  const Matrix& xi_p    = x_fut  - (A * y_creat + b + S * x); // here we use creativity", "is_target": false}, {"number": 271, "content": "  // if sensor (past or current) is 0, do not learn", "is_target": false}]}, "2760": {"lines": [{"number": 315, "content": "    ", "is_target": false}, {"number": 316, "content": "    if(intern_isTeaching && gamma > 0){    ", "is_target": false}, {"number": 317, "content": "      // scale of the additional terms", "is_target": false}, {"number": 318, "content": "      Matrix metric = (A^T) * Lplus.multTM() * A;", "is_target": false}, {"number": 319, "content": "      ", "is_target": false}, {"number": 320, "content": "      const Matrix& y      = getLastMotorValues();", "is_target": true}, {"number": 321, "content": "      const Matrix& xsi    = y_teaching - y;", "is_target": false}, {"number": 322, "content": "      const Matrix& delta  = xsi.multrowwise(g_prime);", "is_target": false}, {"number": 323, "content": "      C += ((metric * delta*(x^T) ) * (gamma * epsC)).mapP(.05, clip);", "is_target": false}, {"number": 324, "content": "      h += ((metric * delta)        * (gamma * epsC)).mapP(.05, clip);", "is_target": false}, {"number": 325, "content": "      // after we applied teaching signal it is switched off until new signal is given", "is_target": false}]}, "2761": {"lines": [{"number": 95, "content": "SoxIgnoreNull::~SoxIgnoreNull(){", "is_target": false}, {"number": 96, "content": "}", "is_target": false}, {"number": 97, "content": "", "is_target": false}, {"number": 98, "content": "", "is_target": false}, {"number": 99, "content": "void SoxIgnoreNull::init(int sensornumber, int motornumber, RandGen* randGen){", "is_target": false}, {"number": 100, "content": "  if(!randGen) randGen = new RandGen(); // this gives a small memory leak", "is_target": true}, {"number": 101, "content": " ", "is_target": false}, {"number": 102, "content": "  number_sensors= sensornumber;", "is_target": false}, {"number": 103, "content": "  number_motors = motornumber;", "is_target": false}, {"number": 104, "content": "  A.set(number_sensors, number_motors);", "is_target": false}, {"number": 105, "content": "  S.set(number_sensors, number_sensors);", "is_target": false}]}, "2762": {"lines": [{"number": 218, "content": "  }", "is_target": false}, {"number": 219, "content": "", "is_target": false}, {"number": 220, "content": "  // add own key handling stuff here, just insert some case values", "is_target": false}, {"number": 221, "content": "  virtual bool command(const OdeHandle&, const OsgHandle&, GlobalData& globalData, int key, bool down) override {", "is_target": false}, {"number": 222, "content": "    if (down) { // only when key is pressed, not when released", "is_target": false}, {"number": 223, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 224, "content": "        {", "is_target": false}, {"number": 225, "content": "        default:", "is_target": false}, {"number": 226, "content": "          return false;", "is_target": false}, {"number": 227, "content": "          break;", "is_target": false}, {"number": 228, "content": "        }", "is_target": false}]}, "2763": {"lines": [{"number": 237, "content": "  }", "is_target": false}, {"number": 238, "content": "", "is_target": false}, {"number": 239, "content": "", "is_target": false}, {"number": 240, "content": "", "is_target": false}, {"number": 241, "content": "", "is_target": false}, {"number": 242, "content": "};", "is_target": true}, {"number": 243, "content": "", "is_target": false}, {"number": 244, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 245, "content": "{", "is_target": false}, {"number": 246, "content": "  ThisSim sim;", "is_target": false}, {"number": 247, "content": "  // run simulation", "is_target": false}]}, "2764": {"lines": [{"number": 225, "content": "  }", "is_target": false}, {"number": 226, "content": "", "is_target": false}, {"number": 227, "content": "  // add own key handling stuff here, just insert some case values", "is_target": false}, {"number": 228, "content": "  virtual bool command(const OdeHandle&, const OsgHandle&, GlobalData& globalData, int key, bool down) override {", "is_target": false}, {"number": 229, "content": "    if (down) { // only when key is pressed, not when released", "is_target": false}, {"number": 230, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 231, "content": "        {", "is_target": false}, {"number": 232, "content": "        default:", "is_target": false}, {"number": 233, "content": "          return false;", "is_target": false}, {"number": 234, "content": "          break;", "is_target": false}, {"number": 235, "content": "        }", "is_target": false}]}, "2765": {"lines": [{"number": 237, "content": "  }", "is_target": false}, {"number": 238, "content": "", "is_target": false}, {"number": 239, "content": "", "is_target": false}, {"number": 240, "content": "", "is_target": false}, {"number": 241, "content": "", "is_target": false}, {"number": 242, "content": "};", "is_target": true}, {"number": 243, "content": "", "is_target": false}, {"number": 244, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 245, "content": "{", "is_target": false}, {"number": 246, "content": "  ThisSim sim;", "is_target": false}, {"number": 247, "content": "  // run simulation", "is_target": false}]}, "2766": {"lines": [{"number": 258, "content": "          break;", "is_target": false}, {"number": 259, "content": "        }", "is_target": false}, {"number": 260, "content": "    }", "is_target": false}, {"number": 261, "content": "    return false;", "is_target": false}, {"number": 262, "content": "  }", "is_target": false}, {"number": 263, "content": "};", "is_target": true}, {"number": 264, "content": "", "is_target": false}, {"number": 265, "content": "", "is_target": false}, {"number": 266, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 267, "content": "{", "is_target": false}, {"number": 268, "content": "  ThisSim sim;", "is_target": false}]}, "2767": {"lines": [{"number": 258, "content": "          break;", "is_target": false}, {"number": 259, "content": "        }", "is_target": false}, {"number": 260, "content": "    }", "is_target": false}, {"number": 261, "content": "    return false;", "is_target": false}, {"number": 262, "content": "  }", "is_target": false}, {"number": 263, "content": "};", "is_target": true}, {"number": 264, "content": "", "is_target": false}, {"number": 265, "content": "", "is_target": false}, {"number": 266, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 267, "content": "{", "is_target": false}, {"number": 268, "content": "  ThisSim sim;", "is_target": false}]}, "2768": {"lines": [{"number": 258, "content": "          break;", "is_target": false}, {"number": 259, "content": "        }", "is_target": false}, {"number": 260, "content": "    }", "is_target": false}, {"number": 261, "content": "    return false;", "is_target": false}, {"number": 262, "content": "  }", "is_target": false}, {"number": 263, "content": "};", "is_target": true}, {"number": 264, "content": "", "is_target": false}, {"number": 265, "content": "", "is_target": false}, {"number": 266, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 267, "content": "{", "is_target": false}, {"number": 268, "content": "  ThisSim sim;", "is_target": false}]}, "2769": {"lines": [{"number": 258, "content": "          break;", "is_target": false}, {"number": 259, "content": "        }", "is_target": false}, {"number": 260, "content": "    }", "is_target": false}, {"number": 261, "content": "    return false;", "is_target": false}, {"number": 262, "content": "  }", "is_target": false}, {"number": 263, "content": "};", "is_target": true}, {"number": 264, "content": "", "is_target": false}, {"number": 265, "content": "", "is_target": false}, {"number": 266, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 267, "content": "{", "is_target": false}, {"number": 268, "content": "  ThisSim sim;", "is_target": false}]}, "2770": {"lines": [{"number": 237, "content": "  }", "is_target": false}, {"number": 238, "content": "", "is_target": false}, {"number": 239, "content": "", "is_target": false}, {"number": 240, "content": "", "is_target": false}, {"number": 241, "content": "", "is_target": false}, {"number": 242, "content": "};", "is_target": true}, {"number": 243, "content": "", "is_target": false}, {"number": 244, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 245, "content": "{", "is_target": false}, {"number": 246, "content": "  ThisSim sim;", "is_target": false}, {"number": 247, "content": "  // run simulation", "is_target": false}]}, "2771": {"lines": [{"number": 258, "content": "          break;", "is_target": false}, {"number": 259, "content": "        }", "is_target": false}, {"number": 260, "content": "    }", "is_target": false}, {"number": 261, "content": "    return false;", "is_target": false}, {"number": 262, "content": "  }", "is_target": false}, {"number": 263, "content": "};", "is_target": true}, {"number": 264, "content": "", "is_target": false}, {"number": 265, "content": "", "is_target": false}, {"number": 266, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 267, "content": "{", "is_target": false}, {"number": 268, "content": "  ThisSim sim;", "is_target": false}]}, "2772": {"lines": [{"number": 258, "content": "          break;", "is_target": false}, {"number": 259, "content": "        }", "is_target": false}, {"number": 260, "content": "    }", "is_target": false}, {"number": 261, "content": "    return false;", "is_target": false}, {"number": 262, "content": "  }", "is_target": false}, {"number": 263, "content": "};", "is_target": true}, {"number": 264, "content": "", "is_target": false}, {"number": 265, "content": "", "is_target": false}, {"number": 266, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 267, "content": "{", "is_target": false}, {"number": 268, "content": "  ThisSim sim;", "is_target": false}]}, "2773": {"lines": [{"number": 237, "content": "  }", "is_target": false}, {"number": 238, "content": "", "is_target": false}, {"number": 239, "content": "", "is_target": false}, {"number": 240, "content": "", "is_target": false}, {"number": 241, "content": "", "is_target": false}, {"number": 242, "content": "};", "is_target": true}, {"number": 243, "content": "", "is_target": false}, {"number": 244, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 245, "content": "{", "is_target": false}, {"number": 246, "content": "  ThisSim sim;", "is_target": false}, {"number": 247, "content": "  // run simulation", "is_target": false}]}, "2774": {"lines": [{"number": 258, "content": "          break;", "is_target": false}, {"number": 259, "content": "        }", "is_target": false}, {"number": 260, "content": "    }", "is_target": false}, {"number": 261, "content": "    return false;", "is_target": false}, {"number": 262, "content": "  }", "is_target": false}, {"number": 263, "content": "};", "is_target": true}, {"number": 264, "content": "", "is_target": false}, {"number": 265, "content": "", "is_target": false}, {"number": 266, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 267, "content": "{", "is_target": false}, {"number": 268, "content": "  ThisSim sim;", "is_target": false}]}, "2775": {"lines": [{"number": 258, "content": "          break;", "is_target": false}, {"number": 259, "content": "        }", "is_target": false}, {"number": 260, "content": "    }", "is_target": false}, {"number": 261, "content": "    return false;", "is_target": false}, {"number": 262, "content": "  }", "is_target": false}, {"number": 263, "content": "};", "is_target": true}, {"number": 264, "content": "", "is_target": false}, {"number": 265, "content": "", "is_target": false}, {"number": 266, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 267, "content": "{", "is_target": false}, {"number": 268, "content": "  ThisSim sim;", "is_target": false}]}, "2776": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "2777": {"lines": [{"number": 190, "content": "   * updates the osg notes", "is_target": false}, {"number": 191, "content": "   */", "is_target": false}, {"number": 192, "content": "  void ZweiBeiner::update(){", "is_target": false}, {"number": 193, "content": "    assert(created); // robot must exist", "is_target": false}, {"number": 194, "content": "", "is_target": false}, {"number": 195, "content": "    for (vector<Primitive*>::iterator i = objects.begin(); i!= objects.end(); ++i) override {", "is_target": true}, {"number": 196, "content": "      if(*i) (*i)->update();", "is_target": false}, {"number": 197, "content": "    }", "is_target": false}, {"number": 198, "content": "    for (vector<Joint*>::iterator i = joints.begin(); i!= joints.end(); ++i) override {", "is_target": false}, {"number": 199, "content": "      if(*i) (*i)->update();", "is_target": false}, {"number": 200, "content": "    }", "is_target": false}]}, "2778": {"lines": [{"number": 258, "content": "          break;", "is_target": false}, {"number": 259, "content": "        }", "is_target": false}, {"number": 260, "content": "    }", "is_target": false}, {"number": 261, "content": "    return false;", "is_target": false}, {"number": 262, "content": "  }", "is_target": false}, {"number": 263, "content": "};", "is_target": true}, {"number": 264, "content": "", "is_target": false}, {"number": 265, "content": "", "is_target": false}, {"number": 266, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 267, "content": "{", "is_target": false}, {"number": 268, "content": "  ThisSim sim;", "is_target": false}]}, "2779": {"lines": [{"number": 237, "content": "  }", "is_target": false}, {"number": 238, "content": "", "is_target": false}, {"number": 239, "content": "", "is_target": false}, {"number": 240, "content": "", "is_target": false}, {"number": 241, "content": "", "is_target": false}, {"number": 242, "content": "};", "is_target": true}, {"number": 243, "content": "", "is_target": false}, {"number": 244, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 245, "content": "{", "is_target": false}, {"number": 246, "content": "  ThisSim sim;", "is_target": false}, {"number": 247, "content": "  // run simulation", "is_target": false}]}, "2780": {"lines": [{"number": 24, "content": "#include <iostream>", "is_target": false}, {"number": 25, "content": "using namespace std;", "is_target": false}, {"number": 26, "content": "", "is_target": false}, {"number": 27, "content": "#include \"imageppm.h\"", "is_target": false}, {"number": 28, "content": "", "is_target": false}, {"number": 29, "content": "doublesqr(double p) { return p*p;}", "is_target": true}, {"number": 30, "content": "double min(double a,double b) { return a<b ? a : b;}", "is_target": false}, {"number": 31, "content": "double max(double a,double b) { return a>b ? a : b;}", "is_target": false}, {"number": 32, "content": "", "is_target": false}, {"number": 33, "content": "#define IMAGE_SIZE 256", "is_target": false}, {"number": 34, "content": "#define TEXTURE_STEPS 8", "is_target": false}]}, "2781": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "2782": {"lines": [{"number": 237, "content": "  }", "is_target": false}, {"number": 238, "content": "", "is_target": false}, {"number": 239, "content": "", "is_target": false}, {"number": 240, "content": "", "is_target": false}, {"number": 241, "content": "", "is_target": false}, {"number": 242, "content": "};", "is_target": true}, {"number": 243, "content": "", "is_target": false}, {"number": 244, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 245, "content": "{", "is_target": false}, {"number": 246, "content": "  ThisSim sim;", "is_target": false}, {"number": 247, "content": "  // run simulation", "is_target": false}]}, "2783": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "2785": {"lines": [{"number": 450, "content": "      if(key >= 'a' && key <='z' && lastRobotCreation > (global.time-1)) {", "is_target": false}, {"number": 451, "content": "        printf(\"You have to wait one second between robot creations.\\n\");", "is_target": false}, {"number": 452, "content": "        return false;", "is_target": false}, {"number": 453, "content": "      }", "is_target": false}, {"number": 454, "content": "", "is_target": false}, {"number": 455, "content": "      switch ( static_cast<char> key )", "is_target": true}, {"number": 456, "content": "        {", "is_target": false}, {"number": 457, "content": "        case 'k': // test", "is_target": false}, {"number": 458, "content": "          env.widthground=15;", "is_target": false}, {"number": 459, "content": "          env.create(odeHandle, osgHandle, global,true);", "is_target": false}, {"number": 460, "content": "        case 'b':", "is_target": false}]}, "2786": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "2787": {"lines": [{"number": 237, "content": "  }", "is_target": false}, {"number": 238, "content": "", "is_target": false}, {"number": 239, "content": "", "is_target": false}, {"number": 240, "content": "", "is_target": false}, {"number": 241, "content": "", "is_target": false}, {"number": 242, "content": "};", "is_target": true}, {"number": 243, "content": "", "is_target": false}, {"number": 244, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 245, "content": "{", "is_target": false}, {"number": 246, "content": "  ThisSim sim;", "is_target": false}, {"number": 247, "content": "  // run simulation", "is_target": false}]}, "2788": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "2789": {"lines": [{"number": 237, "content": "  }", "is_target": false}, {"number": 238, "content": "", "is_target": false}, {"number": 239, "content": "", "is_target": false}, {"number": 240, "content": "", "is_target": false}, {"number": 241, "content": "", "is_target": false}, {"number": 242, "content": "};", "is_target": true}, {"number": 243, "content": "", "is_target": false}, {"number": 244, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 245, "content": "{", "is_target": false}, {"number": 246, "content": "  ThisSim sim;", "is_target": false}, {"number": 247, "content": "  // run simulation", "is_target": false}]}, "2790": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "2791": {"lines": [{"number": 237, "content": "  }", "is_target": false}, {"number": 238, "content": "", "is_target": false}, {"number": 239, "content": "", "is_target": false}, {"number": 240, "content": "", "is_target": false}, {"number": 241, "content": "", "is_target": false}, {"number": 242, "content": "};", "is_target": true}, {"number": 243, "content": "", "is_target": false}, {"number": 244, "content": "int main (int argc, char **argv)", "is_target": false}, {"number": 245, "content": "{", "is_target": false}, {"number": 246, "content": "  ThisSim sim;", "is_target": false}, {"number": 247, "content": "  // run simulation", "is_target": false}]}, "2792": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "2793": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "2794": {"lines": [{"number": 404, "content": "    fj = new FixedJoint(objects[Neck], objects[Head_comp]); // ,Pos(0, 1.7326, 0.0318) * pose);", "is_target": false}, {"number": 405, "content": "    fj->init(odeHandle, osgHandleJ, false);", "is_target": false}, {"number": 406, "content": "    joints.push_back(fj);", "is_target": false}, {"number": 407, "content": "", "is_target": false}, {"number": 408, "content": "    // Trunk and Shoulders static_cast<Arms>(uj) = new UniversalJoint(objects[Trunk_comp], objects[Left_Shoulder], Pos(0.1768, 1.587, 0.0214) * pose,", "is_target": false}, {"number": 409, "content": "                           Axis(0,0,1) * pose, Axis(0,1,0) * pose);", "is_target": true}, {"number": 410, "content": "    uj->init(odeHandle, osgHandleJ, true, 0.12);", "is_target": false}, {"number": 411, "content": "    joints.push_back(uj);", "is_target": false}, {"number": 412, "content": "", "is_target": false}, {"number": 413, "content": "    servo2 =  new TwoAxisServo(uj, -conf.armJointLimit, conf.armJointLimit, conf.armPower,", "is_target": false}, {"number": 414, "content": "                                    -conf.armJointLimit, conf.armJointLimit, conf.armPower);", "is_target": false}]}, "2796": {"lines": [{"number": 26, "content": "#include <iostream>", "is_target": false}, {"number": 27, "content": "#include <string>", "is_target": false}, {"number": 28, "content": "", "is_target": false}, {"number": 29, "content": "static int readNumber (const std::string& filename, FILE *f)", "is_target": false}, {"number": 30, "content": "{", "is_target": false}, {"number": 31, "content": "  int c,n=0;", "is_target": true}, {"number": 32, "content": "  for(;;) {", "is_target": false}, {"number": 33, "content": "    c = fgetc(f);", "is_target": false}, {"number": 34, "content": "    if (c==EOF) std::cerr << \"unexpected end of file in '\" << filename << \"'\" << std::endl;", "is_target": false}, {"number": 35, "content": "    if (c >= '0' && c <= '9') n = n*10 + (c - '0');", "is_target": false}, {"number": 36, "content": "    else {", "is_target": false}]}, "2797": {"lines": [{"number": 41, "content": "}", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "static void skipWhiteSpace (const std::string& filename, FILE *f)", "is_target": false}, {"number": 45, "content": "{", "is_target": false}, {"number": 46, "content": "  int c,d;", "is_target": true}, {"number": 47, "content": "  for(;;) {", "is_target": false}, {"number": 48, "content": "    c = fgetc(f);", "is_target": false}, {"number": 49, "content": "    if (c==EOF) std::cerr << \"unexpected end of file in '\" << filename << \"'\" << std::endl;", "is_target": false}, {"number": 50, "content": "", "is_target": false}, {"number": 51, "content": "    // skip comments", "is_target": false}]}, "2799": {"lines": [{"number": 77, "content": "   * returns the angle between two vectors (in rad)", "is_target": false}, {"number": 78, "content": "   */", "is_target": false}, {"number": 79, "content": "  double getAngle(const osg::Vec3& a, const osg::Vec3& b) {", "is_target": false}, {"number": 80, "content": "    // Cosinus Satz", "is_target": false}, {"number": 81, "content": "    // here a*b is the dot product static_cast<Skalarprodukt>(return) acos(a*b / (a.length()*b.length()));", "is_target": false}, {"number": 82, "content": "  }", "is_target": true}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  matrix::Matrix odeRto3x3RotationMatrixT ( const double R[12] ) {", "is_target": false}, {"number": 85, "content": "    matrix::Matrix matrix(3,3);", "is_target": false}, {"number": 86, "content": "    matrix.val(0,0)=R[0];", "is_target": false}, {"number": 87, "content": "    matrix.val(0,1)=R[4];", "is_target": false}]}, "2800": {"lines": [{"number": 29, "content": "#include \"primitive.h\"", "is_target": false}, {"number": 30, "content": "", "is_target": false}, {"number": 31, "content": "namespace lpzrobots", "is_target": false}, {"number": 32, "content": "{", "is_target": false}, {"number": 33, "content": "", "is_target": false}, {"number": 34, "content": "  OdeHandle::OdeHandle()", "is_target": true}, {"number": 35, "content": "    : time(nullptr), ignoredPairs(0), spaces(0), ignoredSpaces(nullptr)", "is_target": false}, {"number": 36, "content": "  {", "is_target": false}, {"number": 37, "content": "  }", "is_target": false}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "  OdeHandle::OdeHandle(  dWorldID _world, dSpaceID _space, dJointGroupID _jointGroup )", "is_target": false}]}, "2801": {"lines": [{"number": 29, "content": "#include \"primitive.h\"", "is_target": false}, {"number": 30, "content": "", "is_target": false}, {"number": 31, "content": "namespace lpzrobots", "is_target": false}, {"number": 32, "content": "{", "is_target": false}, {"number": 33, "content": "", "is_target": false}, {"number": 34, "content": "  OdeHandle::OdeHandle()", "is_target": true}, {"number": 35, "content": "    : time(nullptr), ignoredPairs(0), spaces(0), ignoredSpaces(nullptr)", "is_target": false}, {"number": 36, "content": "  {", "is_target": false}, {"number": 37, "content": "  }", "is_target": false}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "  OdeHandle::OdeHandle(  dWorldID _world, dSpaceID _space, dJointGroupID _jointGroup )", "is_target": false}]}, "2802": {"lines": [{"number": 29, "content": "#include \"primitive.h\"", "is_target": false}, {"number": 30, "content": "", "is_target": false}, {"number": 31, "content": "namespace lpzrobots", "is_target": false}, {"number": 32, "content": "{", "is_target": false}, {"number": 33, "content": "", "is_target": false}, {"number": 34, "content": "  OdeHandle::OdeHandle()", "is_target": true}, {"number": 35, "content": "    : time(nullptr), ignoredPairs(0), spaces(0), ignoredSpaces(nullptr)", "is_target": false}, {"number": 36, "content": "  {", "is_target": false}, {"number": 37, "content": "  }", "is_target": false}, {"number": 38, "content": "", "is_target": false}, {"number": 39, "content": "  OdeHandle::OdeHandle(  dWorldID _world, dSpaceID _space, dJointGroupID _jointGroup )", "is_target": false}]}, "2804": {"lines": [{"number": 36, "content": "", "is_target": false}, {"number": 37, "content": "  Gripper::Gripper(const GripperConf& conf)", "is_target": false}, {"number": 38, "content": "    : Configurable(conf.name, \"1.0\"), conf(conf), isAttached(false)", "is_target": false}, {"number": 39, "content": "  {", "is_target": false}, {"number": 40, "content": "    gripStartTime= - conf.releaseDuration - conf.gripDuration;", "is_target": false}, {"number": 41, "content": "    last=(dGeomID)1;", "is_target": true}, {"number": 42, "content": "    addParameter(\"gripduration\", &this->conf.gripDuration, 0, 1000,", "is_target": false}, {"number": 43, "content": "                 \"time the gripper grasps\");", "is_target": false}, {"number": 44, "content": "    addParameter(\"releaseduration\", &this->conf.releaseDuration, 0, 10,", "is_target": false}, {"number": 45, "content": "                 \"time the gripper has to release before grasping again\");", "is_target": false}, {"number": 46, "content": "  }", "is_target": false}]}, "2805": {"lines": [{"number": 64, "content": "       @param releaseDuration time in seconds for how long the gripper cannot grasp", "is_target": false}, {"number": 65, "content": "        after release", "is_target": false}, {"number": 66, "content": "       @param size diameter of the drawn sphere (if 0 nothing is drawn)", "is_target": false}, {"number": 67, "content": "       @param drawAtContactPoint sphere is drawn at contact point static_cast<true>(or) at center of attached primitive (false)", "is_target": false}, {"number": 68, "content": "    */", "is_target": false}, {"number": 69, "content": "    Gripper(const GripperConf& conf = getDefaultConf());", "is_target": true}, {"number": 70, "content": "", "is_target": false}, {"number": 71, "content": "    static GripperConf getDefaultConf() {", "is_target": false}, {"number": 72, "content": "      GripperConf conf;", "is_target": false}, {"number": 73, "content": "      conf.name                = \"Gripper\";", "is_target": false}, {"number": 74, "content": "      conf.gripDuration        = 10;", "is_target": false}]}, "2806": {"lines": [{"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "    // Delete copy constructor and assignment operator", "is_target": false}, {"number": 51, "content": "    TmpPrimitive(const TmpPrimitive&) = delete;", "is_target": false}, {"number": 52, "content": "    TmpPrimitive& operator=(const TmpPrimitive&) = delete;", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": true}, {"number": 55, "content": "    virtual void deleteObject();", "is_target": false}, {"number": 56, "content": "    virtual void update();", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  private:", "is_target": false}, {"number": 59, "content": "    Primitive* item = nullptr;", "is_target": false}]}, "2807": {"lines": [{"number": 50, "content": "    // Delete copy constructor and assignment operator", "is_target": false}, {"number": 51, "content": "    TmpPrimitive(const TmpPrimitive&) = delete;", "is_target": false}, {"number": 52, "content": "    TmpPrimitive& operator=(const TmpPrimitive&) = delete;", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": false}, {"number": 55, "content": "    virtual void deleteObject();", "is_target": true}, {"number": 56, "content": "    virtual void update();", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  private:", "is_target": false}, {"number": 59, "content": "    Primitive* item = nullptr;", "is_target": false}, {"number": 60, "content": "    char mode = 0;", "is_target": false}]}, "2808": {"lines": [{"number": 51, "content": "    TmpPrimitive(const TmpPrimitive&) = delete;", "is_target": false}, {"number": 52, "content": "    TmpPrimitive& operator=(const TmpPrimitive&) = delete;", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": false}, {"number": 55, "content": "    virtual void deleteObject();", "is_target": false}, {"number": 56, "content": "    virtual void update();", "is_target": true}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  private:", "is_target": false}, {"number": 59, "content": "    Primitive* item = nullptr;", "is_target": false}, {"number": 60, "content": "    char mode = 0;", "is_target": false}, {"number": 61, "content": "    double mass = 0;", "is_target": false}]}, "2809": {"lines": [{"number": 85, "content": "", "is_target": false}, {"number": 86, "content": "    // Delete copy constructor and assignment operator", "is_target": false}, {"number": 87, "content": "    TmpDisplayItem(const TmpDisplayItem&) = delete;", "is_target": false}, {"number": 88, "content": "    TmpDisplayItem& operator=(const TmpDisplayItem&) = delete;", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": true}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "    virtual void deleteObject();", "is_target": false}, {"number": 93, "content": "    virtual void update() override {} // nothing to be done here, because they do not move", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  private:", "is_target": false}]}, "2810": {"lines": [{"number": 87, "content": "    TmpDisplayItem(const TmpDisplayItem&) = delete;", "is_target": false}, {"number": 88, "content": "    TmpDisplayItem& operator=(const TmpDisplayItem&) = delete;", "is_target": false}, {"number": 89, "content": "", "is_target": false}, {"number": 90, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": false}, {"number": 91, "content": "", "is_target": false}, {"number": 92, "content": "    virtual void deleteObject();", "is_target": true}, {"number": 93, "content": "    virtual void update() override {} // nothing to be done here, because they do not move", "is_target": false}, {"number": 94, "content": "", "is_target": false}, {"number": 95, "content": "  private:", "is_target": false}, {"number": 96, "content": "    OSGPrimitive* item;", "is_target": false}, {"number": 97, "content": "    Pose pose;", "is_target": false}]}, "2811": {"lines": [{"number": 120, "content": "", "is_target": false}, {"number": 121, "content": "    // Delete copy constructor and assignment operator", "is_target": false}, {"number": 122, "content": "    TmpJoint(const TmpJoint&) = delete;", "is_target": false}, {"number": 123, "content": "    TmpJoint& operator=(const TmpJoint&) = delete;", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": true}, {"number": 126, "content": "", "is_target": false}, {"number": 127, "content": "    virtual void deleteObject();", "is_target": false}, {"number": 128, "content": "    virtual void update();", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "  private:", "is_target": false}]}, "2812": {"lines": [{"number": 122, "content": "    TmpJoint(const TmpJoint&) = delete;", "is_target": false}, {"number": 123, "content": "    TmpJoint& operator=(const TmpJoint&) = delete;", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": false}, {"number": 126, "content": "", "is_target": false}, {"number": 127, "content": "    virtual void deleteObject();", "is_target": true}, {"number": 128, "content": "    virtual void update();", "is_target": false}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "  private:", "is_target": false}, {"number": 131, "content": "    Joint* joint = nullptr;", "is_target": false}, {"number": 132, "content": "    Color color;", "is_target": false}]}, "2813": {"lines": [{"number": 123, "content": "    TmpJoint& operator=(const TmpJoint&) = delete;", "is_target": false}, {"number": 124, "content": "", "is_target": false}, {"number": 125, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": false}, {"number": 126, "content": "", "is_target": false}, {"number": 127, "content": "    virtual void deleteObject();", "is_target": false}, {"number": 128, "content": "    virtual void update();", "is_target": true}, {"number": 129, "content": "", "is_target": false}, {"number": 130, "content": "  private:", "is_target": false}, {"number": 131, "content": "    Joint* joint = nullptr;", "is_target": false}, {"number": 132, "content": "    Color color;", "is_target": false}, {"number": 133, "content": "    std::string colorname;", "is_target": false}]}, "2814": {"lines": [{"number": 36, "content": "", "is_target": false}, {"number": 37, "content": "  Gripper::Gripper(const GripperConf& conf)", "is_target": false}, {"number": 38, "content": "    : Configurable(conf.name, \"1.0\"), conf(conf), isAttached(false)", "is_target": false}, {"number": 39, "content": "  {", "is_target": false}, {"number": 40, "content": "    gripStartTime= - conf.releaseDuration - conf.gripDuration;", "is_target": false}, {"number": 41, "content": "    last=(dGeomID)1;", "is_target": true}, {"number": 42, "content": "    addParameter(\"gripduration\", &this->conf.gripDuration, 0, 1000,", "is_target": false}, {"number": 43, "content": "                 \"time the gripper grasps\");", "is_target": false}, {"number": 44, "content": "    addParameter(\"releaseduration\", &this->conf.releaseDuration, 0, 10,", "is_target": false}, {"number": 45, "content": "                 \"time the gripper has to release before grasping again\");", "is_target": false}, {"number": 46, "content": "  }", "is_target": false}]}, "2816": {"lines": [{"number": 510, "content": "", "is_target": false}, {"number": 511, "content": "bool com_store (const GlobalData& globalData, char* line, char* arg) {", "is_target": false}, {"number": 512, "content": "  bool success=false;", "is_target": false}, {"number": 513, "content": "  if (valid_argument(\"store\", arg)){", "is_target": false}, {"number": 514, "content": "    char* filename;", "is_target": false}, {"number": 515, "content": "    short sub=0;", "is_target": true}, {"number": 516, "content": "    filename = strchr(arg,' ');", "is_target": false}, {"number": 517, "content": "    if(filename) { // we have 2 arguments", "is_target": false}, {"number": 518, "content": "      *filename='\\0';", "is_target": false}, {"number": 519, "content": "      ++filename;", "is_target": false}, {"number": 520, "content": "      int id = atoi(arg);", "is_target": false}]}, "2817": {"lines": [{"number": 553, "content": "", "is_target": false}, {"number": 554, "content": "bool com_load (const GlobalData& globalData, char* line, char* arg) {", "is_target": false}, {"number": 555, "content": "  bool success=false;", "is_target": false}, {"number": 556, "content": "  if (valid_argument(\"load\", arg)){", "is_target": false}, {"number": 557, "content": "    char* filename;", "is_target": false}, {"number": 558, "content": "    short sub=0;", "is_target": true}, {"number": 559, "content": "    filename = strchr(arg,' ');", "is_target": false}, {"number": 560, "content": "    if(filename) { // we have 2 arguments", "is_target": false}, {"number": 561, "content": "      *filename='\\0';", "is_target": false}, {"number": 562, "content": "      ++filename;", "is_target": false}, {"number": 563, "content": "      int id = atoi(arg);", "is_target": false}]}, "2818": {"lines": [{"number": 186, "content": "  free (line);", "is_target": false}, {"number": 187, "content": "  return !_quit_request;", "is_target": false}, {"number": 188, "content": "}", "is_target": false}, {"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "/* Execute a command line. */", "is_target": false}, {"number": 191, "content": "bool execute_line (const GlobalData& globalData, char *_line) {", "is_target": true}, {"number": 192, "content": "  int i = 0;", "is_target": false}, {"number": 193, "content": "  COMMAND *command;", "is_target": false}, {"number": 194, "content": "  char *word;", "is_target": false}, {"number": 195, "content": "  char *line = strdup(_line);", "is_target": false}, {"number": 196, "content": "  if (!line) {", "is_target": false}]}, "2819": {"lines": [{"number": 233, "content": "  return rv;", "is_target": false}, {"number": 234, "content": "}", "is_target": false}, {"number": 235, "content": "", "is_target": false}, {"number": 236, "content": "/* Look up NAME as the name of a command, and return a pointer to that", "is_target": false}, {"number": 237, "content": "   command.  Return a nullptr pointer if NAME isn't a command name. */", "is_target": false}, {"number": 238, "content": "COMMAND *find_command (char *name){", "is_target": true}, {"number": 239, "content": "  int i = 0;", "is_target": false}, {"number": 240, "content": "  char *p = strchr(name,'=');", "is_target": false}, {"number": 241, "content": "  if(p) return (&commands[0]); // set a parameter.", "is_target": false}, {"number": 242, "content": "  for (i = 0; commands[i].name; ++i)", "is_target": false}, {"number": 243, "content": "    if (strcmp (name, commands[i].name) == 0)", "is_target": false}]}, "2820": {"lines": [{"number": 235, "content": "", "is_target": false}, {"number": 236, "content": "/* Look up NAME as the name of a command, and return a pointer to that", "is_target": false}, {"number": 237, "content": "   command.  Return a nullptr pointer if NAME isn't a command name. */", "is_target": false}, {"number": 238, "content": "COMMAND *find_command (char *name){", "is_target": false}, {"number": 239, "content": "  int i = 0;", "is_target": false}, {"number": 240, "content": "  char *p = strchr(name,'=');", "is_target": true}, {"number": 241, "content": "  if(p) return (&commands[0]); // set a parameter.", "is_target": false}, {"number": 242, "content": "  for (i = 0; commands[i].name; ++i)", "is_target": false}, {"number": 243, "content": "    if (strcmp (name, commands[i].name) == 0)", "is_target": false}, {"number": 244, "content": "      return (&commands[i]);", "is_target": false}, {"number": 245, "content": "", "is_target": false}]}, "2821": {"lines": [{"number": 431, "content": "    ++i;", "is_target": false}, {"number": 432, "content": "  }", "is_target": false}, {"number": 433, "content": "  return true;", "is_target": false}, {"number": 434, "content": "}", "is_target": false}, {"number": 435, "content": "", "is_target": false}, {"number": 436, "content": "bool com_show (const GlobalData& globalData, char* line, char* arg) {", "is_target": true}, {"number": 437, "content": "  if (arg && *arg){", "is_target": false}, {"number": 438, "content": "    int id = atoi(arg);", "is_target": false}, {"number": 439, "content": "    if(id>=1 && id <= static_cast<int>(globalData.globalconfigurables.size())){", "is_target": false}, {"number": 440, "content": "      auto it = globalData.globalconfigurables.begin();", "is_target": false}, {"number": 441, "content": "      std::advance(it, id-1);", "is_target": false}]}, "2822": {"lines": [{"number": 642, "content": "  return success;", "is_target": false}, {"number": 643, "content": "}", "is_target": false}, {"number": 644, "content": "", "is_target": false}, {"number": 645, "content": "bool com_contrs (const GlobalData& globalData, char* line, char* arg) {", "is_target": false}, {"number": 646, "content": "  if (valid_argument(\"contours\", arg)){", "is_target": false}, {"number": 647, "content": "    char* filename;", "is_target": true}, {"number": 648, "content": "    filename = arg;", "is_target": false}, {"number": 649, "content": "    if(filename) { // we at least 1 argument", "is_target": false}, {"number": 650, "content": "      FILE* f = fopen(filename,\"wb\");", "is_target": false}, {"number": 651, "content": "      if(f){", "is_target": false}, {"number": 652, "content": "        int i=0;", "is_target": false}]}, "2823": {"lines": [{"number": 672, "content": "  return true;", "is_target": false}, {"number": 673, "content": "}", "is_target": false}, {"number": 674, "content": "", "is_target": false}, {"number": 675, "content": "/* Print out help for ARG, or for all of the commands if ARG is", "is_target": false}, {"number": 676, "content": "   not present. */", "is_target": false}, {"number": 677, "content": "bool com_help (const GlobalData& globalData, char* line, char* arg) {", "is_target": true}, {"number": 678, "content": "  int i = 0;", "is_target": false}, {"number": 679, "content": "  int printed = 0;", "is_target": false}, {"number": 680, "content": "", "is_target": false}, {"number": 681, "content": "  for (i = 0; commands[i].name; ++i)", "is_target": false}, {"number": 682, "content": "    {", "is_target": false}]}, "2824": {"lines": [{"number": 74, "content": "  /**", "is_target": false}, {"number": 75, "content": "     An Operator for lifting up a robot from time to time.", "is_target": false}, {"number": 76, "content": "   */", "is_target": false}, {"number": 77, "content": "  class LiftUpOperator : public Operator {", "is_target": false}, {"number": 78, "content": "  public:", "is_target": false}, {"number": 79, "content": "    LiftUpOperator(const LiftUpOperatorConf conf = getDefaultConf())", "is_target": true}, {"number": 80, "content": "      : Operator(\"LiftUpOperator\",\"0.8\"), conf(conf)", "is_target": false}, {"number": 81, "content": "    {", "is_target": false}, {"number": 82, "content": "      currentforce = conf.force;", "is_target": false}, {"number": 83, "content": "      addParameter(\"force\",    &this->conf.force,   0, 100, \"lift up force\");", "is_target": false}, {"number": 84, "content": "      addParameter(\"height\",   &this->conf.height,  0, 100, \"lift up height\");", "is_target": false}]}, "2825": {"lines": [{"number": 56, "content": "    Operator( const std::string& name, const std::string& revision)", "is_target": false}, {"number": 57, "content": "      : ::Configurable(name, revision)", "is_target": false}, {"number": 58, "content": "    {", "is_target": false}, {"number": 59, "content": "    }", "is_target": false}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "    virtual ~Operator() {", "is_target": true}, {"number": 62, "content": "    }", "is_target": false}, {"number": 63, "content": "", "is_target": false}, {"number": 64, "content": "    /** called every simulation step", "is_target": false}, {"number": 65, "content": "        @return what was done with the robot", "is_target": false}, {"number": 66, "content": "     */", "is_target": false}]}, "2826": {"lines": [{"number": 43, "content": "        maxAngle(maxAngle), force(force), minAngle(minAngle),", "is_target": false}, {"number": 44, "content": "        currentforce(force), active(false) {", "is_target": false}, {"number": 45, "content": "      if(this->minAngle<0) this->minAngle=maxAngle/2;", "is_target": false}, {"number": 46, "content": "    }", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "    virtual ManipType observe(OdeAgent* agent, const GlobalData& global, const ManipDescr& descr);", "is_target": true}, {"number": 49, "content": "  protected:", "is_target": false}, {"number": 50, "content": "    Axis robotAxis;", "is_target": false}, {"number": 51, "content": "    Axis globalAxis;", "is_target": false}, {"number": 52, "content": "    double maxAngle = 0;", "is_target": false}, {"number": 53, "content": "    double force = 0;", "is_target": false}]}, "2827": {"lines": [{"number": 100, "content": "      c.force              = 1;", "is_target": false}, {"number": 101, "content": "      c.visualHeight       = 0.5;", "is_target": false}, {"number": 102, "content": "      return c;", "is_target": false}, {"number": 103, "content": "    }", "is_target": false}, {"number": 104, "content": "", "is_target": false}, {"number": 105, "content": "    virtual ManipType observe(OdeAgent* agent, const GlobalData& global, const ManipDescr& descr);", "is_target": true}, {"number": 106, "content": "  protected:", "is_target": false}, {"number": 107, "content": "    LiftUpOperatorConf conf;", "is_target": false}, {"number": 108, "content": "", "is_target": false}, {"number": 109, "content": "    double currentforce = 0;", "is_target": false}, {"number": 110, "content": "  };", "is_target": false}]}, "2828": {"lines": [{"number": 143, "content": "        if(dim & Z)", "is_target": false}, {"number": 144, "content": "          addParameterDef(\"point_z\", &pz, point.z(), -100, 100,\"pull to point z position\");", "is_target": false}, {"number": 145, "content": "      }", "is_target": false}, {"number": 146, "content": "    }", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "    virtual ManipType observe(OdeAgent* agent, const GlobalData& global, const ManipDescr& descr);", "is_target": true}, {"number": 149, "content": "", "is_target": false}, {"number": 150, "content": "    virtual void notifyOnChange(const paramkey& key);", "is_target": false}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "  protected:", "is_target": false}, {"number": 153, "content": "    Pos point;", "is_target": false}]}, "2829": {"lines": [{"number": 179, "content": "                   \"force of the boxring to keep robots inside\");", "is_target": false}, {"number": 180, "content": "      addParameter(\"boxringsize\", &this->size,   .5, 100,", "is_target": false}, {"number": 181, "content": "                   \"size of boxring/spherical arena (in radius or half-length)\");", "is_target": false}, {"number": 182, "content": "    }", "is_target": false}, {"number": 183, "content": "", "is_target": false}, {"number": 184, "content": "    virtual ManipType observe(OdeAgent* agent, const GlobalData& global, const ManipDescr& descr);", "is_target": true}, {"number": 185, "content": "", "is_target": false}, {"number": 186, "content": "  protected:", "is_target": false}, {"number": 187, "content": "", "is_target": false}, {"number": 188, "content": "    Pos center;", "is_target": false}, {"number": 189, "content": "    double size = 0;", "is_target": false}]}, "2830": {"lines": [{"number": 163, "content": "      }", "is_target": false}, {"number": 164, "content": "      vec.ptr()[idx] = max; // all but the one component is 0;", "is_target": false}, {"number": 165, "content": "    }", "is_target": false}, {"number": 166, "content": "    if(vec.length() > size - offset){", "is_target": false}, {"number": 167, "content": "      const_cast<Primitive*>(p)->applyForce(vec*force);", "is_target": false}, {"number": 168, "content": "      Pos p(vec);", "is_target": true}, {"number": 169, "content": "      p.normalize();", "is_target": false}, {"number": 170, "content": "      // descr.pos          = pos  - p*offset;", "is_target": false}, {"number": 171, "content": "      // descr.orientation  = Pose::rotate(osg::Vec3(0,0,1), vec);", "is_target": false}, {"number": 172, "content": "      // descr.size         = Pos(0.3,0,0.05);", "is_target": false}, {"number": 173, "content": "      // descr.show = 1;", "is_target": false}]}, "2831": {"lines": [{"number": 74, "content": "  /**", "is_target": false}, {"number": 75, "content": "     An Operator for lifting up a robot from time to time.", "is_target": false}, {"number": 76, "content": "   */", "is_target": false}, {"number": 77, "content": "  class LiftUpOperator : public Operator {", "is_target": false}, {"number": 78, "content": "  public:", "is_target": false}, {"number": 79, "content": "    LiftUpOperator(const LiftUpOperatorConf conf = getDefaultConf())", "is_target": true}, {"number": 80, "content": "      : Operator(\"LiftUpOperator\",\"0.8\"), conf(conf)", "is_target": false}, {"number": 81, "content": "    {", "is_target": false}, {"number": 82, "content": "      currentforce = conf.force;", "is_target": false}, {"number": 83, "content": "      addParameter(\"force\",    &this->conf.force,   0, 100, \"lift up force\");", "is_target": false}, {"number": 84, "content": "      addParameter(\"height\",   &this->conf.height,  0, 100, \"lift up height\");", "is_target": false}]}, "2832": {"lines": [{"number": 54, "content": "    virtual void init(const OdeHandle& odeHandle, const OsgHandle& osgHandle);", "is_target": false}, {"number": 55, "content": "    virtual void deleteObject();", "is_target": false}, {"number": 56, "content": "    virtual void update();", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "  private:", "is_target": false}, {"number": 59, "content": "    Primitive* item = nullptr;", "is_target": true}, {"number": 60, "content": "    char mode = 0;", "is_target": false}, {"number": 61, "content": "    double mass = 0;", "is_target": false}, {"number": 62, "content": "    Pose pose;", "is_target": false}, {"number": 63, "content": "    Color color;", "is_target": false}, {"number": 64, "content": "    std::string colorname;", "is_target": false}]}, "2833": {"lines": [{"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "\t/**", "is_target": false}, {"number": 44, "content": "\t * default destructor", "is_target": false}, {"number": 45, "content": "\t * do nothing", "is_target": false}, {"number": 46, "content": "\t */", "is_target": false}, {"number": 47, "content": "\tvirtual ~EuclidicDistanceFitnessStrategy();", "is_target": true}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "\t/**", "is_target": false}, {"number": 50, "content": "\t * this function calculate the euclidic distance of all double gen which", "is_target": false}, {"number": 51, "content": "\t * individual has.", "is_target": false}, {"number": 52, "content": "\t * @param individual the Individual", "is_target": false}]}, "2834": {"lines": [{"number": 50, "content": "\t * this function calculate the euclidic distance of all double gen which", "is_target": false}, {"number": 51, "content": "\t * individual has.", "is_target": false}, {"number": 52, "content": "\t * @param individual the Individual", "is_target": false}, {"number": 53, "content": "\t * @return the distance", "is_target": false}, {"number": 54, "content": "\t */", "is_target": false}, {"number": 55, "content": "\tvirtual double getFitness(const Individual* individual);", "is_target": true}, {"number": 56, "content": "};", "is_target": false}, {"number": 57, "content": "", "is_target": false}, {"number": 58, "content": "#endif /* EUCLIDICDISTANCEFITNESSSTRATEGY_H_ */", "is_target": false}]}, "2835": {"lines": [{"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "double EuclidicDistanceFitnessStrategy::getFitness(const Individual* individual) {", "is_target": false}, {"number": 49, "content": "        double sum = 0.0;                                        //the sum and later the result and so the fitness of the individual.", "is_target": false}, {"number": 50, "content": "        int num = individual->getSize();        //number of gens inside the individual", "is_target": false}, {"number": 51, "content": "        Gen* gen;                                                        //the actual used gen", "is_target": false}, {"number": 52, "content": "        IValue* value;                                                //the value of the gen", "is_target": true}, {"number": 53, "content": "        TemplateValue<double>* tValue;                //the casted value of the gen (double gen)", "is_target": false}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "        // take all gens", "is_target": false}, {"number": 56, "content": "        for(int x=0; x<num; ++x) {", "is_target": false}, {"number": 57, "content": "                gen = individual->getGen(x);        //become gen from individual", "is_target": false}]}, "2836": {"lines": [{"number": 48, "content": "double EuclidicDistanceFitnessStrategy::getFitness(const Individual* individual) {", "is_target": false}, {"number": 49, "content": "        double sum = 0.0;                                        //the sum and later the result and so the fitness of the individual.", "is_target": false}, {"number": 50, "content": "        int num = individual->getSize();        //number of gens inside the individual", "is_target": false}, {"number": 51, "content": "        Gen* gen;                                                        //the actual used gen", "is_target": false}, {"number": 52, "content": "        IValue* value;                                                //the value of the gen", "is_target": false}, {"number": 53, "content": "        TemplateValue<double>* tValue;                //the casted value of the gen (double gen)", "is_target": true}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "        // take all gens", "is_target": false}, {"number": 56, "content": "        for(int x=0; x<num; ++x) {", "is_target": false}, {"number": 57, "content": "                gen = individual->getGen(x);        //become gen from individual", "is_target": false}, {"number": 58, "content": "                value = gen->getValue();                //become the value from the gen", "is_target": false}]}, "2837": {"lines": [{"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "\t/**", "is_target": false}, {"number": 45, "content": "\t * default destructor", "is_target": false}, {"number": 46, "content": "\t * do nothing", "is_target": false}, {"number": 47, "content": "\t */", "is_target": false}, {"number": 48, "content": "\tvirtual ~ExtreamTestFitnessStrategy();", "is_target": true}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "\t/**", "is_target": false}, {"number": 51, "content": "\t * implementation for getFitness of IFitnessStrategy.", "is_target": false}, {"number": 52, "content": "\t * return a of the other fitness strategy if the value is lower than 10.", "is_target": false}, {"number": 53, "content": "\t * Else it return 100.", "is_target": false}]}, "2838": {"lines": [{"number": 52, "content": "\t * return a of the other fitness strategy if the value is lower than 10.", "is_target": false}, {"number": 53, "content": "\t * Else it return 100.", "is_target": false}, {"number": 54, "content": "\t * @param individual the individual for which the value is calculated", "is_target": false}, {"number": 55, "content": "\t * @return the result", "is_target": false}, {"number": 56, "content": "\t */", "is_target": false}, {"number": 57, "content": "\tvirtual double getFitness(const Individual* individual);", "is_target": true}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "private:", "is_target": false}, {"number": 60, "content": "\t/**", "is_target": false}, {"number": 61, "content": "\t * a other fitness strategy which is used as base calculation.", "is_target": false}, {"number": 62, "content": "\t */", "is_target": false}]}, "2839": {"lines": [{"number": 41, "content": "\texplicit InvertedFitnessStrategy(const IFitnessStrategy* strategy);", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "\t/**", "is_target": false}, {"number": 44, "content": "\t * default destructor", "is_target": false}, {"number": 45, "content": "\t */", "is_target": false}, {"number": 46, "content": "\tvirtual ~InvertedFitnessStrategy();", "is_target": true}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "\t/**", "is_target": false}, {"number": 49, "content": "\t * returns the inverse fitness value what the other strategy returns for the individual __PLACEHOLDER_1__.", "is_target": false}, {"number": 50, "content": "\t *", "is_target": false}, {"number": 51, "content": "\t * @param individual (const Individual*) calculate the fitness for this individual", "is_target": false}]}, "2840": {"lines": [{"number": 49, "content": "\t * returns the inverse fitness value what the other strategy returns for the individual __PLACEHOLDER_1__.", "is_target": false}, {"number": 50, "content": "\t *", "is_target": false}, {"number": 51, "content": "\t * @param individual (const Individual*) calculate the fitness for this individual", "is_target": false}, {"number": 52, "content": "\t * @return (double) The fitness value", "is_target": false}, {"number": 53, "content": "\t */", "is_target": false}, {"number": 54, "content": "\tvirtual double getFitness(const Individual* individual);", "is_target": true}, {"number": 55, "content": "", "is_target": false}, {"number": 56, "content": "protected:", "is_target": false}, {"number": 57, "content": "\t/**", "is_target": false}, {"number": 58, "content": "\t * The other strategy", "is_target": false}, {"number": 59, "content": "\t */", "is_target": false}]}, "2841": {"lines": [{"number": 39, "content": "\tSumFitnessStrategy();", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "\t/**", "is_target": false}, {"number": 42, "content": "\t * default destructor", "is_target": false}, {"number": 43, "content": "\t */", "is_target": false}, {"number": 44, "content": "\tvirtual ~SumFitnessStrategy();", "is_target": true}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "\t/**", "is_target": false}, {"number": 47, "content": "\t * implements the getFitness function of IFitnessStrategy. Calculate the Sum of all double gens.", "is_target": false}, {"number": 48, "content": "\t * @param individual (const Individual*) the individual", "is_target": false}, {"number": 49, "content": "\t * @return (double) the result", "is_target": false}]}, "2842": {"lines": [{"number": 46, "content": "\t/**", "is_target": false}, {"number": 47, "content": "\t * implements the getFitness function of IFitnessStrategy. Calculate the Sum of all double gens.", "is_target": false}, {"number": 48, "content": "\t * @param individual (const Individual*) the individual", "is_target": false}, {"number": 49, "content": "\t * @return (double) the result", "is_target": false}, {"number": 50, "content": "\t */", "is_target": false}, {"number": 51, "content": "\tvirtual double getFitness(const Individual* individual);", "is_target": true}, {"number": 52, "content": "};", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "#endif /* SUMFITNESSSTRATEGY_H_ */", "is_target": false}]}, "2843": {"lines": [{"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "double SumFitnessStrategy::getFitness(const Individual* individual) {", "is_target": false}, {"number": 47, "content": "        double sum = 0.0;                                                //the sum and on the end the resulting fitness value", "is_target": false}, {"number": 48, "content": "        int num = individual->getSize();                //number of gens inside the individual", "is_target": false}, {"number": 49, "content": "        Gen* gen;                                                                //the actual gen", "is_target": false}, {"number": 50, "content": "        IValue* value;                                                        //the value of the gen", "is_target": true}, {"number": 51, "content": "        TemplateValue<double>* tValue;                        //the casted value of the gen", "is_target": false}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "        for(int x=0; x<num; ++x) {", "is_target": false}, {"number": 54, "content": "                gen = individual->getGen(x);                //become the gen from the individual", "is_target": false}, {"number": 55, "content": "                value = gen->getValue();                        //become the value of the gen", "is_target": false}]}, "2844": {"lines": [{"number": 46, "content": "double SumFitnessStrategy::getFitness(const Individual* individual) {", "is_target": false}, {"number": 47, "content": "        double sum = 0.0;                                                //the sum and on the end the resulting fitness value", "is_target": false}, {"number": 48, "content": "        int num = individual->getSize();                //number of gens inside the individual", "is_target": false}, {"number": 49, "content": "        Gen* gen;                                                                //the actual gen", "is_target": false}, {"number": 50, "content": "        IValue* value;                                                        //the value of the gen", "is_target": false}, {"number": 51, "content": "        TemplateValue<double>* tValue;                        //the casted value of the gen", "is_target": true}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "        for(int x=0; x<num; ++x) {", "is_target": false}, {"number": 54, "content": "                gen = individual->getGen(x);                //become the gen from the individual", "is_target": false}, {"number": 55, "content": "                value = gen->getValue();                        //become the value of the gen", "is_target": false}, {"number": 56, "content": "                tValue = dynamic_cast<TemplateValue<double>* >(value);        //cast the value to double gen", "is_target": false}]}, "2845": {"lines": [{"number": 39, "content": "\tTestFitnessStrategy();", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "\t/**", "is_target": false}, {"number": 42, "content": "\t * default destructor", "is_target": false}, {"number": 43, "content": "\t */", "is_target": false}, {"number": 44, "content": "\tvirtual ~TestFitnessStrategy();", "is_target": true}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "\t/**", "is_target": false}, {"number": 47, "content": "\t * calculate the test fitness value for a individual", "is_target": false}, {"number": 48, "content": "\t * @param individual (const Individual*) the individual", "is_target": false}, {"number": 49, "content": "\t * @return (double) the result", "is_target": false}]}, "2846": {"lines": [{"number": 46, "content": "\t/**", "is_target": false}, {"number": 47, "content": "\t * calculate the test fitness value for a individual", "is_target": false}, {"number": 48, "content": "\t * @param individual (const Individual*) the individual", "is_target": false}, {"number": 49, "content": "\t * @return (double) the result", "is_target": false}, {"number": 50, "content": "\t */", "is_target": false}, {"number": 51, "content": "\tvirtual double getFitness(const Individual* individual);", "is_target": true}, {"number": 52, "content": "};", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "#endif /* TESTFITNESSSTRATEGY_H_ */", "is_target": false}]}, "2847": {"lines": [{"number": 83, "content": "    fprintf(f,\"%c\",integer.buffer[d]);", "is_target": false}, {"number": 84, "content": "  }", "is_target": false}, {"number": 85, "content": "  fprintf(f,\"%s\",m_prototype->getName().c_str());", "is_target": false}, {"number": 86, "content": "", "is_target": false}, {"number": 87, "content": "  for(unsigned int x=0;x<sizeof(RESTORE_GA_GENE);++x) {", "is_target": false}, {"number": 88, "content": "    fprintf(f,\"%c\",head.buffer[x]);", "is_target": true}, {"number": 89, "content": "  }", "is_target": false}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "  return m_value->store(f);", "is_target": false}, {"number": 92, "content": "}", "is_target": false}]}, "2848": {"lines": [{"number": 74, "content": "  if(f==nullptr) {", "is_target": false}, {"number": 75, "content": "    printf(\"\\n\\n\\t>>> [ERROR] <<<\\nNo File to store GA [gene].\\n\\t>>> [END] <<<\\n\\n\\n\");", "is_target": false}, {"number": 76, "content": "    return false;", "is_target": false}, {"number": 77, "content": "  }", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "  head.ID = m_ID;", "is_target": true}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  integer.value=static_cast<int>(m_prototype->getName().length());", "is_target": false}, {"number": 82, "content": "  for(unsigned int d=0;d<sizeof(RESTORE_GA_TEMPLATE<int>);++d) {", "is_target": false}, {"number": 83, "content": "    fprintf(f,\"%c\",integer.buffer[d]);", "is_target": false}, {"number": 84, "content": "  }", "is_target": false}]}, "2850": {"lines": [{"number": 39, "content": "   * Takes a list of Inspectables for which the proxy stands.", "is_target": false}, {"number": 40, "content": "   * Attention: The inspectables must have registered", "is_target": false}, {"number": 41, "content": "   * all their variables already!", "is_target": false}, {"number": 42, "content": "   * @param list (list<Inspectable*>&) the list", "is_target": false}, {"number": 43, "content": "   */", "is_target": false}, {"number": 44, "content": "  InspectableProxy(const std::list<Inspectable*>& list,", "is_target": true}, {"number": 45, "content": "                            const iparamkey& name = \"InspectableProxy\");", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "  /**", "is_target": false}, {"number": 48, "content": "   * default destructor", "is_target": false}, {"number": 49, "content": "   */", "is_target": false}]}, "2851": {"lines": [{"number": 50, "content": "\texplicit GenContext(const GenPrototype* prototype);", "is_target": false}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "\t/**", "is_target": false}, {"number": 53, "content": "\t * destructor to delete a GenContext.", "is_target": false}, {"number": 54, "content": "\t */", "is_target": false}, {"number": 55, "content": "\tvirtual ~GenContext();", "is_target": true}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "\t/**", "is_target": false}, {"number": 58, "content": "\t * [inline], [const]", "is_target": false}, {"number": 59, "content": "\t *", "is_target": false}, {"number": 60, "content": "\t * This function gives the prototype for hich are the context is make back.", "is_target": false}]}, "2852": {"lines": [{"number": 45, "content": "                            const iparamkey& name = \"InspectableProxy\");", "is_target": false}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "  /**", "is_target": false}, {"number": 48, "content": "   * default destructor", "is_target": false}, {"number": 49, "content": "   */", "is_target": false}, {"number": 50, "content": "  virtual ~InspectableProxy();", "is_target": true}, {"number": 51, "content": "", "is_target": false}, {"number": 52, "content": "  /**", "is_target": false}, {"number": 53, "content": "   * this function is for replacing the old list", "is_target": false}, {"number": 54, "content": "   * @param list (list<Inspectable*>& the new list", "is_target": false}, {"number": 55, "content": "   * @return static_cast<bool>(true) if it successful", "is_target": false}]}, "2853": {"lines": [{"number": 52, "content": "\tGeneration(int generationNumber, int size, int numChildren);", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "\t/**", "is_target": false}, {"number": 55, "content": "\t * destructor to delete a GenContext.", "is_target": false}, {"number": 56, "content": "\t */", "is_target": false}, {"number": 57, "content": "\tvirtual ~Generation();", "is_target": true}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "\t/**", "is_target": false}, {"number": 60, "content": "\t * [inline], [const]", "is_target": false}, {"number": 61, "content": "\t * This function gives the ID (number) of the generation back.", "is_target": false}, {"number": 62, "content": "\t *", "is_target": false}]}, "2854": {"lines": [{"number": 77, "content": "  m_storage.clear();", "is_target": false}, {"number": 78, "content": "}", "is_target": false}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "void GenContext::update(double factor) {", "is_target": false}, {"number": 81, "content": "  std::vector<double> list;", "is_target": false}, {"number": 82, "content": "  TemplateValue<double>* tValue;", "is_target": true}, {"number": 83, "content": "", "is_target": false}, {"number": 84, "content": "  for (std::vector<Gen*>::const_iterator iter = m_storage.begin(); iter != m_storage.end(); ++iter) {", "is_target": false}, {"number": 85, "content": "    tValue = dynamic_cast<TemplateValue<double>*> ((*iter)->getValue());", "is_target": false}, {"number": 86, "content": "    if (tValue != nullptr)", "is_target": false}, {"number": 87, "content": "      list.push_back(tValue->getValue());", "is_target": false}]}, "2855": {"lines": [{"number": 140, "content": "  int numPrototypes = prototypeSet.size();", "is_target": false}, {"number": 141, "content": "  Generation* generation;", "is_target": false}, {"number": 142, "content": "  GenPrototype* prototype;", "is_target": false}, {"number": 143, "content": "  GenContext* context;", "is_target": false}, {"number": 144, "content": "  Gen* gen;", "is_target": false}, {"number": 145, "content": "  Individual* individual;", "is_target": true}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  generation = SingletonGenEngine::getInstance()->getGeneration(0);", "is_target": false}, {"number": 148, "content": "  int numIndividuals = generation->getCurrentSize();", "is_target": false}, {"number": 149, "content": "  for (y = 0; y < numPrototypes; ++y) {", "is_target": false}, {"number": 150, "content": "    prototype = prototypeSet[y];", "is_target": false}]}, "2856": {"lines": [{"number": 95, "content": "    m_max = list.back();", "is_target": false}, {"number": 96, "content": "    ", "is_target": false}, {"number": 97, "content": "    // Average", "is_target": false}, {"number": 98, "content": "    double sum = 0.0;", "is_target": false}, {"number": 99, "content": "    for (double val : list) {", "is_target": false}, {"number": 100, "content": "      sum += val;", "is_target": true}, {"number": 101, "content": "    }", "is_target": false}, {"number": 102, "content": "    m_avg = sum / list.size();", "is_target": false}, {"number": 103, "content": "    ", "is_target": false}, {"number": 104, "content": "    // Median", "is_target": false}, {"number": 105, "content": "    size_t n = list.size();", "is_target": false}]}, "2857": {"lines": [{"number": 56, "content": "  m_avg(0.0),", "is_target": false}, {"number": 57, "content": "  m_q3(0.0),", "is_target": false}, {"number": 58, "content": "  m_w3(0.0),", "is_target": false}, {"number": 59, "content": "  m_max(0.0) {", "is_target": false}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "  std::string name = prototype->getName();", "is_target": true}, {"number": 62, "content": "", "is_target": false}, {"number": 63, "content": "  // Since GenContext doesn't inherit from Inspectable, we can't use addInspectableValue", "is_target": false}, {"number": 64, "content": "  // We would need to inherit from Inspectable to use these methods", "is_target": false}, {"number": 65, "content": "  // For now, commenting out these calls", "is_target": false}, {"number": 66, "content": "  // addInspectableValue(name + \"MIN\", &m_min);", "is_target": false}]}, "2858": {"lines": [{"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "int GenPrototype::getMutationProbability(void) const {", "is_target": false}, {"number": 76, "content": "        return m_mutationStrategy->getMutationProbability();", "is_target": false}, {"number": 77, "content": "}", "is_target": false}, {"number": 78, "content": "", "is_target": false}, {"number": 79, "content": "bool GenPrototype::restoreGene(FILE* f, RESTORE_GA_GENE* gene, std::vector<Gen*>& storage) {", "is_target": true}, {"number": 80, "content": "  IValue* value = m_randomStrategy->getRandomValue();", "is_target": false}, {"number": 81, "content": "  Gen* gen;", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "  if(!value->restore(f))", "is_target": false}, {"number": 84, "content": "    return false;", "is_target": false}]}, "2859": {"lines": [{"number": 40, "content": "\texplicit FixGenerationSizeStrategy(int value);", "is_target": false}, {"number": 41, "content": "", "is_target": false}, {"number": 42, "content": "\t/**", "is_target": false}, {"number": 43, "content": "\t * default destructor", "is_target": false}, {"number": 44, "content": "\t */", "is_target": false}, {"number": 45, "content": "\tvirtual ~FixGenerationSizeStrategy();", "is_target": true}, {"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "\t/**", "is_target": false}, {"number": 48, "content": "\t * gives the fix value m_size as new generation size back.", "is_target": false}, {"number": 49, "content": "\t * @param oldGeneration (Generation*) the old Generation. dont needed", "is_target": false}, {"number": 50, "content": "\t * @return (int) m_size", "is_target": false}]}, "2860": {"lines": [{"number": 47, "content": "\t/**", "is_target": false}, {"number": 48, "content": "\t * gives the fix value m_size as new generation size back.", "is_target": false}, {"number": 49, "content": "\t * @param oldGeneration (Generation*) the old Generation. dont needed", "is_target": false}, {"number": 50, "content": "\t * @return (int) m_size", "is_target": false}, {"number": 51, "content": "\t */", "is_target": false}, {"number": 52, "content": "\tvirtual int calcGenerationSize(const Generation* oldGeneration);", "is_target": true}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "protected:", "is_target": false}, {"number": 55, "content": "\t/**", "is_target": false}, {"number": 56, "content": "\t * the fix generation size", "is_target": false}, {"number": 57, "content": "\t */", "is_target": false}]}, "2862": {"lines": [{"number": 41, "content": "\tStandartGenerationSizeStrategy(int startSize, int numGeneration);", "is_target": false}, {"number": 42, "content": "", "is_target": false}, {"number": 43, "content": "\t/**", "is_target": false}, {"number": 44, "content": "\t * default destructor", "is_target": false}, {"number": 45, "content": "\t */", "is_target": false}, {"number": 46, "content": "\tvirtual ~StandartGenerationSizeStrategy();", "is_target": true}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "\t/**", "is_target": false}, {"number": 49, "content": "\t * this function calculate the new generation size", "is_target": false}, {"number": 50, "content": "\t * @param oldGeneration (Generation*) the old generation", "is_target": false}, {"number": 51, "content": "\t * @return (int) the new generation size", "is_target": false}]}, "2863": {"lines": [{"number": 48, "content": "\t/**", "is_target": false}, {"number": 49, "content": "\t * this function calculate the new generation size", "is_target": false}, {"number": 50, "content": "\t * @param oldGeneration (Generation*) the old generation", "is_target": false}, {"number": 51, "content": "\t * @return (int) the new generation size", "is_target": false}, {"number": 52, "content": "\t */", "is_target": false}, {"number": 53, "content": "\tvirtual int calcGenerationSize(const Generation* oldGeneration);", "is_target": true}, {"number": 54, "content": "", "is_target": false}, {"number": 55, "content": "protected:", "is_target": false}, {"number": 56, "content": "\t/**", "is_target": false}, {"number": 57, "content": "\t * is the first generation over?", "is_target": false}, {"number": 58, "content": "\t */", "is_target": false}]}, "2865": {"lines": [{"number": 43, "content": "\texplicit FixMutationFactorStrategy(const IValue* value);", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "\t/**", "is_target": false}, {"number": 46, "content": "\t * default destructor", "is_target": false}, {"number": 47, "content": "\t */", "is_target": false}, {"number": 48, "content": "\tvirtual ~FixMutationFactorStrategy();", "is_target": true}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "\t/**", "is_target": false}, {"number": 51, "content": "\t * returns the fix value as mutation value", "is_target": false}, {"number": 52, "content": "\t * @param gene (vector<Gen*>) the set of gens -> here not used.", "is_target": false}, {"number": 53, "content": "\t * @return (IValue*) the mutation factor", "is_target": false}]}, "2866": {"lines": [{"number": 50, "content": "\t/**", "is_target": false}, {"number": 51, "content": "\t * returns the fix value as mutation value", "is_target": false}, {"number": 52, "content": "\t * @param gene (vector<Gen*>) the set of gens -> here not used.", "is_target": false}, {"number": 53, "content": "\t * @return (IValue*) the mutation factor", "is_target": false}, {"number": 54, "content": "\t */", "is_target": false}, {"number": 55, "content": "\tvirtual IValue* calcMutationFactor(const std::vector<Gen*>& gene);", "is_target": true}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "protected:", "is_target": false}, {"number": 58, "content": "\t/**", "is_target": false}, {"number": 59, "content": "\t * the saved fix value which is giving back.", "is_target": false}, {"number": 60, "content": "\t */", "is_target": false}]}, "2867": {"lines": [{"number": 217, "content": "  head.avg = m_avg;", "is_target": false}, {"number": 218, "content": "  head.med = m_med;", "is_target": false}, {"number": 219, "content": "  head.best = m_best;*/", "is_target": false}, {"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "  for(unsigned int x=0;x<sizeof(RESTORE_GA_GENERATION);++x) {", "is_target": false}, {"number": 222, "content": "    fprintf(f,\"%c\",head.buffer[x]);", "is_target": true}, {"number": 223, "content": "  }", "is_target": false}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "  for(int y=0;y<head.numberIndividuals;++y) {", "is_target": false}, {"number": 226, "content": "    integer.value = m_individual[y]->getID();", "is_target": false}, {"number": 227, "content": "    for(unsigned int z=0;z<sizeof(RESTORE_GA_TEMPLATE<int>);++z) {", "is_target": false}]}, "2869": {"lines": [{"number": 92, "content": "    int r2 = r1;                      // to come min one time inside the while loop", "is_target": false}, {"number": 93, "content": "    while(r1==r2)", "is_target": false}, {"number": 94, "content": "      r2 = (static_cast<int>(random->rand()*1000000.0))%active;  // the second random number", "is_target": false}, {"number": 95, "content": "", "is_target": false}, {"number": 96, "content": "    ++count;", "is_target": false}, {"number": 97, "content": "    Individual* ind = SingletonIndividualFactory::getInstance()->createIndividual(m_individual[r1],m_individual[r2],random);  // create new individual with the 2 other individuals which are represented with the 2 random numbers", "is_target": true}, {"number": 98, "content": "    addIndividual(ind);                                 // insert the new individual", "is_target": false}, {"number": 99, "content": "  }", "is_target": false}, {"number": 100, "content": "}", "is_target": false}, {"number": 101, "content": "", "is_target": false}, {"number": 102, "content": "void Generation::addIndividual(const Individual* individual) {", "is_target": false}]}, "2870": {"lines": [{"number": 233, "content": "}", "is_target": false}, {"number": 234, "content": "", "is_target": false}, {"number": 235, "content": "bool Generation::restore(int numberGeneration, std::map<int,RESTORE_GA_GENERATION*>& generationSet, std::map<int,std::vector<int> >& linkSet) {", "is_target": false}, {"number": 236, "content": "  int x,y;", "is_target": false}, {"number": 237, "content": "  Generation* generation;", "is_target": false}, {"number": 238, "content": "  RESTORE_GA_GENERATION* head;", "is_target": true}, {"number": 239, "content": "", "is_target": false}, {"number": 240, "content": "  //prepare first", "is_target": false}, {"number": 241, "content": "  head = generationSet[0];", "is_target": false}, {"number": 242, "content": "  generation = new Generation(-1,head->size,head->children);", "is_target": false}, {"number": 243, "content": "", "is_target": false}]}, "2871": {"lines": [{"number": 136, "content": "    m_best = m_min; // Assuming lower fitness is better", "is_target": false}, {"number": 137, "content": "    ", "is_target": false}, {"number": 138, "content": "    // Average", "is_target": false}, {"number": 139, "content": "    double sum = 0.0;", "is_target": false}, {"number": 140, "content": "    for (double val : *ptrFitnessVector) {", "is_target": false}, {"number": 141, "content": "      sum += val;", "is_target": true}, {"number": 142, "content": "    }", "is_target": false}, {"number": 143, "content": "    m_avg = sum / ptrFitnessVector->size();", "is_target": false}, {"number": 144, "content": "    ", "is_target": false}, {"number": 145, "content": "    // Median", "is_target": false}, {"number": 146, "content": "    size_t n = ptrFitnessVector->size();", "is_target": false}]}, "2872": {"lines": [{"number": 42, "content": "\tStandartMutationFactorStrategy();", "is_target": false}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "\t/**", "is_target": false}, {"number": 45, "content": "\t * default destructor", "is_target": false}, {"number": 46, "content": "\t */", "is_target": false}, {"number": 47, "content": "\tvirtual ~StandartMutationFactorStrategy();", "is_target": true}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "\t/**", "is_target": false}, {"number": 50, "content": "\t * gives the varianz of the gens in the set as mutation factor back.", "is_target": false}, {"number": 51, "content": "\t * @param gene (vector<Gen*>) the set of gens", "is_target": false}, {"number": 52, "content": "\t * @return (IValue*) the mutation factor", "is_target": false}]}, "2873": {"lines": [{"number": 49, "content": "\t/**", "is_target": false}, {"number": 50, "content": "\t * gives the varianz of the gens in the set as mutation factor back.", "is_target": false}, {"number": 51, "content": "\t * @param gene (vector<Gen*>) the set of gens", "is_target": false}, {"number": 52, "content": "\t * @return (IValue*) the mutation factor", "is_target": false}, {"number": 53, "content": "\t */", "is_target": false}, {"number": 54, "content": "\tvirtual IValue* calcMutationFactor(const std::vector<Gen*>& gene);", "is_target": true}, {"number": 55, "content": "};", "is_target": false}, {"number": 56, "content": "", "is_target": false}, {"number": 57, "content": "#endif /* STANDARTMUTATIONFACTORSTRATEGY_H_ */", "is_target": false}]}, "2875": {"lines": [{"number": 202, "content": "", "is_target": false}, {"number": 203, "content": "  //the first generation is not a correct generation!!!", "is_target": false}, {"number": 204, "content": "  if(m_generationNumber==-1)", "is_target": false}, {"number": 205, "content": "    return true;", "is_target": false}, {"number": 206, "content": "", "is_target": false}, {"number": 207, "content": "  head.number = m_generationNumber;", "is_target": true}, {"number": 208, "content": "  head.numberIndividuals = static_cast<int>(m_individual.size());", "is_target": false}, {"number": 209, "content": "  head.size = m_size;", "is_target": false}, {"number": 210, "content": "  head.children = m_numChildren;", "is_target": false}, {"number": 211, "content": "  /*head.q1 = m_q1;", "is_target": false}, {"number": 212, "content": "  head.q3 = m_q3;", "is_target": false}]}, "2876": {"lines": [{"number": 204, "content": "  if(m_generationNumber==-1)", "is_target": false}, {"number": 205, "content": "    return true;", "is_target": false}, {"number": 206, "content": "", "is_target": false}, {"number": 207, "content": "  head.number = m_generationNumber;", "is_target": false}, {"number": 208, "content": "  head.numberIndividuals = static_cast<int>(m_individual.size());", "is_target": false}, {"number": 209, "content": "  head.size = m_size;", "is_target": true}, {"number": 210, "content": "  head.children = m_numChildren;", "is_target": false}, {"number": 211, "content": "  /*head.q1 = m_q1;", "is_target": false}, {"number": 212, "content": "  head.q3 = m_q3;", "is_target": false}, {"number": 213, "content": "  head.w1 = m_w1;", "is_target": false}, {"number": 214, "content": "  head.w3 = m_w3;", "is_target": false}]}, "2877": {"lines": [{"number": 205, "content": "    return true;", "is_target": false}, {"number": 206, "content": "", "is_target": false}, {"number": 207, "content": "  head.number = m_generationNumber;", "is_target": false}, {"number": 208, "content": "  head.numberIndividuals = static_cast<int>(m_individual.size());", "is_target": false}, {"number": 209, "content": "  head.size = m_size;", "is_target": false}, {"number": 210, "content": "  head.children = m_numChildren;", "is_target": true}, {"number": 211, "content": "  /*head.q1 = m_q1;", "is_target": false}, {"number": 212, "content": "  head.q3 = m_q3;", "is_target": false}, {"number": 213, "content": "  head.w1 = m_w1;", "is_target": false}, {"number": 214, "content": "  head.w3 = m_w3;", "is_target": false}, {"number": 215, "content": "  head.min = m_min;", "is_target": false}]}, "2878": {"lines": [{"number": 42, "content": "\tValueMutationStrategy(IMutationFactorStrategy* strategy, int mutationProbability);", "is_target": false}, {"number": 43, "content": "", "is_target": false}, {"number": 44, "content": "\t/**", "is_target": false}, {"number": 45, "content": "\t * default destructor", "is_target": false}, {"number": 46, "content": "\t */", "is_target": false}, {"number": 47, "content": "\tvirtual ~ValueMutationStrategy();", "is_target": true}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "\t/**", "is_target": false}, {"number": 50, "content": "\t * mutate a gen", "is_target": false}, {"number": 51, "content": "\t * @param context (GenContext*) the context in which the new gen comes (needed by the factory", "is_target": false}, {"number": 52, "content": "\t * @param individual (Individual*) the individual, which the new gen becomes", "is_target": false}]}, "2879": {"lines": [{"number": 53, "content": "\t * @param oldGen (Gen*) the old gen, which mutate", "is_target": false}, {"number": 54, "content": "\t * @param oldContext (GenContext*) the Context in which the old gen are.", "is_target": false}, {"number": 55, "content": "\t * @param factory (SingletonGenFactory*) the GenFactory which create the new gen.", "is_target": false}, {"number": 56, "content": "\t * @return (Gen*) the new mutated gen", "is_target": false}, {"number": 57, "content": "\t */", "is_target": false}, {"number": 58, "content": "\tvirtual Gen* mutate(GenContext* context, Individual* individual, Gen* oldGen, GenContext* oldContext, const SingletonGenFactory* factory);", "is_target": true}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "\t/**", "is_target": false}, {"number": 61, "content": "\t * gives the Probability of a mutation back.", "is_target": false}, {"number": 62, "content": "\t * @return", "is_target": false}, {"number": 63, "content": "\t */", "is_target": false}]}, "2880": {"lines": [{"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "\t/**", "is_target": false}, {"number": 61, "content": "\t * gives the Probability of a mutation back.", "is_target": false}, {"number": 62, "content": "\t * @return", "is_target": false}, {"number": 63, "content": "\t */", "is_target": false}, {"number": 64, "content": "\tvirtual int getMutationProbability(void);", "is_target": true}, {"number": 65, "content": "", "is_target": false}, {"number": 66, "content": "protected:", "is_target": false}, {"number": 67, "content": "\t/**", "is_target": false}, {"number": 68, "content": "\t * the mutation factor strategy", "is_target": false}, {"number": 69, "content": "\t */", "is_target": false}]}, "2881": {"lines": [{"number": 42, "content": "\t * @param random (RandGen*) random generator which create double values in the range zero to one.", "is_target": false}, {"number": 43, "content": "\t * @param base (double) A parameter for the alg. it move a random value.", "is_target": false}, {"number": 44, "content": "\t * @param factor (double) A parameter which resize the interval of the random values.", "is_target": false}, {"number": 45, "content": "\t * @param epsilon (double) A parameter which dified the interval of the random values.", "is_target": false}, {"number": 46, "content": "\t */", "is_target": false}, {"number": 47, "content": "\tDoubleRandomStrategy(RandGen* random, double base=0.0, double factor=1.0, double epsilon=0.0);", "is_target": true}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "\t/**", "is_target": false}, {"number": 50, "content": "\t * default destructor", "is_target": false}, {"number": 51, "content": "\t */", "is_target": false}, {"number": 52, "content": "\tvirtual ~DoubleRandomStrategy();", "is_target": false}]}, "2882": {"lines": [{"number": 47, "content": "\tDoubleRandomStrategy(RandGen* random, double base=0.0, double factor=1.0, double epsilon=0.0);", "is_target": false}, {"number": 48, "content": "", "is_target": false}, {"number": 49, "content": "\t/**", "is_target": false}, {"number": 50, "content": "\t * default destructor", "is_target": false}, {"number": 51, "content": "\t */", "is_target": false}, {"number": 52, "content": "\tvirtual ~DoubleRandomStrategy();", "is_target": true}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "\t/**", "is_target": false}, {"number": 55, "content": "\t * implementation for the interface. It create the random double value and give it as a IValue back (TemplateValue with type double)", "is_target": false}, {"number": 56, "content": "\t * @return (IValue*) the random value.", "is_target": false}, {"number": 57, "content": "\t */", "is_target": false}]}, "2883": {"lines": [{"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "\t/**", "is_target": false}, {"number": 55, "content": "\t * implementation for the interface. It create the random double value and give it as a IValue back (TemplateValue with type double)", "is_target": false}, {"number": 56, "content": "\t * @return (IValue*) the random value.", "is_target": false}, {"number": 57, "content": "\t */", "is_target": false}, {"number": 58, "content": "\tvirtual IValue* getRandomValue(void);", "is_target": true}, {"number": 59, "content": "", "is_target": false}, {"number": 60, "content": "protected:", "is_target": false}, {"number": 61, "content": "\t/**", "is_target": false}, {"number": 62, "content": "\t * the random generator", "is_target": false}, {"number": 63, "content": "\t */", "is_target": false}]}, "2884": {"lines": [{"number": 144, "content": "  head.mutated = m_mutated;", "is_target": false}, {"number": 145, "content": "  head.fitnessCalculated = m_fitnessCalculated;", "is_target": false}, {"number": 146, "content": "  head.fitness = m_fitness;", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "  for(unsigned int x=0;x<sizeof(RESTORE_GA_INDIVIDUAL);++x) {", "is_target": false}, {"number": 149, "content": "    fprintf(f,\"%c\",head.buffer[x]);", "is_target": true}, {"number": 150, "content": "  }", "is_target": false}, {"number": 151, "content": "", "is_target": false}, {"number": 152, "content": "  for(int y=0;y<head.numberGenes;++y) {", "is_target": false}, {"number": 153, "content": "    integer.value = m_gene[y]->getID();", "is_target": false}, {"number": 154, "content": "    for(unsigned e=0;e<sizeof(RESTORE_GA_TEMPLATE<int>);++e) {", "is_target": false}]}, "2885": {"lines": [{"number": 189, "content": "", "is_target": false}, {"number": 190, "content": "  return true;", "is_target": false}, {"number": 191, "content": "}", "is_target": false}, {"number": 192, "content": "", "is_target": false}, {"number": 193, "content": "bool Individual::restoreParent(int numberIndividuals,std::map<int,RESTORE_GA_INDIVIDUAL*>& individualSet) {", "is_target": false}, {"number": 194, "content": "  Individual *p1,*p2,*ind;", "is_target": true}, {"number": 195, "content": "  RESTORE_GA_INDIVIDUAL* head;", "is_target": false}, {"number": 196, "content": "", "is_target": false}, {"number": 197, "content": "  for(int x=0;x<numberIndividuals;++x) {", "is_target": false}, {"number": 198, "content": "    head = individualSet[x];", "is_target": false}, {"number": 199, "content": "    ind = SingletonGenEngine::getInstance()->getIndividual(head->ID);", "is_target": false}]}, "2886": {"lines": [{"number": 39, "content": "\tEliteSelectStrategy();", "is_target": false}, {"number": 40, "content": "", "is_target": false}, {"number": 41, "content": "\t/**", "is_target": false}, {"number": 42, "content": "\t * default destructor", "is_target": false}, {"number": 43, "content": "\t */", "is_target": false}, {"number": 44, "content": "\tvirtual ~EliteSelectStrategy();", "is_target": true}, {"number": 45, "content": "", "is_target": false}, {"number": 46, "content": "\t/**", "is_target": false}, {"number": 47, "content": "\t * select the individual in the old generation which should be in the new generation (only the best).", "is_target": false}, {"number": 48, "content": "\t * @param oldGeneration (Generation*) the old generation", "is_target": false}, {"number": 49, "content": "\t * @param newGeneration (Generation*) the new generation", "is_target": false}]}, "2887": {"lines": [{"number": 46, "content": "\t/**", "is_target": false}, {"number": 47, "content": "\t * select the individual in the old generation which should be in the new generation (only the best).", "is_target": false}, {"number": 48, "content": "\t * @param oldGeneration (Generation*) the old generation", "is_target": false}, {"number": 49, "content": "\t * @param newGeneration (Generation*) the new generation", "is_target": false}, {"number": 50, "content": "\t */", "is_target": false}, {"number": 51, "content": "\tvirtual void select(Generation* oldGeneration, Generation* newGeneration);", "is_target": true}, {"number": 52, "content": "};", "is_target": false}, {"number": 53, "content": "", "is_target": false}, {"number": 54, "content": "#endif /* ELITESELECTSTRATEGY_H_ */", "is_target": false}]}, "2888": {"lines": [{"number": 160, "content": "}", "is_target": false}, {"number": 161, "content": "", "is_target": false}, {"number": 162, "content": "bool Individual::restore(int numberIndividuals,std::map<int,std::string>& nameSet,std::map<int,RESTORE_GA_INDIVIDUAL*>& individualSet, std::map<int,std::vector<int> >& linkSet, std::vector<Individual*>& storage) {", "is_target": false}, {"number": 163, "content": "  int x,y;", "is_target": false}, {"number": 164, "content": "  Individual* individual;", "is_target": false}, {"number": 165, "content": "  RESTORE_GA_INDIVIDUAL* head;", "is_target": true}, {"number": 166, "content": "", "is_target": false}, {"number": 167, "content": "  for(x=0;x<numberIndividuals;++x) {", "is_target": false}, {"number": 168, "content": "    head = individualSet[x];", "is_target": false}, {"number": 169, "content": "", "is_target": false}, {"number": 170, "content": "    //create individual", "is_target": false}]}, "2889": {"lines": [{"number": 190, "content": "  return true;", "is_target": false}, {"number": 191, "content": "}", "is_target": false}, {"number": 192, "content": "", "is_target": false}, {"number": 193, "content": "bool Individual::restoreParent(int numberIndividuals,std::map<int,RESTORE_GA_INDIVIDUAL*>& individualSet) {", "is_target": false}, {"number": 194, "content": "  Individual *p1,*p2,*ind;", "is_target": false}, {"number": 195, "content": "  RESTORE_GA_INDIVIDUAL* head;", "is_target": true}, {"number": 196, "content": "", "is_target": false}, {"number": 197, "content": "  for(int x=0;x<numberIndividuals;++x) {", "is_target": false}, {"number": 198, "content": "    head = individualSet[x];", "is_target": false}, {"number": 199, "content": "    ind = SingletonGenEngine::getInstance()->getIndividual(head->ID);", "is_target": false}, {"number": 200, "content": "", "is_target": false}]}, "2890": {"lines": [{"number": 126, "content": "  for(unsigned d=0;d<sizeof(RESTORE_GA_TEMPLATE<int>);++d) {", "is_target": false}, {"number": 127, "content": "    fprintf(f,\"%c\",integer.buffer[d]);", "is_target": false}, {"number": 128, "content": "  }", "is_target": false}, {"number": 129, "content": "  fprintf(f,\"%s\",m_name.c_str());", "is_target": false}, {"number": 130, "content": "", "is_target": false}, {"number": 131, "content": "  head.ID = m_ID;", "is_target": true}, {"number": 132, "content": "  head.numberGenes = static_cast<int>(m_gene.size());", "is_target": false}, {"number": 133, "content": "", "is_target": false}, {"number": 134, "content": "  if(m_parent1==nullptr)", "is_target": false}, {"number": 135, "content": "    head.parent1 = -1;", "is_target": false}, {"number": 136, "content": "  else", "is_target": false}]}, "2891": {"lines": [{"number": 130, "content": "", "is_target": false}, {"number": 131, "content": "  head.ID = m_ID;", "is_target": false}, {"number": 132, "content": "  head.numberGenes = static_cast<int>(m_gene.size());", "is_target": false}, {"number": 133, "content": "", "is_target": false}, {"number": 134, "content": "  if(m_parent1==nullptr)", "is_target": false}, {"number": 135, "content": "    head.parent1 = -1;", "is_target": true}, {"number": 136, "content": "  else", "is_target": false}, {"number": 137, "content": "    head.parent1 = m_parent1->getID();", "is_target": false}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "  if(m_parent2==nullptr)", "is_target": false}, {"number": 140, "content": "    head.parent2 = -1;", "is_target": false}]}, "2892": {"lines": [{"number": 132, "content": "  head.numberGenes = static_cast<int>(m_gene.size());", "is_target": false}, {"number": 133, "content": "", "is_target": false}, {"number": 134, "content": "  if(m_parent1==nullptr)", "is_target": false}, {"number": 135, "content": "    head.parent1 = -1;", "is_target": false}, {"number": 136, "content": "  else", "is_target": false}, {"number": 137, "content": "    head.parent1 = m_parent1->getID();", "is_target": true}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "  if(m_parent2==nullptr)", "is_target": false}, {"number": 140, "content": "    head.parent2 = -1;", "is_target": false}, {"number": 141, "content": "  else", "is_target": false}, {"number": 142, "content": "    head.parent2 = m_parent2->getID();", "is_target": false}]}, "2893": {"lines": [{"number": 135, "content": "    head.parent1 = -1;", "is_target": false}, {"number": 136, "content": "  else", "is_target": false}, {"number": 137, "content": "    head.parent1 = m_parent1->getID();", "is_target": false}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "  if(m_parent2==nullptr)", "is_target": false}, {"number": 140, "content": "    head.parent2 = -1;", "is_target": true}, {"number": 141, "content": "  else", "is_target": false}, {"number": 142, "content": "    head.parent2 = m_parent2->getID();", "is_target": false}, {"number": 143, "content": "", "is_target": false}, {"number": 144, "content": "  head.mutated = m_mutated;", "is_target": false}, {"number": 145, "content": "  head.fitnessCalculated = m_fitnessCalculated;", "is_target": false}]}, "2894": {"lines": [{"number": 137, "content": "    head.parent1 = m_parent1->getID();", "is_target": false}, {"number": 138, "content": "", "is_target": false}, {"number": 139, "content": "  if(m_parent2==nullptr)", "is_target": false}, {"number": 140, "content": "    head.parent2 = -1;", "is_target": false}, {"number": 141, "content": "  else", "is_target": false}, {"number": 142, "content": "    head.parent2 = m_parent2->getID();", "is_target": true}, {"number": 143, "content": "", "is_target": false}, {"number": 144, "content": "  head.mutated = m_mutated;", "is_target": false}, {"number": 145, "content": "  head.fitnessCalculated = m_fitnessCalculated;", "is_target": false}, {"number": 146, "content": "  head.fitness = m_fitness;", "is_target": false}, {"number": 147, "content": "", "is_target": false}]}, "2895": {"lines": [{"number": 139, "content": "  if(m_parent2==nullptr)", "is_target": false}, {"number": 140, "content": "    head.parent2 = -1;", "is_target": false}, {"number": 141, "content": "  else", "is_target": false}, {"number": 142, "content": "    head.parent2 = m_parent2->getID();", "is_target": false}, {"number": 143, "content": "", "is_target": false}, {"number": 144, "content": "  head.mutated = m_mutated;", "is_target": true}, {"number": 145, "content": "  head.fitnessCalculated = m_fitnessCalculated;", "is_target": false}, {"number": 146, "content": "  head.fitness = m_fitness;", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "  for(unsigned int x=0;x<sizeof(RESTORE_GA_INDIVIDUAL);++x) {", "is_target": false}, {"number": 149, "content": "    fprintf(f,\"%c\",head.buffer[x]);", "is_target": false}]}, "2896": {"lines": [{"number": 140, "content": "    head.parent2 = -1;", "is_target": false}, {"number": 141, "content": "  else", "is_target": false}, {"number": 142, "content": "    head.parent2 = m_parent2->getID();", "is_target": false}, {"number": 143, "content": "", "is_target": false}, {"number": 144, "content": "  head.mutated = m_mutated;", "is_target": false}, {"number": 145, "content": "  head.fitnessCalculated = m_fitnessCalculated;", "is_target": true}, {"number": 146, "content": "  head.fitness = m_fitness;", "is_target": false}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "  for(unsigned int x=0;x<sizeof(RESTORE_GA_INDIVIDUAL);++x) {", "is_target": false}, {"number": 149, "content": "    fprintf(f,\"%c\",head.buffer[x]);", "is_target": false}, {"number": 150, "content": "  }", "is_target": false}]}, "2897": {"lines": [{"number": 141, "content": "  else", "is_target": false}, {"number": 142, "content": "    head.parent2 = m_parent2->getID();", "is_target": false}, {"number": 143, "content": "", "is_target": false}, {"number": 144, "content": "  head.mutated = m_mutated;", "is_target": false}, {"number": 145, "content": "  head.fitnessCalculated = m_fitnessCalculated;", "is_target": false}, {"number": 146, "content": "  head.fitness = m_fitness;", "is_target": true}, {"number": 147, "content": "", "is_target": false}, {"number": 148, "content": "  for(unsigned int x=0;x<sizeof(RESTORE_GA_INDIVIDUAL);++x) {", "is_target": false}, {"number": 149, "content": "    fprintf(f,\"%c\",head.buffer[x]);", "is_target": false}, {"number": 150, "content": "  }", "is_target": false}, {"number": 151, "content": "", "is_target": false}]}, "2898": {"lines": [{"number": 43, "content": "\texplicit TournamentSelectStrategy(const RandGen* random);", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "\t/**", "is_target": false}, {"number": 46, "content": "\t * default destructor", "is_target": false}, {"number": 47, "content": "\t */", "is_target": false}, {"number": 48, "content": "\tvirtual ~TournamentSelectStrategy();", "is_target": true}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "\t/**", "is_target": false}, {"number": 51, "content": "\t * implementation for the interface ISelectStrategy", "is_target": false}, {"number": 52, "content": "\t * @param oldGeneration (Generation*) the old generation", "is_target": false}, {"number": 53, "content": "\t * @param newGeneration (Generation*) the next generation", "is_target": false}]}, "2900": {"lines": [{"number": 50, "content": "        //int size = newGeneration->getSize() - newGeneration->getCurrentSize();", "is_target": false}, {"number": 51, "content": "        int num = oldGeneration->getCurrentSize();", "is_target": false}, {"number": 52, "content": "        int kill = num - oldGeneration->getSize();", "is_target": false}, {"number": 53, "content": "        Individual* ind1;                                                                        // the 2 individual which are tested", "is_target": false}, {"number": 54, "content": "        Individual* ind2;", "is_target": false}, {"number": 55, "content": "        int r1,r2;", "is_target": true}, {"number": 56, "content": "        //std::map<int,Individual*> storage;", "is_target": false}, {"number": 57, "content": "        //std::map<int,Individual*>::iterator iter;", "is_target": false}, {"number": 58, "content": "        std::vector<Individual*> storage;                                        //list with all living individuals", "is_target": false}, {"number": 59, "content": "        std::vector<Individual*>::iterator iter;                        //iterator for the list", "is_target": false}, {"number": 60, "content": "        double f1,f2;", "is_target": false}]}, "2901": {"lines": [{"number": 50, "content": "        //int size = newGeneration->getSize() - newGeneration->getCurrentSize();", "is_target": false}, {"number": 51, "content": "        int num = oldGeneration->getCurrentSize();", "is_target": false}, {"number": 52, "content": "        int kill = num - oldGeneration->getSize();", "is_target": false}, {"number": 53, "content": "        Individual* ind1;                                                                        // the 2 individual which are tested", "is_target": false}, {"number": 54, "content": "        Individual* ind2;", "is_target": false}, {"number": 55, "content": "        int r1,r2;", "is_target": true}, {"number": 56, "content": "        //std::map<int,Individual*> storage;", "is_target": false}, {"number": 57, "content": "        //std::map<int,Individual*>::iterator iter;", "is_target": false}, {"number": 58, "content": "        std::vector<Individual*> storage;                                        //list with all living individuals", "is_target": false}, {"number": 59, "content": "        std::vector<Individual*>::iterator iter;                        //iterator for the list", "is_target": false}, {"number": 60, "content": "        double f1,f2;", "is_target": false}]}, "2902": {"lines": [{"number": 55, "content": "        int r1,r2;", "is_target": false}, {"number": 56, "content": "        //std::map<int,Individual*> storage;", "is_target": false}, {"number": 57, "content": "        //std::map<int,Individual*>::iterator iter;", "is_target": false}, {"number": 58, "content": "        std::vector<Individual*> storage;                                        //list with all living individuals", "is_target": false}, {"number": 59, "content": "        std::vector<Individual*>::iterator iter;                        //iterator for the list", "is_target": false}, {"number": 60, "content": "        double f1,f2;", "is_target": true}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "        for(int y=0;y<num;++y) {                                                        //take all individual in the list.", "is_target": false}, {"number": 63, "content": "                storage.push_back(oldGeneration->getIndividual(y));", "is_target": false}, {"number": 64, "content": "        }", "is_target": false}, {"number": 65, "content": "", "is_target": false}]}, "2903": {"lines": [{"number": 55, "content": "        int r1,r2;", "is_target": false}, {"number": 56, "content": "        //std::map<int,Individual*> storage;", "is_target": false}, {"number": 57, "content": "        //std::map<int,Individual*>::iterator iter;", "is_target": false}, {"number": 58, "content": "        std::vector<Individual*> storage;                                        //list with all living individuals", "is_target": false}, {"number": 59, "content": "        std::vector<Individual*>::iterator iter;                        //iterator for the list", "is_target": false}, {"number": 60, "content": "        double f1,f2;", "is_target": true}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "        for(int y=0;y<num;++y) {                                                        //take all individual in the list.", "is_target": false}, {"number": 63, "content": "                storage.push_back(oldGeneration->getIndividual(y));", "is_target": false}, {"number": 64, "content": "        }", "is_target": false}, {"number": 65, "content": "", "is_target": false}]}, "2904": {"lines": [{"number": 43, "content": "\texplicit RandomSelectStrategy(const RandGen* random);", "is_target": false}, {"number": 44, "content": "", "is_target": false}, {"number": 45, "content": "\t/**", "is_target": false}, {"number": 46, "content": "\t * default destructor", "is_target": false}, {"number": 47, "content": "\t */", "is_target": false}, {"number": 48, "content": "\tvirtual ~RandomSelectStrategy();", "is_target": true}, {"number": 49, "content": "", "is_target": false}, {"number": 50, "content": "\t/**", "is_target": false}, {"number": 51, "content": "\t * implementation for the interface ISelectStrategy", "is_target": false}, {"number": 52, "content": "\t * @param oldGeneration (Generation*) the old generation", "is_target": false}, {"number": 53, "content": "\t * @param newGeneration (Generation*) the next generation", "is_target": false}]}, "2905": {"lines": [{"number": 54, "content": "        int num = oldGeneration->getCurrentSize();                                                                                //number of individual", "is_target": false}, {"number": 55, "content": "        int kill = num - oldGeneration->getSize();                                                                                //the kill rate", "is_target": false}, {"number": 56, "content": "        std::vector<Individual*>::iterator iter;                                                                                //iterator for the list", "is_target": false}, {"number": 57, "content": "        int test=0;                                                                                                                                                //make sure that the function terminate...", "is_target": false}, {"number": 58, "content": "        double range;", "is_target": false}, {"number": 59, "content": "        int r1;", "is_target": true}, {"number": 60, "content": "", "is_target": false}, {"number": 61, "content": "        for(int y=0;y<num;++y) {                                                                                                //insert the individual of the old generation in the living list", "is_target": false}, {"number": 62, "content": "                list.push_back(oldGeneration->getIndividual(y));", "is_target": false}, {"number": 63, "content": "        }", "is_target": false}, {"number": 64, "content": "", "is_target": false}]}, "2906": {"lines": [{"number": 57, "content": "        SingletonGenEngine::getInstance()->addGen(gen);", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "        return gen;", "is_target": false}, {"number": 60, "content": "}", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "Gen* SingletonGenFactory::createGen(GenContext* context, Individual* individual, GenPrototype* prototype, GenContext* oldContext, Individual* oldIndividual, Gen* oldGen, bool mutate)const {", "is_target": true}, {"number": 63, "content": "        if(mutate) {", "is_target": false}, {"number": 64, "content": "                return prototype->mutate(context, individual, oldGen, oldContext);                        //mutate", "is_target": false}, {"number": 65, "content": "        }", "is_target": false}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "", "is_target": false}]}, "2907": {"lines": [{"number": 57, "content": "        SingletonGenEngine::getInstance()->addGen(gen);", "is_target": false}, {"number": 58, "content": "", "is_target": false}, {"number": 59, "content": "        return gen;", "is_target": false}, {"number": 60, "content": "}", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "Gen* SingletonGenFactory::createGen(GenContext* context, Individual* individual, GenPrototype* prototype, GenContext* oldContext, Individual* oldIndividual, Gen* oldGen, bool mutate)const {", "is_target": true}, {"number": 63, "content": "        if(mutate) {", "is_target": false}, {"number": 64, "content": "                return prototype->mutate(context, individual, oldGen, oldContext);                        //mutate", "is_target": false}, {"number": 65, "content": "        }", "is_target": false}, {"number": 66, "content": "", "is_target": false}, {"number": 67, "content": "", "is_target": false}]}, "2908": {"lines": [{"number": 78, "content": "        SingletonGenEngine::getInstance()->addGen(gen);", "is_target": false}, {"number": 79, "content": "", "is_target": false}, {"number": 80, "content": "        return gen;", "is_target": false}, {"number": 81, "content": "}", "is_target": false}, {"number": 82, "content": "", "is_target": false}, {"number": 83, "content": "Gen* SingletonGenFactory::createGen(GenContext* context, Individual* individual, GenPrototype* prototype, const IValue* value) {", "is_target": true}, {"number": 84, "content": "        Gen* gen = new Gen(prototype,m_number);", "is_target": false}, {"number": 85, "content": "", "is_target": false}, {"number": 86, "content": "        ++m_number;", "is_target": false}, {"number": 87, "content": "", "is_target": false}, {"number": 88, "content": "        gen->setValue(const_cast<IValue*>(value));", "is_target": false}]}, "2909": {"lines": [{"number": 163, "content": "void SingletonGenAlgAPI::update(double factor) {", "is_target": false}, {"number": 164, "content": "        SingletonGenEngine::getInstance()->update(factor);", "is_target": false}, {"number": 165, "content": "}", "is_target": false}, {"number": 166, "content": "", "is_target": false}, {"number": 167, "content": "void SingletonGenAlgAPI::prepare(int startSize, int numChildren, RandGen* random, bool withUpdate) {", "is_target": false}, {"number": 168, "content": "        SingletonGenEngine::getInstance()->prepare(startSize, numChildren, (InspectableProxy*&)m_generation, (InspectableProxy*&)m_inspectable, random, m_plotEngine, m_plotEngineGenContext, withUpdate);", "is_target": true}, {"number": 169, "content": "}", "is_target": false}, {"number": 170, "content": "", "is_target": false}, {"number": 171, "content": "void SingletonGenAlgAPI::prepare() {", "is_target": false}, {"number": 172, "content": "        Generation* generation = SingletonGenEngine::getInstance()->getActualGeneration();", "is_target": false}, {"number": 173, "content": "        Generation* next;", "is_target": false}]}, "2910": {"lines": [{"number": 185, "content": "                next->addIndividual(*i);", "is_target": false}, {"number": 186, "content": "        }", "is_target": false}, {"number": 187, "content": "}", "is_target": false}, {"number": 188, "content": "", "is_target": false}, {"number": 189, "content": "void SingletonGenAlgAPI::measureStep(double time) {", "is_target": false}, {"number": 190, "content": "        SingletonGenEngine::getInstance()->measureStep(time, (InspectableProxy*&)m_generation, (InspectableProxy*&)m_inspectable, m_plotEngine, m_plotEngineGenContext);", "is_target": true}, {"number": 191, "content": "}", "is_target": false}, {"number": 192, "content": "", "is_target": false}, {"number": 193, "content": "void SingletonGenAlgAPI::runGenAlg(int startSize, int numChildren, int numGeneration, const RandGen* random) {", "is_target": false}, {"number": 194, "content": "        SingletonGenEngine::getInstance()->runGenAlg(startSize,numChildren,numGeneration,const_cast<RandGen*>(random),m_plotEngine,m_plotEngineGenContext);", "is_target": false}, {"number": 195, "content": "}", "is_target": false}]}, "2911": {"lines": [{"number": 237, "content": "bool SingletonGenAlgAPI::store(FILE* f) const {", "is_target": false}, {"number": 238, "content": "  return SingletonGenEngine::getInstance()->store(f);", "is_target": false}, {"number": 239, "content": "}", "is_target": false}, {"number": 240, "content": "", "is_target": false}, {"number": 241, "content": "bool SingletonGenAlgAPI::restore(FILE* f) {", "is_target": false}, {"number": 242, "content": "  return SingletonGenEngine::getInstance()->restore(f, (InspectableProxy*&)m_generation, (InspectableProxy*&)m_inspectable, m_plotEngine, m_plotEngineGenContext);", "is_target": true}, {"number": 243, "content": "}", "is_target": false}]}, "2912": {"lines": [{"number": 207, "content": "                m_plotEngine = new PlotOptionEngine(plotOption);", "is_target": false}, {"number": 208, "content": "", "is_target": false}, {"number": 209, "content": "        m_plotEngine->addPlotOption(plotOption);", "is_target": false}, {"number": 210, "content": "}", "is_target": false}, {"number": 211, "content": "", "is_target": false}, {"number": 212, "content": "void SingletonGenAlgAPI::enableMeasure(std::list<PlotOption>& plotOptions) {", "is_target": true}, {"number": 213, "content": "        if(m_plotEngine== nullptr)", "is_target": false}, {"number": 214, "content": "                m_plotEngine = new PlotOptionEngine(plotOptions);", "is_target": false}, {"number": 215, "content": "", "is_target": false}, {"number": 216, "content": "        FOREACH(std::list<PlotOption>, plotOptions, i) {", "is_target": false}, {"number": 217, "content": "                m_plotEngine->addPlotOption(*i);", "is_target": false}]}, "2913": {"lines": [{"number": 223, "content": "                m_plotEngineGenContext = new PlotOptionEngine(plotOption);", "is_target": false}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "        m_plotEngineGenContext->addPlotOption(plotOption);", "is_target": false}, {"number": 226, "content": "}", "is_target": false}, {"number": 227, "content": "", "is_target": false}, {"number": 228, "content": "void SingletonGenAlgAPI::enableGenContextMeasure(std::list<PlotOption>& plotOptions) {", "is_target": true}, {"number": 229, "content": "        if(m_plotEngineGenContext== nullptr)", "is_target": false}, {"number": 230, "content": "                m_plotEngineGenContext = new PlotOptionEngine(plotOptions);", "is_target": false}, {"number": 231, "content": "", "is_target": false}, {"number": 232, "content": "        FOREACH(std::list<PlotOption>, plotOptions, i) {", "is_target": false}, {"number": 233, "content": "                m_plotEngineGenContext->addPlotOption(*i);", "is_target": false}]}, "2914": {"lines": [{"number": 167, "content": "void SingletonGenAlgAPI::prepare(int startSize, int numChildren, RandGen* random, bool withUpdate) {", "is_target": false}, {"number": 168, "content": "        SingletonGenEngine::getInstance()->prepare(startSize, numChildren, (InspectableProxy*&)m_generation, (InspectableProxy*&)m_inspectable, random, m_plotEngine, m_plotEngineGenContext, withUpdate);", "is_target": false}, {"number": 169, "content": "}", "is_target": false}, {"number": 170, "content": "", "is_target": false}, {"number": 171, "content": "void SingletonGenAlgAPI::prepare() {", "is_target": false}, {"number": 172, "content": "        Generation* generation = SingletonGenEngine::getInstance()->getActualGeneration();", "is_target": true}, {"number": 173, "content": "        Generation* next;", "is_target": false}, {"number": 174, "content": "        const std::vector<Individual*>& refIndividual = generation->getAllIndividual();", "is_target": false}, {"number": 175, "content": "", "is_target": false}, {"number": 176, "content": "        // create next generation", "is_target": false}, {"number": 177, "content": "        SingletonGenEngine::getInstance()->prepareNextGeneration(", "is_target": false}]}, "2916": {"lines": [{"number": 46, "content": "", "is_target": false}, {"number": 47, "content": "", "is_target": false}, {"number": 48, "content": "  /**", "is_target": false}, {"number": 49, "content": "   * default destructor", "is_target": false}, {"number": 50, "content": "   */", "is_target": false}, {"number": 51, "content": "  virtual ~IValue();", "is_target": true}, {"number": 52, "content": "", "is_target": false}, {"number": 53, "content": "  /**", "is_target": false}, {"number": 54, "content": "   * the mul. operator. Dosn't change this class!!!", "is_target": false}, {"number": 55, "content": "   * @param (const IValue&) the other part of the operation", "is_target": false}, {"number": 56, "content": "   * @return (IValue*) the result", "is_target": false}]}, "2917": {"lines": [{"number": 65, "content": "Individual* SingletonIndividualFactory::createIndividual(Individual* individual1, Individual* individual2, RandGen* random, std::string name)const {", "is_target": false}, {"number": 66, "content": "        Individual* newInd = new Individual(name,m_number++,individual1,individual2);", "is_target": false}, {"number": 67, "content": "        GenPrototype* prototype;", "is_target": false}, {"number": 68, "content": "        std::vector<GenPrototype*> storage;", "is_target": false}, {"number": 69, "content": "        Gen* gen;", "is_target": false}, {"number": 70, "content": "        int r1,r2;", "is_target": true}, {"number": 71, "content": "        Individual* ind;", "is_target": false}, {"number": 72, "content": "        Generation* generation = SingletonGenEngine::getInstance()->getActualGeneration();", "is_target": false}, {"number": 73, "content": "        Generation* oldGeneration = SingletonGenEngine::getInstance()->getGeneration(SingletonGenEngine::getInstance()->getActualGenerationNumber()-1);", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "        storage = SingletonGenEngine::getInstance()->getSetOfGenPrototyps();", "is_target": false}]}, "2918": {"lines": [{"number": 65, "content": "Individual* SingletonIndividualFactory::createIndividual(Individual* individual1, Individual* individual2, RandGen* random, std::string name)const {", "is_target": false}, {"number": 66, "content": "        Individual* newInd = new Individual(name,m_number++,individual1,individual2);", "is_target": false}, {"number": 67, "content": "        GenPrototype* prototype;", "is_target": false}, {"number": 68, "content": "        std::vector<GenPrototype*> storage;", "is_target": false}, {"number": 69, "content": "        Gen* gen;", "is_target": false}, {"number": 70, "content": "        int r1,r2;", "is_target": true}, {"number": 71, "content": "        Individual* ind;", "is_target": false}, {"number": 72, "content": "        Generation* generation = SingletonGenEngine::getInstance()->getActualGeneration();", "is_target": false}, {"number": 73, "content": "        Generation* oldGeneration = SingletonGenEngine::getInstance()->getGeneration(SingletonGenEngine::getInstance()->getActualGenerationNumber()-1);", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "        storage = SingletonGenEngine::getInstance()->getSetOfGenPrototyps();", "is_target": false}]}, "2919": {"lines": [{"number": 60, "content": "        SingletonGenEngine::getInstance()->addIndividual(ind);", "is_target": false}, {"number": 61, "content": "", "is_target": false}, {"number": 62, "content": "        return ind;", "is_target": false}, {"number": 63, "content": "}", "is_target": false}, {"number": 64, "content": "", "is_target": false}, {"number": 65, "content": "Individual* SingletonIndividualFactory::createIndividual(Individual* individual1, Individual* individual2, RandGen* random, std::string name)const {", "is_target": true}, {"number": 66, "content": "        Individual* newInd = new Individual(name,m_number++,individual1,individual2);", "is_target": false}, {"number": 67, "content": "        GenPrototype* prototype;", "is_target": false}, {"number": 68, "content": "        std::vector<GenPrototype*> storage;", "is_target": false}, {"number": 69, "content": "        Gen* gen;", "is_target": false}, {"number": 70, "content": "        int r1,r2;", "is_target": false}]}, "2920": {"lines": [{"number": 67, "content": "        GenPrototype* prototype;", "is_target": false}, {"number": 68, "content": "        std::vector<GenPrototype*> storage;", "is_target": false}, {"number": 69, "content": "        Gen* gen;", "is_target": false}, {"number": 70, "content": "        int r1,r2;", "is_target": false}, {"number": 71, "content": "        Individual* ind;", "is_target": false}, {"number": 72, "content": "        Generation* generation = SingletonGenEngine::getInstance()->getActualGeneration();", "is_target": true}, {"number": 73, "content": "        Generation* oldGeneration = SingletonGenEngine::getInstance()->getGeneration(SingletonGenEngine::getInstance()->getActualGenerationNumber()-1);", "is_target": false}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "        storage = SingletonGenEngine::getInstance()->getSetOfGenPrototyps();", "is_target": false}, {"number": 76, "content": "        int num = storage.size();", "is_target": false}, {"number": 77, "content": "        for(int x=0;x<num;++x) {                                                        //take randomized the gens from ind 1 or 2.", "is_target": false}]}, "2921": {"lines": [{"number": 68, "content": "        std::vector<GenPrototype*> storage;", "is_target": false}, {"number": 69, "content": "        Gen* gen;", "is_target": false}, {"number": 70, "content": "        int r1,r2;", "is_target": false}, {"number": 71, "content": "        Individual* ind;", "is_target": false}, {"number": 72, "content": "        Generation* generation = SingletonGenEngine::getInstance()->getActualGeneration();", "is_target": false}, {"number": 73, "content": "        Generation* oldGeneration = SingletonGenEngine::getInstance()->getGeneration(SingletonGenEngine::getInstance()->getActualGenerationNumber()-1);", "is_target": true}, {"number": 74, "content": "", "is_target": false}, {"number": 75, "content": "        storage = SingletonGenEngine::getInstance()->getSetOfGenPrototyps();", "is_target": false}, {"number": 76, "content": "        int num = storage.size();", "is_target": false}, {"number": 77, "content": "        for(int x=0;x<num;++x) {                                                        //take randomized the gens from ind 1 or 2.", "is_target": false}, {"number": 78, "content": "                prototype = storage[x];", "is_target": false}]}, "2922": {"lines": [{"number": 36, "content": "class TemplateTaskedGaSimulationFitnessStrategy;", "is_target": false}, {"number": 37, "content": "class TemplateTaskedGaSimulationFitnessStrategy : public IFitnessStrategy {", "is_target": false}, {"number": 38, "content": "class TemplateTaskedGaSimulationFitnessStrategy : public ISelectStrategy {", "is_target": false}, {"number": 39, "content": "class TemplateTaskedGaSimulationFitnessStrategy : public IGenerationSizeStrategy {", "is_target": false}, {"number": 40, "content": "class TemplateTaskedGaSimulationFitnessStrategy : public IMutationFactorStrategy {", "is_target": false}, {"number": 41, "content": "class TemplateTaskedGaSimulationFitnessStrategy : public IMutationStrategy {", "is_target": true}, {"number": 42, "content": "class TemplateTaskedGaSimulationFitnessStrategy : public IRandomStrategy {", "is_target": false}, {"number": 43, "content": "public:", "is_target": false}, {"number": 44, "content": "\t/**", "is_target": false}, {"number": 45, "content": "\t * default constructor", "is_target": false}, {"number": 46, "content": "\t */", "is_target": false}]}, "2923": {"lines": [{"number": 69, "content": "   * constructor", "is_target": false}, {"number": 70, "content": "   * needs the value and a name (for IValue -> is default implemented as __PLACEHOLDER_3__)", "is_target": false}, {"number": 71, "content": "   * @param value (Typ) the value of this IValue", "is_target": false}, {"number": 72, "content": "   * @param name (string) the name", "is_target": false}, {"number": 73, "content": "   */", "is_target": false}, {"number": 74, "content": "  TemplateValue(Typ value, std::string name = \"templateValue\") : IValue(name), m_value(value)  {}", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "  /**", "is_target": false}, {"number": 77, "content": "   * default destructor", "is_target": false}, {"number": 78, "content": "   */", "is_target": false}, {"number": 79, "content": "  virtual ~TemplateValue()  {}", "is_target": false}]}, "2924": {"lines": [{"number": 74, "content": "  TemplateValue(Typ value, std::string name = \"templateValue\") : IValue(name), m_value(value)  {}", "is_target": false}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "  /**", "is_target": false}, {"number": 77, "content": "   * default destructor", "is_target": false}, {"number": 78, "content": "   */", "is_target": false}, {"number": 79, "content": "  virtual ~TemplateValue()  {}", "is_target": true}, {"number": 80, "content": "", "is_target": false}, {"number": 81, "content": "  /**", "is_target": false}, {"number": 82, "content": "   * this function can be used to read the standard data type.", "is_target": false}, {"number": 83, "content": "   * @return (Typ) the value", "is_target": false}, {"number": 84, "content": "   */", "is_target": false}]}, "2925": {"lines": [{"number": 69, "content": "   * constructor", "is_target": false}, {"number": 70, "content": "   * needs the value and a name (for IValue -> is default implemented as __PLACEHOLDER_3__)", "is_target": false}, {"number": 71, "content": "   * @param value (Typ) the value of this IValue", "is_target": false}, {"number": 72, "content": "   * @param name (string) the name", "is_target": false}, {"number": 73, "content": "   */", "is_target": false}, {"number": 74, "content": "  TemplateValue(Typ value, std::string name = \"templateValue\") : IValue(name), m_value(value)  {}", "is_target": true}, {"number": 75, "content": "", "is_target": false}, {"number": 76, "content": "  /**", "is_target": false}, {"number": 77, "content": "   * default destructor", "is_target": false}, {"number": 78, "content": "   */", "is_target": false}, {"number": 79, "content": "  virtual ~TemplateValue()  {}", "is_target": false}]}, "2926": {"lines": [{"number": 36, "content": "class TemplateCycledGaSimulationFitnessStrategy;", "is_target": false}, {"number": 37, "content": "class TemplateCycledGaSimulationFitnessStrategy : public IFitnessStrategy {", "is_target": false}, {"number": 38, "content": "class TemplateCycledGaSimulationFitnessStrategy : public ISelectStrategy {", "is_target": false}, {"number": 39, "content": "class TemplateCycledGaSimulationFitnessStrategy : public IGenerationSizeStrategy {", "is_target": false}, {"number": 40, "content": "class TemplateCycledGaSimulationFitnessStrategy : public IMutationFactorStrategy {", "is_target": false}, {"number": 41, "content": "class TemplateCycledGaSimulationFitnessStrategy : public IMutationStrategy {", "is_target": true}, {"number": 42, "content": "class TemplateCycledGaSimulationFitnessStrategy : public IRandomStrategy {", "is_target": false}, {"number": 43, "content": "public:", "is_target": false}, {"number": 44, "content": "\t/**", "is_target": false}, {"number": 45, "content": "\t * default constructor", "is_target": false}, {"number": 46, "content": "\t */", "is_target": false}]}, "2927": {"lines": [{"number": 36, "content": "class TemplateTaskedGaSimulationFitnessStrategy;", "is_target": false}, {"number": 37, "content": "class TemplateTaskedGaSimulationFitnessStrategy : public IFitnessStrategy {", "is_target": false}, {"number": 38, "content": "class TemplateTaskedGaSimulationFitnessStrategy : public ISelectStrategy {", "is_target": false}, {"number": 39, "content": "class TemplateTaskedGaSimulationFitnessStrategy : public IGenerationSizeStrategy {", "is_target": false}, {"number": 40, "content": "class TemplateTaskedGaSimulationFitnessStrategy : public IMutationFactorStrategy {", "is_target": false}, {"number": 41, "content": "class TemplateTaskedGaSimulationFitnessStrategy : public IMutationStrategy {", "is_target": true}, {"number": 42, "content": "class TemplateTaskedGaSimulationFitnessStrategy : public IRandomStrategy {", "is_target": false}, {"number": 43, "content": "public:", "is_target": false}, {"number": 44, "content": "\t/**", "is_target": false}, {"number": 45, "content": "\t * default constructor", "is_target": false}, {"number": 46, "content": "\t */", "is_target": false}]}, "2928": {"lines": [{"number": 106, "content": "      isArraySet = false;", "is_target": false}, {"number": 107, "content": "      isBestAnimation = false;", "is_target": false}, {"number": 108, "content": "      isCalculation = false;", "is_target": false}, {"number": 109, "content": "      numberElementsInSnake = 5;", "is_target": false}, {"number": 110, "content": "    }", "is_target": false}, {"number": 111, "content": "};", "is_target": true}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "/**", "is_target": false}, {"number": 114, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 115, "content": " *", "is_target": false}, {"number": 116, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2929": {"lines": [{"number": 361, "content": "  head.cleanStrategies = m_cleanStrategies;", "is_target": false}, {"number": 362, "content": "  head.numGeneration = static_cast<int>(m_generation.size())-1;", "is_target": false}, {"number": 363, "content": "  head.numGenes = m_gen.size();", "is_target": false}, {"number": 364, "content": "  head.numIndividuals = m_individual.size();", "is_target": false}, {"number": 365, "content": "  for(x=0;x<sizeof(Prototype);++x) {", "is_target": false}, {"number": 366, "content": "    fprintf(f, \"%c\",head.buffer[x]);", "is_target": true}, {"number": 367, "content": "  }", "is_target": false}, {"number": 368, "content": "", "is_target": false}, {"number": 369, "content": "  //generation", "is_target": false}, {"number": 370, "content": "  for(x=m_generation.size(); x>0; --x) {", "is_target": false}, {"number": 371, "content": "    if(!m_generation[x-1]->store(f)) {", "is_target": false}]}, "2930": {"lines": [{"number": 144, "content": "  addGeneration(first);", "is_target": false}, {"number": 145, "content": "  m_actualGeneration = 0;", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  // generate the first contexts", "is_target": false}, {"number": 148, "content": "  GenContext* context;", "is_target": false}, {"number": 149, "content": "  GenPrototype* prototype;", "is_target": true}, {"number": 150, "content": "  for(unsigned int a=0;a<m_prototype.size();++a) {", "is_target": false}, {"number": 151, "content": "    prototype = m_prototype[a];", "is_target": false}, {"number": 152, "content": "    context = new GenContext(prototype);", "is_target": false}, {"number": 153, "content": "    prototype->insertContext(first,context);", "is_target": false}, {"number": 154, "content": "  }", "is_target": false}]}, "2931": {"lines": [{"number": 152, "content": "    context = new GenContext(prototype);", "is_target": false}, {"number": 153, "content": "    prototype->insertContext(first,context);", "is_target": false}, {"number": 154, "content": "  }", "is_target": false}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "  // generate the random individuals", "is_target": false}, {"number": 157, "content": "  Individual* ind;", "is_target": true}, {"number": 158, "content": "  for(int x=0;x<startSize;++x) {", "is_target": false}, {"number": 159, "content": "    ind = SingletonIndividualFactory::getInstance()->createIndividual();", "is_target": false}, {"number": 160, "content": "    first->addIndividual(ind);", "is_target": false}, {"number": 161, "content": "  }", "is_target": false}, {"number": 162, "content": "  select();", "is_target": false}]}, "2932": {"lines": [{"number": 174, "content": "  //m_actualGeneration++;", "is_target": false}, {"number": 175, "content": "", "is_target": false}, {"number": 176, "content": "  // generate the next GenContext", "is_target": false}, {"number": 177, "content": "  int num = m_prototype.size();", "is_target": false}, {"number": 178, "content": "  GenContext* context;", "is_target": false}, {"number": 179, "content": "  GenPrototype* prototype;", "is_target": true}, {"number": 180, "content": "  for(int x=0;x<num;++x) {", "is_target": false}, {"number": 181, "content": "    prototype = m_prototype[x];", "is_target": false}, {"number": 182, "content": "    context = new GenContext(prototype);", "is_target": false}, {"number": 183, "content": "    prototype->insertContext(next,context);", "is_target": false}, {"number": 184, "content": "  }", "is_target": false}]}, "2933": {"lines": [{"number": 218, "content": "  return m_generationSizeStrategy->calcGenerationSize(getActualGeneration());", "is_target": false}, {"number": 219, "content": "}", "is_target": false}, {"number": 220, "content": "", "is_target": false}, {"number": 221, "content": "void SingletonGenEngine::measureStep(double time, InspectableProxy*& proxyGeneration, InspectableProxy*& proxyGene, PlotOptionEngine* plotEngine, PlotOptionEngine* plotEngineGenContext) {", "is_target": false}, {"number": 222, "content": "  std::list<Inspectable*> actualContextList;", "is_target": false}, {"number": 223, "content": "  Generation* generation;", "is_target": true}, {"number": 224, "content": "", "is_target": false}, {"number": 225, "content": "  if(plotEngine!= nullptr) {", "is_target": false}, {"number": 226, "content": "    actualContextList.clear();", "is_target": false}, {"number": 227, "content": "    generation = getActualGeneration();", "is_target": false}, {"number": 228, "content": "    actualContextList.push_back(generation);", "is_target": false}]}, "2934": {"lines": [{"number": 275, "content": "  const std::vector<Individual*>& old = getInstance()->m_generation[getInstance()->m_actualGeneration]->getAllIndividual();", "is_target": false}, {"number": 276, "content": "  std::vector<Individual*>::const_iterator iter;", "is_target": false}, {"number": 277, "content": "  Gen* gen;", "is_target": false}, {"number": 278, "content": "  GenPrototype* prototype;", "is_target": false}, {"number": 279, "content": "  GenContext* newContext;", "is_target": false}, {"number": 280, "content": "  int num;", "is_target": true}, {"number": 281, "content": "", "is_target": false}, {"number": 282, "content": "  for(iter=old.begin();iter!=old.end();++iter) {", "is_target": false}, {"number": 283, "content": "    num = (*iter)->getSize();", "is_target": false}, {"number": 284, "content": "    for(int x=0; x<num; ++x) {", "is_target": false}, {"number": 285, "content": "      gen = (*iter)->getGen(x);", "is_target": false}]}, "2935": {"lines": [{"number": 310, "content": "", "is_target": false}, {"number": 311, "content": "Individual* SingletonGenEngine::getBestIndividual(void) {", "is_target": false}, {"number": 312, "content": "  const std::vector<Individual*>& storage = getActualGeneration()->getAllIndividual();", "is_target": false}, {"number": 313, "content": "  Individual* result = storage[0];", "is_target": false}, {"number": 314, "content": "  double value = result->getFitness();", "is_target": false}, {"number": 315, "content": "  double test;", "is_target": true}, {"number": 316, "content": "  int num = storage.size();", "is_target": false}, {"number": 317, "content": "", "is_target": false}, {"number": 318, "content": "  for(int x=1;x<num;++x) {", "is_target": false}, {"number": 319, "content": "    test = storage[x]->getFitness();", "is_target": false}, {"number": 320, "content": "    if(test<value) {", "is_target": false}]}, "2936": {"lines": [{"number": 397, "content": "  Prototype head;", "is_target": false}, {"number": 398, "content": "  RESTORE_GA_GENERATION* generation;", "is_target": false}, {"number": 399, "content": "  RESTORE_GA_INDIVIDUAL* individual;", "is_target": false}, {"number": 400, "content": "  RESTORE_GA_GENE* gene;", "is_target": false}, {"number": 401, "content": "  RESTORE_GA_TEMPLATE<int> integer;", "is_target": false}, {"number": 402, "content": "  std::string nameGenePrototype;", "is_target": true}, {"number": 403, "content": "  std::string name;", "is_target": false}, {"number": 404, "content": "  char* buffer;", "is_target": false}, {"number": 405, "content": "  int toread;", "is_target": false}, {"number": 406, "content": "  GenPrototype* prototype=nullptr;", "is_target": false}, {"number": 407, "content": "  unsigned int x;", "is_target": false}]}, "2937": {"lines": [{"number": 195, "content": "  generation = getActualGeneration();", "is_target": false}, {"number": 196, "content": "  if(plotEngine!= nullptr) {", "is_target": false}, {"number": 197, "content": "    actualContextList.clear();", "is_target": false}, {"number": 198, "content": "    actualContextList.push_back(generation);", "is_target": false}, {"number": 199, "content": "    proxyGeneration = new InspectableProxy(actualContextList);", "is_target": false}, {"number": 200, "content": "    plotEngine->addInspectable(&(*proxyGeneration));", "is_target": true}, {"number": 201, "content": "    plotEngine->init();", "is_target": false}, {"number": 202, "content": "    plotEngine->plot(1.0);", "is_target": false}, {"number": 203, "content": "  }", "is_target": false}, {"number": 204, "content": "  if(plotEngineGenContext!= nullptr) {", "is_target": false}, {"number": 205, "content": "    actualContextList.clear();", "is_target": false}]}, "2938": {"lines": [{"number": 206, "content": "    for(std::vector<GenPrototype*>::const_iterator iter = m_prototype.begin(); iter!=m_prototype.end(); ++iter) {", "is_target": false}, {"number": 207, "content": "      actualContextList.push_back((*iter)->getContext(getActualGeneration()));", "is_target": false}, {"number": 208, "content": "      (*iter)->getContext(getActualGeneration())->update();", "is_target": false}, {"number": 209, "content": "    }", "is_target": false}, {"number": 210, "content": "    proxyGene = new InspectableProxy(actualContextList);", "is_target": false}, {"number": 211, "content": "    plotEngineGenContext->addInspectable(&(*proxyGene));", "is_target": true}, {"number": 212, "content": "    plotEngineGenContext->init();", "is_target": false}, {"number": 213, "content": "    plotEngineGenContext->plot(1.0);", "is_target": false}, {"number": 214, "content": "  }", "is_target": false}, {"number": 215, "content": "}", "is_target": false}, {"number": 216, "content": "", "is_target": false}]}, "2939": {"lines": [{"number": 548, "content": "  active = m_generation[0];", "is_target": false}, {"number": 549, "content": "  if(plotEngine!= nullptr) {", "is_target": false}, {"number": 550, "content": "    actualContextList.clear();", "is_target": false}, {"number": 551, "content": "    actualContextList.push_back(active);", "is_target": false}, {"number": 552, "content": "    proxyGeneration = new InspectableProxy(actualContextList);", "is_target": false}, {"number": 553, "content": "    plotEngine->addInspectable(&(*proxyGeneration));", "is_target": true}, {"number": 554, "content": "    plotEngine->init();", "is_target": false}, {"number": 555, "content": "    plotEngine->plot(1.0);", "is_target": false}, {"number": 556, "content": "  }", "is_target": false}, {"number": 557, "content": "  if(plotEngineGenContext!= nullptr) {", "is_target": false}, {"number": 558, "content": "    actualContextList.clear();", "is_target": false}]}, "2940": {"lines": [{"number": 559, "content": "    for(std::vector<GenPrototype*>::const_iterator iter = m_prototype.begin(); iter!=m_prototype.end(); ++iter) {", "is_target": false}, {"number": 560, "content": "      actualContextList.push_back((*iter)->getContext(active));", "is_target": false}, {"number": 561, "content": "      (*iter)->getContext(active)->update();", "is_target": false}, {"number": 562, "content": "    }", "is_target": false}, {"number": 563, "content": "    proxyGene = new InspectableProxy(actualContextList);", "is_target": false}, {"number": 564, "content": "    plotEngineGenContext->addInspectable(&(*proxyGene));", "is_target": true}, {"number": 565, "content": "    plotEngineGenContext->init();", "is_target": false}, {"number": 566, "content": "    plotEngineGenContext->plot(1.0);", "is_target": false}, {"number": 567, "content": "  }", "is_target": false}, {"number": 568, "content": "", "is_target": false}, {"number": 569, "content": "  y=getActualGenerationNumber();", "is_target": false}]}, "2941": {"lines": [{"number": 143, "content": "  Generation* first = new Generation(-1,startSize,numChildren);", "is_target": false}, {"number": 144, "content": "  addGeneration(first);", "is_target": false}, {"number": 145, "content": "  m_actualGeneration = 0;", "is_target": false}, {"number": 146, "content": "", "is_target": false}, {"number": 147, "content": "  // generate the first contexts", "is_target": false}, {"number": 148, "content": "  GenContext* context;", "is_target": true}, {"number": 149, "content": "  GenPrototype* prototype;", "is_target": false}, {"number": 150, "content": "  for(unsigned int a=0;a<m_prototype.size();++a) {", "is_target": false}, {"number": 151, "content": "    prototype = m_prototype[a];", "is_target": false}, {"number": 152, "content": "    context = new GenContext(prototype);", "is_target": false}, {"number": 153, "content": "    prototype->insertContext(first,context);", "is_target": false}]}, "2942": {"lines": [{"number": 152, "content": "    context = new GenContext(prototype);", "is_target": false}, {"number": 153, "content": "    prototype->insertContext(first,context);", "is_target": false}, {"number": 154, "content": "  }", "is_target": false}, {"number": 155, "content": "", "is_target": false}, {"number": 156, "content": "  // generate the random individuals", "is_target": false}, {"number": 157, "content": "  Individual* ind;", "is_target": true}, {"number": 158, "content": "  for(int x=0;x<startSize;++x) {", "is_target": false}, {"number": 159, "content": "    ind = SingletonIndividualFactory::getInstance()->createIndividual();", "is_target": false}, {"number": 160, "content": "    first->addIndividual(ind);", "is_target": false}, {"number": 161, "content": "  }", "is_target": false}, {"number": 162, "content": "  select();", "is_target": false}]}, "2943": {"lines": [{"number": 173, "content": "  addGeneration(next);", "is_target": false}, {"number": 174, "content": "  //m_actualGeneration++;", "is_target": false}, {"number": 175, "content": "", "is_target": false}, {"number": 176, "content": "  // generate the next GenContext", "is_target": false}, {"number": 177, "content": "  int num = m_prototype.size();", "is_target": false}, {"number": 178, "content": "  GenContext* context;", "is_target": true}, {"number": 179, "content": "  GenPrototype* prototype;", "is_target": false}, {"number": 180, "content": "  for(int x=0;x<num;++x) {", "is_target": false}, {"number": 181, "content": "    prototype = m_prototype[x];", "is_target": false}, {"number": 182, "content": "    context = new GenContext(prototype);", "is_target": false}, {"number": 183, "content": "    prototype->insertContext(next,context);", "is_target": false}]}, "2944": {"lines": [{"number": 456, "content": "", "is_target": false}, {"number": 457, "content": "  /**", "is_target": false}, {"number": 458, "content": "   * a random strategy for the genes", "is_target": false}, {"number": 459, "content": "   */", "is_target": false}, {"number": 460, "content": "  IRandomStrategy* randomStr;", "is_target": false}, {"number": 461, "content": "};", "is_target": true}, {"number": 462, "content": "", "is_target": false}, {"number": 463, "content": "/**", "is_target": false}, {"number": 464, "content": " * our program!", "is_target": false}, {"number": 465, "content": " * @param argc command line argument counter", "is_target": false}, {"number": 466, "content": " * @param argv command line arguments", "is_target": false}]}, "2945": {"lines": [{"number": 355, "content": "    printf(\"\\n\\n\\t>>> [ERROR] <<<\\nNo File to store GA.\\n\\t>>> [END] <<<\\n\\n\\n\");", "is_target": false}, {"number": 356, "content": "    return false;", "is_target": false}, {"number": 357, "content": "  }", "is_target": false}, {"number": 358, "content": "", "is_target": false}, {"number": 359, "content": "  //head", "is_target": false}, {"number": 360, "content": "  head.generationNumber = m_actualGeneration;", "is_target": true}, {"number": 361, "content": "  head.cleanStrategies = m_cleanStrategies;", "is_target": false}, {"number": 362, "content": "  head.numGeneration = static_cast<int>(m_generation.size())-1;", "is_target": false}, {"number": 363, "content": "  head.numGenes = m_gen.size();", "is_target": false}, {"number": 364, "content": "  head.numIndividuals = m_individual.size();", "is_target": false}, {"number": 365, "content": "  for(x=0;x<sizeof(Prototype);++x) {", "is_target": false}]}, "2946": {"lines": [{"number": 356, "content": "    return false;", "is_target": false}, {"number": 357, "content": "  }", "is_target": false}, {"number": 358, "content": "", "is_target": false}, {"number": 359, "content": "  //head", "is_target": false}, {"number": 360, "content": "  head.generationNumber = m_actualGeneration;", "is_target": false}, {"number": 361, "content": "  head.cleanStrategies = m_cleanStrategies;", "is_target": true}, {"number": 362, "content": "  head.numGeneration = static_cast<int>(m_generation.size())-1;", "is_target": false}, {"number": 363, "content": "  head.numGenes = m_gen.size();", "is_target": false}, {"number": 364, "content": "  head.numIndividuals = m_individual.size();", "is_target": false}, {"number": 365, "content": "  for(x=0;x<sizeof(Prototype);++x) {", "is_target": false}, {"number": 366, "content": "    fprintf(f, \"%c\",head.buffer[x]);", "is_target": false}]}, "2947": {"lines": [{"number": 357, "content": "  }", "is_target": false}, {"number": 358, "content": "", "is_target": false}, {"number": 359, "content": "  //head", "is_target": false}, {"number": 360, "content": "  head.generationNumber = m_actualGeneration;", "is_target": false}, {"number": 361, "content": "  head.cleanStrategies = m_cleanStrategies;", "is_target": false}, {"number": 362, "content": "  head.numGeneration = static_cast<int>(m_generation.size())-1;", "is_target": true}, {"number": 363, "content": "  head.numGenes = m_gen.size();", "is_target": false}, {"number": 364, "content": "  head.numIndividuals = m_individual.size();", "is_target": false}, {"number": 365, "content": "  for(x=0;x<sizeof(Prototype);++x) {", "is_target": false}, {"number": 366, "content": "    fprintf(f, \"%c\",head.buffer[x]);", "is_target": false}, {"number": 367, "content": "  }", "is_target": false}]}, "2948": {"lines": [{"number": 358, "content": "", "is_target": false}, {"number": 359, "content": "  //head", "is_target": false}, {"number": 360, "content": "  head.generationNumber = m_actualGeneration;", "is_target": false}, {"number": 361, "content": "  head.cleanStrategies = m_cleanStrategies;", "is_target": false}, {"number": 362, "content": "  head.numGeneration = static_cast<int>(m_generation.size())-1;", "is_target": false}, {"number": 363, "content": "  head.numGenes = m_gen.size();", "is_target": true}, {"number": 364, "content": "  head.numIndividuals = m_individual.size();", "is_target": false}, {"number": 365, "content": "  for(x=0;x<sizeof(Prototype);++x) {", "is_target": false}, {"number": 366, "content": "    fprintf(f, \"%c\",head.buffer[x]);", "is_target": false}, {"number": 367, "content": "  }", "is_target": false}, {"number": 368, "content": "", "is_target": false}]}, "2949": {"lines": [{"number": 359, "content": "  //head", "is_target": false}, {"number": 360, "content": "  head.generationNumber = m_actualGeneration;", "is_target": false}, {"number": 361, "content": "  head.cleanStrategies = m_cleanStrategies;", "is_target": false}, {"number": 362, "content": "  head.numGeneration = static_cast<int>(m_generation.size())-1;", "is_target": false}, {"number": 363, "content": "  head.numGenes = m_gen.size();", "is_target": false}, {"number": 364, "content": "  head.numIndividuals = m_individual.size();", "is_target": true}, {"number": 365, "content": "  for(x=0;x<sizeof(Prototype);++x) {", "is_target": false}, {"number": 366, "content": "    fprintf(f, \"%c\",head.buffer[x]);", "is_target": false}, {"number": 367, "content": "  }", "is_target": false}, {"number": 368, "content": "", "is_target": false}, {"number": 369, "content": "  //generation", "is_target": false}]}, "2950": {"lines": [{"number": 106, "content": "      isArraySet = false;", "is_target": false}, {"number": 107, "content": "      isBestAnimation = false;", "is_target": false}, {"number": 108, "content": "      isCalculation = false;", "is_target": false}, {"number": 109, "content": "      numberElementsInSnake = 5;", "is_target": false}, {"number": 110, "content": "    }", "is_target": false}, {"number": 111, "content": "};", "is_target": true}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "/**", "is_target": false}, {"number": 114, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 115, "content": " *", "is_target": false}, {"number": 116, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2951": {"lines": [{"number": 456, "content": "", "is_target": false}, {"number": 457, "content": "  /**", "is_target": false}, {"number": 458, "content": "   * a random strategy for the genes", "is_target": false}, {"number": 459, "content": "   */", "is_target": false}, {"number": 460, "content": "  IRandomStrategy* randomStr;", "is_target": false}, {"number": 461, "content": "};", "is_target": true}, {"number": 462, "content": "", "is_target": false}, {"number": 463, "content": "/**", "is_target": false}, {"number": 464, "content": " * our program!", "is_target": false}, {"number": 465, "content": " * @param argc command line argument counter", "is_target": false}, {"number": 466, "content": " * @param argv command line arguments", "is_target": false}]}, "2952": {"lines": [{"number": 456, "content": "", "is_target": false}, {"number": 457, "content": "  /**", "is_target": false}, {"number": 458, "content": "   * a random strategy for the genes", "is_target": false}, {"number": 459, "content": "   */", "is_target": false}, {"number": 460, "content": "  IRandomStrategy* randomStr;", "is_target": false}, {"number": 461, "content": "};", "is_target": true}, {"number": 462, "content": "", "is_target": false}, {"number": 463, "content": "/**", "is_target": false}, {"number": 464, "content": " * our program!", "is_target": false}, {"number": 465, "content": " * @param argc command line argument counter", "is_target": false}, {"number": 466, "content": " * @param argv command line arguments", "is_target": false}]}, "2953": {"lines": [{"number": 106, "content": "      isArraySet = false;", "is_target": false}, {"number": 107, "content": "      isBestAnimation = false;", "is_target": false}, {"number": 108, "content": "      isCalculation = false;", "is_target": false}, {"number": 109, "content": "      numberElementsInSnake = 5;", "is_target": false}, {"number": 110, "content": "    }", "is_target": false}, {"number": 111, "content": "};", "is_target": true}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "/**", "is_target": false}, {"number": 114, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 115, "content": " *", "is_target": false}, {"number": 116, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2954": {"lines": [{"number": 456, "content": "", "is_target": false}, {"number": 457, "content": "  /**", "is_target": false}, {"number": 458, "content": "   * a random strategy for the genes", "is_target": false}, {"number": 459, "content": "   */", "is_target": false}, {"number": 460, "content": "  IRandomStrategy* randomStr;", "is_target": false}, {"number": 461, "content": "};", "is_target": true}, {"number": 462, "content": "", "is_target": false}, {"number": 463, "content": "/**", "is_target": false}, {"number": 464, "content": " * our program!", "is_target": false}, {"number": 465, "content": " * @param argc command line argument counter", "is_target": false}, {"number": 466, "content": " * @param argv command line arguments", "is_target": false}]}, "2955": {"lines": [{"number": 106, "content": "      isArraySet = false;", "is_target": false}, {"number": 107, "content": "      isBestAnimation = false;", "is_target": false}, {"number": 108, "content": "      isCalculation = false;", "is_target": false}, {"number": 109, "content": "      numberElementsInSnake = 5;", "is_target": false}, {"number": 110, "content": "    }", "is_target": false}, {"number": 111, "content": "};", "is_target": true}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "/**", "is_target": false}, {"number": 114, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 115, "content": " *", "is_target": false}, {"number": 116, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2956": {"lines": [{"number": 456, "content": "", "is_target": false}, {"number": 457, "content": "  /**", "is_target": false}, {"number": 458, "content": "   * a random strategy for the genes", "is_target": false}, {"number": 459, "content": "   */", "is_target": false}, {"number": 460, "content": "  IRandomStrategy* randomStr;", "is_target": false}, {"number": 461, "content": "};", "is_target": true}, {"number": 462, "content": "", "is_target": false}, {"number": 463, "content": "/**", "is_target": false}, {"number": 464, "content": " * our program!", "is_target": false}, {"number": 465, "content": " * @param argc command line argument counter", "is_target": false}, {"number": 466, "content": " * @param argv command line arguments", "is_target": false}]}, "2957": {"lines": [{"number": 84, "content": "    ThisSimulationTaskHandle() {", "is_target": false}, {"number": 85, "content": "      isArraySet = false;", "is_target": false}, {"number": 86, "content": "      isBestAnimation = false;", "is_target": false}, {"number": 87, "content": "      isCalculation = false;", "is_target": false}, {"number": 88, "content": "    }", "is_target": false}, {"number": 89, "content": "};", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "/**", "is_target": false}, {"number": 92, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 93, "content": " *", "is_target": false}, {"number": 94, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2958": {"lines": [{"number": 456, "content": "", "is_target": false}, {"number": 457, "content": "  /**", "is_target": false}, {"number": 458, "content": "   * a random strategy for the genes", "is_target": false}, {"number": 459, "content": "   */", "is_target": false}, {"number": 460, "content": "  IRandomStrategy* randomStr;", "is_target": false}, {"number": 461, "content": "};", "is_target": true}, {"number": 462, "content": "", "is_target": false}, {"number": 463, "content": "/**", "is_target": false}, {"number": 464, "content": " * our program!", "is_target": false}, {"number": 465, "content": " * @param argc command line argument counter", "is_target": false}, {"number": 466, "content": " * @param argv command line arguments", "is_target": false}]}, "2959": {"lines": [{"number": 106, "content": "      isArraySet = false;", "is_target": false}, {"number": 107, "content": "      isBestAnimation = false;", "is_target": false}, {"number": 108, "content": "      isCalculation = false;", "is_target": false}, {"number": 109, "content": "      numberElementsInSnake = 5;", "is_target": false}, {"number": 110, "content": "    }", "is_target": false}, {"number": 111, "content": "};", "is_target": true}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "/**", "is_target": false}, {"number": 114, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 115, "content": " *", "is_target": false}, {"number": 116, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2960": {"lines": [{"number": 84, "content": "    ThisSimulationTaskHandle() {", "is_target": false}, {"number": 85, "content": "      isArraySet = false;", "is_target": false}, {"number": 86, "content": "      isBestAnimation = false;", "is_target": false}, {"number": 87, "content": "      isCalculation = false;", "is_target": false}, {"number": 88, "content": "    }", "is_target": false}, {"number": 89, "content": "};", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "/**", "is_target": false}, {"number": 92, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 93, "content": " *", "is_target": false}, {"number": 94, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2961": {"lines": [{"number": 456, "content": "", "is_target": false}, {"number": 457, "content": "  /**", "is_target": false}, {"number": 458, "content": "   * a random strategy for the genes", "is_target": false}, {"number": 459, "content": "   */", "is_target": false}, {"number": 460, "content": "  IRandomStrategy* randomStr;", "is_target": false}, {"number": 461, "content": "};", "is_target": true}, {"number": 462, "content": "", "is_target": false}, {"number": 463, "content": "/**", "is_target": false}, {"number": 464, "content": " * our program!", "is_target": false}, {"number": 465, "content": " * @param argc command line argument counter", "is_target": false}, {"number": 466, "content": " * @param argv command line arguments", "is_target": false}]}, "2962": {"lines": [{"number": 106, "content": "      isArraySet = false;", "is_target": false}, {"number": 107, "content": "      isBestAnimation = false;", "is_target": false}, {"number": 108, "content": "      isCalculation = false;", "is_target": false}, {"number": 109, "content": "      numberElementsInSnake = 5;", "is_target": false}, {"number": 110, "content": "    }", "is_target": false}, {"number": 111, "content": "};", "is_target": true}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "/**", "is_target": false}, {"number": 114, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 115, "content": " *", "is_target": false}, {"number": 116, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2963": {"lines": [{"number": 84, "content": "    ThisSimulationTaskHandle() {", "is_target": false}, {"number": 85, "content": "      isArraySet = false;", "is_target": false}, {"number": 86, "content": "      isBestAnimation = false;", "is_target": false}, {"number": 87, "content": "      isCalculation = false;", "is_target": false}, {"number": 88, "content": "    }", "is_target": false}, {"number": 89, "content": "};", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "/**", "is_target": false}, {"number": 92, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 93, "content": " *", "is_target": false}, {"number": 94, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2964": {"lines": [{"number": 456, "content": "", "is_target": false}, {"number": 457, "content": "  /**", "is_target": false}, {"number": 458, "content": "   * a random strategy for the genes", "is_target": false}, {"number": 459, "content": "   */", "is_target": false}, {"number": 460, "content": "  IRandomStrategy* randomStr;", "is_target": false}, {"number": 461, "content": "};", "is_target": true}, {"number": 462, "content": "", "is_target": false}, {"number": 463, "content": "/**", "is_target": false}, {"number": 464, "content": " * our program!", "is_target": false}, {"number": 465, "content": " * @param argc command line argument counter", "is_target": false}, {"number": 466, "content": " * @param argv command line arguments", "is_target": false}]}, "2965": {"lines": [{"number": 84, "content": "    ThisSimulationTaskHandle() {", "is_target": false}, {"number": 85, "content": "      isArraySet = false;", "is_target": false}, {"number": 86, "content": "      isBestAnimation = false;", "is_target": false}, {"number": 87, "content": "      isCalculation = false;", "is_target": false}, {"number": 88, "content": "    }", "is_target": false}, {"number": 89, "content": "};", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "/**", "is_target": false}, {"number": 92, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 93, "content": " *", "is_target": false}, {"number": 94, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2966": {"lines": [{"number": 456, "content": "", "is_target": false}, {"number": 457, "content": "  /**", "is_target": false}, {"number": 458, "content": "   * a random strategy for the genes", "is_target": false}, {"number": 459, "content": "   */", "is_target": false}, {"number": 460, "content": "  IRandomStrategy* randomStr;", "is_target": false}, {"number": 461, "content": "};", "is_target": true}, {"number": 462, "content": "", "is_target": false}, {"number": 463, "content": "/**", "is_target": false}, {"number": 464, "content": " * our program!", "is_target": false}, {"number": 465, "content": " * @param argc command line argument counter", "is_target": false}, {"number": 466, "content": " * @param argv command line arguments", "is_target": false}]}, "2967": {"lines": [{"number": 106, "content": "      isArraySet = false;", "is_target": false}, {"number": 107, "content": "      isBestAnimation = false;", "is_target": false}, {"number": 108, "content": "      isCalculation = false;", "is_target": false}, {"number": 109, "content": "      numberElementsInSnake = 5;", "is_target": false}, {"number": 110, "content": "    }", "is_target": false}, {"number": 111, "content": "};", "is_target": true}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "/**", "is_target": false}, {"number": 114, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 115, "content": " *", "is_target": false}, {"number": 116, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2968": {"lines": [{"number": 84, "content": "    ThisSimulationTaskHandle() {", "is_target": false}, {"number": 85, "content": "      isArraySet = false;", "is_target": false}, {"number": 86, "content": "      isBestAnimation = false;", "is_target": false}, {"number": 87, "content": "      isCalculation = false;", "is_target": false}, {"number": 88, "content": "    }", "is_target": false}, {"number": 89, "content": "};", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "/**", "is_target": false}, {"number": 92, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 93, "content": " *", "is_target": false}, {"number": 94, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2969": {"lines": [{"number": 106, "content": "      isArraySet = false;", "is_target": false}, {"number": 107, "content": "      isBestAnimation = false;", "is_target": false}, {"number": 108, "content": "      isCalculation = false;", "is_target": false}, {"number": 109, "content": "      numberElementsInSnake = 5;", "is_target": false}, {"number": 110, "content": "    }", "is_target": false}, {"number": 111, "content": "};", "is_target": true}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "/**", "is_target": false}, {"number": 114, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 115, "content": " *", "is_target": false}, {"number": 116, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2970": {"lines": [{"number": 84, "content": "    ThisSimulationTaskHandle() {", "is_target": false}, {"number": 85, "content": "      isArraySet = false;", "is_target": false}, {"number": 86, "content": "      isBestAnimation = false;", "is_target": false}, {"number": 87, "content": "      isCalculation = false;", "is_target": false}, {"number": 88, "content": "    }", "is_target": false}, {"number": 89, "content": "};", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "/**", "is_target": false}, {"number": 92, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 93, "content": " *", "is_target": false}, {"number": 94, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2971": {"lines": [{"number": 106, "content": "      isArraySet = false;", "is_target": false}, {"number": 107, "content": "      isBestAnimation = false;", "is_target": false}, {"number": 108, "content": "      isCalculation = false;", "is_target": false}, {"number": 109, "content": "      numberElementsInSnake = 5;", "is_target": false}, {"number": 110, "content": "    }", "is_target": false}, {"number": 111, "content": "};", "is_target": true}, {"number": 112, "content": "", "is_target": false}, {"number": 113, "content": "/**", "is_target": false}, {"number": 114, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 115, "content": " *", "is_target": false}, {"number": 116, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2972": {"lines": [{"number": 84, "content": "    ThisSimulationTaskHandle() {", "is_target": false}, {"number": 85, "content": "      isArraySet = false;", "is_target": false}, {"number": 86, "content": "      isBestAnimation = false;", "is_target": false}, {"number": 87, "content": "      isCalculation = false;", "is_target": false}, {"number": 88, "content": "    }", "is_target": false}, {"number": 89, "content": "};", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "/**", "is_target": false}, {"number": 92, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 93, "content": " *", "is_target": false}, {"number": 94, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2973": {"lines": [{"number": 84, "content": "    ThisSimulationTaskHandle() {", "is_target": false}, {"number": 85, "content": "      isArraySet = false;", "is_target": false}, {"number": 86, "content": "      isBestAnimation = false;", "is_target": false}, {"number": 87, "content": "      isCalculation = false;", "is_target": false}, {"number": 88, "content": "    }", "is_target": false}, {"number": 89, "content": "};", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "/**", "is_target": false}, {"number": 92, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 93, "content": " *", "is_target": false}, {"number": 94, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}, "2974": {"lines": [{"number": 84, "content": "    ThisSimulationTaskHandle() {", "is_target": false}, {"number": 85, "content": "      isArraySet = false;", "is_target": false}, {"number": 86, "content": "      isBestAnimation = false;", "is_target": false}, {"number": 87, "content": "      isCalculation = false;", "is_target": false}, {"number": 88, "content": "    }", "is_target": false}, {"number": 89, "content": "};", "is_target": true}, {"number": 90, "content": "", "is_target": false}, {"number": 91, "content": "/**", "is_target": false}, {"number": 92, "content": " * Just create your own simulation, it's up to you.", "is_target": false}, {"number": 93, "content": " *", "is_target": false}, {"number": 94, "content": " * It's essential that your simulation is deduced from", "is_target": false}]}}